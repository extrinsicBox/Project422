// Note: This is a custom generated file.

#pragma warning disable CS1570 // XML comment has badly formed XML

using System;
using RDR2.Math;
using Any = System.UInt64;

namespace RDR2.Native
{
	public unsafe static class BUILTIN
	{
		public static void WAIT(int ms) => Function.Call(0x4EDE34FBADD967A6, ms);
		/// <summary>
		/// Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
		/// </summary>
		public static int TIMERA() => Function.Call<int>(0x83666F9FB8FEBD4B);
		public static int TIMERB() => Function.Call<int>(0xC9D9444186B5A374);
		public static void SETTIMERA(int value) => Function.Call(0xC1B1E9A034A63A62, value);
		public static void SETTIMERB(int value) => Function.Call(0x5AE11BC36633DE4E, value);
		/// <summary>
		/// Gets the current frame time.
		/// </summary>
		public static float TIMESTEP() => Function.Call<float>(0x0000000050597EE2);
		public static float SIN(float value) => Function.Call<float>(0x0BADBFA3B172435F, value);
		public static float COS(float value) => Function.Call<float>(0xD0FFB162F40A139C, value);
		public static float SQRT(float value) => Function.Call<float>(0x71D93B57D07F9804, value);
		public static float POW(float _base, float exponent) => Function.Call<float>(0xE3621CC40F31FE2E, _base, exponent);
		/// <summary>
		/// Old name: _LOG10
		/// </summary>
		public static float LOG10(float value) => Function.Call<float>(0xE816E655DE37FE20, value);
		/// <summary>
		/// Calculates the magnitude of a vector.
		/// </summary>
		public static float VMAG(float x, float y, float z) => Function.Call<float>(0x652D2EEEF1D3E62C, x, y, z);
		public static float VMAG(Vector3 vec) => Function.Call<float>(0x652D2EEEF1D3E62C, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
		/// </summary>
		public static float VMAG2(float x, float y, float z) => Function.Call<float>(0xA8CEACB4F35AE058, x, y, z);
		public static float VMAG2(Vector3 vec) => Function.Call<float>(0xA8CEACB4F35AE058, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Calculates distance between vectors.
		/// The value returned will be in meters.
		/// </summary>
		public static float VDIST(float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call<float>(0x2A488C176D52CCA5, x1, y1, z1, x2, y2, z2);
		public static float VDIST(Vector3 vec1, Vector3 vec2) => Function.Call<float>(0x2A488C176D52CCA5, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		/// <summary>
		/// Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
		/// The value returned will be in RAGE units.
		/// </summary>
		public static float VDIST2(float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call<float>(0xB7A628320EFF8E47, x1, y1, z1, x2, y2, z2);
		public static float VDIST2(Vector3 vec1, Vector3 vec2) => Function.Call<float>(0xB7A628320EFF8E47, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		public static int SHIFT_LEFT(int value, int bitShift) => Function.Call<int>(0xEDD95A39E5544DE8, value, bitShift);
		public static int SHIFT_RIGHT(int value, int bitShift) => Function.Call<int>(0x97EF1E5BCE9DC075, value, bitShift);
		/// <summary>
		/// Rounds a float value down to the next whole number
		/// </summary>
		public static int FLOOR(float value) => Function.Call<int>(0xF34EE736CF047844, value);
		/// <summary>
		/// Rounds a float value up to the next whole number
		/// </summary>
		public static int CEIL(float value) => Function.Call<int>(0x11E019C8F43ACC8A, value);
		public static int ROUND(float value) => Function.Call<int>(0xF2DB717A73826179, value);
		public static float TO_FLOAT(int value) => Function.Call<float>(0xBBDA792448DB5A89, value);
		/// <summary>
		/// THREAD_PRIO_HIGHEST = 0
		/// THREAD_PRIO_NORMAL = 1
		/// THREAD_PRIO_LOWEST = 2
		/// THREAD_PRIO_MANUAL_UPDATE = 100
		/// </summary>
		public static void SET_THIS_THREAD_PRIORITY(int priority) => Function.Call(0x42B65DEEF2EDF2A1, priority);
	}

	public unsafe static class AICOVERPOINT
	{
		public static int _0x53E4D0C079CA6855(int handle) => Function.Call<int>(0x53E4D0C079CA6855, handle);
		public static bool _DOES_COVER_POINT_EXIST(int handle) => Function.Call<bool>(0xC276FE69DDA22BAD, handle);
		public static int _0x5F5B1B7E8E8F94C6(int ped) => Function.Call<int>(0x5F5B1B7E8E8F94C6, ped);
		public static void TASK_ENTER_COVER(int ped) => Function.Call(0x4972A022AE6DAFA1, ped);
		public static void TASK_EXIT_COVER(int ped) => Function.Call(0x2BC4A6D92D140112, ped);
		public static int _0x957D7E750216D74B(int ped) => Function.Call<int>(0x957D7E750216D74B, ped);
		public static void _TASK_AI_SEEK_COVER_TO_COVER_POINT(Any* args) => Function.Call(0x89783FDDF079C88D, args);
		/// <summary>
		/// coverLayer: see levels_0/levels/rdr3/coverlayers
		/// </summary>
		public static void _0x64340DC208D671D5(string coverLayer) => Function.Call(0x64340DC208D671D5, coverLayer);
		/// <summary>
		/// coverLayer: see levels_0/levels/rdr3/coverlayers
		/// </summary>
		public static void _0x7A1FDCF35EAA140F(string coverLayer) => Function.Call(0x7A1FDCF35EAA140F, coverLayer);
		/// <summary>
		/// Makes ped flinch (if in cover) like they have been shot at
		/// </summary>
		public static void _REQUEST_FLINCH_COVER_ANIM(int ped) => Function.Call(0x2A31D13C5F021D0D, ped);
		public static void _0x3C7A9C2C953128FE(int ped) => Function.Call(0x3C7A9C2C953128FE, ped);
		public static void _0xEBA51A294C73292E(Any* args) => Function.Call(0xEBA51A294C73292E, args);
		/// <summary>
		/// weaponHash can also be -1
		/// </summary>
		public static void _0x140B3CB1D424A945(int ped, uint weaponHash) => Function.Call(0x140B3CB1D424A945, ped, weaponHash);
		public static bool _ARE_LOAD_COVER_ANIMS_LOADED(int ped) => Function.Call<bool>(0x8CBE916CFC64AD5C, ped);
		/// <summary>
		/// Stops running cover anims and releases them
		/// _STOP_RENDERING_* - _STOP_SCRIPTED*
		/// </summary>
		public static void _STOP_RUNNING_COVER_ANIMS(int ped) => Function.Call(0x1A7A802B2301EDC0, ped);
		/// <summary>
		/// args: f_0 = Volume Handle, f_2 = integer (-1, 32 used in R* Scripts)
		/// </summary>
		public static void _0x733077295AB51304(Any* args) => Function.Call(0x733077295AB51304, args);
		public static int _ADD_SCRIPTED_COVER_POINT(Any* data) => Function.Call<int>(0x975BD6351648935F, data);
	}

	public unsafe static class AITRANSPORT
	{
		public static void TASK_ENTER_TRANSPORT(Any* args) => Function.Call(0xAEE3ADD08829CB6F, args);
		public static void TASK_EXIT_TRANSPORT(Any* args) => Function.Call(0xC273A5B8488F7838, args);
		/// <summary>
		/// seat: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static void SET_PED_ON_TRANSPORT_SEAT(int ped, int transportEntity, int seat, int flags) => Function.Call(0xE588B5A8A005CB5E, ped, transportEntity, seat, flags);
		public static void SET_PED_OFF_TRANSPORT_SEAT(int ped, int flags) => Function.Call(0x8886D83A430537FD, ped, flags);
		/// <summary>
		/// flagId:
		/// enum eTransportConfigFlags
		/// {
		/// 	TCF_NotConsideredForEntryByLocalPlayer,
		/// 	TCF_0xB78D6624,
		/// 	TCF_0xA9700425,
		/// 	TCF_0x8D7E4641,
		/// 	TCF_0xF24BAA1F,
		/// 	TCF_0x63B77935,
		/// 	TCF_NotConsideredForEntryByAllPlayers,
		/// 	TCF_0xD17A2AFD,
		/// 	TCF_0xD4E4FDD5,
		/// 	TCF_0x8227C929,
		/// 	TCF_0x812C1070,
		/// 	TCF_0x0E1AB26F,
		/// 	TCF_0xBF4EC863,
		/// 	TCF_0x75660C36,
		/// 	TCF_0xA2539E20,
		/// 	TCF_0x9162C633,
		/// 	TCF_DisableHonorModifiers,
		/// 	TCF_0xF9E71CB6,
		/// 	TCF_0x933ECD3F,
		/// 	TCF_0x18513A34
		/// };
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/TRANSPORT_CONFIG_FLAGS
		/// </summary>
		public static void SET_TRANSPORT_CONFIG_FLAG(int transportEntity, int flagId, bool value) => Function.Call(0xBA8818212633500A, transportEntity, flagId, value);
		/// <summary>
		/// flagId: see SET_TRANSPORT_CONFIG_FLAG
		/// </summary>
		public static bool GET_TRANSPORT_CONFIG_FLAG(int transportEntity, int flagId, bool p2) => Function.Call<bool>(0xF382C92CCC1CCDBC, transportEntity, flagId, p2);
		/// <summary>
		/// See _SET_TRANSPORT_USAGE_FLAGS
		/// </summary>
		public static Any _GET_TRANSPORT_USAGE_FLAGS(int transportEntity, int* flags) => Function.Call<Any>(0xE195C5A82156321D, transportEntity, flags);
		/// <summary>
		/// enum eTransportUsageFlags
		/// {
		/// 	TUF_INVALID = 0,
		/// 	TUF_ALLOW_DRIVER_ME = (1 << 0),
		/// 	TUF_ALLOW_DRIVER_GANG = (1 << 1),
		/// 	TUF_ALLOW_DRIVER_CREW = (1 << 2),
		/// 	TUF_ALLOW_DRIVER_FRIENDS = (1 << 3),
		/// 	TUF_ALLOW_DRIVER_ANYONE = (1 << 4),
		/// 	TUF_ALLOW_PASSENGER_ME = (1 << 5),
		/// 	TUF_ALLOW_PASSENGER_GANG = (1 << 6),
		/// 	TUF_ALLOW_PASSENGER_CREW = (1 << 7),
		/// 	TUF_ALLOW_PASSENGER_FRIENDS = (1 << 8),
		/// 	TUF_ALLOW_PASSENGER_ANYONE = (1 << 9),
		/// 	TUF_ALLOW_ACCESS_AI = (1 << 10)
		/// };
		/// </summary>
		public static void _SET_TRANSPORT_USAGE_FLAGS(int transportEntity, int flags) => Function.Call(0xE2487779957FE897, transportEntity, flags);
		public static void SET_TRANSPORT_ACCESSIBLE_SEAT_FLAGS(int transportEntity, int flags) => Function.Call(0xDD0660C997DE94FD, transportEntity, flags);
		public static void _0x4B6C9A43F7D9109B(Any p0, Any p1) => Function.Call(0x4B6C9A43F7D9109B, p0, p1);
		/// <summary>
		/// Checks if ped is placed on target transportEntity
		/// </summary>
		public static bool _IS_PED_ON_TRANSPORT_ENTITY(int ped, int transportEntity) => Function.Call<bool>(0x159EF5B6EDCE00E8, ped, transportEntity);
		public static bool _IS_PED_ON_TRANSPORT_SEAT(int ped, bool p1) => Function.Call<bool>(0xDC44F405A6B98D03, ped, p1);
		public static bool _IS_TRANSPORT_SEAT_OCCUPIED(int transportEntity, int seatIndex) => Function.Call<bool>(0x2E2E06023D07631E, transportEntity, seatIndex);
		/// <summary>
		/// Called together with IS_VEHICLE_SEAT_FREE
		/// </summary>
		public static bool _IS_TRANSPORT_SEAT_FREE(int transportEntity, int seatIndex) => Function.Call<bool>(0x43FF27FC1829C202, transportEntity, seatIndex);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static int _GET_PED_IN_TRANSPORT_SEAT(int transportEntity, int seatIndex) => Function.Call<int>(0xFFEC4B0A1A3ED515, transportEntity, seatIndex);
		public static bool IS_PED_ENTERING_TRANSPORT(int ped, int transportEntity, bool p2) => Function.Call<bool>(0x619E63980BFC0096, ped, transportEntity, p2);
		public static bool IS_PED_EXITING_TRANSPORT(int ped, int transportEntity) => Function.Call<bool>(0x660639BC60157048, ped, transportEntity);
		/// <summary>
		/// _SET_TRANSPORT_*
		/// </summary>
		public static void _0x4248AB2EEB3C75AD(int transportEntity, int ped, bool p2) => Function.Call(0x4248AB2EEB3C75AD, transportEntity, ped, p2);
		public static void _SET_PED_USE_TRANSPORT_SEAT_PREFERENCE(int ped, int transportEntity, int preferenceSlot, int p3, int seatIndex) => Function.Call(0xB7079F4C72896756, ped, transportEntity, preferenceSlot, p3, seatIndex);
		/// <summary>
		/// _CLEAR_A*
		/// </summary>
		public static void _0x5639FBEA922788DA(int transportEntity) => Function.Call(0x5639FBEA922788DA, transportEntity);
		public static void _SET_AI_CAN_USE_TRANSPORT(int transportEntity, bool state) => Function.Call(0x67F7CEAC2391E114, transportEntity, state);
		/// <summary>
		/// _SET_TRANSPORT_*
		/// </summary>
		public static void _0x8C8371EDFAF014A0(int ped, float p1) => Function.Call(0x8C8371EDFAF014A0, ped, p1);
		/// <summary>
		/// _SET_TRANSPORT_*
		/// </summary>
		public static void _0xF8C20282B237E3F7(int ped) => Function.Call(0xF8C20282B237E3F7, ped);
		/// <summary>
		/// NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE: Setting vehicle transition enabled
		/// _SET_TRANSPORT_*
		/// </summary>
		public static void _0x13F138225C202F66(int transportEntity, int p1) => Function.Call(0x13F138225C202F66, transportEntity, p1);
	}

	public unsafe static class ANIMSCENE
	{
		/// <summary>
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimSceneFlag
		/// </summary>
		public static int _CREATE_ANIM_SCENE(string animDict, int flags, string playbackListName, bool p3, bool p4) => Function.Call<int>(0x1FCA98E33C1437B3, animDict, flags, playbackListName, p3, p4);
		public static void _DELETE_ANIM_SCENE(int animScene) => Function.Call(0x84EEDB2C6E650000, animScene);
		public static void TRIGGER_ANIM_SCENE_SKIP(int animScene) => Function.Call(0x4B85B3CF9197AEDF, animScene);
		/// <summary>
		/// Used in Script Function CUTSCENE_MANAGE_SKIP
		/// _CHECK_* (?)
		/// </summary>
		public static bool _0x4B85B3CF91972222(int animScene) => Function.Call<bool>(0x4B85B3CF91972222, animScene);
		public static void _CLEAR_ANIM_SCENE_WAS_SKIPPED(int animScene) => Function.Call(0x8A8208AE92BF87A5, animScene);
		public static bool DOES_ANIM_SCENE_EXIST(int animScene) => Function.Call<bool>(0x25557E324489393C, animScene);
		public static bool _DOES_ENTITY_WITH_ID_EXIST_IN_ANIM_SCENE(int animScene, string entityId) => Function.Call<bool>(0x6F1F0B17109309DA, animScene, entityId);
		public static bool _DOES_ANIM_SCENE_OWNERSHIP_OF_ENTITY_EXIST(int animScene, string entityName) => Function.Call<bool>(0x9D1ECA9337BE9FC3, animScene, entityName);
		public static void LOAD_ANIM_SCENE(int animScene) => Function.Call(0xAF068580194D9DC7, animScene);
		public static bool IS_ANIM_SCENE_LOADED(int animScene, bool p1, bool p2) => Function.Call<bool>(0x477122B8D05E7968, animScene, p1, p2);
		public static bool _IS_ANIM_SCENE_LOADING(int animScene, bool p1) => Function.Call<bool>(0x59606519FF9D3EC2, animScene, p1);
		public static bool _IS_ANIM_SCENE_METADATA_ASSET_IN_RANGE_LOADING(int animScene, bool p1) => Function.Call<bool>(0xF8D1D2DAB6007EEF, animScene, p1);
		public static bool IS_ANIM_SCENE_METADATA_LOADED(int animScene, bool p1) => Function.Call<bool>(0x95531A4A20CCE7BC, animScene, p1);
		public static int _GET_ANIM_SCENE_PLAYBACK_LIST_PHASE_AUDIO_LOAD_STRESS(int animScene, string phaseName) => Function.Call<int>(0x9E036D5204FFBBC8, animScene, phaseName);
		public static void START_ANIM_SCENE(int animScene) => Function.Call(0xF4D94AF761768700, animScene);
		public static void RESET_ANIM_SCENE(int animScene, string playbackListName) => Function.Call(0x8FDF221F13537936, animScene, playbackListName);
		public static void ABORT_ANIM_SCENE(int animScene, bool p1) => Function.Call(0x718CF1328D20C2B3, animScene, p1);
		public static void RESUME_ANIM_SCENE_FROM_LAST_CHECKPOINT(int animScene) => Function.Call(0x8E1BA705F63C1925, animScene);
		public static bool IS_ANIM_SCENE_RUNNING(int animScene, bool p1) => Function.Call<bool>(0xCBFC7725DE6CE2E0, animScene, p1);
		public static bool IS_ANIM_SCENE_FINISHED(int animScene, bool p1) => Function.Call<bool>(0xD8254CB2C586412B, animScene, p1);
		public static bool IS_ANIM_SCENE_EXITING_THIS_FRAME(int animScene) => Function.Call<bool>(0xCDC5512A407CF08D, animScene);
		public static bool HAS_ANIM_SCENE_EXITED(int animScene, bool p1) => Function.Call<bool>(0xF94692EB9DC15D74, animScene, p1);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _CO* - _CR*
		/// </summary>
		public static bool _0x73616E64696C132E(int animScene, bool p1) => Function.Call<bool>(0x73616E64696C132E, animScene, p1);
		public static bool IS_ANIM_SCENE_IN_SECTION(int animScene, string sectionName, bool p2) => Function.Call<bool>(0x8D81E7824B7753F7, animScene, sectionName, p2);
		public static bool _IS_ANIM_SCENE_SKIPPABLE(int animScene) => Function.Call<bool>(0x4CDFFE3189EBDBD0, animScene);
		public static bool _IS_ANIM_SCENE_ABORTED(int animScene) => Function.Call<bool>(0x34A0671BE613D3D0, animScene);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_ANIM_SCENE_*
		/// </summary>
		public static bool _0xD70C7A30412F8FA0(int animScene) => Function.Call<bool>(0xD70C7A30412F8FA0, animScene);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_ANIM_SCENE_*
		/// </summary>
		public static bool _0x9AAE3C1148A09BCA(int animScene) => Function.Call<bool>(0x9AAE3C1148A09BCA, animScene);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _WAS_ANIM_SCENE_*
		/// </summary>
		public static bool _0xA96619FE85159ED2(int animScene) => Function.Call<bool>(0xA96619FE85159ED2, animScene);
		public static void FADE_ANIM_SCENE_AUDIO_IN(int animScene, float p1) => Function.Call(0xA41351EA2A18A0AD, animScene, p1);
		public static void FADE_ANIM_SCENE_AUDIO_OUT(int animScene, float p1) => Function.Call(0x323E3AD772BA5D57, animScene, p1);
		public static void BLOCK_ANIM_SCENE_FADING_NEXT_FRAME(bool p0, bool p1) => Function.Call(0x1B70811D3BF75DB9, p0, p1);
		public static void SET_ANIM_SCENE_ORIGIN(int animScene, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int order) => Function.Call(0x020894BF17A02EF2, animScene, posX, posY, posZ, rotX, rotY, rotZ, order);
		public static void SET_ANIM_SCENE_ORIGIN(int animScene, Vector3 vec, Vector3 rotation, int order) => Function.Call(0x020894BF17A02EF2, animScene, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, order);
		public static void GET_ANIM_SCENE_ORIGIN(int animScene, Vector3* position, Vector3* rotation, int order) => Function.Call(0xADF1D53F3B1FE0A7, animScene, position, rotation, order);
		public static void SET_ANIM_SCENE_PAUSED(int animScene, bool toggle) => Function.Call(0xD6824B7D24DC0CE0, animScene, toggle);
		public static bool _IS_ANIM_SCENE_PAUSED(int animScene) => Function.Call<bool>(0x4B4038796F0D6566, animScene);
		public static void SET_ANIM_SCENE_RATE(int animScene, float rate) => Function.Call(0x75820B801CFF262A, animScene, rate);
		public static float _GET_ANIM_SCENE_RATE(int animScene) => Function.Call<float>(0x43C21623E42B821B, animScene);
		public static float GET_ANIM_SCENE_PHASE(int animScene) => Function.Call<float>(0x3FBC3F51BF12DFBF, animScene);
		public static float _GET_ANIM_SCENE_TIME(int animScene) => Function.Call<float>(0x61BE7D6186260002, animScene);
		public static float _GET_ANIM_SCENE_DURATION(int animScene) => Function.Call<float>(0x49F1D143ADE32656, animScene);
		public static void SET_ANIM_SCENE_ENTITY(int animScene, string entityName, int entity, int flags) => Function.Call(0x8B720AD451CA2AB3, animScene, entityName, entity, flags);
		public static void REMOVE_ANIM_SCENE_ENTITY(int animScene, string entityName, int entity) => Function.Call(0x2BF96692C67F3E53, animScene, entityName, entity);
		public static bool IS_ENTITY_EXITING_ANIM_SCENE_THIS_FRAME(int animScene, string entityName) => Function.Call<bool>(0x005E6F28DD7ED58D, animScene, entityName);
		public static bool COULD_ANIM_SCENE_ENTITY_REACH_EXIT_NEXT_FRAME(int animScene, string entityName, Any p2, Any p3) => Function.Call<bool>(0x73616E64696C616E, animScene, entityName, p2, p3);
		public static bool HAS_ENTITY_EXITED_ANIM_SCENE(int animScene, string entityName) => Function.Call<bool>(0xB89FCFF19DAFFF28, animScene, entityName);
		/// <summary>
		/// _HAS_L* (?)
		/// </summary>
		public static bool _HAS_ENTITY_ENTERED_ANIM_SCENE(int animScene, string entityName) => Function.Call<bool>(0x337F1CC8EE895601, animScene, entityName);
		public static int _GET_ANIM_SCENE_PED(int animScene, string name, bool isNetwork) => Function.Call<int>(0xE5822422197BBBA3, animScene, name, isNetwork);
		public static int _GET_ANIM_SCENE_OBJECT(int animScene, string name, bool isNetwork) => Function.Call<int>(0xFB5674687A1B2814, animScene, name, isNetwork);
		public static int _GET_ANIM_SCENE_VEHICLE(int animScene, string name, bool isNetwork) => Function.Call<int>(0x430EE0A19BC5A287, animScene, name, isNetwork);
		public static void SET_ANIM_SCENE_BOOL(int animScene, string name, bool value, bool p3) => Function.Call(0x519E96C2C68B404B, animScene, name, value, p3);
		public static bool GET_ANIM_SCENE_BOOL(int animScene, string name) => Function.Call<bool>(0x07A6F6447ECA9B64, animScene, name);
		public static void SET_ANIM_SCENE_FLOAT(int animScene, string name, float value, bool p3, bool p4) => Function.Call(0x6BC5104E68CBEFE8, animScene, name, value, p3, p4);
		public static float GET_ANIM_SCENE_FLOAT(int animScene, string name) => Function.Call<float>(0xCC24CB07F60B496E, animScene, name);
		public static void SET_ANIM_SCENE_INT(int animScene, string name, int value, bool p3) => Function.Call(0x3A379D2166CF5B92, animScene, name, value, p3);
		public static int GET_ANIM_SCENE_INT(int animScene, string name) => Function.Call<int>(0x2B7277484CC095FD, animScene, name);
		public static bool GET_ANIM_SCENE_ENTITY_LOCATION_DATA(int animScene, string entityName, Vector3* matrix, bool p3, string playbackListName, int p5) => Function.Call<bool>(0x8398438D8F14F56D, animScene, entityName, matrix, p3, playbackListName, p5);
		public static bool IS_ENTITY_PLAYING_ANIM_SCENE(int entity, int animScene) => Function.Call<bool>(0x3AB6C7B0BB0DF4B1, entity, animScene);
		public static void ATTACH_ANIM_SCENE_TO_ENTITY(int animScene, int entity, int p2) => Function.Call(0xDC418495DBA327A1, animScene, entity, p2);
		public static void ATTACH_ANIM_SCENE_TO_ENTITY_PRESERVING_LOCATION(int animScene, int entity, int p2) => Function.Call(0x1C0B105C3F30B88D, animScene, entity, p2);
		public static void DETACH_ANIM_SCENE(int animScene) => Function.Call(0x6843A1AA3A336DFF, animScene);
		public static void DETACH_ANIM_SCENE_PRESERVING_LOCATION(int animScene) => Function.Call(0xA2507C4948C83D2E, animScene);
		public static void TAKE_OWNERSHIP_OF_ANIM_SCENE(int animScene) => Function.Call(0xF7A4C571E572D237, animScene);
		public static bool CHECK_OWNERSHIP_OF_ANIM_SCENE(int animScene) => Function.Call<bool>(0x661B8683611B9B97, animScene);
		public static void SET_ANIM_SCENE_PLAYBACK_LIST(int animScene, string playbackListName) => Function.Call(0xAB5E7CAB074D6B84, animScene, playbackListName);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_ANIM_SCENE_P*
		/// </summary>
		public static bool _0x1C5D33A4293E6DDE(int animScene, string phaseName) => Function.Call<bool>(0x1C5D33A4293E6DDE, animScene, phaseName);
		public static bool _DOES_ANIM_SCENE_PLAY_LIST_EXIST(int animScene, string playbackListName) => Function.Call<bool>(0xA9016536015DE29D, animScene, playbackListName);
		public static void SET_ANIM_SCENE_PLAY_LIST(int animScene, string playlistName, bool p2) => Function.Call(0x15598CFB25F3DC7E, animScene, playlistName, p2);
		public static bool _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_ACTIVE(int animScene, string phaseName) => Function.Call<bool>(0x1F0E401031E20146, animScene, phaseName);
		public static bool REQUEST_ANIM_SCENE_PLAY_LIST(int animScene, string playlistName) => Function.Call<bool>(0xDF7B5144E25CD3FE, animScene, playlistName);
		public static bool _RELEASE_ANIM_SCENE_PLAY_LIST(int animScene, string playlistName) => Function.Call<bool>(0xAE6ADA8FE7E84ACC, animScene, playlistName);
		public static uint _GET_ANIM_SCENE_DICT(int animScene) => Function.Call<uint>(0xAE5ADA4FE3E21ADC, animScene);
		/// <summary>
		/// Used in SP R* Scripts only
		/// Params: p1 = 2B-LowHonor, 2A-HighHonor
		/// </summary>
		public static bool _0x1407F5115FB9583E(int animScene, string p1) => Function.Call<bool>(0x1407F5115FB9583E, animScene, p1);
		public static bool _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADED(int animScene, string phaseName) => Function.Call<bool>(0x23E33CB9F4A3F547, animScene, phaseName);
		public static bool _IS_ANIM_SCENE_PLAYBACK_LIST_PHASE_LOADING(int animScene, string phaseName) => Function.Call<bool>(0x0DF57F86FE71DBE5, animScene, phaseName);
		/// <summary>
		/// Used in braithwaites2 SP R* Scripts only
		/// _A*
		/// </summary>
		public static void _0x1AD896BF43619551() => Function.Call(0x1AD896BF43619551);
		public static int GET_ANIM_SCENE_CURRENT_ACTIVE_CAMERA_COUNT(int animScene) => Function.Call<int>(0x4822A65D5AF64E69, animScene);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_ANIM_SCENE_R* - _IS_ANIM_SCENE_S*
		/// </summary>
		public static bool _0x5D7BFDA2290B4E39(string p0) => Function.Call<bool>(0x5D7BFDA2290B4E39, p0);
		/// <summary>
		/// MGM stands for MiniGameMoments.
		/// </summary>
		public static bool _IS_MGM_SYSTEM_LOADED(string mgmFilename) => Function.Call<bool>(0xFDFC14799373283F, mgmFilename);
		/// <summary>
		/// Used to request MiniGameMoments Assets.
		/// 
		/// mgmFilename's:
		/// Poker
		/// PokerArthur
		/// PokerArthurCamp
		/// PokerJohn
		/// PokerJohnCamp
		/// </summary>
		public static bool _LOAD_MGM_ASSETS(string mgmFilename) => Function.Call<bool>(0xB727A847862CB00A, mgmFilename);
		/// <summary>
		/// Returns mgmHandle
		/// </summary>
		public static int _CREATE_MGM_SYSTEM(string mgmFilename) => Function.Call<int>(0xA1300DE03E5D1973, mgmFilename);
		public static void _DELETE_MGM_SYSTEM(int mgmHandle) => Function.Call(0x53CB3970BA02E3CC, mgmHandle);
		/// <summary>
		/// _PREPARE_* - _REGISTER_*
		/// </summary>
		public static void _0xB1A196BAFE650402(int mgmHandle, int ped) => Function.Call(0xB1A196BAFE650402, mgmHandle, ped);
		/// <summary>
		/// _UNLOAD_* - _WAS_ANIM_SCENE_*
		/// </summary>
		public static void _0xAE6DE22DE0ED4554(int mgmHandle, int ped) => Function.Call(0xAE6DE22DE0ED4554, mgmHandle, ped);
		/// <summary>
		/// Only used in tg_p R* Script
		/// Returns true when mgm event success
		/// _PREPARE_* - _REGISTER_*
		/// </summary>
		public static bool _0x61B2AAEF645DDAF0(int mgmEventHandle, string p1, int seatId, int p3, bool p4) => Function.Call<bool>(0x61B2AAEF645DDAF0, mgmEventHandle, p1, seatId, p3, p4);
		public static void _SET_MGM_EVENT(int mgmEventHandle, string p1, Any seatId, int p3, float p4) => Function.Call(0x07706C4CC9C6CC9E, mgmEventHandle, p1, seatId, p3, p4);
		/// <summary>
		/// p2: MINIGAME_GET_SECONDARY_VOICE_STRING
		/// _SET_*
		/// </summary>
		public static void _0x3641FCD53E59B335(int mgmHandle, int ped, string secondaryVoiceString) => Function.Call(0x3641FCD53E59B335, mgmHandle, ped, secondaryVoiceString);
		public static void _SET_BREAKOUT_ARCHETYPE(int ped, string archetype) => Function.Call(0x99B2A2E3655DEAF1, ped, archetype);
		public static void _CLEAR_BREAKOUT_ARCHETYPE(int ped) => Function.Call(0xBC781D24AA11F179, ped);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_*
		/// </summary>
		public static bool _0x3B393716C3FD8237(int ped) => Function.Call<bool>(0x3B393716C3FD8237, ped);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _SET_B* - _SET_C*
		/// </summary>
		public static void _0xE12D7B4B959644CD() => Function.Call(0xE12D7B4B959644CD);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _RESUME_* - _SET_A*
		/// </summary>
		public static void _0xC1193521E3B9FADD(int entity, bool p1) => Function.Call(0xC1193521E3B9FADD, entity, p1);
		public static void _REQUEST_PHOTO_MODE_FREEZE() => Function.Call(0x7C709C01D43D94CD);
		public static void _REQUEST_PHOTO_MODE_DEFREEZE() => Function.Call(0x41AFA5F228B0B6B0);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _IS_PED_* - _IS_SC*
		/// </summary>
		public static bool _0x2DB524750DC41ED4() => Function.Call<bool>(0x2DB524750DC41ED4);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _PAUSE_* - _PLAY_*
		/// </summary>
		public static bool _0xEA41D44A8D42057B() => Function.Call<bool>(0xEA41D44A8D42057B);
		/// <summary>
		/// Pauses all script threads except the one that called it.
		/// </summary>
		public static void _PAUSE_SCRIPT_THREADS(bool toggle) => Function.Call(0x37C1257849DEF24A, toggle);
		/// <summary>
		/// Used in SP R* Scripts only
		/// _SET_P*
		/// </summary>
		public static void _0xCDCD7B2D49AEE73A(bool p0) => Function.Call(0xCDCD7B2D49AEE73A, p0);
		public static bool WAS_ANIM_SCENE_SKIPPED(int animScene) => Function.Call<bool>(0xEF324E9550A394D5, animScene);
	}

	public unsafe static class _NAMESPACE4
	{
		/// <summary>
		/// nullsub, doesn't do anything
		/// however it is being used in tty scripts: [NET_BAD_SPORT_REPORT_PLAYER] Detected bad sport behavior from Player
		/// badSportBehavior: BS_QUITTER = 0, BS_VEHICLE_DESTRUCTION = 1, BS_VOTED_OUT = 2
		/// </summary>
		public static void _REPORT_PLAYER_BAD_SPORT_BEHAVIOR(Any* gamerHandle, int badSportBehaviorType) => Function.Call(0xC31C44C43B48FDE3, gamerHandle, badSportBehaviorType);
	}

	public unsafe static class ATTRIBUTE
	{
		/// <summary>
		/// attributeIndex:
		/// enum ePedAttribute
		/// {
		/// 	PA_HEALTH,
		/// 	PA_STAMINA,
		/// 	PA_SPECIALABILITY,
		/// 	PA_COURAGE,
		/// 	PA_AGILITY,
		/// 	PA_SPEED,
		/// 	PA_ACCELERATION,
		/// 	PA_BONDING,
		/// 	SA_HUNGER,
		/// 	SA_FATIGUED,
		/// 	SA_INEBRIATED,
		/// 	SA_POISONED,
		/// 	SA_BODYHEAT,
		/// 	SA_BODYWEIGHT,
		/// 	SA_OVERFED,
		/// 	SA_SICKNESS,
		/// 	SA_DIRTINESS,
		/// 	SA_DIRTINESSHAT,
		/// 	MTR_STRENGTH,
		/// 	MTR_GRIT,
		/// 	MTR_INSTINCT,
		/// 	PA_UNRULINESS,
		/// 	SA_DIRTINESSSKIN
		/// };
		/// </summary>
		public static void SET_ATTRIBUTE_BASE_RANK(int ped, int attributeIndex, int newValue) => Function.Call(0x5DA12E025D47D4E5, ped, attributeIndex, newValue);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_ATTRIBUTE_RANK(int ped, int attributeIndex) => Function.Call<int>(0xA4C8E23E29040DE0, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_ATTRIBUTE_BASE_RANK(int ped, int attributeIndex) => Function.Call<int>(0x147149F2E909323C, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_ATTRIBUTE_BONUS_RANK(int ped, int coreIndex) => Function.Call<int>(0x0EFA71F4B4330E04, ped, coreIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_MAX_ATTRIBUTE_RANK(int ped, int attributeIndex) => Function.Call<int>(0x704674A0535A471D, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static void SET_ATTRIBUTE_BONUS_RANK(int ped, int attributeIndex, int newValue) => Function.Call(0x920F9488BD115EFB, ped, attributeIndex, newValue);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_DEFAULT_ATTRIBUTE_RANK(int ped, int attributeIndex) => Function.Call<int>(0x958DD43D41F89A47, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_DEFAULT_MAX_ATTRIBUTE_RANK(int ped, int attributeIndex) => Function.Call<int>(0x7C059C55AD940CB4, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static void ADD_ATTRIBUTE_POINTS(int ped, int attributeIndex, int p2) => Function.Call(0x75415EE0CB583760, ped, attributeIndex, p2);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static void SET_ATTRIBUTE_POINTS(int ped, int attributeIndex, int p2) => Function.Call(0x09A59688C26D88DF, ped, attributeIndex, p2);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_ATTRIBUTE_POINTS(int ped, int attributeIndex) => Function.Call<int>(0x219DA04BAA9CB065, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_MAX_ATTRIBUTE_POINTS(int ped, int attributeIndex) => Function.Call<int>(0x223BF310F854871C, ped, attributeIndex);
		/// <summary>
		/// coreIndex:
		/// enum eAttributeCore
		/// {
		/// 	ATTRIBUTE_CORE_HEALTH,
		/// 	ATTRIBUTE_CORE_STAMINA,
		/// 	ATTRIBUTE_CORE_DEADEYE
		/// };
		/// </summary>
		public static void _SET_ATTRIBUTE_CORE_VALUE(int ped, int coreIndex, int value) => Function.Call(0xC6258F41D86676E0, ped, coreIndex, value);
		/// <summary>
		/// Gets the ped's core value on a scale of 0 to 100.
		/// coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
		/// </summary>
		public static int _GET_ATTRIBUTE_CORE_VALUE(int ped, int coreIndex) => Function.Call<int>(0x36731AC041289BB1, ped, coreIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static int GET_DEFAULT_ATTRIBUTE_POINTS_NEEDED_FOR_RANK(uint modelHash, int attributeIndex, int rank) => Function.Call<int>(0x94A7F191DB49A44D, modelHash, attributeIndex, rank);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// 
		/// Old name: _SET_ATTRIBUTE_OVERPOWER_VALUE
		/// </summary>
		public static void ENABLE_ATTRIBUTE_OVERPOWER(int ped, int attributeIndex, float value, bool makeSound) => Function.Call(0xF6A7C08DF2E28B28, ped, attributeIndex, value, makeSound);
		/// <summary>
		/// coreIndex: see _SET_ATTRIBUTE_CORE_VALUE
		/// 
		/// Previously incorrectly named ENABLE_ATTRIBUTE_OVERPOWER
		/// </summary>
		public static void _ENABLE_ATTRIBUTE_CORE_OVERPOWER(int ped, int coreIndex, float value, bool makeSound) => Function.Call(0x4AF5A4C7B9157D14, ped, coreIndex, value, makeSound);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static void DISABLE_ATTRIBUTE_OVERPOWER(int ped, int attributeIndex) => Function.Call(0xF8DAC3D85636C241, ped, attributeIndex);
		/// <summary>
		/// attributeIndex: see SET_ATTRIBUTE_BASE_RANK
		/// </summary>
		public static bool _IS_ATTRIBUTE_OVERPOWERED(int ped, int attributeIndex) => Function.Call<bool>(0x103C2F885ABEB00B, ped, attributeIndex);
		public static bool _IS_ATTRIBUTE_CORE_OVERPOWERED(int ped, int coreIndex) => Function.Call<bool>(0x200373A8DF081F22, ped, coreIndex);
		public static float _GET_ATTRIBUTE_OVERPOWER_SECONDS_LEFT(int ped, int attributeIndex) => Function.Call<float>(0x4C9F782180712742, ped, attributeIndex);
		public static float _GET_ATTRIBUTE_CORE_OVERPOWER_SECONDS_LEFT(int ped, int coreIndex) => Function.Call<float>(0xB429F58803D285B1, ped, coreIndex);
		/// <summary>
		/// Params: p1 is related to satchel_category
		/// </summary>
		public static void _START_ITEM_PREVIEW(Any p0, int p1) => Function.Call(0x7E2C766ADB2C5F1A, p0, p1);
		public static void STOP_ITEM_PREVIEW() => Function.Call(0xD962F8579D702DB5);
		/// <summary>
		/// Displays status effects on core icons (includes warnings).
		/// 
		/// enum eUiRpgStatusEffect
		/// {
		/// 	STATUS_NONE,
		/// 	STATUS_COLD,
		/// 	STATUS_HOT,
		/// 	STATUS_OVERFED,
		/// 	STATUS_DIRTY,
		/// 	STATUS_SNAKE_VENOM,
		/// 	STATUS_ARROW_WOUNDED,
		/// 	STATUS_ARROW_DRAINED,
		/// 	STATUS_ARROW_DISORIENTED,
		/// 	STATUS_ARROW_TRACKED,
		/// 	STATUS_ARROW_CONFUSION,
		/// 	STATUS_UNDERWEIGHT,
		/// 	STATUS_OVERWEIGHT,
		/// 	STATUS_SICK_1,
		/// 	STATUS_SICK_2,
		/// 	STATUS_PREDATOR_INVULNERABLE
		/// };
		/// </summary>
		public static void _SET_STATUS_EFFECT_CORE_ICON(int statusEffectType) => Function.Call(0xA4D3A1C008F250DF, statusEffectType);
		/// <summary>
		/// Starts core periodic icon.
		/// statusEffectType: see 0xA4D3A1C008F250DF
		/// </summary>
		public static void _SET_STATUS_EFFECT_PERIODIC_ICON(int statusEffectType) => Function.Call(0xFB6E111908502871, statusEffectType);
		/// <summary>
		/// Stops periodic icon.
		/// statusEffectType: see 0xA4D3A1C008F250DF
		/// </summary>
		public static void _STOP_STATUS_EFFECT_PERIODIC_ICON(int statusEffectType) => Function.Call(0x3FC4C027FD0936F4, statusEffectType);
	}

	public unsafe static class AUDIO
	{
		/// <summary>
		/// _AUDIO_IS_* - _AUDIO_TRIGGER*
		/// </summary>
		public static void _0x7455CD705F7E933E() => Function.Call(0x7455CD705F7E933E);
		public static void CLEAR_CONVERSATION_HISTORY() => Function.Call(0x33D51F801CB16E4F);
		public static void _CLEAR_CONVERSATION_HISTORY_FOR_SCRIPTED_CONVERSATION(string convoRoot) => Function.Call(0xEF51242E35242B47, convoRoot);
		public static bool CREATE_NEW_SCRIPTED_CONVERSATION(string convoRoot) => Function.Call<bool>(0xD2C91A0B572AAE56, convoRoot);
		public static bool _0xDF947FE0D551684E(int ped, string p1) => Function.Call<bool>(0xDF947FE0D551684E, ped, p1);
		public static void ADD_PED_TO_CONVERSATION(string convoRoot, int ped, string characterName) => Function.Call(0x95D9F4BC443956E7, convoRoot, ped, characterName);
		public static void _0xA2323A2EAE32A290(int listeningToPed, int ped, string listenerName) => Function.Call(0xA2323A2EAE32A290, listeningToPed, ped, listenerName);
		/// <summary>
		/// Only used in R* SP Script cv_mus_shared
		/// </summary>
		public static bool _0x79F9C57B8D0DFE90(string convoRoot, int animScene) => Function.Call<bool>(0x79F9C57B8D0DFE90, convoRoot, animScene);
		public static void START_SCRIPT_CONVERSATION(string convoRoot, bool p1, bool p2, bool clone) => Function.Call(0x6B17C62C9635D2DC, convoRoot, p1, p2, clone);
		public static void PRELOAD_SCRIPT_CONVERSATION(string convoRoot, bool p1, bool p2, bool clone) => Function.Call(0x3B3CAD6166916D87, convoRoot, p1, p2, clone);
		public static void START_PRELOADED_CONVERSATION(string convoRoot) => Function.Call(0x23641AFE870AF385, convoRoot);
		public static bool _0x0CB3D1919E8D7CBA(string convoRoot) => Function.Call<bool>(0x0CB3D1919E8D7CBA, convoRoot);
		public static bool _0xFE5C6177064BD390(bool p0) => Function.Call<bool>(0xFE5C6177064BD390, p0);
		public static bool _IS_SCRIPTED_CONVERSATION_CREATED(string convoRoot) => Function.Call<bool>(0xD89504D9D7D5057D, convoRoot);
		public static bool _0x5A13586A9447931F(bool p0) => Function.Call<bool>(0x5A13586A9447931F, p0);
		public static bool IS_SCRIPTED_CONVERSATION_LOADED(string convoRoot) => Function.Call<bool>(0xDF0D54BE7A776737, convoRoot);
		public static bool _IS_ANY_CONVERSATION_PLAYING(bool p0) => Function.Call<bool>(0xA2CAC9DEF0195E6F, p0);
		public static bool IS_SCRIPTED_CONVERSATION_PLAYING(string p0) => Function.Call<bool>(0x1ECC76792F661CF5, p0);
		public static bool _IS_SCRIPTED_CONVERSION_ONGOING(string p0) => Function.Call<bool>(0xF01C570E0A0A1E67, p0);
		public static bool _0x847748AE5D7B1071(bool p0) => Function.Call<bool>(0x847748AE5D7B1071, p0);
		/// <summary>
		/// _IS_SCRIPTED_CONVERSATION_*
		/// </summary>
		public static bool _0xD0730C1FA40348D9(string convoRoot) => Function.Call<bool>(0xD0730C1FA40348D9, convoRoot);
		public static int GET_CURRENT_SCRIPTED_CONVERSATION_LINE(string p0) => Function.Call<int>(0x480357EE890C295A, p0);
		public static void PAUSE_SCRIPTED_CONVERSATION(string p0, bool p1, bool p2, bool p3, bool p4) => Function.Call(0x8530AD776CD72B12, p0, p1, p2, p3, p4);
		public static void RESTART_SCRIPTED_CONVERSATION(string p0) => Function.Call(0x9AEB285D1818C9AC, p0);
		public static void _STOP_ALL_SCRIPTED_CONVERSIONS(bool p0, bool p1, bool p2) => Function.Call(0x36559148B78853B3, p0, p1, p2);
		public static int STOP_SCRIPTED_CONVERSATION(string p0, bool p1, bool p2) => Function.Call<int>(0xD79DEEFB53455EBA, p0, p1, p2);
		public static void SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(string p0) => Function.Call(0x9663FE6B7A61EB00, p0);
		public static int _0xF336E9F989B3518F(string p0) => Function.Call<int>(0xF336E9F989B3518F, p0);
		public static int _0x254B0241E964B450(string p0, int currentScriptedConvoLine) => Function.Call<int>(0x254B0241E964B450, p0, currentScriptedConvoLine);
		public static int _0x152ED1B56E8F1F50(string p0, int currentScriptedConvoLine) => Function.Call<int>(0x152ED1B56E8F1F50, p0, currentScriptedConvoLine);
		public static int _0x935DBD96D4A3DA1F(string p0, int currentScriptedConvoLine) => Function.Call<int>(0x935DBD96D4A3DA1F, p0, currentScriptedConvoLine);
		public static int _0x295859EB18F48D82(string p0) => Function.Call<int>(0x295859EB18F48D82, p0);
		public static void _0x40CA665AB9D8D505(string convoRoot, int singleLineIndex) => Function.Call(0x40CA665AB9D8D505, convoRoot, singleLineIndex);
		public static void _0xF232C2C546AC16D0(string p0) => Function.Call(0xF232C2C546AC16D0, p0);
		public static void _0x1E6F9A9FE1A99F36(string audSpeechEvent) => Function.Call(0x1E6F9A9FE1A99F36, audSpeechEvent);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void REGISTER_SCRIPT_WITH_AUDIO(int p0) => Function.Call(0xC6ED9D5092438D91, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void UNREGISTER_SCRIPT_WITH_AUDIO() => Function.Call(0xA8638BE228D4751A);
		public static bool REQUEST_SCRIPT_AUDIO_BANK(string audioBank) => Function.Call<bool>(0x2F844A8B08D76685, audioBank);
		public static void RELEASE_NAMED_SCRIPT_AUDIO_BANK(string audioBank) => Function.Call(0x77ED170667F50170, audioBank);
		public static void RELEASE_SCRIPT_AUDIO_BANK() => Function.Call(0x7A2D8AD0A9EB9C3F);
		public static int GET_SOUND_ID() => Function.Call<int>(0x430386FE9BF80B45);
		public static void RELEASE_SOUND_ID(int soundId) => Function.Call(0x353FC880830B88FA, soundId);
		public static void PLAY_SOUND(string audioName, string audioRef, bool p2, Any p3, bool p4, Any p5) => Function.Call(0x7FF4944CC209192D, audioName, audioRef, p2, p3, p4, p5);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/audio/frontend_soundsets
		/// </summary>
		public static void PLAY_SOUND_FRONTEND(string audioName, string audioRef, bool p2, Any p3) => Function.Call(0x67C540AA08E4A6F5, audioName, audioRef, p2, p3);
		/// <summary>
		/// item: value returned from 0x2E1CDC1FF3B8473E
		/// soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
		/// </summary>
		public static void _PLAY_SOUND_FROM_ITEM(uint item, uint soundSet, Any p2) => Function.Call(0xE8EAFF7B41EDD291, item, soundSet, p2);
		public static void PLAY_SOUND_FROM_ENTITY(string audioName, int entity, string audioRef, bool isNetwork, Any p4, Any p5) => Function.Call(0x6FB1DA3CA9DA7D90, audioName, entity, audioRef, isNetwork, p4, p5);
		public static void _PLAY_SOUND_FROM_POSITION(string audioName, float x, float y, float z, string audioRef, bool isNetwork, Any p6, bool p7, Any p8) => Function.Call(0xCCE219C922737BFA, audioName, x, y, z, audioRef, isNetwork, p6, p7, p8);
		public static void _PLAY_SOUND_FROM_POSITION(string audioName, Vector3 vec, string audioRef, bool isNetwork, Any p6, bool p7, Any p8) => Function.Call(0xCCE219C922737BFA, audioName, vec.X, vec.Y, vec.Z, audioRef, isNetwork, p6, p7, p8);
		public static void _STOP_SOUND_WITH_NAME(string audioName, string audioRef) => Function.Call(0x0F2A2175734926D8, audioName, audioRef);
		/// <summary>
		/// _IS_SOUND_RUNNING(?)
		/// </summary>
		public static bool _0x580D71DFE0088E34(string audioName, string audioRef) => Function.Call<bool>(0x580D71DFE0088E34, audioName, audioRef);
		/// <summary>
		/// item: FUSE, value returned from 0x2E1CDC1FF3B8473E
		/// soundSet: HUD_SHOP_SOUNDSET, COMPANIONS_ROBBERIES_SOUNDSET
		/// </summary>
		public static bool _IS_SCRIPTED_AUDIO_CUSTOM(uint item, uint soundSet) => Function.Call<bool>(0x6DF942C4179BE5AB, item, soundSet);
		public static void _SET_VARIABLE_ON_SOUND_WITH_NAME(string variableName, float variableValue, string audioName, string audioRef) => Function.Call(0x9821B68CD3E05F2B, variableName, variableValue, audioName, audioRef);
		/// <summary>
		/// whistleConfig: Ped.WhistlePitch (0.0 - 1.0), Ped.WhistleClarity (0.0 - 1.0), Ped.WhistleShape (0.0 - 10.0)
		/// </summary>
		public static void _SET_WHISTLE_CONFIG_FOR_PED(int ped, string whistleConfig, float value) => Function.Call(0x9963681A8BC69BF3, ped, whistleConfig, value);
		/// <summary>
		/// p1: Entity.Relationship
		/// p2: Player, Enemy, Teammate, Neutral
		/// </summary>
		public static void _SET_SOUND_RELATIONSHIP_ON_PED(int ped, string p1, string p2) => Function.Call(0x2E31ACA7477CF00F, ped, p1, p2);
		public static void _PLAY_SOUND_FRONTEND_WITH_SOUND_ID(int soundId, string name, string soundSet, bool p3) => Function.Call(0xCE5D0FFE83939AF1, soundId, name, soundSet, p3);
		/// <summary>
		/// Params: p5 seems to be always 0
		/// </summary>
		public static void _PLAY_SOUND_FROM_ENTITY_WITH_SET(int soundId, string soundName, int entity, string soundsetName, bool p4, Any p5) => Function.Call(0xF1C5310FEAA36B48, soundId, soundName, entity, soundsetName, p4, p5);
		/// <summary>
		/// Starts Audio Loop
		/// _PLAY_SOUND_FROM_ENTITY* - _PLAY_SOUND_FRONTEND*
		/// </summary>
		public static void _PLAY_SOUND_FROM_POSITION_WITH_ID(int soundId, string soundName, float x, float y, float z, string soundsetName, bool p6, int p7, bool p8) => Function.Call(0xDCF5BA95BBF0FABA, soundId, soundName, x, y, z, soundsetName, p6, p7, p8);
		public static void _PLAY_SOUND_FROM_POSITION_WITH_ID(int soundId, string soundName, Vector3 vec, string soundsetName, bool p6, int p7, bool p8) => Function.Call(0xDCF5BA95BBF0FABA, soundId, soundName, vec.X, vec.Y, vec.Z, soundsetName, p6, p7, p8);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _UPDATE_SOUND_POSITION(int soundId, float x, float y, float z) => Function.Call(0x0286617C8FC50A53, soundId, x, y, z);
		public static void _UPDATE_SOUND_POSITION(int soundId, Vector3 vec) => Function.Call(0x0286617C8FC50A53, soundId, vec.X, vec.Y, vec.Z);
		public static void _STOP_SOUND_WITH_ID(int soundId) => Function.Call(0x3210BCB36AF7621B, soundId);
		public static void _SET_VARIABLE_ON_SOUND_WITH_ID(int soundId, string variableName, float variableValue) => Function.Call(0x503703EC1781B7D6, soundId, variableName, variableValue);
		public static bool PREPARE_SOUND(string soundName, string soundsetName, int soundId) => Function.Call<bool>(0xE368E8422C860BA7, soundName, soundsetName, soundId);
		public static void _RELEASE_SHARD_SOUNDS(string soundName, string soundsetName) => Function.Call(0x9D746964E0CF2C5F, soundName, soundsetName);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/audio/soundsets
		/// </summary>
		public static bool PREPARE_SOUNDSET(string soundsetName, bool p1) => Function.Call<bool>(0xD9130842D7226045, soundsetName, p1);
		public static void _RELEASE_SOUNDSET(string soundsetName) => Function.Call(0x531A78D6BF27014B, soundsetName);
		public static bool PREPARE_SOUND_WITH_ENTITY(string soundName, int entity, string soundsetName, int soundId) => Function.Call<bool>(0x4AD019591E94C064, soundName, entity, soundsetName, soundId);
		public static void _0x3E93DDDCBB6111E4(string p0, float p1) => Function.Call(0x3E93DDDCBB6111E4, p0, p1);
		public static bool _HAS_SOUND_AUDIO_NAME_FINISHED(string audioName, string soundsetName) => Function.Call<bool>(0x714A0EA7DE1167BE, audioName, soundsetName);
		public static bool _HAS_SOUND_ID_FINISHED(int soundId) => Function.Call<bool>(0x84848E1C0FC67DBB, soundId);
		/// <summary>
		/// struct ScriptedSpeechParams
		/// {
		/// 	const char* speechName;
		/// 	const char* voiceName;
		/// 	alignas(8) int variation;
		/// 	alignas(8) Hash speechParamHash;
		/// 	alignas(8) Ped listenerPed;
		/// 	alignas(8) BOOL syncOverNetwork;
		/// 	alignas(8) int v7;
		/// 	alignas(8) int v8;
		/// };
		/// 
		/// static_assert(sizeof(ScriptedSpeechParams) == 0x40, "incorrect ScriptedSpeechParams size");
		/// 
		/// 
		/// Example:
		/// 
		/// ScriptedSpeechParams params{"RE_PH_RHD_V3_AGGRO", "0405_U_M_M_RhdSheriff_01", 1, joaat("SPEECH_PARAMS_BEAT_SHOUTED_CLEAR"), 0, true, 1, 1};
		/// PLAY_PED_AMBIENT_SPEECH_NATIVE(PLAYER_PED_ID(), (Any*)&params);
		/// 
		/// Old name: _PLAY_AMBIENT_SPEECH1
		/// https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_banks
		/// </summary>
		public static bool PLAY_PED_AMBIENT_SPEECH_NATIVE(int speaker, Any* _params) => Function.Call<bool>(0x8E04FEDD28D42462, speaker, _params);
		/// <summary>
		/// Old name: _PLAY_AMBIENT_SPEECH_AT_COORDS
		/// </summary>
		public static bool PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(float x, float y, float z, Any* _params) => Function.Call<bool>(0xED640017ED337E45, x, y, z, _params);
		public static bool PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(Vector3 vec, Any* _params) => Function.Call<bool>(0xED640017ED337E45, vec.X, vec.Y, vec.Z, _params);
		public static Any _0x72E4D1C4639BC465(int p0, Any p1) => Function.Call<Any>(0x72E4D1C4639BC465, p0, p1);
		public static Any _0xB18FEC133C7C6C69(Any p0) => Function.Call<Any>(0xB18FEC133C7C6C69, p0);
		public static void _0xDC93F0948F2C28F4(Any p0) => Function.Call(0xDC93F0948F2C28F4, p0);
		/// <summary>
		/// Related to audio events of some sort
		/// </summary>
		public static void _0x0D7FD6A55FD63AEF(int p0, int p1, bool p2) => Function.Call(0x0D7FD6A55FD63AEF, p0, p1, p2);
		public static void _0x660A8F876DF1D4F8(Any p0) => Function.Call(0x660A8F876DF1D4F8, p0);
		public static void _0x380A2E353AD30917(Any p0, Any p1, Any p2) => Function.Call(0x380A2E353AD30917, p0, p1, p2);
		public static void _0x0FAF7171BF613B80(Any p0) => Function.Call(0x0FAF7171BF613B80, p0);
		/// <summary>
		/// Valid pain IDs: 0..12
		/// </summary>
		public static void PLAY_PAIN(int ped, int painId, float p2, bool p3, bool isNetwork) => Function.Call(0xBC9AE166038A5CEC, ped, painId, p2, p3, isNetwork);
		public static void _0x6652B0C8F3D414D0(Any p0) => Function.Call(0x6652B0C8F3D414D0, p0);
		/// <summary>
		/// Name: ROPE_SETTINGS_DEFAULT
		/// </summary>
		public static void _0xF092B6030D6FD49C(int ropeId, string name) => Function.Call(0xF092B6030D6FD49C, ropeId, name);
		public static void _0x2651DDC0EA269073(int ropeId, float p1) => Function.Call(0x2651DDC0EA269073, ropeId, p1);
		public static void SET_AMBIENT_VOICE_NAME(int ped, string name) => Function.Call(0x6C8065A3B780185B, ped, name);
		/// <summary>
		/// Hashes: VOFX_PLAYER_MALE01, VOFX_PLAYER_MALE02, VOFX_PLAYER_MALE03, VOFX_PLAYER_FEMALE01, VOFX_PLAYER_FEMALE02, VOFX_PLAYER_FEMALE03
		/// </summary>
		public static void _SET_VOFX_PED_VOICE(int ped, uint voice) => Function.Call(0x2703EFB583F0949A, ped, voice);
		public static void STOP_CURRENT_PLAYING_SPEECH(int ped, Any p1) => Function.Call(0x79D2F0E66F81D90D, ped, p1);
		public static void STOP_CURRENT_PLAYING_AMBIENT_SPEECH(int ped, Any p1) => Function.Call(0xB8BEC0CA6F0EDB0F, ped, p1);
		public static bool IS_AMBIENT_SPEECH_PLAYING(int ped) => Function.Call<bool>(0x9072C8B49907BFAD, ped);
		public static bool IS_SCRIPTED_SPEECH_PLAYING(Any p0) => Function.Call<bool>(0xCC9AA18DCC7084F4, p0);
		public static bool IS_ANY_SPEECH_PLAYING(int ped) => Function.Call<bool>(0x729072355FA39EC9, ped);
		public static Any _0x2B101AD9F651243A() => Function.Call<Any>(0x2B101AD9F651243A);
		public static Any _0x4A98E228A936DBCC(Any p0) => Function.Call<Any>(0x4A98E228A936DBCC, p0);
		public static Any _0x6BFFB7C276866996(Any p0) => Function.Call<Any>(0x6BFFB7C276866996, p0);
		/// <summary>
		/// Checks if the ped can play the speech or has the speech file, last parameter is usually false.
		/// </summary>
		public static bool DOES_CONTEXT_EXIST_FOR_THIS_PED(int ped, string speechName, bool unk) => Function.Call<bool>(0x49B99BF3FDA89A7A, ped, speechName, unk);
		public static Any _0xF0EE69F500952FA5(Any p0) => Function.Call<Any>(0xF0EE69F500952FA5, p0);
		public static Any _0x9D6DEC9791A4E501(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x9D6DEC9791A4E501, p0, p1, p2, p3);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void _0x864A842B86993851(int ped) => Function.Call(0x864A842B86993851, ped);
		public static bool IS_PED_IN_CURRENT_CONVERSATION(string p0, int ped, Any p2) => Function.Call<bool>(0x049E937F18F4020C, p0, ped, p2);
		public static bool _IS_PED_IN_ANY_CONVERSATION(int ped, bool p1) => Function.Call<bool>(0x54B187F111D9C6F8, ped, p1);
		public static void SET_PED_IS_DRUNK(int ped, bool toggle) => Function.Call(0x95D2D383D5396B8A, ped, toggle);
		public static void _0x3A00D87B20A2A5E4(Any p0, Any p1) => Function.Call(0x3A00D87B20A2A5E4, p0, p1);
		public static void _0xD47D47EFBF103FB8(Any p0, Any p1) => Function.Call(0xD47D47EFBF103FB8, p0, p1);
		public static void PLAY_ANIMAL_VOCALIZATION(int ped, string vocalizationName, bool p2) => Function.Call(0xEE066C7006C49C0A, ped, vocalizationName, p2);
		public static void _PLAY_ANIMAL_VOCALIZATION_PHEROMONE_VIAL_RESPONSE(int ped, uint p1, bool p2) => Function.Call(0x0E53530D9B2DB01D, ped, p1, p2);
		public static bool IS_ANIMAL_VOCALIZATION_PLAYING(int pedHandle) => Function.Call<bool>(0xC265DF9FB44A9FBD, pedHandle);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void SET_ANIMAL_MOOD(int animal, int mood) => Function.Call(0xCC97B29285B1DC3B, animal, mood);
		public static void _0xFCDEC42B1C78B7F8(Any p0, Any p1) => Function.Call(0xFCDEC42B1C78B7F8, p0, p1);
		public static void _0xEB4D592620B8C209(Any p0) => Function.Call(0xEB4D592620B8C209, p0);
		public static void _0xA6847BBA4FCDD13F(Any p0, Any p1) => Function.Call(0xA6847BBA4FCDD13F, p0, p1);
		public static void SET_STATIC_EMITTER_ENABLED(string emitterName, bool toggle) => Function.Call(0x399D2D3B33F1B8EB, emitterName, toggle);
		public static void PLAY_END_CREDITS_MUSIC(bool play) => Function.Call(0xCD536C4D33DCC900, play);
		public static Any _0x7678FE0455ED1145(Any p0, Any p1, Any p2) => Function.Call<Any>(0x7678FE0455ED1145, p0, p1, p2);
		public static Any _0xFFE9C53DEEA3DB0B(Any p0, Any p1, float x, float y, float z, bool isSrlLoaded, Any p6) => Function.Call<Any>(0xFFE9C53DEEA3DB0B, p0, p1, x, y, z, isSrlLoaded, p6);
		public static Any _0xFFE9C53DEEA3DB0B(Any p0, Any p1, Vector3 vec, bool isSrlLoaded, Any p6) => Function.Call<Any>(0xFFE9C53DEEA3DB0B, p0, p1, vec.X, vec.Y, vec.Z, isSrlLoaded, p6);
		public static void _0x5E3CCF03995388B5(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x5E3CCF03995388B5, p0, p1, p2, p3);
		public static void _0x43037ABFE214A851() => Function.Call(0x43037ABFE214A851);
		public static void SET_AMBIENT_ZONE_STATE(string zoneName, bool isEnabled, bool p2) => Function.Call(0xBDA07E5950085E46, zoneName, isEnabled, p2);
		public static void CLEAR_AMBIENT_ZONE_STATE(string zoneName, bool p1) => Function.Call(0x218DD44AAAC964FF, zoneName, p1);
		public static void SET_AMBIENT_ZONE_LIST_STATE(string ambientZone, bool p1, bool p2) => Function.Call(0x9748FA4DE50CCE3E, ambientZone, p1, p2);
		public static void CLEAR_AMBIENT_ZONE_LIST_STATE(string ambientZone, bool p1) => Function.Call(0x120C48C614909FA4, ambientZone, p1);
		public static void SET_AMBIENT_ZONE_STATE_PERSISTENT(string ambientZone, bool p1, bool p2) => Function.Call(0x1D6650420CEC9D3B, ambientZone, p1, p2);
		public static void SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(string ambientZone, bool p1, bool p2) => Function.Call(0xF3638DAE8C4045E1, ambientZone, p1, p2);
		public static void _SET_AMBIENT_ZONE_POSITION(string ambientZone, float x, float y, float z, float heading) => Function.Call(0x3743CE6948194349, ambientZone, x, y, z, heading);
		public static void _SET_AMBIENT_ZONE_POSITION(string ambientZone, Vector3 vec, float heading) => Function.Call(0x3743CE6948194349, ambientZone, vec.X, vec.Y, vec.Z, heading);
		/// <summary>
		/// Checks whether the horn of a vehicle is currently played.
		/// </summary>
		public static bool IS_HORN_ACTIVE(int vehicle) => Function.Call<bool>(0x9D6BFC12B05C6121, vehicle);
		public static void _0xFD461D0ABA5559B1(Any p0, Any p1) => Function.Call(0xFD461D0ABA5559B1, p0, p1);
		public static bool IS_STREAM_PLAYING(int streamId) => Function.Call<bool>(0xD11FA52EB849D978, streamId);
		public static bool LOAD_STREAM(string streamName, string soundSet) => Function.Call<bool>(0x1F1F957154EC51DF, streamName, soundSet);
		public static void PLAY_STREAM_FROM_PED(int ped, int streamId) => Function.Call(0x89049DD63C08B5D1, ped, streamId);
		public static void PLAY_STREAM_FRONTEND(int streamId) => Function.Call(0x58FCE43488F9F5F4, streamId);
		public static void PLAY_STREAM_FROM_POSITION(float x, float y, float z, int streamId) => Function.Call(0x21442F412E8DE56B, x, y, z, streamId);
		public static void PLAY_STREAM_FROM_POSITION(Vector3 vec, int streamId) => Function.Call(0x21442F412E8DE56B, vec.X, vec.Y, vec.Z, streamId);
		public static void _0x3A3BE6B920525237(Any p0, Any p1) => Function.Call(0x3A3BE6B920525237, p0, p1);
		public static void STOP_STREAM(int streamId) => Function.Call(0xA4718A1419D18151, streamId);
		public static void STOP_PED_SPEAKING(int ped, bool shaking) => Function.Call(0x9D64D7405520E3D3, ped, shaking);
		public static void DISABLE_PED_PAIN_AUDIO(int ped, bool toggle) => Function.Call(0xA9A41C1E940FB0E8, ped, toggle);
		public static bool IS_AMBIENT_SPEECH_DISABLED(int ped) => Function.Call<bool>(0x932C2D096A2C3FFF, ped);
		public static Any SET_IS_SCRIPTED_SPEECH_DISABLED(int ped, bool disabled) => Function.Call<Any>(0xB2DE3AEBE31150E2, ped, disabled);
		public static void _BLOCK_SPEECH_CONTEXT(string context, bool block) => Function.Call(0x6378A235374B852F, context, block);
		public static void _0x87E6302FC61208CC(Any p0) => Function.Call(0x87E6302FC61208CC, p0);
		public static void SET_HORN_ENABLED(int vehicle, bool toggle) => Function.Call(0x76D683C108594D0E, vehicle, toggle);
		public static void SET_AUDIO_VEHICLE_PRIORITY(int vehicle, Any p1) => Function.Call(0xE5564483E407F914, vehicle, p1);
		public static void _0x259ACC5B52A2B2D9(Any p0, Any p1) => Function.Call(0x259ACC5B52A2B2D9, p0, p1);
		/// <summary>
		/// Old name: _FORCE_VEHICLE_ENGINE_AUDIO
		/// </summary>
		public static void FORCE_USE_AUDIO_GAME_OBJECT(int vehicle, string audioName) => Function.Call(0x4F0C413926060B38, vehicle, audioName);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_GPS_ACTIVE(bool active) => Function.Call(0x3BD3F52BA9B1E4E8, active);
		public static bool _START_AUDIO_SCENESET(string audioName, string sceneset) => Function.Call<bool>(0x6339C1EA3979B5F7, audioName, sceneset);
		public static void _STOP_AUDIO_SCENESET(string sceneset) => Function.Call(0x9428447DED71FC7E, sceneset);
		public static bool _SET_AUDIO_SCENESET(string audioName, string sceneset) => Function.Call<bool>(0xAC84686C06184B0D, audioName, sceneset);
		public static bool START_AUDIO_SCENE(string scene) => Function.Call<bool>(0x013A80FC08F6E4F2, scene);
		public static Any _0xDC2F83A0612CA34D(Any p0) => Function.Call<Any>(0xDC2F83A0612CA34D, p0);
		public static void STOP_AUDIO_SCENE(string scene) => Function.Call(0xDFE8422B3B94E688, scene);
		/// <summary>
		/// _STOP_AUDIO_*
		/// </summary>
		public static void _0x6AB944DF68B512D3(Any p0) => Function.Call(0x6AB944DF68B512D3, p0);
		public static void STOP_AUDIO_SCENES() => Function.Call(0xBAC7FC81A75EC1A1);
		public static bool IS_AUDIO_SCENE_ACTIVE(string scene) => Function.Call<bool>(0xB65B60556E2A9225, scene);
		public static void SET_AUDIO_SCENE_VARIABLE(string scene, string variable, float value) => Function.Call(0xEF21A9EF089A2668, scene, variable, value);
		public static uint _GET_ENTITY_AUDIO_MIX_GROUP(int entity) => Function.Call<uint>(0x8B25A18E390F75BF, entity);
		public static void ADD_ENTITY_TO_AUDIO_MIX_GROUP(int entity, string groupName, float p2) => Function.Call(0x153973AB99FE8980, entity, groupName, p2);
		public static Any _0x131EC9247E7A2903(Any p0) => Function.Call<Any>(0x131EC9247E7A2903, p0);
		public static void REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(int entity, float p1) => Function.Call(0x18EB48CFC41F2EA0, entity, p1);
		public static Any _0xE600F61F54A444A6() => Function.Call<Any>(0xE600F61F54A444A6);
		/// <summary>
		/// Old name: AUDIO_IS_SCRIPTED_MUSIC_PLAYING
		/// </summary>
		public static bool AUDIO_IS_MUSIC_PLAYING() => Function.Call<bool>(0x845FFC3A4FEEFA3E);
		/// <summary>
		/// Checks for MOONSHINE_BAND
		/// </summary>
		public static uint _0xBE28DB99556FF8D9(int entity) => Function.Call<uint>(0xBE28DB99556FF8D9, entity);
		public static void _0x8E901B65206C2D3E(int ped) => Function.Call(0x8E901B65206C2D3E, ped);
		public static void _0xC4CFCE4C656EF480(int ped) => Function.Call(0xC4CFCE4C656EF480, ped);
		public static void _0xABDB4863D3D72021(int entity, Any p1, Any p2, float p3, Any p4) => Function.Call(0xABDB4863D3D72021, entity, p1, p2, p3, p4);
		/// <summary>
		/// Used in Script Function NET_CAMP_CLIENT_UPDATE_PED_ROLE_STATE_SHOP: hash exists! Playing hash
		/// </summary>
		public static void _0xB93A769B8B726950(int ped, uint p1) => Function.Call(0xB93A769B8B726950, ped, p1);
		public static void _0xE891504B2F0E2DBA(Any p0, Any p1) => Function.Call(0xE891504B2F0E2DBA, p0, p1);
		public static void _0x9EB779765E68C52E(Any p0, Any p1) => Function.Call(0x9EB779765E68C52E, p0, p1);
		public static void _0xE9694B2D6CB87B06(int entity, Any p1) => Function.Call(0xE9694B2D6CB87B06, entity, p1);
		public static Any _0x886657C5B3D8EDE3(int entity) => Function.Call<Any>(0x886657C5B3D8EDE3, entity);
		public static Any _0xC68C02DE259C927C(Any p0) => Function.Call<Any>(0xC68C02DE259C927C, p0);
		public static Any _0x2FFF4A78384AFFDF(int entity) => Function.Call<Any>(0x2FFF4A78384AFFDF, entity);
		public static int _0x62377977E4F08668(int entity) => Function.Call<int>(0x62377977E4F08668, entity);
		public static Any _GET_PED_SONG_INDEX_HOST(int ped) => Function.Call<Any>(0x2DBBF0C5E19383EE, ped);
		public static Any _0xD05A460328560477(Any p0) => Function.Call<Any>(0xD05A460328560477, p0);
		public static void _0x8D29FDF565DED9AE(Any p0, Any p1, Any p2) => Function.Call(0x8D29FDF565DED9AE, p0, p1, p2);
		public static void _0x448F2647DD6F2E27(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x448F2647DD6F2E27, p0, p1, p2, p3, p4);
		public static void _0x139A4B9DF2D26CBF(Any p0, Any p1) => Function.Call(0x139A4B9DF2D26CBF, p0, p1);
		public static void _0x018ABE833CA64D2A(Any p0, Any p1) => Function.Call(0x018ABE833CA64D2A, p0, p1);
		public static void _0xBC07CA8FD710E7FD(Any p0, Any p1) => Function.Call(0xBC07CA8FD710E7FD, p0, p1);
		public static bool PREPARE_MUSIC_EVENT(string eventName) => Function.Call<bool>(0x1E5185B72EF5158A, eventName);
		public static bool CANCEL_MUSIC_EVENT(string eventName) => Function.Call<bool>(0x5B17A90291133DA5, eventName);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/audio/music_events/music_events.lua
		/// </summary>
		public static bool TRIGGER_MUSIC_EVENT(string eventName) => Function.Call<bool>(0x706D57B0F50DA710, eventName);
		public static Any _TRIGGER_MUSIC_EVENT_WITH_HASH(uint eventName) => Function.Call<Any>(0x05D6195FB4D428F4, eventName);
		public static int GET_MUSIC_PLAYTIME() => Function.Call<int>(0xE7A0D23DC414507B);
		public static void _0xF64034D533CE8AAC(Any p0, Any p1, Any p2) => Function.Call(0xF64034D533CE8AAC, p0, p1, p2);
		/// <summary>
		/// https://en.m.wikipedia.org/wiki/Walla
		/// </summary>
		public static void SET_PED_WALLA_DENSITY(float p0, float p1) => Function.Call(0x149AEE66F0CB3A99, p0, p1);
		public static void _0xDAD6CD07CAA4F382() => Function.Call(0xDAD6CD07CAA4F382);
		public static void SET_PED_INTERIOR_WALLA_DENSITY(float p0, float p1) => Function.Call(0x8BF907833BE275DE, p0, p1);
		public static void FORCE_PED_PANIC_WALLA() => Function.Call(0x062D5EAD4DA2FA6A);
		public static void _0x138ADB94F8B90616() => Function.Call(0x138ADB94F8B90616);
		public static void USE_FOOTSTEP_SCRIPT_SWEETENERS(int ped, bool p1, uint hash) => Function.Call(0xBF4DC1784BE94DFA, ped, p1, hash);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/audio/audio_flags
		/// </summary>
		public static void SET_AUDIO_FLAG(string flagName, bool toggle) => Function.Call(0xB9EFD5C25018725A, flagName, toggle);
		public static void _0x6DA15746D5CC1A92(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x6DA15746D5CC1A92, p0, p1, p2, p3, p4, p5);
		public static void _0x078F77FD1A43EAB3(Any p0, Any p1) => Function.Call(0x078F77FD1A43EAB3, p0, p1);
		public static void _0x3D0BBCCF401B5FDB() => Function.Call(0x3D0BBCCF401B5FDB);
		public static void SET_PORTAL_SETTINGS_OVERRIDE(string p0, string p1) => Function.Call(0x044DBAD7A7FA2BE5, p0, p1);
		public static void REMOVE_PORTAL_SETTINGS_OVERRIDE(string p0) => Function.Call(0xB4BBFD9CD8B3922B, p0);
		public static void _0xEA546C31FD45F8CD(Any p0) => Function.Call(0xEA546C31FD45F8CD, p0);
		public static Any _0x44A5EEF54F62E823(Any p0) => Function.Call<Any>(0x44A5EEF54F62E823, p0);
		public static void _0x017492B2201E3428(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x017492B2201E3428, p0, p1, p2, p3);
		public static void _0xC886CD666ADD42E1(Any p0, Any p1) => Function.Call(0xC886CD666ADD42E1, p0, p1);
		public static void _0x5AE0CB5F35F034FD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x5AE0CB5F35F034FD, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _0x821C32C728B24477(Any p0, Any p1, Any p2) => Function.Call(0x821C32C728B24477, p0, p1, p2);
		public static void _0x06C5DF5EE444BC6B(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x06C5DF5EE444BC6B, p0, p1, p2, p3, p4);
		public static void _0x341CDD17EFC2472E(Any p0, Any p1) => Function.Call(0x341CDD17EFC2472E, p0, p1);
		public static void _0x7E176C676F8652A9(Any p0) => Function.Call(0x7E176C676F8652A9, p0);
		public static Any _0x2B9C37C01BF25EDB(Any p0) => Function.Call<Any>(0x2B9C37C01BF25EDB, p0);
		public static Any _0xA6A3A3F96B8B030E() => Function.Call<Any>(0xA6A3A3F96B8B030E);
		/// <summary>
		/// Creates stream and returns streamId handle to be used with PLAY_STREAM_* natives
		/// https://github.com/femga/rdr3_discoveries/tree/master/audio/create_stream
		/// </summary>
		public static int _GET_LOADED_STREAM_ID_FROM_CREATION(string streamName, string soundSet) => Function.Call<int>(0x0556C784FA056628, streamName, soundSet);
		public static Any _0xC369E2234E34A0CA(Any p0, Any p1) => Function.Call<Any>(0xC369E2234E34A0CA, p0, p1);
		public static void _0x35B8C070E0C16E2F(Any p0, Any p1) => Function.Call(0x35B8C070E0C16E2F, p0, p1);
		public static void _0xE7E6CB8B713ED190() => Function.Call(0xE7E6CB8B713ED190);
		public static void _0x569ABC36E28DDEAA() => Function.Call(0x569ABC36E28DDEAA);
		public static void _0x839C9F124BE74D94(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x839C9F124BE74D94, p0, p1, p2, p3, p4);
		public static void AUDIO_TRIGGER_EXPLOSION(string name, float x, float y, float z) => Function.Call(0x374F0E716BFCDE82, name, x, y, z);
		public static void AUDIO_TRIGGER_EXPLOSION(string name, Vector3 vec) => Function.Call(0x374F0E716BFCDE82, name, vec.X, vec.Y, vec.Z);
		public static void _0x3E98AC9D8C56C62C(Any p0) => Function.Call(0x3E98AC9D8C56C62C, p0);
		public static void _0xCBF2BEBB468A34F3(Any p0) => Function.Call(0xCBF2BEBB468A34F3, p0);
		public static void _0xA2B851605748AD0E() => Function.Call(0xA2B851605748AD0E);
		public static void _0xCFAD2C8CD1054523(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xCFAD2C8CD1054523, p0, p1, p2, p3);
		public static void _0xD733528B6C35647A(Any p0, Any p1) => Function.Call(0xD733528B6C35647A, p0, p1);
		public static void _0x5BC885EBD75FAA7D(Any p0, Any p1) => Function.Call(0x5BC885EBD75FAA7D, p0, p1);
		public static void _0x6B7A88A61B41E589(Any p0) => Function.Call(0x6B7A88A61B41E589, p0);
		public static void _0x4BE3EC91C01F0FE8() => Function.Call(0x4BE3EC91C01F0FE8);
		public static void SET_AUDIO_ONLINE_TRANSITION_STAGE(string p0) => Function.Call(0x9B1FC259187C97C0, p0);
		public static void _STOP_ALL_SCRIPTED_AUDIO_SOUNDS() => Function.Call(0x2E399EAFBEEA74D5);
		public static void _0x64B956F4E761DF5C(Any p0) => Function.Call(0x64B956F4E761DF5C, p0);
	}

	public unsafe static class BOUNTY
	{
		public static bool _BOUNTY_REQUEST_PAY_OFF_BOUNTY(Any* outRpcGuid) => Function.Call<bool>(0x537CE992BD2D7BCB, outRpcGuid);
		public static bool _BOUNTY_REQUEST_PAY_OFF_BOUNTY_EX(Any* outRpcGuid, uint p1, uint costType) => Function.Call<bool>(0x587BCEC31D64F382, outRpcGuid, p1, costType);
		/// <summary>
		/// crimeType: see _REPORT_CRIME
		/// </summary>
		public static bool _BOUNTY_REQUEST_SELF_REPORT_CRIME(Any* outRpcGuid, uint crimeType, bool p2) => Function.Call<bool>(0x188B748861B5BA17, outRpcGuid, crimeType, p2);
		public static bool _BOUNTY_REQUEST_SELF_REPORT_KILLED_BY_BOUNTY_HUNTER(Any* outRpcGuid) => Function.Call<bool>(0xB462D69D406A2602, outRpcGuid);
		public static bool BOUNTY_GET_BOUNTY_ON_PLAYER(Any* gamerHandle, Any* bountyData) => Function.Call<bool>(0x4EF23E04A0C8FF51, gamerHandle, bountyData);
		public static bool _BOUNTY_IS_REQUEST_PENDING(Any* rpcGuid) => Function.Call<bool>(0x03B61CD51097DE60, rpcGuid);
		public static bool _BOUNTY_REQUEST_BEGIN_WANTED_POSTER(Any* outRpcGuid, int p1) => Function.Call<bool>(0xFFA13742E43507E3, outRpcGuid, p1);
		public static bool _0x81847C2134039BDC(Any* p0) => Function.Call<bool>(0x81847C2134039BDC, p0);
		public static bool _BOUNTY_REQUEST_COMPLETE_WANTED_POSTER(Any* outRpcGuid, Any* p1) => Function.Call<bool>(0x727AB6F008BB9F29, outRpcGuid, p1);
		public static bool _BOUNTY_REQUEST_COMPLETE_SPLIT_WANTED_POSTER(Any* outRpcGuid, Any* p1) => Function.Call<bool>(0xFBD137BF0EC50FC9, outRpcGuid, p1);
		public static void _BOUNTY_CANCEL_WANTED_POSTER() => Function.Call(0x6A9DF0FCD0C87FF9);
		public static bool BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION(Any* outRpcGuid, int p1, int p2) => Function.Call<bool>(0xFC81D7C7A151CFAA, outRpcGuid, p1, p2);
		public static bool BOUNTY_REQUEST_BEGIN_LEGENDARY_MISSION_FOR_POSSE(Any* outRpcGuid, int p1, int p2) => Function.Call<bool>(0x48E4E23F1739E197, outRpcGuid, p1, p2);
		public static bool _BOUNTY_REQUEST_COMPLETE_LEGENDARY_MISSION(Any* outRpcGuid, Any* p1) => Function.Call<bool>(0xA7309AC0DCF6D950, outRpcGuid, p1);
		public static void _BOUNTY_CANCEL_LEGENDARY_MISSION() => Function.Call(0x2BA1BCC99826CDA2);
		public static bool BOUNTY_GET_WANTED_POSTER_SLOT(uint p0, uint p1, Any* p2) => Function.Call<bool>(0xB395A44A0C7CA615, p0, p1, p2);
		public static bool BOUNTY_GET_LEGENDARY_TARGET(Any p0, Any* p1) => Function.Call<bool>(0x85E4D7B225A30ED1, p0, p1);
		/// <summary>
		/// _BOUNTY_C* or _BOUNTY_GET_*
		/// </summary>
		public static bool _0x86EC5F83867C4B70(Any* p0) => Function.Call<bool>(0x86EC5F83867C4B70, p0);
		public static bool BOUNTY_GET_COOLDOWN_COLLECTION(Any* p0) => Function.Call<bool>(0x8FAF4D262FABA99C, p0);
		public static bool _BOUNTY_REQUEST_BECOME_TARGET_OF_CHARACTER_BOUNTY_HUNT(Any* outRpcGuid) => Function.Call<bool>(0xB096547D61868254, outRpcGuid);
		/// <summary>
		/// _BOUNTY_IS_* or _BOUNTY_REQUEST_*
		/// </summary>
		public static bool _0x27D3A0E1FE090A43(Any* p0) => Function.Call<bool>(0x27D3A0E1FE090A43, p0);
		public static bool _BOUNTY_REQUEST_CLAIM_CHARACTER_BOUNTY(Any* outRpcGuid, int p1, Any* p2) => Function.Call<bool>(0xA9C3B0F746375162, outRpcGuid, p1, p2);
		public static bool _BOUNTY_REQUEST_POSSE_LEADER_CLAIM_CHARACTER_BOUNTY(Any* outRpcGuid, int p1, Any* p2) => Function.Call<bool>(0x5B53CA0E2AC3FF45, outRpcGuid, p1, p2);
		public static bool _BOUNTY_REQUEST_POSSE_MEMBER_CLAIM_CHARACTER_BOUNTY_SHARE(Any* outRpcGuid, Any* p1) => Function.Call<bool>(0x22D3A61CE053270C, outRpcGuid, p1);
		public static void _BOUNTY_CLEAR_BEING_BOUNTY_HUNTER() => Function.Call(0xA59D1997ECD99F0A);
		public static bool _BOUNTY_REQUEST_ESCAPED_CHARACTER_BOUNTY_HUNT(Any* outRpcGuid) => Function.Call<bool>(0x12E981D53B07BF48, outRpcGuid);
		public static bool _BOUNTY_REQUEST_POSSE_LEADER_ESCAPED_CHARACTER_BOUNTY_HUNT(Any* outRpcGuid) => Function.Call<bool>(0x2D874BA20E8E1F20, outRpcGuid);
		public static bool _BOUNTY_REQUEST_POSSE_MEMBER_ESCAPED_CHARACTER_BOUNTY_HUNT(Any* outRpcGuid) => Function.Call<bool>(0x8521C2E235558278, outRpcGuid);
		public static void _BOUNTY_CLEAR_BEING_TARGET() => Function.Call(0x932DB3C05A7465D1);
		public static bool _BOUNTY_REQUEST_SERVED_FULL_JAIL_SENTENCE(Any* outRpcGuid) => Function.Call<bool>(0x3F73AED12A5EF0FF, outRpcGuid);
		public static bool _BOUNTY_REQUEST_BRIBE_JAIL_GUARD(Any* outRpcGuid, int p1) => Function.Call<bool>(0x28717806D3BDD0D0, outRpcGuid, p1);
		/// <summary>
		/// _BOUNTY_GET_*
		/// </summary>
		public static int _0xF8BCC5ECA33AC9C1() => Function.Call<int>(0xF8BCC5ECA33AC9C1);
		/// <summary>
		/// _BOUNTY_GET_*
		/// </summary>
		public static int _0xD6A67E2FF373D0E3(int p0) => Function.Call<int>(0xD6A67E2FF373D0E3, p0);
	}

	public unsafe static class BRAIN
	{
		/// <summary>
		/// Registers a script for any object with a specific model hash.
		/// </summary>
		public static void REGISTER_OBJECT_SCRIPT_BRAIN(string scriptName, uint modelHash, int p2, float activationRange, int p4, int p5) => Function.Call(0x16AF9B4EEAC3B305, scriptName, modelHash, p2, activationRange, p4, p5);
		/// <summary>
		/// Returns threadId
		/// </summary>
		public static int _START_PRELOADED_SCRIPT_BRAIN(int entity, string scriptName, int scriptStackSize, bool p3) => Function.Call<int>(0x4E4507CC5E4DB869, entity, scriptName, scriptStackSize, p3);
		/// <summary>
		/// Returns threadId
		/// </summary>
		public static int _START_SCRIPT_BRAIN(int entity, string scriptName, int p2, Any* p3, int p4, bool p5) => Function.Call<int>(0x6F62FAE266DCFC81, entity, scriptName, p2, p3, p4, p5);
		public static void _REMOVE_SCRIPT_BRAIN_ENTITY(int entity) => Function.Call(0x38F1E09224EECA09, entity);
		public static int _GET_SCRIPT_BRAIN_ENTITY() => Function.Call<int>(0x6818D1A194E29983);
		/// <summary>
		/// Common flags: 250, 99999
		/// _SET_SCRIPT_BRAIN*
		/// </summary>
		public static void _0xA6AC35DB4A7957A8(int flag) => Function.Call(0xA6AC35DB4A7957A8, flag);
		/// <summary>
		/// Called with flag 0 before 0xA6AC35DB4A7957A8 in net_entity_brain
		/// _SET_SCRIPT_BRAIN*
		/// </summary>
		public static void _0x4AA5EA1EDFB25786(int flag) => Function.Call(0x4AA5EA1EDFB25786, flag);
		public static void ENABLE_SCRIPT_BRAIN_SET(int brainSet) => Function.Call(0x1CF6E5C6750EADBD, brainSet);
		public static void DISABLE_SCRIPT_BRAIN_SET(int brainSet) => Function.Call(0x3F44EA613A5B2676, brainSet);
		/// <summary>
		/// Called before starting a new thread_monitor script thread in startup_mp/startup_tlg
		/// Alternative name _REGISTER_SCRIPT_BRAIN
		/// 
		/// Old name: _PREPARE_SCRIPT_BRAIN
		/// </summary>
		public static void REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE() => Function.Call(0xA32B0B05EFF75730);
		public static void REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(string scriptName) => Function.Call(0x74C333E34DF74E8A, scriptName);
	}

	public unsafe static class CAM
	{
		/// <summary>
		/// ease - smooth transition between the camera's positions
		/// easeTime - Time in milliseconds for the transition to happen
		/// 
		/// If you have created a script (rendering) camera, and want to go back to the 
		/// character (gameplay) camera, call this native with render set to FALSE.
		/// Setting ease to TRUE will smooth the transition.
		/// </summary>
		public static void RENDER_SCRIPT_CAMS(bool render, bool ease, int easeTime, bool p3, bool p4, int p5) => Function.Call(0x33281167E4942E4F, render, ease, easeTime, p3, p4, p5);
		/// <summary>
		/// This native makes the gameplay camera zoom into first person/third person with a special effect.
		/// blendBackSmoothingType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eBlendBackSmoothing
		/// </summary>
		public static void STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(bool render, float distance, int blendBackSmoothingType, bool p3, bool p4, bool p5) => Function.Call(0x8C7C7FF7CF0E5153, render, distance, blendBackSmoothingType, p3, p4, p5);
		public static int CREATE_CAM(string camName, bool p1) => Function.Call<int>(0xE72CDBA7F0A02DD6, camName, p1);
		public static int CREATE_CAM_WITH_PARAMS(string camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, int p9) => Function.Call<int>(0x40C23491CE83708E, camName, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		public static int CREATE_CAM_WITH_PARAMS(string camName, Vector3 vec, Vector3 rotation, float fov, bool p8, int p9) => Function.Call<int>(0x40C23491CE83708E, camName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, fov, p8, p9);
		public static int CREATE_CAMERA(uint camHash, bool p1) => Function.Call<int>(0x57CDF879EA466C46, camHash, p1);
		public static int CREATE_CAMERA_WITH_PARAMS(uint camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, Any p9) => Function.Call<int>(0x98B99B9F27E2D60B, camHash, posX, posY, posZ, rotX, rotY, rotZ, fov, p8, p9);
		public static int CREATE_CAMERA_WITH_PARAMS(uint camHash, Vector3 vec, Vector3 rotation, float fov, bool p8, Any p9) => Function.Call<int>(0x98B99B9F27E2D60B, camHash, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, fov, p8, p9);
		/// <summary>
		/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		/// </summary>
		public static void DESTROY_CAM(int cam, bool p1) => Function.Call(0x4E67E0B6D7FD5145, cam, p1);
		/// <summary>
		/// BOOL param indicates whether the cam should be destroyed if it belongs to the calling script.
		/// </summary>
		public static void DESTROY_ALL_CAMS(bool p0) => Function.Call(0x163600D6E136C9F8, p0);
		/// <summary>
		/// Returns whether or not the passed camera handle exists.
		/// </summary>
		public static bool DOES_CAM_EXIST(int cam) => Function.Call<bool>(0x153AD457764FD704, cam);
		/// <summary>
		/// Set camera as active/inactive.
		/// </summary>
		public static void SET_CAM_ACTIVE(int cam, bool active) => Function.Call(0x87295BCA613800C8, cam, active);
		/// <summary>
		/// Returns whether or not the passed camera handle is active.
		/// </summary>
		public static bool IS_CAM_ACTIVE(int cam) => Function.Call<bool>(0x63EFCC7E1810B8E6, cam);
		public static bool IS_CAM_RENDERING(int cam) => Function.Call<bool>(0x4415F8A6C536D39F, cam);
		public static int GET_RENDERING_CAM() => Function.Call<int>(0x03A8931ECC8015D6);
		public static Vector3 GET_CAM_COORD(int cam) => Function.Call<Vector3>(0x6B12F11C2A9F0344, cam);
		/// <summary>
		/// rotationOrder: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEulerRotationOrder
		/// </summary>
		public static Vector3 GET_CAM_ROT(int cam, int rotationOrder) => Function.Call<Vector3>(0x9BF96B57254E7889, cam, rotationOrder);
		public static float FSFOV(int cam) => Function.Call<float>(0x8101D32A0A6B0F60, cam);
		public static void SET_CAM_PARAMS(int cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11, Any p12, Any p13) => Function.Call(0xA47BBFFFB83D4D0A, cam, posX, posY, posZ, rotX, rotY, rotZ, fieldOfView, p8, p9, p10, p11, p12, p13);
		public static void SET_CAM_PARAMS(int cam, Vector3 vec, Vector3 rotation, float fieldOfView, Any p8, int p9, int p10, int p11, Any p12, Any p13) => Function.Call(0xA47BBFFFB83D4D0A, cam, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, fieldOfView, p8, p9, p10, p11, p12, p13);
		/// <summary>
		/// Sets the position of the cam.
		/// </summary>
		public static void SET_CAM_COORD(int cam, float posX, float posY, float posZ) => Function.Call(0xF9EE7D419EE49DE6, cam, posX, posY, posZ);
		public static void SET_CAM_COORD(int cam, Vector3 vec) => Function.Call(0xF9EE7D419EE49DE6, cam, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Sets the rotation of the cam.
		/// </summary>
		public static void SET_CAM_ROT(int cam, float rotX, float rotY, float rotZ, int rotationOrder) => Function.Call(0x63DFA6810AD78719, cam, rotX, rotY, rotZ, rotationOrder);
		public static void SET_CAM_ROT(int cam, Vector3 rotation, int rotationOrder) => Function.Call(0x63DFA6810AD78719, cam, rotation.X, rotation.Y, rotation.Z, rotationOrder);
		/// <summary>
		/// Sets the field of view of the cam.
		/// 
		/// Min: 1.0f
		/// Max: 130.0f
		/// </summary>
		public static void SET_CAM_FOV(int cam, float fieldOfView) => Function.Call(0x27666E5988D9D429, cam, fieldOfView);
		public static void SET_CAM_NEAR_CLIP(int cam, float nearClip) => Function.Call(0xA924028272A61364, cam, nearClip);
		public static void SET_CAM_FAR_CLIP(int cam, float farClip) => Function.Call(0x5E32817BF6302111, cam, farClip);
		public static void SET_CAM_MOTION_BLUR_STRENGTH(int cam, float strength) => Function.Call(0x45FD891364181F9E, cam, strength);
		public static void _0xFC3F638BE2B6BB02() => Function.Call(0xFC3F638BE2B6BB02);
		public static void _0xE4B7945EF4F1BFB2(int cam, float* p1) => Function.Call(0xE4B7945EF4F1BFB2, cam, p1);
		public static void _0x1FC6C727D30FFDDE(Any p0) => Function.Call(0x1FC6C727D30FFDDE, p0);
		/// <summary>
		/// Last param determines if its relative to the Entity
		/// </summary>
		public static void ATTACH_CAM_TO_ENTITY(int cam, int entity, float xOffset, float yOffset, float zOffset, bool isRelative) => Function.Call(0xFDC0DF7F6FB0A592, cam, entity, xOffset, yOffset, zOffset, isRelative);
		public static void ATTACH_CAM_TO_ENTITY(int cam, int entity, Vector3 offset, bool isRelative) => Function.Call(0xFDC0DF7F6FB0A592, cam, entity, offset.X, offset.Y, offset.Z, isRelative);
		/// <summary>
		/// boneIndex: https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		/// </summary>
		public static void ATTACH_CAM_TO_PED_BONE(int cam, int ped, int boneIndex, float x, float y, float z, bool heading) => Function.Call(0xDFC1E4A44C0324CA, cam, ped, boneIndex, x, y, z, heading);
		public static void ATTACH_CAM_TO_PED_BONE(int cam, int ped, int boneIndex, Vector3 vec, bool heading) => Function.Call(0xDFC1E4A44C0324CA, cam, ped, boneIndex, vec.X, vec.Y, vec.Z, heading);
		public static void DETACH_CAM(int cam) => Function.Call(0x05B41DDBEB559556, cam);
		public static void POINT_CAM_AT_COORD(int cam, float x, float y, float z) => Function.Call(0x948B39341C3A40C2, cam, x, y, z);
		public static void POINT_CAM_AT_COORD(int cam, Vector3 vec) => Function.Call(0x948B39341C3A40C2, cam, vec.X, vec.Y, vec.Z);
		public static void POINT_CAM_AT_ENTITY(int cam, int entity, float p2, float p3, float p4, bool p5) => Function.Call(0xFC2867E6074D3A61, cam, entity, p2, p3, p4, p5);
		public static void STOP_CAM_POINTING(int cam) => Function.Call(0xCA1B30A3357C71F1, cam);
		public static void _SET_CAM_FOCUS_DISTANCE(int cam, float distance) => Function.Call(0x11F32BB61B756732, cam, distance);
		public static void _PAUSE_CAMERA_FOCUS(int cam, bool pause) => Function.Call(0x9F97E85EC142255E, cam, pause);
		/// <summary>
		/// Allows you to aim and shoot at the direction the camera is facing.
		/// </summary>
		public static void SET_CAM_AFFECTS_AIMING(int cam, bool toggle) => Function.Call(0x3CB9E8BDE5E76F33, cam, toggle);
		public static void SET_CAM_CONTROLS_MINI_MAP_HEADING(int cam, bool p1) => Function.Call(0x1B8F3CE5A6001298, cam, p1);
		public static void ALLOW_MOTION_BLUR_DECAY(int cam, bool p1) => Function.Call(0x42ED56B02E05D109, cam, p1);
		/// <summary>
		/// p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
		/// 
		/// p8 big values ~100 will slow down the camera movement before reaching this node
		/// 
		/// p9 != 0 seems to override the rotation/pitch (bool?)
		/// </summary>
		public static void ADD_CAM_SPLINE_NODE(int camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int p8, int p9) => Function.Call(0xF1F57F9D230F9CD1, camera, x, y, z, xRot, yRot, zRot, length, p8, p9);
		public static void ADD_CAM_SPLINE_NODE(int camera, Vector3 vec, Vector3 rotation, int length, int p8, int p9) => Function.Call(0xF1F57F9D230F9CD1, camera, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, length, p8, p9);
		public static void SET_CAM_SPLINE_PHASE(int cam, float p1) => Function.Call(0xF1898A68E7C15636, cam, p1);
		/// <summary>
		/// Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
		/// 
		/// (returns 1.0f when no nodes has been added, reached end of non existing spline)
		/// </summary>
		public static float GET_CAM_SPLINE_PHASE(int cam) => Function.Call<float>(0x095EDCD24D90033A, cam);
		public static void SET_CAM_SPLINE_DURATION(int cam, int timeDuration) => Function.Call(0xFF6311652CA91015, cam, timeDuration);
		public static void SET_CAM_SPLINE_SMOOTHING_STYLE(int cam, int smoothingStyle) => Function.Call(0x84B3645618E726B0, cam, smoothingStyle);
		public static void SET_CAM_ACTIVE_WITH_INTERP(int camTo, int camFrom, int duration, int easeLocation, int easeRotation) => Function.Call(0x8B15AE2987C1AC8F, camTo, camFrom, duration, easeLocation, easeRotation);
		public static bool IS_CAM_INTERPOLATING(int cam) => Function.Call<bool>(0x578F8F1CAA17BD2B, cam);
		public static void SHAKE_CAM(int cam, string type, float amplitude) => Function.Call(0xF9A7BCF5D050D4E7, cam, type, amplitude);
		public static bool IS_CAM_SHAKING(int cam) => Function.Call<bool>(0x2EEB402BD7320159, cam);
		public static void STOP_CAM_SHAKING(int cam, bool p1) => Function.Call(0xB78CC4B4706614B0, cam, p1);
		public static bool PLAY_CAM_ANIM(int cam, string animName, string animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, bool p9, int p10) => Function.Call<bool>(0xA263DDF694D563F6, cam, animName, animDictionary, x, y, z, xRot, yRot, zRot, p9, p10);
		public static bool PLAY_CAM_ANIM(int cam, string animName, string animDictionary, Vector3 vec, Vector3 rotation, bool p9, int p10) => Function.Call<bool>(0xA263DDF694D563F6, cam, animName, animDictionary, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p9, p10);
		public static void _0xCF69EA05CD9C33C9() => Function.Call(0xCF69EA05CD9C33C9);
		/// <summary>
		/// Only used in R* Script camera_photomode
		/// </summary>
		public static bool _IS_ANIM_SCENE_CAM_ACTIVE() => Function.Call<bool>(0x20389408F0E93B9A);
		public static bool IS_SCREEN_FADED_OUT() => Function.Call<bool>(0xF5472C80DF2FF847);
		public static bool IS_SCREEN_FADED_IN() => Function.Call<bool>(0x37F9A426FBCF4AF2);
		public static bool IS_SCREEN_FADING_OUT() => Function.Call<bool>(0x02F39BEFE7B88D00);
		public static bool IS_SCREEN_FADING_IN() => Function.Call<bool>(0x0CECCC63FFA2EF24);
		/// <summary>
		/// Fades the screen in.
		/// 
		/// duration: The time the fade should take, in milliseconds.
		/// </summary>
		public static void DO_SCREEN_FADE_IN(int duration) => Function.Call(0x6A053CF596F67DF7, duration);
		/// <summary>
		/// Fades the screen out.
		/// 
		/// duration: The time the fade should take, in milliseconds.
		/// </summary>
		public static void DO_SCREEN_FADE_OUT(int duration) => Function.Call(0x40C719A5E410B9E4, duration);
		/// <summary>
		/// More info: https://en.wikipedia.org/wiki/Letterboxing_(filming)
		/// </summary>
		public static bool HAS_LETTER_BOX() => Function.Call<bool>(0x81DCFD13CF39920E);
		/// <summary>
		/// Creates Cinematic Black Bars (at top and bottom)
		/// Disable instantly: false/false, Enable instantly: true/true
		/// </summary>
		public static void _REQUEST_LETTER_BOX_NOW(bool p0, bool p1) => Function.Call(0x69D65E89FFD72313, p0, p1);
		public static void _REQUEST_LETTER_BOX_OVERTIME(int p0, int p1, bool p2, int p3, bool p4, bool p5) => Function.Call(0xE296208C273BD7F0, p0, p1, p2, p3, p4, p5);
		public static void _FORCE_LETTER_BOX_THIS_UPDATE() => Function.Call(0xC64ABC0676AF262B);
		/// <summary>
		/// More info: see HAS_LETTER_BOX
		/// </summary>
		public static float GET_LETTER_BOX_RATIO() => Function.Call<float>(0xA2B1C7EF759A63CE);
		public static Any _0x73FF6BE63DC18819() => Function.Call<Any>(0x73FF6BE63DC18819);
		public static Any _0x450769C833D58844() => Function.Call<Any>(0x450769C833D58844);
		public static void SET_WIDESCREEN_BORDERS(bool p0, int p1) => Function.Call(0xD7F4D54CF80AFA34, p0, p1);
		public static Vector3 GET_GAMEPLAY_CAM_COORD() => Function.Call<Vector3>(0x595320200B98596E);
		public static Vector3 GET_GAMEPLAY_CAM_ROT(int rotationOrder) => Function.Call<Vector3>(0x0252D2B5582957A6, rotationOrder);
		public static float GET_GAMEPLAY_CAM_FOV() => Function.Call<float>(0xF6A96E5ACEEC6E50);
		public static void SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(float p0) => Function.Call(0x8459B3E64257B21D, p0);
		public static float GET_GAMEPLAY_CAM_RELATIVE_HEADING() => Function.Call<float>(0xC4ABF536048998AA);
		/// <summary>
		/// Sets the camera position relative to heading in float from -360 to +360.
		/// 
		/// Heading is always 0 in aiming camera.
		/// </summary>
		public static void SET_GAMEPLAY_CAM_RELATIVE_HEADING(float heading, float p1) => Function.Call(0x5D1EB123EAC5D071, heading, p1);
		public static float GET_GAMEPLAY_CAM_RELATIVE_PITCH() => Function.Call<float>(0x99AADEBBA803F827);
		/// <summary>
		/// Sets the camera pitch.
		/// 
		/// Parameters:
		/// x = pitches the camera on the x axis.
		/// Value2 = always seems to be hex 0x3F800000 (1.000000 float).
		/// </summary>
		public static void SET_GAMEPLAY_CAM_RELATIVE_PITCH(float x, float Value2) => Function.Call(0xFB760AF4F537B8BF, x, Value2);
		public static void _0x0961B089947BA6D0(Any p0) => Function.Call(0x0961B089947BA6D0, p0);
		public static void _0x04084490CC302CFB() => Function.Call(0x04084490CC302CFB);
		public static void SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(bool p0) => Function.Call(0x1DD95A8D6B24A0C9, p0);
		/// <summary>
		/// Returns true if player is in first person
		/// </summary>
		public static bool _IS_IN_FULL_FIRST_PERSON_MODE() => Function.Call<bool>(0xD1BA66940E94C547);
		public static void SHAKE_GAMEPLAY_CAM(string shakeName, float intensity) => Function.Call(0xD9B31B4650520529, shakeName, intensity);
		/// <summary>
		/// shakeName: REINFORCED_LASSO_STRUGGLE_SHAKE
		/// _RES*
		/// </summary>
		public static void _0xC3E9E5D4F413B773(string shakeName, float intensity) => Function.Call(0xC3E9E5D4F413B773, shakeName, intensity);
		public static bool IS_GAMEPLAY_CAM_SHAKING() => Function.Call<bool>(0xEA4C5F4AA0A4DBEF);
		/// <summary>
		/// shakeNames in script_rel: CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, POV_DRUNK_SHAKE, DRUNK_SHAKE, MINIGAME_TRAIN_SHAKE
		/// _IS_GAMEPLAY_*
		/// </summary>
		public static bool _0x0060B31968E60E41(string shakeName) => Function.Call<bool>(0x0060B31968E60E41, shakeName);
		/// <summary>
		/// Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake.
		/// </summary>
		public static void SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(float amplitude) => Function.Call(0x570E35F5C4A44838, amplitude);
		/// <summary>
		/// _SET_GAMEPLAY_P* - _SET_GAMEPLAY_V*
		/// </summary>
		public static void _0xFEFDDC6E8FDF8A75(string shakeName, float intensity) => Function.Call(0xFEFDDC6E8FDF8A75, shakeName, intensity);
		public static void STOP_GAMEPLAY_CAM_SHAKING(bool p0) => Function.Call(0xE0DE43D290FB65F9, p0);
		/// <summary>
		/// script_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE, CORRECTOR_SHAKE, MINIGAME_BOUNTY_SHAKE, HAND_SHAKE, MINIGAME_TRAIN_SHAKE
		/// script_mp_rel: DRUNK_SHAKE, REINFORCED_LASSO_STRUGGLE_SHAKE
		/// _STOP_GAMEPLAY_CAM* - _STOP_I*
		/// </summary>
		public static void _0x4285804FD65D8066(string shakeName, bool p1) => Function.Call(0x4285804FD65D8066, shakeName, p1);
		/// <summary>
		/// Forces gameplay cam to specified ped as if you were the ped or spectating it
		/// </summary>
		public static void SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(int ped) => Function.Call(0x82E41D6ADE924FCA, ped);
		public static bool IS_GAMEPLAY_CAM_RENDERING() => Function.Call<bool>(0x8660EA714834E412);
		public static bool IS_INTERPOLATING_FROM_SCRIPT_CAMS() => Function.Call<bool>(0x251241CAEC707106);
		public static bool IS_INTERPOLATING_TO_SCRIPT_CAMS() => Function.Call<bool>(0x43AB9D5A7D415478);
		public static bool IS_GAMEPLAY_CAM_LOOKING_BEHIND() => Function.Call<bool>(0x8FE0D24FFD04D5A2);
		/// <summary>
		/// Old name: _DISABLE_CAM_COLLISION_FOR_ENTITY
		/// </summary>
		public static void SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(int entity) => Function.Call(0xD904F75DBD7AB865, entity);
		public static void DISABLE_CAM_COLLISION_FOR_OBJECT(int entity) => Function.Call(0x7E3F546ACFE6C8D9, entity);
		public static void _0x39073DA4EDDBC91D(Any p0) => Function.Call(0x39073DA4EDDBC91D, p0);
		public static void _0x70A6658D476C6187() => Function.Call(0x70A6658D476C6187);
		public static void _0x18C3DFAC458783BB() => Function.Call(0x18C3DFAC458783BB);
		public static void _0xF1A6FEEDF3776EF9() => Function.Call(0xF1A6FEEDF3776EF9);
		public static void _0xE6F364DE6C2FDEFE() => Function.Call(0xE6F364DE6C2FDEFE);
		/// <summary>
		/// NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
		/// _DISABLE_*
		/// </summary>
		public static void _0x0F1FFEF5D54AE832() => Function.Call(0x0F1FFEF5D54AE832);
		public static void _0x3C8F74E8FE751614() => Function.Call(0x3C8F74E8FE751614);
		public static void _0x06557F6D96C86881() => Function.Call(0x06557F6D96C86881);
		public static bool IS_SPHERE_VISIBLE(float x, float y, float z, float radius) => Function.Call<bool>(0x2E941B5FFA2989C6, x, y, z, radius);
		public static bool IS_SPHERE_VISIBLE(Vector3 vec, float radius) => Function.Call<bool>(0x2E941B5FFA2989C6, vec.X, vec.Y, vec.Z, radius);
		public static Any _0x190F7DA1AC09A8EF() => Function.Call<Any>(0x190F7DA1AC09A8EF);
		/// <summary>
		/// Used in Script Function SHOP_CAMERA_SUPPORT_START_NEW_ORBIT
		/// </summary>
		public static void _SET_GAMEPLAY_CAM_INITIAL_ZOOM(float camInitialZoom) => Function.Call(0xBCDA0BA8762FACB9, camInitialZoom);
		public static void _SET_GAMEPLAY_CAM_INITIAL_HEADING(float camInitialHeading) => Function.Call(0x6C1053C433A573CF, camInitialHeading);
		public static void _SET_GAMEPLAY_CAM_INITIAL_PITCH(float camInitialPitch) => Function.Call(0x449995EA846D3FC2, camInitialPitch);
		/// <summary>
		/// minimum: Degrees between -180f and 180f.
		/// maximum: Degrees between -180f and 180f.
		/// 
		/// Clamps the gameplay camera's current yaw.
		/// 
		/// Eg. _CLAMP_GAMEPLAY_CAM_YAW(0.0f, 0.0f) will set the horizontal angle directly behind the player.
		/// 
		/// Old name: _CLAMP_GAMEPLAY_CAM_YAW
		/// </summary>
		public static void SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float minimum, float maximum) => Function.Call(0x14F3947318CA8AD2, minimum, maximum);
		/// <summary>
		/// minimum: Degrees between -90f and 90f.
		/// maximum: Degrees between -90f and 90f.
		/// 
		/// Clamps the gameplay camera's current pitch.
		/// 
		/// Eg. _CLAMP_GAMEPLAY_CAM_PITCH(0.0f, 0.0f) will set the vertical angle directly behind the player.
		/// 
		/// Old name: _CLAMP_GAMEPLAY_CAM_PITCH
		/// </summary>
		public static void SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float minimum, float maximum) => Function.Call(0x326C7AA308F3DF6A, minimum, maximum);
		/// <summary>
		/// Old name: _ANIMATE_GAMEPLAY_CAM_ZOOM
		/// </summary>
		public static void SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(float p0, float distance) => Function.Call(0x2126C740A4AC370B, p0, distance);
		/// <summary>
		/// Forces gameplay cam to specified vehicle as if you were in it
		/// </summary>
		public static void SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(int vehicle, int p1) => Function.Call(0xFA1D5E8D1C3CCD67, vehicle, p1);
		/// <summary>
		/// Old name: _DISABLE_FIRST_PERSON_CAM_THIS_FRAME
		/// </summary>
		public static void DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE() => Function.Call(0x9C473089A934C930);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE() => Function.Call(0x77D65669A05D1A1A);
		public static void _DISABLE_CINEMATIC_MODE_THIS_FRAME() => Function.Call(0x8910C24B7E0046EC);
		public static bool _IS_IN_CINEMATIC_MODE() => Function.Call<bool>(0x74F1D22EFA71FAB8);
		public static void _0x718C6ECF5E8CBDD4() => Function.Call(0x718C6ECF5E8CBDD4);
		/// <summary>
		/// Forces camera position to second furthest 3rd person
		/// </summary>
		public static void _FORCE_THIRD_PERSON_CAM_THIS_FRAME() => Function.Call(0x8370D34BD2E60B73);
		/// <summary>
		/// Forces camera position to furthest 3rd person
		/// </summary>
		public static void _FORCE_THIRD_PERSON_CAM_FAR_THIS_FRAME() => Function.Call(0x1CFB749AD4317BDE);
		/// <summary>
		/// Returns true if first person camera is active in saloon1.ysc
		/// </summary>
		public static bool _FORCE_FIRST_PERSON_CAM_THIS_FRAME() => Function.Call<bool>(0x90DA5BA5C2635416);
		/// <summary>
		/// Does the same as 0x9C473089A934C930
		/// </summary>
		public static void _DISABLE_FIRST_PERSON_CAM_THIS_FRAME_2() => Function.Call(0x05AB44D906738426);
		public static void _0x632BE8D84846FA56() => Function.Call(0x632BE8D84846FA56);
		public static void _0x71D71E08A7ED5BD7(Any p0) => Function.Call(0x71D71E08A7ED5BD7, p0);
		public static bool IS_FOLLOW_VEHICLE_CAM_ACTIVE() => Function.Call<bool>(0xA40C2F51FB589E9A);
		public static void _0x7E40A01B11398FCB() => Function.Call(0x7E40A01B11398FCB);
		public static bool IS_AIM_CAM_ACTIVE() => Function.Call<bool>(0x698F456FB909E077);
		public static bool IS_FIRST_PERSON_AIM_CAM_ACTIVE() => Function.Call<bool>(0xF63134C54B6EC212);
		public static bool IS_FIRST_PERSON_CAMERA_ACTIVE(Any p0, Any p1, Any p2) => Function.Call<bool>(0xA24C1D341C6E0D53, p0, p1, p2);
		public static Any _0xDC62CD70658E7A02() => Function.Call<Any>(0xDC62CD70658E7A02);
		public static Any _0x796085220ADCC847() => Function.Call<Any>(0x796085220ADCC847);
		public static Any _0xB6A80E1E3A5444F1() => Function.Call<Any>(0xB6A80E1E3A5444F1);
		public static Any _0x8B1A5FE7E41E52B2() => Function.Call<Any>(0x8B1A5FE7E41E52B2);
		public static float GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR() => Function.Call<float>(0xB4132CA1B0EE1365);
		public static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float p0, float p1) => Function.Call(0x05BD5E4088B30A66, p0, p1);
		/// <summary>
		/// Old name: _SET_FIRST_PERSON_CAM_PITCH_RANGE
		/// </summary>
		public static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float p0, float p1) => Function.Call(0x715B7F5E8BED32A2, p0, p1);
		public static void _0xC205B3C54C6A4E37(Any p0) => Function.Call(0xC205B3C54C6A4E37, p0);
		public static Vector3 GET_FINAL_RENDERED_CAM_COORD() => Function.Call<Vector3>(0x5352E025EC2B416F);
		public static Vector3 GET_FINAL_RENDERED_CAM_ROT(int rotationOrder) => Function.Call<Vector3>(0x602685BD85DD26CA, rotationOrder);
		public static float GET_FINAL_RENDERED_CAM_FOV() => Function.Call<float>(0x04AF77971E508F6A);
		public static void SET_GAMEPLAY_COORD_HINT(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int unk) => Function.Call(0xFA33B8C69A4A6A0F, x, y, z, duration, blendOutDuration, blendInDuration, unk);
		public static void SET_GAMEPLAY_COORD_HINT(Vector3 vec, int duration, int blendOutDuration, int blendInDuration, int unk) => Function.Call(0xFA33B8C69A4A6A0F, vec.X, vec.Y, vec.Z, duration, blendOutDuration, blendInDuration, unk);
		public static void SET_GAMEPLAY_PED_HINT(int p0, float x1, float y1, float z1, bool p4, Any p5, Any p6, Any p7) => Function.Call(0x90FB951648851733, p0, x1, y1, z1, p4, p5, p6, p7);
		public static void SET_GAMEPLAY_PED_HINT(int p0, Vector3 vec1, bool p4, Any p5, Any p6, Any p7) => Function.Call(0x90FB951648851733, p0, vec1.X, vec1.Y, vec1.Z, p4, p5, p6, p7);
		public static void SET_GAMEPLAY_VEHICLE_HINT(Any p0, float p1, float p2, float p3, bool p4, Any p5, Any p6, Any p7) => Function.Call(0xE2B2BB7DAC280515, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void SET_GAMEPLAY_OBJECT_HINT(Any p0, float p1, float p2, float p3, bool p4, Any p5, Any p6, Any p7) => Function.Call(0xC40551D65F2BF297, p0, p1, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// p6 & p7 - possibly length or time
		/// </summary>
		public static void SET_GAMEPLAY_ENTITY_HINT(int entity, float xOffset, float yOffset, float zOffset, bool p4, int p5, int p6, int p7, Any p8) => Function.Call(0xD1F7F32640ADFD12, entity, xOffset, yOffset, zOffset, p4, p5, p6, p7, p8);
		public static void SET_GAMEPLAY_ENTITY_HINT(int entity, Vector3 offset, bool p4, int p5, int p6, int p7, Any p8) => Function.Call(0xD1F7F32640ADFD12, entity, offset.X, offset.Y, offset.Z, p4, p5, p6, p7, p8);
		public static bool IS_GAMEPLAY_HINT_ACTIVE() => Function.Call<bool>(0x2E04AB5FEE042D4A);
		public static void STOP_GAMEPLAY_HINT(bool p0) => Function.Call(0x1BCEC33D54CFCA8A, p0);
		public static void STOP_CODE_GAMEPLAY_HINT(bool p0) => Function.Call(0x93759A83D0D844E7, p0);
		/// <summary>
		/// UPDATE_PLAYER_PLAYING_STATE - Releasing Lasso Hint Cam
		/// Return type char in ida
		/// _SET_GAMEPLAY_HINT_*
		/// </summary>
		public static void _0x88544C0E3291DCAE(bool p0) => Function.Call(0x88544C0E3291DCAE, p0);
		public static void SET_GAMEPLAY_HINT_FOV(float FOV) => Function.Call(0x661E58BC6F00A49A, FOV);
		public static void SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(float p0) => Function.Call(0xDDDC54181868F81F, p0);
		public static void SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(float p0) => Function.Call(0x421192A2DA48FD01, p0);
		/// <summary>
		/// Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETX
		/// </summary>
		public static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(float p0) => Function.Call(0xF86B6F93727C59C9, p0);
		/// <summary>
		/// Old name: _SET_GAMEPLAY_HINT_ANIM_OFFSETY
		/// </summary>
		public static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(float p0) => Function.Call(0x29E74F819150CC32, p0);
		public static void _0xF48664E9C83825E3(Any p0, Any p1) => Function.Call(0xF48664E9C83825E3, p0, p1);
		public static void _0x1F6EBD94680252CE(Any p0, Any p1) => Function.Call(0x1F6EBD94680252CE, p0, p1);
		public static void _0xE28F73212A813E82(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xE28F73212A813E82, p0, p1, p2, p3);
		public static void _0x4D2F46D1B28D90FB(Any p0, Any p1) => Function.Call(0x4D2F46D1B28D90FB, p0, p1);
		/// <summary>
		/// [SHOP_CAMERA_SUPPORT_START_NEW_ORBIT]
		/// p0: struct<32> /*256*/
		/// </summary>
		public static void _START_CAMERA_ORBIT(Any* p0) => Function.Call(0x65B205BF30C13DDB, p0);
		public static void _0x641092322A8852AB() => Function.Call(0x641092322A8852AB);
		public static void _0xDB382FE20C2DA222(Any p0) => Function.Call(0xDB382FE20C2DA222, p0);
		public static void _0x2DD3149DC34A3F4C(Any p0) => Function.Call(0x2DD3149DC34A3F4C, p0);
		public static void _FREEZE_GAMEPLAY_CAM_THIS_FRAME() => Function.Call(0x027CAB2C3AF27010);
		public static void _0x3C486E334520579D() => Function.Call(0x3C486E334520579D);
		public static void _0x41E452A3C580D1A7() => Function.Call(0x41E452A3C580D1A7);
		public static void SET_CINEMATIC_BUTTON_ACTIVE(bool p0) => Function.Call(0xB90411F480457A6C, p0);
		public static bool IS_CINEMATIC_CAM_RENDERING() => Function.Call<bool>(0xBF7C780731AADBF8);
		/// <summary>
		/// Old name: _DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME
		/// </summary>
		public static void DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE() => Function.Call(0xA5929C2E57AC90D1);
		/// <summary>
		/// Old name: _INVALIDATE_VEHICLE_IDLE_CAM
		/// </summary>
		public static void INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE() => Function.Call(0x634F4A0562CF19B8);
		public static void FORCE_CINEMATIC_RENDERING_THIS_UPDATE(bool p0) => Function.Call(0x702B75DC9D3EDE56, p0);
		public static void _0x9AC65A36D3C0C189(Any p0) => Function.Call(0x9AC65A36D3C0C189, p0);
		/// <summary>
		/// _IS_SCRIPTED_S*
		/// </summary>
		public static bool _0x975F6EBB62632FE3() => Function.Call<bool>(0x975F6EBB62632FE3);
		public static void SET_CINEMATIC_MODE_ACTIVE(bool p0) => Function.Call(0xCE7A90B160F75046, p0);
		public static bool _0x1811A02277A9E49D() => Function.Call<bool>(0x1811A02277A9E49D);
		/// <summary>
		/// Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
		/// Params: targetPed = death cam focuses on it
		/// </summary>
		public static void _FORCE_CINEMATIC_DEATH_CAM_ON_PED(int targetPed) => Function.Call(0xE3639DB78B3B5400, targetPed);
		public static void _0x986F7A51EE3E1F92(Any p0, Any p1) => Function.Call(0x986F7A51EE3E1F92, p0, p1);
		public static void _0x5B637D6F3B67716A(Any p0) => Function.Call(0x5B637D6F3B67716A, p0);
		public static void _0xC252C0CC969AF79A(Any p0) => Function.Call(0xC252C0CC969AF79A, p0);
		public static void _0xE2BB2D6A9FE2ECDE(Any p0) => Function.Call(0xE2BB2D6A9FE2ECDE, p0);
		/// <summary>
		/// Used for DUELING_MANAGE_DEATH_CAMERA - Initializing death camera
		/// _SET_P* - _SET_S*
		/// </summary>
		public static void _SET_START_CINEMATIC_DEATH_CAM(bool p0) => Function.Call(0x6E969927CF632608, p0);
		public static Any _0x6072B7420A83A03F() => Function.Call<Any>(0x6072B7420A83A03F);
		/// <summary>
		/// Used for DUELING_LOCK_CAMERA_CONTROLS_THIS_FRAME: Disabling look/aim controls
		/// _IS_SC(REEN_)* (?)
		/// </summary>
		public static bool _0x1204EB53A5FBC63D() => Function.Call<bool>(0x1204EB53A5FBC63D);
		public static void _0x6519238858AF5479(Any p0) => Function.Call(0x6519238858AF5479, p0);
		/// <summary>
		/// Creates Kill Cam for specified Ped Handle
		/// </summary>
		public static void _CREATE_KILL_CAM(int ped) => Function.Call(0x2F994CC29CAA9D22, ped);
		public static bool _IS_CAM_PHOTOFX_RUNNING() => Function.Call<bool>(0xA14D5FE82BCB1D9E);
		public static Any _0x6DFD37E586D4F44F() => Function.Call<Any>(0x6DFD37E586D4F44F);
		public static Any _0x80D7A3E39B120BC4() => Function.Call<Any>(0x80D7A3E39B120BC4);
		public static void _0x63E5841A9264D016(Any p0) => Function.Call(0x63E5841A9264D016, p0);
		public static void _TRIGGER_MISSION_FAILED_CAM() => Function.Call(0x9A92C06ACBAF9731);
		public static void _0x16E9ABDD34DDD931() => Function.Call(0x16E9ABDD34DDD931);
		public static bool IS_DEATH_FAIL_CAMERA_RUNNING() => Function.Call<bool>(0x139EFB0A71DD9011);
		public static Any _0x7CE9DC58E3E4755F() => Function.Call<Any>(0x7CE9DC58E3E4755F);
		public static void _0x3B8E3AD9677CE12B(Any p0, Any p1, Any p2) => Function.Call(0x3B8E3AD9677CE12B, p0, p1, p2);
		public static void _0xDF7F5BE9150E47E4(Any p0) => Function.Call(0xDF7F5BE9150E47E4, p0);
		public static void _0xB85C13E0BF1F2A1C(Any p0) => Function.Call(0xB85C13E0BF1F2A1C, p0);
		public static void _0x066167C63111D8CF(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x066167C63111D8CF, p0, p1, p2, p3, p4);
		/// <summary>
		/// NPLOI_UPDATE__GUN_SPINNING_PREVIEW - Adjusting Camera / Ped Reset Flags This Frame
		/// _DISABLE_*
		/// </summary>
		public static void _0xA8BA2E0204D8486F() => Function.Call(0xA8BA2E0204D8486F);
		/// <summary>
		/// Camera will be or is running
		/// </summary>
		public static void _0xC3742F1FDF0A6824() => Function.Call(0xC3742F1FDF0A6824);
		public static void _0x0FF7125F07DEB84F(Any p0, Any p1) => Function.Call(0x0FF7125F07DEB84F, p0, p1);
		public static void _0x6CAB0BA160B168D2() => Function.Call(0x6CAB0BA160B168D2);
		public static void _LOAD_CINEMATIC_CAM_LOCATION(string locationDictName) => Function.Call(0x1B3C2D961F5FC0E1, locationDictName);
		public static void _UNLOAD_CINEMATIC_CAMERA_LOCATION(string dictionaryName) => Function.Call(0x2412216FCC7B4E3E, dictionaryName);
		public static bool _0xAA235E2F2C09E952(string sLocationDictName) => Function.Call<bool>(0xAA235E2F2C09E952, sLocationDictName);
		/// <summary>
		/// Checks data related to Cinematic Cam Locations, if the check fails, the location is being loaded using 0x1B3C2D961F5FC0E1.
		/// </summary>
		public static bool _0x595550376B7EA230(string locationDictName) => Function.Call<bool>(0x595550376B7EA230, locationDictName);
		public static Any _0x465F04F68AD38197(string dictionary, string shotName, int duration) => Function.Call<Any>(0x465F04F68AD38197, dictionary, shotName, duration);
		public static Any _0xEA113BF9B0C0C5D7(string dictionary, string shotName, int duration) => Function.Call<Any>(0xEA113BF9B0C0C5D7, dictionary, shotName, duration);
		public static void _CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT_2(string dictionary, string shotName, int duration) => Function.Call(0xBC016635D6A73B31, dictionary, shotName, duration);
		public static void CINEMATIC_LOCATION_TRIGGER_SCRIPTED_SHOT_EVENT(string dictionary, string shotName, string cameraName, Any p3) => Function.Call(0x02389579A53C3276, dictionary, shotName, cameraName, p3);
		public static void _0xA54D643D0773EB65(string dictionary, string shotName, int duration) => Function.Call(0xA54D643D0773EB65, dictionary, shotName, duration);
		public static void CINEMATIC_LOCATION_STOP_SCRIPTED_SHOT_EVENT(Any p0, Any p1, Any p2) => Function.Call(0x6D4D25C2137FF511, p0, p1, p2);
		public static bool _0xC3AEBB276825A359(string dictionary, string shotName, int duration) => Function.Call<bool>(0xC3AEBB276825A359, dictionary, shotName, duration);
		public static bool _0x1D931B7CC0EE3956(string dictionary, string shotName, string cameraName) => Function.Call<bool>(0x1D931B7CC0EE3956, dictionary, shotName, cameraName);
		public static void _CINEMATIC_LOCATION_SET_LOCATION_AND_ROTATION(string name, float x, float y, float z, float rotX, float rotY, float rotZ) => Function.Call(0x0E94C95EC3185FA9, name, x, y, z, rotX, rotY, rotZ);
		public static void _CINEMATIC_LOCATION_SET_LOCATION_AND_ROTATION(string name, Vector3 vec, Vector3 rotation) => Function.Call(0x0E94C95EC3185FA9, name, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z);
		/// <summary>
		/// Only used in R* Script fm_mission_controller
		/// </summary>
		public static void CINEMATIC_LOCATION_OVERRIDE_TARGET_ENTITY_THIS_UPDATE(string name, int entity) => Function.Call(0x0B0F914459731F60, name, entity);
		public static void _LOAD_CAMERA_DATA_DICT(string cameraDictionary) => Function.Call(0x6A4D224FC7643941, cameraDictionary);
		public static void _UNLOAD_CAMERA_DATA_DICT(string cameraDictionary) => Function.Call(0x798BE43C9393632B, cameraDictionary);
		public static bool _IS_CAM_DATA_DICT_LOADED(string cameraDictionary) => Function.Call<bool>(0xDD0B7C5AE58F721D, cameraDictionary);
		public static Any _0xC285FD21294A1C49(Any p0) => Function.Call<Any>(0xC285FD21294A1C49, p0);
		public static void _CAM_CREATE(string cameraDictionary) => Function.Call(0xB8B207C34285E978, cameraDictionary);
		public static void _CAM_DESTROY(string cameraDictionary) => Function.Call(0x0A5A4F1979ABB40E, cameraDictionary);
		public static bool _IS_CAMERA_AVAILABLE(string cameraDictionary) => Function.Call<bool>(0x927B810E43E99932, cameraDictionary);
		public static Any _0x4138EE36BC3DC0A7(Any p0, Any p1) => Function.Call<Any>(0x4138EE36BC3DC0A7, p0, p1);
		public static void _0xFEB8646818294C75(Any p0, Any p1) => Function.Call(0xFEB8646818294C75, p0, p1);
		public static void _0x29E6655DF3590B0D(Any p0) => Function.Call(0x29E6655DF3590B0D, p0);
		public static void _0xAC77757C05DE9E5A(string cameraDictionary) => Function.Call(0xAC77757C05DE9E5A, cameraDictionary);
		public static void _0x8E036B41C37D0E5F(Any p0) => Function.Call(0x8E036B41C37D0E5F, p0);
		public static void _0x1D9F72DD4FD9A9D7(Any p0) => Function.Call(0x1D9F72DD4FD9A9D7, p0);
		public static void _CAM_CREATE_2(string cameraDictionary) => Function.Call(0x7B0279170961A73F, cameraDictionary);
		public static void _0x728491FB3DFFEF99(Any p0) => Function.Call(0x728491FB3DFFEF99, p0);
		public static Any _0x14C4A49E36C29E49() => Function.Call<Any>(0x14C4A49E36C29E49);
		public static Any _0xF824530B612FE0CE() => Function.Call<Any>(0xF824530B612FE0CE);
		public static Any _0xEF9A3132A0AA6B19() => Function.Call<Any>(0xEF9A3132A0AA6B19);
		public static Any _0x5060FA977CEA4455() => Function.Call<Any>(0x5060FA977CEA4455);
		public static float _GET_PHOTO_MODE_FOCAL_LENGTH() => Function.Call<float>(0x2533BAFFBE737E54);
		public static float _GET_PHOTO_MODE_FOCUS_DISTANCE() => Function.Call<float>(0x18FC740FFDCD7454);
		public static float _GET_PHOTO_MODE_DOF() => Function.Call<float>(0x4653A741D17F2CD0);
		public static Any _0x2AB7C81B3F70570C() => Function.Call<Any>(0x2AB7C81B3F70570C);
		public static void _0x8505E05FC8822843(Any p0) => Function.Call(0x8505E05FC8822843, p0);
	}

	public unsafe static class CLOCK
	{
		/// <summary>
		/// SET_CLOCK_TIME(12, 34, 56);
		/// </summary>
		public static void SET_CLOCK_TIME(int hour, int minute, int second) => Function.Call(0x3A52C59FFB2DEED8, hour, minute, second);
		public static void PAUSE_CLOCK(bool toggle, Any unused) => Function.Call(0x4D1A590C92BF377E, toggle, unused);
		public static void _PAUSE_CLOCK_THIS_FRAME(bool toggle) => Function.Call(0x568D998A9FF96774, toggle);
		public static void ADVANCE_CLOCK_TIME_TO(int hour, int minute, int second) => Function.Call(0x0184750AE88D0B1D, hour, minute, second);
		public static void ADD_TO_CLOCK_TIME(int hours, int minutes, int seconds) => Function.Call(0xAB7C251C7701D336, hours, minutes, seconds);
		/// <summary>
		/// Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
		/// </summary>
		public static int GET_CLOCK_HOURS() => Function.Call<int>(0xC82CF208C2B19199);
		/// <summary>
		/// Gets the current ingame clock minute.
		/// </summary>
		public static int GET_CLOCK_MINUTES() => Function.Call<int>(0x4E162231B823DBBF);
		/// <summary>
		/// Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in RDR is only 48 minutes in real life.
		/// </summary>
		public static int GET_CLOCK_SECONDS() => Function.Call<int>(0xB6101ABE62B5F080);
		public static void _SET_MILLISECONDS_PER_GAME_MINUTE(int ms) => Function.Call(0x04EEDB3848DACF68, ms);
		/// <summary>
		/// Base year is 1898.
		/// </summary>
		public static int _GET_SECONDS_SINCE_BASE_YEAR() => Function.Call<int>(0x78FD8BE812E436B2);
		public static void SET_CLOCK_DATE(int day, int month, int year) => Function.Call(0x02AD3092562941E2, day, month, year);
		/// <summary>
		/// Gets the current day of the week.
		/// 
		/// 0: Sunday
		/// 1: Monday
		/// 2: Tuesday
		/// 3: Wednesday
		/// 4: Thursday
		/// 5: Friday
		/// 6: Saturday
		/// </summary>
		public static int GET_CLOCK_DAY_OF_WEEK() => Function.Call<int>(0x4DD02D4C7FB30076);
		public static int GET_CLOCK_DAY_OF_MONTH() => Function.Call<int>(0xDF2FD796C54480A5);
		public static int GET_CLOCK_MONTH() => Function.Call<int>(0x2D44E8FC79EAB1AC);
		public static int GET_CLOCK_YEAR() => Function.Call<int>(0xE136DCA28C4A48BA);
		public static int GET_MILLISECONDS_PER_GAME_MINUTE() => Function.Call<int>(0xE4CB8D126501EC52);
		public static void GET_POSIX_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second) => Function.Call(0x90338AD4A784E455, year, month, day, hour, minute, second);
		/// <summary>
		/// Same as GET_POSIX_TIME except that it takes a single pointer to a struct.
		/// </summary>
		public static void _GET_POSIX_TIME_STRUCT(Any* outTime) => Function.Call(0x86A68E84E5884951, outTime);
		public static void _ADD_TIME_TO_DATE_TIME(Any* inDateTime, Any* timeToAdd, Any* outDateTime) => Function.Call(0x28EEACE9B43D9597, inDateTime, timeToAdd, outDateTime);
	}

	public unsafe static class COLLECTION
	{
		/// <summary>
		/// Used in Script Function NET_COLLECTABLES_HANDLE_ITEM_ADDED
		/// Returns collectableCategory Hash
		/// </summary>
		public static uint _COLLECTABLE_GET_CATEGORY(uint collectableItem) => Function.Call<uint>(0x725D52F21A5E9EF6, collectableItem);
		public static uint _COLLECTABLE_GET_SUBCATEGORY(uint collectableItem) => Function.Call<uint>(0x6052B4DE6657684F, collectableItem);
		public static uint _COLLECTABLE_GET_IPL(uint collectableItem) => Function.Call<uint>(0x922A79CD4A033B8B, collectableItem);
		public static Vector3 _COLLECTABLE_GET_PLACEMENT_LOCATION(uint collectableItem) => Function.Call<Vector3>(0x1F1DD794908C2BFA, collectableItem);
		public static int _COLLECTABLE_GET_NUM_FOUND(uint collectableItem) => Function.Call<int>(0xF83D3DDA4D3C8169, collectableItem);
		public static int _COLLECTABLE_GET_NUM_TURNED_IN(uint collectableItem) => Function.Call<int>(0x9A03F22AD446EEAC, collectableItem);
		public static void _COLLECTABLE_INCREMENT_NUM_FOUND(uint collectableItem, int amount) => Function.Call(0x3EA62E56F386C997, collectableItem, amount);
		public static void _COLLECTABLE_INCREMENT_NUM_TURNED_IN(uint collectableItem, int amount) => Function.Call(0x398FAB9C96A81924, collectableItem, amount);
		public static int _COLLECTABLE_CATEGORY_GET_NUM_COLLECTABLES(uint collectableCategory, uint collectableSubcategory) => Function.Call<int>(0x62CAB7DB62EAD434, collectableCategory, collectableSubcategory);
		public static uint _COLLECTABLE_GET_COLLECTABLE_ITEM_HASH(int index, uint collectableCategory, uint collectableSubcategory) => Function.Call<uint>(0x126CBEBBA46693CF, index, collectableCategory, collectableSubcategory);
		public static int _COLLECTABLE_CATEGORY_GET_NUM_FOUND(uint collectableCategory, uint collectableSubcategory) => Function.Call<int>(0x5461C821D00FE15A, collectableCategory, collectableSubcategory);
		public static int _COLLECTABLE_CATEGORY_GET_NUM_TURNED_IN(uint collectableCategory, uint collectableSubcategory) => Function.Call<int>(0x3A65F4844913A047, collectableCategory, collectableSubcategory);
		public static int _0x33825A7388A6B9F6(uint collectableCategory, int p1) => Function.Call<int>(0x33825A7388A6B9F6, collectableCategory, p1);
		/// <summary>
		/// Returns p2 (index?) for 0xB9020EC89C07DF04
		/// </summary>
		public static int _0x755901C7598B97BC(uint collectableCategory, int p1) => Function.Call<int>(0x755901C7598B97BC, collectableCategory, p1);
		/// <summary>
		/// Accepts more hashes than 0xCC644BC1DD655269
		/// Such as: CAROLINA_PARAKEETS, DINO_BONES, EGRET_FEATHERS, ...
		/// </summary>
		public static Any _0xB9020EC89C07DF04(uint collectableCategory, int p1, int index) => Function.Call<Any>(0xB9020EC89C07DF04, collectableCategory, p1, index);
		public static bool _0xFC832B06127D8E99(uint collectableCategory, int p1) => Function.Call<bool>(0xFC832B06127D8E99, collectableCategory, p1);
		public static void COLLECTABLE_CATEGORY_SET_HAS_RECEIVED_LIST(Any p0, Any p1, Any p2) => Function.Call(0x0B6D275D2F242E17, p0, p1, p2);
		/// <summary>
		/// Params: collectableCategory = WEEKLY_COLLECTABLES
		/// </summary>
		public static bool _0x6BAB7ACED1017204(uint collectableCategory, int p1) => Function.Call<bool>(0x6BAB7ACED1017204, collectableCategory, p1);
		/// <summary>
		/// Params: collectableCategory = WEEKLY_COLLECTABLES
		/// </summary>
		public static bool _0x61BEFBA3CE7A3BC8(uint collectableCategory, int p1) => Function.Call<bool>(0x61BEFBA3CE7A3BC8, collectableCategory, p1);
		public static Any _0xC4AC39719C1BB559(uint collectableCategory, Any p1) => Function.Call<Any>(0xC4AC39719C1BB559, collectableCategory, p1);
		public static Any _0x93F2E7B5DB85657B(Any p0, Any p1) => Function.Call<Any>(0x93F2E7B5DB85657B, p0, p1);
		/// <summary>
		/// collectableCategory: ANTIQUE_BOTTLES, BIRD_EGGS, ARROWHEADS, FAMILY_HEIRLOOMS, WILD_FLOWERS, COINS, LOST_JEWELRY_RINGS, LOST_JEWELRY_BRACELETS, LOST_JEWELRY_EARRINGS, LOST_JEWELRY_NECKLACES, TAROT_CARDS_CUPS, TAROT_CARDS_PENTACLES, TAROT_CARDS_SWORDS, TAROT_CARDS_WANDS, FOSSILS_COMMON, FOSSILS_UNCOMMON, FOSSILS_RARE
		/// </summary>
		public static uint COLLECTABLE_GET_CATEGORY_ITEM_SET_BUY_AWARD(uint collectableCategory, uint p1) => Function.Call<uint>(0xCC644BC1DD655269, collectableCategory, p1);
		/// <summary>
		/// Params: collectableCategory = WEEKLY_COLLECTABLES
		/// </summary>
		public static uint _0x9ADEE485726025D4(uint collectableCategory) => Function.Call<uint>(0x9ADEE485726025D4, collectableCategory);
		public static Any _0xD1806FB3EDED6D11(uint collectableCategory, int p1) => Function.Call<Any>(0xD1806FB3EDED6D11, collectableCategory, p1);
		public static Any _0x3FD91F1A148A0468(uint collectableCategory, int p1) => Function.Call<Any>(0x3FD91F1A148A0468, collectableCategory, p1);
		public static Any _0xC3CA424E1F12ED0C(uint collectableCategory, int p1) => Function.Call<Any>(0xC3CA424E1F12ED0C, collectableCategory, p1);
		public static uint _COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_NAME(uint collectableCategory, uint collectableSubcategory) => Function.Call<uint>(0xD52D20B0C76BB26D, collectableCategory, collectableSubcategory);
		public static uint _COLLECTABLE_CATEGORY_GET_TOAST_TEXTURE_DICTIONARY(uint collectableCategory, uint collectableSubcategory) => Function.Call<uint>(0x13AAECDA43318BFE, collectableCategory, collectableSubcategory);
		public static Any _0xD297F68928A58130(uint collectableCategory, int p1) => Function.Call<Any>(0xD297F68928A58130, collectableCategory, p1);
		public static Any _0x775FA1FC87666847(uint collectableCategory, int p1) => Function.Call<Any>(0x775FA1FC87666847, collectableCategory, p1);
		public static Any _0xEC3959E9950BF56B(int p0) => Function.Call<Any>(0xEC3959E9950BF56B, p0);
	}

	public unsafe static class COMPANION
	{
		public static void _0xD730281E496621FB(int ped, uint p1) => Function.Call(0xD730281E496621FB, ped, p1);
		public static void _0xBF6583E926D13890(Any p0, Any p1) => Function.Call(0xBF6583E926D13890, p0, p1);
		public static void _0x0A8FD91EDE7B328A(Any p0, Any p1) => Function.Call(0x0A8FD91EDE7B328A, p0, p1);
		public static void _0x991E3346D788F20F(Any p0, Any p1) => Function.Call(0x991E3346D788F20F, p0, p1);
		public static void _0xCE27824B5968B79A(Any p0, Any p1) => Function.Call(0xCE27824B5968B79A, p0, p1);
		public static void _0xF06CBB8CCCA823C0(Any p0, Any p1) => Function.Call(0xF06CBB8CCCA823C0, p0, p1);
		public static void _0x2917E634206B9E17(int ped, int p1) => Function.Call(0x2917E634206B9E17, ped, p1);
		public static void _0xD428C3F92FC3F6F8(int ped, string p1) => Function.Call(0xD428C3F92FC3F6F8, ped, p1);
		/// <summary>
		/// Used for Script Function NET_FETCH_CLIENT_ACTIVATE_COMAPNION_ANALYSIS: Hiding! Ped
		/// </summary>
		public static void _0xDEB369F6AD168C58(int ped, int p1) => Function.Call(0xDEB369F6AD168C58, ped, p1);
		public static void _0x1740E3DEE0AE4D27(int ped, int p1) => Function.Call(0x1740E3DEE0AE4D27, ped, p1);
		public static void _0x0DE02DA3C0F66955(Any p0, Any p1) => Function.Call(0x0DE02DA3C0F66955, p0, p1);
		public static void _0x0F1CD8CA9E65D5F6(int groupId, uint p1) => Function.Call(0x0F1CD8CA9E65D5F6, groupId, p1);
		public static Any _0xB7E0590C86E1711F(Any p0) => Function.Call<Any>(0xB7E0590C86E1711F, p0);
		public static void _0xA079FF7CFB9AC8BD(Any p0, Any p1) => Function.Call(0xA079FF7CFB9AC8BD, p0, p1);
		public static void _0x61BDA07407754A5C(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x61BDA07407754A5C, p0, p1, p2, p3);
		public static void _0xD55A871E1CE3481B(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xD55A871E1CE3481B, p0, p1, p2, p3);
		public static void _0x0C6A00DAE896614C(Any p0, Any p1) => Function.Call(0x0C6A00DAE896614C, p0, p1);
		public static void _0x8FB98B719AA0075A(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x8FB98B719AA0075A, p0, p1, p2, p3, p4);
		public static void _0x9C902084F48D2E6C(Any p0) => Function.Call(0x9C902084F48D2E6C, p0);
		public static void _0xD747979C053EFA7A(Any p0) => Function.Call(0xD747979C053EFA7A, p0);
		public static void _0x3CAAD93FA5B9579A(int volume, int p1, int p2) => Function.Call(0x3CAAD93FA5B9579A, volume, p1, p2);
		public static void _0x7274F84B1501B523(Any p0) => Function.Call(0x7274F84B1501B523, p0);
		public static Any _0x722FBE08EF5B87BD(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0x722FBE08EF5B87BD, p0, p1, p2, p3, p4);
		public static void _ACTIVATE_COMPANION_ANALYSIS(int groupId) => Function.Call(0xCBD9EC60495C728C, groupId);
		public static void _DEACTIVATE_COMPANION_ANALYSIS(int groupId) => Function.Call(0x72B7F65F11FC8896, groupId);
	}

	public unsafe static class COMPENDIUM
	{
		/// <summary>
		/// _COMPENDIUM_GET_*
		/// </summary>
		public static Any _0x725D52F21A5E9E22(uint category) => Function.Call<Any>(0x725D52F21A5E9E22, category);
		public static int _COMPENDIUM_GET_NUM_OF_ENTRIES_IN_CATEGORY(uint category) => Function.Call<int>(0x729D52F61A5A9E22, category);
		/// <summary>
		/// _COMPENDIUM_GET_*
		/// </summary>
		public static Any _0x729D52461AEA9E22(uint category) => Function.Call<Any>(0x729D52461AEA9E22, category);
		public static uint COMPENDIUM_GET_SHORT_DESCRIPTION_FROM_PED(int ped) => Function.Call<uint>(0x6C5E5D48E48B4C65, ped);
		public static uint COMPENDIUM_GET_SUBCATEGORY_PED_IS_IN(uint category, int ped) => Function.Call<uint>(0x9B657550DF55EC96, category, ped);
		public static uint _COMPENDIUM_GET_SUBCATEGORY_HASH_FROM_ANIMAL_TYPE(uint category, uint animalType) => Function.Call<uint>(0xCD278B6BFBDBDC22, category, animalType);
		public static int COMPENDIUM_GET_NUM_ENTRIES_IN_SUBCATEGORY(uint category, uint subcategory) => Function.Call<int>(0xF58A0C0E086E8E36, category, subcategory);
		public static int COMPENDIUM_GET_ENTRY_BY_INDEX_IN_SUBCATEGORY(uint category, uint subcategory, int count) => Function.Call<int>(0x5CEB63B2E3D9895F, category, subcategory, count);
		public static int COMPENDIUM_GET_ENTRY_BY_PED_INDEX(uint category, int ped) => Function.Call<int>(0x1CFA0219D8E1CF25, category, ped);
		public static int COMPENDIUM_GET_ENTRY_BY_STAT_ITEM(uint category, uint animalType) => Function.Call<int>(0x66EC938394D76C85, category, animalType);
		public static Any COMPENDIUM_GET_SUBCATEGORY_TOAST_APP_ID(uint category, uint subcategory) => Function.Call<Any>(0x2BF30D9D4D680112, category, subcategory);
		public static uint COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM(uint animalStatItem, float x, float y, float z) => Function.Call<uint>(0x729D54121A5E9E20, animalStatItem, x, y, z);
		public static uint COMPENDIUM_GET_MAP_DISCOVERABLE_FROM_STAT_ITEM(uint animalStatItem, Vector3 vec) => Function.Call<uint>(0x729D54121A5E9E20, animalStatItem, vec.X, vec.Y, vec.Z);
		public static void COMPENDIUM_ANIMAL_OBSERVED_BY_STAT_NAME(uint animalType, bool disableCompendiumToast) => Function.Call(0x725D52F26A5E9E10, animalType, disableCompendiumToast);
		public static bool COMPENDIUM_WAS_ANIMAL_OBSERVED(int ped) => Function.Call<bool>(0x23B5E9C5160BC04F, ped);
		public static void COMPENDIUM_ANIMAL_SET_DISCOVERED(int compendiumEntry) => Function.Call(0x67F35C7C9F2BDCFE, compendiumEntry);
		public static Any COMPENDIUM_GET_STUDY_AWARD_ID(int ped) => Function.Call<Any>(0x9F678782720349E4, ped);
		public static Any COMPENDIUM_ANIMAL_GET_SAMPLE_INVENTORY_ITEM(int compendiumEntry) => Function.Call<Any>(0x4E4ACAE1C671A9DA, compendiumEntry);
		public static bool COMPENDIUM_ANIMAL_HAS_SAMPLE(int compendiumEntry) => Function.Call<bool>(0x6FC24625E4FCAC27, compendiumEntry);
		public static bool COMPENDIUM_ANIMAL_HAS_STAMP(int compendiumEntry) => Function.Call<bool>(0xBCF569FC32FFF456, compendiumEntry);
		public static string COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_TITLE(uint category, uint subcategory) => Function.Call<string>(0x5E50C67EB60951E6, category, subcategory);
		public static string COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_PROGRESS(uint category, uint subcategory) => Function.Call<string>(0x82BFB5B367957699, category, subcategory);
		public static string COMPENDIUM_GET_SUBCATEGORY_SAMPLE_TOAST_DESC_COMPLETE(uint category, uint subcategory) => Function.Call<string>(0x59D4D68CDB82427C, category, subcategory);
		public static void COMPENDIUM_FISH_CAUGHT(int ped, uint category) => Function.Call(0x725D52F21A5E9E00, ped, category);
		public static int COMPENDIUM_FISH_GET_LURE_SUITABILITY_BY_STAT_ITEM(uint animalType, uint baitType) => Function.Call<int>(0x725D52F21A5E9E81, animalType, baitType);
		public static void COMPENDIUM_GANG_CAMP_FOUND(Any p0, Any p1) => Function.Call(0x725D52F21A5E9E03, p0, p1);
		public static void COMPENDIUM_GANG_AMBUSH_SURVIVED(Any p0) => Function.Call(0x725D52F21A5E9E04, p0);
		public static void COMPENDIUM_GANG_ENCOUNTERED(Any p0) => Function.Call(0x725D52F21A5E9E05, p0);
		public static void COMPENDIUM_GANG_BOUNTY_CAPTURED(Any p0) => Function.Call(0x725D52F21A5E9E06, p0);
		public static void COMPENDIUM_GANG_MEMBER_KILLED(Any p0) => Function.Call(0x725D52F21A5E9E07, p0);
		public static void COMPENDIUM_GANG_HIDEOUT_FOUND(Any p0, Any p1) => Function.Call(0x725D52F21A5E9E08, p0, p1);
		/// <summary>
		/// herbType: https://alloc8or.re/rdr3/doc/enums/eHerbType.txt
		/// Vector3: Player Location
		/// </summary>
		public static void COMPENDIUM_HERB_PICKED(uint herbType, float x, float y, float z) => Function.Call(0x725D52F21A5E9E09, herbType, x, y, z);
		public static void COMPENDIUM_HERB_PICKED(uint herbType, Vector3 vec) => Function.Call(0x725D52F21A5E9E09, herbType, vec.X, vec.Y, vec.Z);
		public static void COMPENDIUM_HORSE_BONDING(int ped, int bondingLevel) => Function.Call(0x725D52F21A5E9E50, ped, bondingLevel);
		/// <summary>
		/// NET_PLAYER_HORSE_PROCESS_EVENT_HORSE_BREAKING
		/// </summary>
		public static void COMPENDIUM_HORSE_WILD_BROKEN(int ped) => Function.Call(0x725852D21A2E9E50, ped);
		/// <summary>
		/// Only gets called if bSetObserved is true and animalType is matching
		/// </summary>
		public static void COMPENDIUM_HORSE_OBSERVED(int ped, bool disableCompendiumToast) => Function.Call(0x725D58F2125E5E50, ped, disableCompendiumToast);
	}

	public unsafe static class CRASHLOG
	{
		public static void _0x0FD3ECF9D0C8655F(string p0) => Function.Call(0x0FD3ECF9D0C8655F, p0);
		public static void _0xCA0BAC376C541978(string p0) => Function.Call(0xCA0BAC376C541978, p0);
		public static bool _0x3A66F1963B223F61(string p0) => Function.Call<bool>(0x3A66F1963B223F61, p0);
		public static bool _0x7C680FF55617F82F() => Function.Call<bool>(0x7C680FF55617F82F);
		public static bool _0xD8E3D22AA4F0E0A5(string p0) => Function.Call<bool>(0xD8E3D22AA4F0E0A5, p0);
		public static bool _0xA67F0B039D9CD513(bool p0) => Function.Call<bool>(0xA67F0B039D9CD513, p0);
		public static bool _0xE72E234B30DA7B7A(int p0) => Function.Call<bool>(0xE72E234B30DA7B7A, p0);
		public static bool _0x87F005C969EF1563(float p0) => Function.Call<bool>(0x87F005C969EF1563, p0);
		public static bool _0x23CCAB8F40B9CBEE(float x, float y, float z) => Function.Call<bool>(0x23CCAB8F40B9CBEE, x, y, z);
		public static bool _0x23CCAB8F40B9CBEE(Vector3 vec) => Function.Call<bool>(0x23CCAB8F40B9CBEE, vec.X, vec.Y, vec.Z);
		public static bool _0xF0D545C1EEAD614A() => Function.Call<bool>(0xF0D545C1EEAD614A);
		public static bool _0x33C1D63E55FA4284(string p0) => Function.Call<bool>(0x33C1D63E55FA4284, p0);
		public static void _0x4E42CA5BCD45444A() => Function.Call(0x4E42CA5BCD45444A);
		/// <summary>
		/// unused = true
		/// </summary>
		public static void _0xDA05310EA94DC8C6(string p0, string p1) => Function.Call(0xDA05310EA94DC8C6, p0, p1);
	}

	public unsafe static class CREW
	{
		public static bool NETWORK_FIND_GAMERS_IN_CREW(int crewId) => Function.Call<bool>(0xE532D6811B3A4D2A, crewId);
		public static bool NETWORK_CLAN_SERVICE_IS_VALID() => Function.Call<bool>(0x579CCED0265D4896);
		public static bool NETWORK_CLAN_PLAYER_IS_ACTIVE(Any* gamerHandle) => Function.Call<bool>(0xB124B57F571D8F18, gamerHandle);
		public static bool NETWORK_CLAN_PLAYER_GET_DESC(Any* clanDesc, int bufferSize, Any* gamerHandle) => Function.Call<bool>(0xEEE6EACBE8874FBA, clanDesc, bufferSize, gamerHandle);
		public static int NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT() => Function.Call<int>(0x1F471B79ACC90BEF);
		public static bool NETWORK_CLAN_GET_MEMBERSHIP_DESC(Any* memberDesc, int p1) => Function.Call<bool>(0x48DE78AF2C8885B8, memberDesc, p1);
		public static bool _0x58D378AF2C8765B7(Any p0) => Function.Call<bool>(0x58D378AF2C8765B7, p0);
		public static bool _NETWORK_CLAN_INVITE_PLAYER(Any p0) => Function.Call<bool>(0xC685B014CE3D988B, p0);
		public static bool _NETWORK_ACCEPT_CLAN_INVITE(int crewInviteIndex) => Function.Call<bool>(0x8E2143144B8E188D, crewInviteIndex);
		public static bool NETWORK_CLAN_REQUEST_EMBLEM(Any p0) => Function.Call<bool>(0x13518FF1C6B28938, p0);
		public static bool NETWORK_CLAN_IS_EMBLEM_READY(Any p0, Any* p1) => Function.Call<bool>(0xA134777FF7F33331, p0, p1);
		public static void NETWORK_CLAN_RELEASE_EMBLEM(Any p0) => Function.Call(0x113E6E3E50E286B0, p0);
		public static Any NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR() => Function.Call<Any>(0x9AA46BADAD0E27ED);
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_START(Any* p0, Any p1) => Function.Call<bool>(0xCE86D8191B762107, p0, p1);
		public static Any NETWORK_GET_PRIMARY_CLAN_DATA_PENDING() => Function.Call<Any>(0xB5074DB804E28CE7);
		public static Any NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS() => Function.Call<Any>(0x5B4F04F19376A0BA);
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_NEW(Any* p0, Any* p1) => Function.Call<bool>(0xC080FF658B2E41DA, p0, p1);
		public static Any _NETWORK_CLAN_SET_ACTIVE(Any p0) => Function.Call<Any>(0xC080FF658B2E51DA, p0);
	}

	public unsafe static class DATABINDING
	{
		public static Any _DATABINDING_GET_DATA_CONTAINER_FROM_PATH(string p0) => Function.Call<Any>(0x0C827D175F1292F2, p0);
		public static Any _DATABINDING_GET_DATA_CONTAINER_FROM_CHILD_INDEX(uint entryId, int p1) => Function.Call<Any>(0x0C827D175F1292F3, entryId, p1);
		public static Any _0xD7DB94AB78E8EBE4(string p0, uint p1) => Function.Call<Any>(0xD7DB94AB78E8EBE4, p0, p1);
		public static Any _DATABINDING_ADD_DATA_CONTAINER_FROM_PATH(string p0, string p1) => Function.Call<Any>(0x0C827D175F1292F4, p0, p1);
		public static Any _DATABINDING_ADD_DATA_CONTAINER_BY_HASH(Any p0, uint p1) => Function.Call<Any>(0x98BB14345BB68257, p0, p1);
		/// <summary>
		/// Returns entryId Hash
		/// </summary>
		public static uint _DATABINDING_ADD_DATA_CONTAINER(uint entryId, string p1) => Function.Call<uint>(0xEB4F9A3537EEABCD, entryId, p1);
		public static Any _DATABINDING_ADD_DATA_BOOL_FROM_PATH(string p0, string p1, bool p2) => Function.Call<Any>(0x37BB86A751148A6A, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_BOOL_BY_HASH(Any p0, uint p1, bool p2) => Function.Call<Any>(0xBC95D3AE2ECA70D6, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_BOOL(Any p0, string p1, bool p2) => Function.Call<Any>(0x58BAA5F635DA2FF4, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_INT_BY_HASH(Any p0, uint p1, int p2) => Function.Call<Any>(0x267F9527F4350ADE, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_INT(Any p0, string p1, uint p2) => Function.Call<Any>(0x307A3247C5457BDE, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_FLOAT(Any p0, string p1, float p2) => Function.Call<Any>(0x5154228273ADB9A6, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_HASH_BY_HASH(Any p0, uint p1, uint p2) => Function.Call<Any>(0x8E173DFB041993C6, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_HASH(Any p0, string p1, uint p2) => Function.Call<Any>(0x8538F1205D60ECA6, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_STRING_FROM_PATH(string p0, string p1, string p2) => Function.Call<Any>(0xA381DE86EE170C4A, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_STRING_BY_HASH(Any p0, uint p1, string p2) => Function.Call<Any>(0xEAD09E76E22630C3, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_STRING(Any p0, string p1, string p2) => Function.Call<Any>(0x617FCA1C5652BBAD, p0, p1, p2);
		public static Any _DATABINDING_ADD_DATA_GANG_ID(Any p0, string p1, Any gangId) => Function.Call<Any>(0x7D0F2014DB28DD00, p0, p1, gangId);
		public static Any _DATABINDING_ADD_DATA_POSSE_ID(Any p0, string p1, Any posseId) => Function.Call<Any>(0x7D0F2014DB28DD01, p0, p1, posseId);
		public static Any _0x294AF5323F44B053(Any p0, string p1, Any p2) => Function.Call<Any>(0x294AF5323F44B053, p0, p1, p2);
		public static Any _DATABINDING_ADD_UI_ITEM_LIST_FROM_PATH(string p0, string p1) => Function.Call<Any>(0xDB5B9A474148F699, p0, p1);
		public static Any _DATABINDING_ADD_UI_ITEM_LIST_BY_HASH(Any p0, uint p1) => Function.Call<Any>(0x3C7799283325181B, p0, p1);
		public static Any _DATABINDING_ADD_UI_ITEM_LIST(Any p0, string p1) => Function.Call<Any>(0xFE74FA57E0CE6824, p0, p1);
		public static void _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_STRING_ALIAS(Any p0, int index, string p2, Any p3) => Function.Call(0x5859E970794D92F3, p0, index, p2, p3);
		public static void _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_CONTEXT_HASH_ALIAS(Any p0, int index, uint p2, Any p3) => Function.Call(0xEE97A05C05F16E41, p0, index, p2, p3);
		public static void _DATABINDING_INSERT_UI_ITEM_TO_LIST_FROM_PATH_STRING_ALIAS(Any p0, Any p1, string p2, Any p3) => Function.Call(0x5740774F608E4FC8, p0, p1, p2, p3);
		public static void _0x6318FB3BE37E11B3(uint entryId, int index) => Function.Call(0x6318FB3BE37E11B3, entryId, index);
		public static void _DATABINDING_REMOVE_BINDING_ARRAY_ITEM_BY_DATA_CONTEXT_ID(Any p0, uint entryId) => Function.Call(0xF68B1726EAF7B285, p0, entryId);
		public static void _DATABINDING_CLEAR_BINDING_ARRAY(uint entryId) => Function.Call(0xA1F15C1D03DF802D, entryId);
		public static Any _DATABINDING_GET_ITEM_CONTEXT_BY_INDEX(Any p0, int index) => Function.Call<Any>(0xE96D7F9FEFCC105F, p0, index);
		public static void _DATABINDING_SET_TEMPLATED_UI_ITEM_LIST_SIZE(Any p0, int p1) => Function.Call(0xFE74FA57E0CE6825, p0, p1);
		public static void _DATABINDING_SET_TEMPLATED_UI_ITEM_HASH_ALIAS(Any p0, int p1, uint p2) => Function.Call(0x0AE7138D0541F2DE, p0, p1, p2);
		public static Any _0xD48993A61938C64D(Any p0, string p1) => Function.Call<Any>(0xD48993A61938C64D, p0, p1);
		public static Any _DATABINDING_ADD_HASH_ARRAY(Any p0, string p1) => Function.Call<Any>(0x52F5F08278EA5D75, p0, p1);
		public static Any _DATABINDING_ADD_STRING_ARRAY(Any p0, string p1) => Function.Call<Any>(0x1B23E0627BDBFE85, p0, p1);
		public static void _0x1919D59E60FD516E(Any p0, int p1, int p2) => Function.Call(0x1919D59E60FD516E, p0, p1, p2);
		public static void _0x7FC60C94C83C5CD7(Any p0, uint p1, int p2) => Function.Call(0x7FC60C94C83C5CD7, p0, p1, p2);
		public static void _0xC900CEC8A172375B(Any p0, string p1, int p2) => Function.Call(0xC900CEC8A172375B, p0, p1, p2);
		public static Any _0x02B21B6BEEDD83CC(uint entryId, int p1) => Function.Call<Any>(0x02B21B6BEEDD83CC, entryId, p1);
		public static Any _0xF47E33F8D2523825(Any p0, int p1) => Function.Call<Any>(0xF47E33F8D2523825, p0, p1);
		public static void _0x3BF0767CF33FCC88(uint entryId) => Function.Call(0x3BF0767CF33FCC88, entryId);
		public static Any _DATABINDING_GET_ARRAY_COUNT(uint entryId) => Function.Call<Any>(0xD23F5DE04FE717E2, entryId);
		public static void _DATABINDING_WRITE_DATA_SCRIPT_VARIABLES(int p0, int p1, params InputArgument[] args) => Function.Call(0xAB888B4B91046771, p0, p1, args);
		public static void _DATABINDING_WRITE_DATA_BOOL(Any p0, bool p1) => Function.Call(0xAB888B4B91046770, p0, p1);
		public static void _DATABINDING_WRITE_DATA_BOOL_FROM_PARENT(Any p0, string p1, bool p2) => Function.Call(0xBDFE546E4C2D0E21, p0, p1, p2);
		/// <summary>
		/// _DATABINDING_WRITE_DATA_*
		/// </summary>
		public static void _0xBFC83DA249BEFCC9(Any p0, uint p1, Any p2) => Function.Call(0xBFC83DA249BEFCC9, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_INT(Any p0, int p1) => Function.Call(0x335C3F6B3766B8D9, p0, p1);
		public static void _DATABINDING_WRITE_DATA_INT_FROM_PARENT(Any p0, string p1, int p2) => Function.Call(0x9EFA98238BA08FC4, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_INT_FROM_PARENT_BY_HASH(Any p0, uint p1, Any p2) => Function.Call(0x9D6E10A41D6ED6EC, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_FLOAT(Any p0, float p1) => Function.Call(0xDF504BECEB15DA93, p0, p1);
		/// <summary>
		/// _DATABINDING_WRITE_DATA_*
		/// </summary>
		public static void _0x05AC9E1E02975AFB(Any p0, string p1, float p2) => Function.Call(0x05AC9E1E02975AFB, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_HASH_STRING(Any p0, uint p1) => Function.Call(0xACDEF586BD71B1FD, p0, p1);
		public static void _DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT(Any p0, string p1, uint p2) => Function.Call(0x0971F04E1EAA7AE8, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_HASH_STRING_FROM_PARENT_BY_HASH(Any p0, uint p1, Any p2) => Function.Call(0x20209529689E0953, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_STRING(Any p0, string p1) => Function.Call(0xE1BD342F2872AEE9, p0, p1);
		public static void DATABINDING_WRITE_STRING_FROM_PARENT(Any p0, string p1, string p2) => Function.Call(0x4FF713B2F17A391E, p0, p1, p2);
		public static void _DATABINDING_WRITE_STRING_FROM_HASH(Any p0, uint p1, string p2) => Function.Call(0xA3BD6FF95E713EE5, p0, p1, p2);
		public static void _DATABINDING_WRITE_DATA_GANG_ID(Any p0, string p1, Any gangId) => Function.Call(0xC70041408E16BE2D, p0, p1, gangId);
		public static void _DATABINDING_WRITE_DATA_POSSE_ID(Any p0, string p1, Any posseId) => Function.Call(0xC70041408E16BE2E, p0, p1, posseId);
		public static void _0x422179C7F6AD9304(Any p0, Any* gamerHandle) => Function.Call(0x422179C7F6AD9304, p0, gamerHandle);
		public static Any _DATABINDING_READ_DATA_BOOL(Any p0) => Function.Call<Any>(0x5EEFBD4B6D7CD6EB, p0);
		public static Any _DATABINDING_READ_DATA_BOOL_FROM_PARENT(Any p0, string p1) => Function.Call<Any>(0xA8EDE09FE07BD77F, p0, p1);
		public static Any _DATABINDING_READ_DATA_BOOL_FROM_PARENT_BY_HASH(Any p0, uint p1) => Function.Call<Any>(0x4CDC3FDDFAE07EB3, p0, p1);
		public static int DATABINDING_READ_INT(Any p0) => Function.Call<int>(0x570784D782597512, p0);
		public static Any _DATABINDING_READ_DATA_INT_FROM_PARENT(Any p0, string p1) => Function.Call<Any>(0xFFC566A4801F6B40, p0, p1);
		public static Any _DATABINDING_READ_DATA_INT_FROM_PARENT_BY_HASH(Any p0, uint p1) => Function.Call<Any>(0xB5F668B648EC0970, p0, p1);
		public static float _DATABINDING_READ_FLOAT(uint entryId) => Function.Call<float>(0x5FE444EB67C70AD4, entryId);
		public static uint _DATABINDING_READ_HASH(uint entryId) => Function.Call<uint>(0x81D7183E7A8ECA72, entryId);
		public static Any _DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT(Any p0, string p1) => Function.Call<Any>(0x9B535990B01B62DE, p0, p1);
		public static Any _DATABINDING_READ_DATA_HASH_STRING_FROM_PARENT_BY_HASH(Any p0, uint p1) => Function.Call<Any>(0x1F43BC25A119B252, p0, p1);
		public static Any _DATABINDING_READ_DATA_STRING(Any p0) => Function.Call<Any>(0x3D290B5FFA7C5151, p0);
		public static Any _DATABINDING_READ_DATA_STRING_FROM_PARENT(Any p0, string p1) => Function.Call<Any>(0x6323AD277C4A2AFB, p0, p1);
		public static Any _0x6329C34BEE5BFF4B(Any p0, uint p1) => Function.Call<Any>(0x6329C34BEE5BFF4B, p0, p1);
		public static Any _0xE6AAB897120492D6(Any p0, string p1) => Function.Call<Any>(0xE6AAB897120492D6, p0, p1);
		public static void _0xE6AAB897120492D7(Any p0, string p1, Any p2) => Function.Call(0xE6AAB897120492D7, p0, p1, p2);
		public static void _0xB138CA787F3DD858(Any p0, string p1, Any p2) => Function.Call(0xB138CA787F3DD858, p0, p1, p2);
		public static bool DATABINDING_IS_ENTRY_VALID(uint entryId) => Function.Call<bool>(0x1E7130793AAAAB8D, entryId);
		public static void _DATABINDING_REMOVE_DATA_ENTRY(uint entryId) => Function.Call(0x0AE9938D0541F2DA, entryId);
		public static void _VIRTUAL_COLLECTION_SET_SIZE(Any p0, int size) => Function.Call(0x9DCE9B01A93B58BC, p0, size);
		public static void _VIRTUAL_COLLECTION_SET_INTEREST_INDEX(Any p0, int interestIndex) => Function.Call(0x49A8447533308BCF, p0, interestIndex);
		public static void _VIRTUAL_COLLECTION_ITEM_ADD(Any p0, int index, uint p2, Any p3) => Function.Call(0x6DCBF187221CF73D, p0, index, p2, p3);
		public static void _VIRTUAL_COLLECTION_RESET(Any p0) => Function.Call(0x09D95666ED2B5F60, p0);
		public static Any _VIRTUAL_COLLECTION_EXISTS(Any p0) => Function.Call<Any>(0x37963B56755BFB35, p0);
	}

	public unsafe static class DATAFILE
	{
		/// <summary>
		/// Adds the given request ID to the watch list.
		/// </summary>
		public static void DATAFILE_WATCH_REQUEST_ID(int id) => Function.Call(0xA5834834CA8FD7FC, id);
		public static bool DATAFILE_HAS_LOADED_FILE_DATA(Any p0) => Function.Call<bool>(0x17279C820464CEE0, p0);
		public static bool DATAFILE_HAS_VALID_FILE_DATA(Any p0) => Function.Call<bool>(0xE60100389E50EADE, p0);
		public static bool DATAFILE_SELECT_ACTIVE_FILE(Any p0, Any p1) => Function.Call<bool>(0x46102A0989AD80B5, p0, p1);
		public static bool DATAFILE_DELETE_REQUESTED_FILE(Any p0) => Function.Call<bool>(0x604B8ED1A482F9DF, p0);
		public static Any UGC2_SET_PLAYER_DATA(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xE79C70E77E0973C7, p0, p1, p2, p3);
		/// <summary>
		/// Reloops value returned by UGC_QUERY_GET_CONTENT_NUM
		/// </summary>
		public static Any DATAFILE_UGC_SELECT_DATA(Any ugcRequestId, int index, Any p2) => Function.Call<Any>(0x790EC421078F5C4E, ugcRequestId, index, p2);
		public static void DATAFILE_CREATE(int index) => Function.Call(0x56B7291FB953DD51, index);
		public static void DATAFILE_DELETE(int index) => Function.Call(0x9FB90EEDEA9F2D5C, index);
		public static string DATAFILE_GET_FILE_DICT(int index) => Function.Call<string>(0xBBD8CF823CAE557C, index);
		public static bool DATADICT_IS_DICT_VALID(Any p0) => Function.Call<bool>(0x4607D57C5F7D332A, p0);
		public static bool DATADICT_IS_ARRAY_VALID(Any p0) => Function.Call<bool>(0xB04B69CF277D15C0, p0);
		public static void DATADICT_SET_INT(Any* objectData, string key, int value) => Function.Call(0x26FDF5E99AA2F3E9, objectData, key, value);
		public static bool DATADICT_GET_BOOL(Any* objectData, string key) => Function.Call<bool>(0x175E915A486EE548, objectData, key);
		public static int DATADICT_GET_INT(Any* objectData, string key) => Function.Call<int>(0x9D896A3B87D96E2B, objectData, key);
		public static float DATADICT_GET_FLOAT(Any* objectData, string key) => Function.Call<float>(0x814643ECA258ADF5, objectData, key);
		public static string DATADICT_GET_STRING(Any* objectData, string key) => Function.Call<string>(0xE37B38C0B4E95DFA, objectData, key);
		public static Vector3 DATADICT_GET_VECTOR(Any* objectData, string key) => Function.Call<Vector3>(0xE459C941431E0FFA, objectData, key);
		public static IntPtr DATADICT_GET_DICT(Any* objectData, string key) => Function.Call<IntPtr>(0x4D7A30130F46AC9C, objectData, key);
		public static IntPtr DATADICT_GET_ARRAY(Any* objectData, string key) => Function.Call<IntPtr>(0x1B5447CF18544B18, objectData, key);
		/// <summary>
		/// Types:
		/// 1 = Boolean
		/// 2 = Integer
		/// 3 = Float
		/// 4 = String
		/// 5 = Vector3
		/// 6 = Object
		/// 7 = Array
		/// </summary>
		public static int DATADICT_GET_TYPE(Any* objectData, string key) => Function.Call<int>(0x92E11E3CA4C7CDF0, objectData, key);
		public static void _0xBC0DF006A4952C68(Any p0, Any p1, Any p2) => Function.Call(0xBC0DF006A4952C68, p0, p1, p2);
		public static void _0x9F130129EBC31B34(Any p0, Any p1, Any p2) => Function.Call(0x9F130129EBC31B34, p0, p1, p2);
		public static void _0x277251C161B4C3F4(Any p0, Any p1, Any p2) => Function.Call(0x277251C161B4C3F4, p0, p1, p2);
		public static void _0x1C65CC931C0F946F(Any p0, Any p1, Any p2) => Function.Call(0x1C65CC931C0F946F, p0, p1, p2);
		public static void _0x7681B677400C7071(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x7681B677400C7071, p0, p1, p2, p3, p4);
		public static bool DATAARRAY_GET_BOOL(Any* arrayData, int arrayIndex) => Function.Call<bool>(0xAB1231D2DE52F2D3, arrayData, arrayIndex);
		public static int DATAARRAY_GET_INT(Any* arrayData, int arrayIndex) => Function.Call<int>(0x96DEA500B6EBBE53, arrayData, arrayIndex);
		public static float DATAARRAY_GET_FLOAT(Any* arrayData, int arrayIndex) => Function.Call<float>(0xA9D003CF419CB81E, arrayData, arrayIndex);
		public static string DATAARRAY_GET_STRING(Any* arrayData, int arrayIndex) => Function.Call<string>(0xB6790A8FF80F889F, arrayData, arrayIndex);
		public static Vector3 DATAARRAY_GET_VECTOR(Any* arrayData, int arrayIndex) => Function.Call<Vector3>(0x850DA2750DA14E9A, arrayData, arrayIndex);
		public static IntPtr DATAARRAY_GET_DICT(Any* arrayData, int arrayIndex) => Function.Call<IntPtr>(0xA010655985853485, arrayData, arrayIndex);
		public static int DATAARRAY_GET_COUNT(Any* arrayData) => Function.Call<int>(0x6A885BF69239E539, arrayData);
		/// <summary>
		/// Types:
		/// 1 = Boolean
		/// 2 = Integer
		/// 3 = Float
		/// 4 = String
		/// 5 = Vector3
		/// 6 = Object
		/// 7 = Array
		/// </summary>
		public static int DATAARRAY_GET_TYPE(Any* arrayData, int arrayIndex) => Function.Call<int>(0x151DAFE6B3B9888F, arrayData, arrayIndex);
		public static Any _0x4F9E3ED7617123AC(Any p0) => Function.Call<Any>(0x4F9E3ED7617123AC, p0);
		public static Any _0xCA56DD6AB7A39F64(Any p0) => Function.Call<Any>(0xCA56DD6AB7A39F64, p0);
		/// <summary>
		/// LOAD_PARSEDDATA_FILE_FAILSAFE_HASH
		/// Returns parseddata script fileHandle
		/// </summary>
		public static int _PARSEDDATA_LOAD_FILE_HASH(uint p0) => Function.Call<int>(0xD97D8D905F1562F2, p0);
		public static void _PARSEDDATA_UNLOAD_FILE(int fileHandle) => Function.Call(0x129567F0C05F81B9, fileHandle);
		public static bool PARSEDDATA_IS_FILE_VALID(int fileHandle) => Function.Call<bool>(0x7907969497EA92F5, fileHandle);
		public static bool PARSEDDATA_IS_FILE_LOADED(int fileHandle) => Function.Call<bool>(0x603AC35FD4602C76, fileHandle);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x3168BA5D6DECE323() => Function.Call(0x3168BA5D6DECE323);
		public static Any _PARSEDDATA_REGISTER_QUERY(Any p0, Any p1, Any p2) => Function.Call<Any>(0xAE156A747C39A741, p0, p1, p2);
		/// <summary>
		/// Old name: _DATAFILE_GET_DATA_NODE_INDEX
		/// </summary>
		public static bool PARSEDDATA_RQ_FILLOUT_NODE(int* p0, Any* p1) => Function.Call<bool>(0x83C3ED532B6E5D07, p0, p1);
		public static Any _PARSEDDATA_RQ_GET_NUM_NODES(Any p0) => Function.Call<Any>(0xDF01B1F7A886B42D, p0);
		public static int _0xE13634BB6BAF0734(int p0, int p1) => Function.Call<int>(0xE13634BB6BAF0734, p0, p1);
		public static Any _PARSEDDATA_GET_NUM_CHILDREN(Any p0, Any p1) => Function.Call<Any>(0x6BEB168D5195E7AB, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_HASH
		/// </summary>
		public static bool PARSEDDATA_RQ_FILLOUT_HASH(uint* p0, Any* p1) => Function.Call<bool>(0xFBFF3FF2F5E80C0B, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_STRING
		/// </summary>
		public static bool _PARSEDDATA_RQ_FILLOUT_STRING_63(string p0, Any* p1) => Function.Call<bool>(0x08EAF8E9F2EB7B2E, p0, p1);
		public static bool PARSEDDATA_RQ_FILLOUT_STRING_127(string p0, Any* p1) => Function.Call<bool>(0x951327435DC5164B, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_VECTOR
		/// </summary>
		public static bool _PARSEDDATA_RQ_FILLOUT_VECTOR(Vector3* p0, Any* p1) => Function.Call<bool>(0x06FBF89B12DA279C, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_FLOAT
		/// </summary>
		public static bool _PARSEDDATA_RQ_FILLOUT_FLOAT(float* p0, Any* p1) => Function.Call<bool>(0x7F034FC3E891B57A, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_INT
		/// </summary>
		public static bool _PARSEDDATA_RQ_FILLOUT_INT(int* p0, Any* p1) => Function.Call<bool>(0xEF44ACC657352A35, p0, p1);
		/// <summary>
		/// Old name: _DATAFILE_GET_BOOL
		/// </summary>
		public static bool _PARSEDDATA_RQ_FILLOUT_BOOL(bool* p0, Any* p1) => Function.Call<bool>(0x0D9138F3F8261DF7, p0, p1);
		/// <summary>
		/// Opens file.
		/// </summary>
		public static void _PARSEDDATA_GET_FILE(Any* p0) => Function.Call(0x91DED5DD64BB2691, p0);
		/// <summary>
		/// Returns false when there are no entries.
		/// </summary>
		public static bool _PARSEDDATA_GET_ENTRIES(Any* p0) => Function.Call<bool>(0xED4413CEE1BF142C, p0);
		public static bool _PARSEDDATA_GET_FLOAT(Any* p0, Any* p1, uint p2) => Function.Call<bool>(0xB2B42607F7867576, p0, p1, p2);
		public static bool _PARSEDDATA_GET_INT(Any* p0, Any* p1, uint p2) => Function.Call<bool>(0x52FC26D2D2FC2987, p0, p1, p2);
		public static bool _PARSEDDATA_GET_SECTION(Any* p0, Any* p1, uint section) => Function.Call<bool>(0x44B3A36933AC009C, p0, p1, section);
		public static bool _PARSEDDATA_GET_BOOL(bool* p0, Any* p1, uint p2) => Function.Call<bool>(0xA63CD20F19B961AB, p0, p1, p2);
	}

	public unsafe static class DEBUG
	{
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any _0xACF9CB705BEFA8CB() => Function.Call<Any>(0xACF9CB705BEFA8CB);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any _0xA8D970D8A72640A6() => Function.Call<Any>(0xA8D970D8A72640A6);
		/// <summary>
		/// Return example: 1207.69_dev_pc, 1436.28_dev_live_tu
		/// 
		/// Old name: _GET_GAME_BUILD_STRING
		/// </summary>
		public static string GET_GAME_VERSION_NAME() => Function.Call<string>(0x05A5F662AD35C573);
	}

	public unsafe static class DECORATOR
	{
		/// <summary>
		/// This function sets metadata of type bool to specified entity.
		/// 
		/// </summary>
		public static bool DECOR_SET_BOOL(int entity, string propertyName, bool value) => Function.Call<bool>(0xFE26E4609B1C3772, entity, propertyName, value);
		public static bool DECOR_SET_FLOAT(int entity, string propertyName, float value) => Function.Call<bool>(0x238F8B0C1C7FE834, entity, propertyName, value);
		/// <summary>
		/// Sets property to int.
		/// </summary>
		public static bool DECOR_SET_INT(int entity, string propertyName, int value) => Function.Call<bool>(0xE88F4D7F52A6090F, entity, propertyName, value);
		public static bool _DECOR_SET_UINT8(int entity, string propertyName, int value) => Function.Call<bool>(0x4BDC83150D43772D, entity, propertyName, value);
		public static bool DECOR_SET_STRING(int entity, string propertyName, string value) => Function.Call<bool>(0x0671C1A3FF7AFDFC, entity, propertyName, value);
		public static bool DECOR_GET_BOOL(int entity, string propertyName) => Function.Call<bool>(0xDEF3F1B071ABB197, entity, propertyName);
		public static float DECOR_GET_FLOAT(int entity, string propertyName) => Function.Call<float>(0xE5FF70CD842CA9D4, entity, propertyName);
		public static int DECOR_GET_INT(int entity, string propertyName) => Function.Call<int>(0x44DB62727762FD9B, entity, propertyName);
		public static int _DECOR_GET_UINT8(int entity, string propertyName) => Function.Call<int>(0xB1682B2443F0540B, entity, propertyName);
		/// <summary>
		/// Returns whether or not the specified property is set for the entity.
		/// </summary>
		public static bool DECOR_EXIST_ON(int entity, string propertyName) => Function.Call<bool>(0xD9D1CDBF3464DCDF, entity, propertyName);
		public static bool DECOR_REMOVE(int entity, string propertyName) => Function.Call<bool>(0x2BA7F5877A088A1D, entity, propertyName);
		public static bool DECOR_REMOVE_ALL(int entity) => Function.Call<bool>(0x88942780E0ADEA42, entity);
		public static void DECOR_REGISTER(string propertyName, int type) => Function.Call(0x0B253D644E3C36B3, propertyName, type);
		public static void _DECOR_REGISTER_2(string propertyName, int type, bool p2) => Function.Call(0x4587374F88B7F6C2, propertyName, type, p2);
		/// <summary>
		/// type: see DECOR_REGISTER
		/// </summary>
		public static bool DECOR_IS_REGISTERED_AS_TYPE(string propertyName, int type) => Function.Call<bool>(0x72355278C069F272, propertyName, type);
	}

	public unsafe static class DLC
	{
		public static bool IS_DLC_PRESENT(uint dlcHash) => Function.Call<bool>(0x2763DC12BBE2BB6F, dlcHash);
		public static bool GET_IS_LOADING_SCREEN_ACTIVE() => Function.Call<bool>(0x71D4BF5890659B0C);
		public static bool _GET_SPECIAL_EDITION_CORE_STATS_BONUS_ENABLED() => Function.Call<bool>(0xA16B4FBA7887D7BA);
		public static bool _GET_SPECIAL_EDITION_CASH_CAMP_BONUS_ENABLED() => Function.Call<bool>(0x1DB9D61E505AE3FC);
	}

	public unsafe static class ENTITY
	{
		/// <summary>
		/// Checks if the Entity exists
		/// </summary>
		public static bool DOES_ENTITY_EXIST(int entity) => Function.Call<bool>(0xD42BD6EB2E0F1677, entity);
		public static bool DOES_ENTITY_BELONG_TO_THIS_SCRIPT(int entity, bool p1) => Function.Call<bool>(0x622B1980CBE13332, entity, p1);
		public static bool DOES_ENTITY_HAVE_DRAWABLE(int entity) => Function.Call<bool>(0x20487F0DA9AF164A, entity);
		public static bool DOES_ENTITY_HAVE_PHYSICS(int entity) => Function.Call<bool>(0xA512B3F1B2A0B51C, entity);
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(int entity) => Function.Call<bool>(0x73BB763880CD23A6, entity);
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(int entity) => Function.Call<bool>(0x9934E9C42D52D87E, entity);
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(int entity) => Function.Call<bool>(0x695D7C26DE65C423, entity);
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(int entity1, int entity2, bool p2, bool p3) => Function.Call<bool>(0x7B6E7BEC1143AC86, entity1, entity2, p2, p3);
		/// <summary>
		/// Used in Script Function DUELING_DID_PLAYER_DISARM_OPPONENT
		/// </summary>
		public static bool _0x3EC28DA1FFAC9DDD(int entity1, int entity2, Any p2, Any p3) => Function.Call<bool>(0x3EC28DA1FFAC9DDD, entity1, entity2, p2, p3);
		public static int _0xAF72EC7E1B54539B(int entity) => Function.Call<int>(0xAF72EC7E1B54539B, entity);
		public static bool HAS_ENTITY_CLEAR_LOS_TO_ENTITY(int entity1, int entity2, int traceType) => Function.Call<bool>(0xFCDFF7B72D23A1AC, entity1, entity2, traceType);
		public static bool HAS_ENTITY_CLEAR_LOS_TO_COORD(int entity, float x, float y, float z, int flags) => Function.Call<bool>(0x0C9DBF48C6BA6E4C, entity, x, y, z, flags);
		public static bool HAS_ENTITY_CLEAR_LOS_TO_COORD(int entity, Vector3 vec, int flags) => Function.Call<bool>(0x0C9DBF48C6BA6E4C, entity, vec.X, vec.Y, vec.Z, flags);
		/// <summary>
		/// Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
		/// </summary>
		public static bool HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(int entity1, int entity2, int traceType) => Function.Call<bool>(0xE88F19660651D566, entity1, entity2, traceType);
		public static bool HAS_ENTITY_COLLIDED_WITH_ANYTHING(int entity) => Function.Call<bool>(0xDF18751EC74F90FF, entity);
		public static float _0x6D58167F62238284(int vehicle) => Function.Call<float>(0x6D58167F62238284, vehicle);
		public static float _0xDFC2B226D56D85F6(Any p0, Any p1) => Function.Call<float>(0xDFC2B226D56D85F6, p0, p1);
		public static float GET_ANIM_DURATION(string animDict, string animName) => Function.Call<float>(0x9FFAF4940A54CC09, animDict, animName);
		public static int GET_ENTITY_ATTACHED_TO(int entity) => Function.Call<int>(0x56D713888A566481, entity);
		/// <summary>
		/// Gets the current coordinates for a specified entity.
		/// `entity` = The entity to get the coordinates from.
		/// `alive` = Unused by the game, potentially used by debug builds in order to assert whether or not an entity was alive.
		/// 
		/// If entity is a ped and it's in a vehicle or on a mount the coords of that entity are returned. Set 'realCoords' to true when you need the true ped coords.
		/// </summary>
		public static Vector3 GET_ENTITY_COORDS(int entity, bool alive, bool realCoords) => Function.Call<Vector3>(0xA86D5F069399F44D, entity, alive, realCoords);
		/// <summary>
		/// Gets the entity's forward vector.
		/// </summary>
		public static Vector3 GET_ENTITY_FORWARD_VECTOR(int entity) => Function.Call<Vector3>(0x2412D9C05BB09B97, entity);
		/// <summary>
		/// Gets the X-component of the entity's forward vector.
		/// </summary>
		public static float GET_ENTITY_FORWARD_X(int entity) => Function.Call<float>(0xDB0954E9960F6457, entity);
		/// <summary>
		/// Gets the Y-component of the entity's forward vector.
		/// </summary>
		public static float GET_ENTITY_FORWARD_Y(int entity) => Function.Call<float>(0x9A5C073ECBDA7EE7, entity);
		public static Vector3 _0x935A30AA88FB1014(Any p0) => Function.Call<Vector3>(0x935A30AA88FB1014, p0);
		/// <summary>
		/// Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
		/// </summary>
		public static float GET_ENTITY_HEADING(int entity) => Function.Call<float>(0xC230DD956E2F5507, entity);
		public static int GET_ENTITY_HEALTH(int entity) => Function.Call<int>(0x82368787EA73C0F7, entity);
		/// <summary>
		/// Returns (CUR_HEALTH / MAX_HEALTH)
		/// </summary>
		public static float _GET_ENTITY_HEALTH_FLOAT(int entity) => Function.Call<float>(0x96C638784DB4C815, entity);
		/// <summary>
		/// Alters entity's health by 'amount'. Can be negative (to drain health).
		/// In the scripts entity2 and weaponHash are unused (zero).
		/// </summary>
		public static bool _CHANGE_ENTITY_HEALTH(int entity, float amount, int entity2, uint weaponHash) => Function.Call<bool>(0x835F131E7DC8F97A, entity, amount, entity2, weaponHash);
		public static int GET_ENTITY_MAX_HEALTH(int entity, bool p1) => Function.Call<int>(0x15D757606D170C3C, entity, p1);
		public static void SET_ENTITY_MAX_HEALTH(int entity, int value) => Function.Call(0x166E7CF68597D8B5, entity, value);
		public static float GET_ENTITY_HEIGHT(int entity, float X, float Y, float Z, bool atTop, bool inWorldCoords) => Function.Call<float>(0x296DEBC84474B375, entity, X, Y, Z, atTop, inWorldCoords);
		public static float GET_ENTITY_HEIGHT(int entity, Vector3 vec, bool atTop, bool inWorldCoords) => Function.Call<float>(0x296DEBC84474B375, entity, vec.X, vec.Y, vec.Z, atTop, inWorldCoords);
		public static float GET_ENTITY_HEIGHT_ABOVE_GROUND(int entity) => Function.Call<float>(0x0D3B5BAEA08F63E9, entity);
		public static void _GET_ENTITY_WORLD_POSITION_OF_DIMENSIONS(int entity, Vector3* minimum, Vector3* maximum) => Function.Call(0xF3FDA9A617A15145, entity, minimum, maximum);
		public static void GET_ENTITY_MATRIX(int entity, Vector3* rightVector, Vector3* forwardVector, Vector3* upVector, Vector3* position) => Function.Call(0x3A9B1120AF13FBF2, entity, rightVector, forwardVector, upVector, position);
		/// <summary>
		/// Returns the model hash from the entity
		/// </summary>
		public static uint GET_ENTITY_MODEL(int entity) => Function.Call<uint>(0xDA76A9F39210D365, entity);
		/// <summary>
		/// Returns the ped's animal type hash: https://alloc8or.re/rdr3/doc/enums/eAnimalType.txt
		/// Combine this with GET_STRING_FROM_HASH_KEY to display localized entity names
		/// </summary>
		public static uint _GET_PED_ANIMAL_TYPE(int ped) => Function.Call<uint>(0x964000D355219FC0, ped);
		public static bool GET_IS_ANIMAL(int entity) => Function.Call<bool>(0x9A100F1CF4546629, entity);
		public static bool _GET_IS_BIRD(int entity) => Function.Call<bool>(0xC346A546612C49A9, entity);
		public static bool _GET_IS_PREDATOR(int entity) => Function.Call<bool>(0x5594AFE9DE0C01B7, entity);
		public static Vector3 GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(int entity, float posX, float posY, float posZ) => Function.Call<Vector3>(0x497C6B1A2C9AE69C, entity, posX, posY, posZ);
		public static Vector3 GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(int entity, Vector3 vec) => Function.Call<Vector3>(0x497C6B1A2C9AE69C, entity, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Offset values are relative to the entity.
		/// 
		/// x = left/right
		/// y = forward/backward
		/// z = up/down
		/// </summary>
		public static Vector3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(int entity, float offsetX, float offsetY, float offsetZ) => Function.Call<Vector3>(0x1899F328B0E12848, entity, offsetX, offsetY, offsetZ);
		public static Vector3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(int entity, Vector3 offset) => Function.Call<Vector3>(0x1899F328B0E12848, entity, offset.X, offset.Y, offset.Z);
		public static float GET_ENTITY_PITCH(int entity) => Function.Call<float>(0xEF355ABEFF7F5005, entity);
		/// <summary>
		/// Displays the current ROLL axis of the entity [-180.0000/180.0000+]
		/// (Sideways Roll) such as a vehicle tipped on its side
		/// </summary>
		public static float GET_ENTITY_ROLL(int entity) => Function.Call<float>(0xBF966536FA8B6879, entity);
		public static Vector3 GET_ENTITY_ROTATION(int entity, int rotationOrder) => Function.Call<Vector3>(0xE09CAF86C32CB48F, entity, rotationOrder);
		public static uint _GET_ENTITY_SCRIPT(int entity, Any* argStruct) => Function.Call<uint>(0x2A08A32B6D49906F, entity, argStruct);
		/// <summary>
		/// Result is in meters per second (m/s)
		/// </summary>
		public static float GET_ENTITY_SPEED(int entity) => Function.Call<float>(0xFB6BA510A533DF81, entity);
		public static Vector3 GET_ENTITY_SPEED_VECTOR(int entity, bool relative) => Function.Call<Vector3>(0xF2DB09816A419DC5, entity, relative);
		public static float GET_ENTITY_UPRIGHT_VALUE(int entity) => Function.Call<float>(0x56398BE65160C3BE, entity);
		public static Vector3 GET_ENTITY_VELOCITY(int entity, int p1) => Function.Call<Vector3>(0x4805D2B1D8CF94A9, entity, p1);
		/// <summary>
		/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		/// </summary>
		public static int GET_OBJECT_INDEX_FROM_ENTITY_INDEX(int entity) => Function.Call<int>(0x280BBE5601EAA983, entity);
		/// <summary>
		/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		/// </summary>
		public static int GET_PED_INDEX_FROM_ENTITY_INDEX(int entity) => Function.Call<int>(0x0F16D042BD640EA3, entity);
		/// <summary>
		/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		/// </summary>
		public static int GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(int entity) => Function.Call<int>(0xDF1E5AAC561AFC59, entity);
		/// <summary>
		/// Returns the coordinates of an entity-bone.
		/// https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		/// </summary>
		public static Vector3 GET_WORLD_POSITION_OF_ENTITY_BONE(int entity, int boneIndex) => Function.Call<Vector3>(0x82CFA50E34681CA5, entity, boneIndex);
		/// <summary>
		/// Attaches scenario to bone with an offset
		/// _GET_I* - _GET_M*
		/// </summary>
		public static Vector3 _0x5E214112806591EA(int entity, int boneIndex) => Function.Call<Vector3>(0x5E214112806591EA, entity, boneIndex);
		public static Vector3 _0x3AB3A77672F6473F(Any p0, Any p1, Any p2, Any p3) => Function.Call<Vector3>(0x3AB3A77672F6473F, p0, p1, p2, p3);
		public static int GET_NEAREST_PLAYER_TO_ENTITY(int entity, int playerPedToIgnore, int flags) => Function.Call<int>(0x990E294FC387FB88, entity, playerPedToIgnore, flags);
		public static int GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(int entity, int team, int playerPedToIgnore, int flags) => Function.Call<int>(0xB2C30C3B4AFF718C, entity, team, playerPedToIgnore, flags);
		public static int GET_NEAREST_PARTICIPANT_TO_ENTITY(int entity) => Function.Call<int>(0x6888A43C35A5F630, entity);
		public static bool PLACE_ENTITY_ON_GROUND_PROPERLY(int entity, bool p1) => Function.Call<bool>(0x9587913B9E772D29, entity, p1);
		/// <summary>
		/// Returns entityType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityType
		/// </summary>
		public static int GET_ENTITY_TYPE(int entity) => Function.Call<int>(0x97F696ACA466B4E0, entity);
		public static int GET_ENTITY_POPULATION_TYPE(int entity) => Function.Call<int>(0xADE28862B6D7B85B, entity);
		public static bool IS_AN_ENTITY(int handle) => Function.Call<bool>(0x27CFF3E5A286D3DF, handle);
		public static bool IS_ENTITY_A_PED(int entity) => Function.Call<bool>(0xCF8176912DDA4EA5, entity);
		public static bool IS_ENTITY_A_MISSION_ENTITY(int entity) => Function.Call<bool>(0x138190F64DB4BBD1, entity);
		public static bool IS_ENTITY_A_VEHICLE(int entity) => Function.Call<bool>(0xC3D96AF45FCCEC4C, entity);
		public static bool IS_ENTITY_AN_OBJECT(int entity) => Function.Call<bool>(0x0A27A546A375FDEF, entity);
		/// <summary>
		/// Checks if entity is within x/y/zSize distance of x/y/z. 
		/// 
		/// Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
		/// </summary>
		public static bool IS_ENTITY_AT_COORD(int entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, bool p7, bool p8, int p9) => Function.Call<bool>(0x5E58342602E94718, entity, xPos, yPos, zPos, xSize, ySize, zSize, p7, p8, p9);
		public static bool IS_ENTITY_AT_COORD(int entity, Vector3 vec, float xSize, float ySize, float zSize, bool p7, bool p8, int p9) => Function.Call<bool>(0x5E58342602E94718, entity, vec.X, vec.Y, vec.Z, xSize, ySize, zSize, p7, p8, p9);
		/// <summary>
		/// Checks if entity1 is within the box defined by x/y/zSize of entity2.
		/// 
		/// Last three parameters are almost always p5 = 0, p6 = 1, p7 = 0
		/// </summary>
		public static bool IS_ENTITY_AT_ENTITY(int entity1, int entity2, float xSize, float ySize, float zSize, bool p5, bool p6, int p7) => Function.Call<bool>(0xC057F02B837A27F6, entity1, entity2, xSize, ySize, zSize, p5, p6, p7);
		public static bool IS_ENTITY_ATTACHED(int entity) => Function.Call<bool>(0xEE6AD63ABF59C0B7, entity);
		public static bool IS_ENTITY_ATTACHED_TO_ANY_OBJECT(int entity) => Function.Call<bool>(0x306C1F6178F01AB3, entity);
		public static bool IS_ENTITY_ATTACHED_TO_ANY_PED(int entity) => Function.Call<bool>(0xC841153DED2CA89A, entity);
		public static bool IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(int entity) => Function.Call<bool>(0x12DF6E0D2E736749, entity);
		public static bool IS_ENTITY_ATTACHED_TO_ENTITY(int from, int to) => Function.Call<bool>(0x154A3C529497053E, from, to);
		public static bool _IS_ENTITY_OWNED_BY_PERSISTENCE_SYSTEM(int entity) => Function.Call<bool>(0xA7E51B53309EAC97, entity);
		public static bool IS_ENTITY_DEAD(int entity) => Function.Call<bool>(0x7D5B1F88E7504BBA, entity);
		public static bool IS_ENTITY_IN_AIR(int entity, Any p1) => Function.Call<bool>(0x886E37EC497200B6, entity, p1);
		/// <summary>
		/// Creates a spherical cone at origin that extends to surface with the angle specified. Then returns true if the entity is inside the spherical cone
		/// 
		/// Angle is measured in degrees.
		/// </summary>
		public static bool IS_ENTITY_IN_ANGLED_AREA(int entity, float originX, float originY, float originZ, float edgeX, float edgeY, float edgeZ, float angle, bool p8, bool p9, Any p10) => Function.Call<bool>(0xD3151E53134595E5, entity, originX, originY, originZ, edgeX, edgeY, edgeZ, angle, p8, p9, p10);
		public static bool IS_ENTITY_IN_AREA(int entity, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8, Any p9) => Function.Call<bool>(0x0C2634C40A16193E, entity, x1, y1, z1, x2, y2, z2, p7, p8, p9);
		public static bool IS_ENTITY_IN_AREA(int entity, Vector3 vec1, Vector3 vec2, bool p7, bool p8, Any p9) => Function.Call<bool>(0x0C2634C40A16193E, entity, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p7, p8, p9);
		public static bool IS_ENTITY_IN_VOLUME(int entity, int volume, bool p2, int p3) => Function.Call<bool>(0x5A5526BC09C06623, entity, volume, p2, p3);
		public static bool IS_ENTITY_IN_WATER(int entity) => Function.Call<bool>(0xDDE5C125AC446723, entity);
		public static bool _IS_ENTITY_UNDERWATER(int entity, bool p1) => Function.Call<bool>(0xD4E5C1E93C466127, entity, p1);
		/// <summary>
		/// Get how much of the entity is submerged.  1.0f is whole entity.
		/// </summary>
		public static float GET_ENTITY_SUBMERGED_LEVEL(int entity) => Function.Call<float>(0x4A77C3F73FD9E831, entity);
		public static void SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(int entity, bool toggle) => Function.Call(0x850C940EE3E7B8B5, entity, toggle);
		public static void _0x7A49D40DE437BC8D(Any p0, Any p1) => Function.Call(0x7A49D40DE437BC8D, p0, p1);
		public static void _0x978AA2323ED32209(Any p0, Any p1) => Function.Call(0x978AA2323ED32209, p0, p1);
		public static void _0x002AAC783ED323ED(Any p0, Any p1) => Function.Call(0x002AAC783ED323ED, p0, p1);
		public static void _0x007AAC783ED323ED(Any p0, Any p1, Any p2) => Function.Call(0x007AAC783ED323ED, p0, p1, p2);
		public static bool IS_ENTITY_ON_SCREEN(int entity) => Function.Call<bool>(0x613C15D5D8DB781F, entity);
		public static bool IS_ENTITY_PLAYING_ANIM(int entity, string animDict, string animName, int taskFlag) => Function.Call<bool>(0xDEE49D5CA6C49148, entity, animDict, animName, taskFlag);
		public static Any _0x0B7CB1300CBFE19C(Any p0, Any p1) => Function.Call<Any>(0x0B7CB1300CBFE19C, p0, p1);
		public static bool IS_ENTITY_STATIC(int entity) => Function.Call<bool>(0x86468ADFA0F6B861, entity);
		public static bool IS_ENTITY_TOUCHING_ENTITY(int entity, int targetEntity) => Function.Call<bool>(0x9A2304A64C3C8423, entity, targetEntity);
		public static bool IS_ENTITY_TOUCHING_MODEL(int entity, uint modelHash) => Function.Call<bool>(0x2AE3EBC8DEB9768B, entity, modelHash);
		public static bool IS_ENTITY_UPRIGHT(int entity, float angle) => Function.Call<bool>(0xF6F6AFD8D4FB2658, entity, angle);
		public static bool IS_ENTITY_UPSIDEDOWN(int entity) => Function.Call<bool>(0x109DE3DA41AAD94A, entity);
		public static bool IS_ENTITY_VISIBLE(int entity) => Function.Call<bool>(0xFFC96ECB7FA404CA, entity);
		/// <summary>
		/// SET_ENTITY_LO*
		/// </summary>
		public static void _0xFF9965C47FA404DA(int entity, bool toggle) => Function.Call(0xFF9965C47FA404DA, entity, toggle);
		public static bool IS_ENTITY_VISIBLE_TO_SCRIPT(int entity) => Function.Call<bool>(0xF213C724E77F321A, entity);
		public static void _0x3F08C6163A4AB1D6(Any p0) => Function.Call(0x3F08C6163A4AB1D6, p0);
		public static void _0x0DB41D59E0F1502B(Any p0) => Function.Call(0x0DB41D59E0F1502B, p0);
		public static bool _IS_TRACKED_ENTITY_VISIBLE(int entity) => Function.Call<bool>(0xC8CCDB712FBCBA92, entity);
		public static bool IS_ENTITY_OCCLUDED(int entity) => Function.Call<bool>(0x140188E884645624, entity);
		public static bool WOULD_ENTITY_BE_OCCLUDED(uint entityModelHash, float x, float y, float z, bool p4) => Function.Call<bool>(0x3546FAB293FF2981, entityModelHash, x, y, z, p4);
		public static bool WOULD_ENTITY_BE_OCCLUDED(uint entityModelHash, Vector3 vec, bool p4) => Function.Call<bool>(0x3546FAB293FF2981, entityModelHash, vec.X, vec.Y, vec.Z, p4);
		public static bool IS_ENTITY_WAITING_FOR_WORLD_COLLISION(int entity) => Function.Call<bool>(0x5E1CC2E8DC3111DD, entity);
		public static bool _IS_ENTITY_ON_TRAIN_TRACK(int entity) => Function.Call<bool>(0x857ACB0AB4BD0D55, entity);
		public static void _0xCDB682BB47C02F0A(int entity, uint p1) => Function.Call(0xCDB682BB47C02F0A, entity, p1);
		public static void _0xE19035EB65AB2932(Any p0, Any p1) => Function.Call(0xE19035EB65AB2932, p0, p1);
		/// <summary>
		/// Sets the loot table an entity will carry. Returns true if loot table has been successfully set. Returns false if entity is not a ped or object.
		/// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/loot_rewards.lua
		/// </summary>
		public static bool SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT(int entity, uint lootTable) => Function.Call<bool>(0x8C03CD6B5E0E85E8, entity, lootTable);
		/// <summary>
		/// Returns false if entity is not a ped or object.
		/// </summary>
		public static bool _GET_SCRIPT_OVERRIDE_ENTITY_LOOT_TABLE_PERMANENT(int entity, uint* lootTable) => Function.Call<bool>(0x1E804EA9B12030A4, entity, lootTable);
		public static bool _REQUEST_ENTITY_LOOT_LIST(int mount, Any* argStruct, uint visiblelootslotrequestType, int flag, int p4, bool p5) => Function.Call<bool>(0xA88E215CEB0435C0, mount, argStruct, visiblelootslotrequestType, flag, p4, p5);
		public static Any _0xE31FC20319874CB3(Any p0, Any p1, Any p2) => Function.Call<Any>(0xE31FC20319874CB3, p0, p1, p2);
		public static Any _0x582F73ACFE969571(Any p0, Any p1, Any p2) => Function.Call<Any>(0x582F73ACFE969571, p0, p1, p2);
		public static Any _0xBA2A089E60ED1163(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0xBA2A089E60ED1163, p0, p1, p2, p3, p4);
		/// <summary>
		/// enum eCarriableState
		/// {
		/// 	CARRIABLE_STATE_NONE,
		/// 	CARRIABLE_STATE_TRANSITIONING_TO_HOGTIED,
		/// 	CARRIABLE_STATE_CARRIABLE_INTRO,
		/// 	CARRIABLE_STATE_CARRIABLE,
		/// 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_GROUND,
		/// 	CARRIABLE_STATE_CARRIED_BY_HUMAN,
		/// 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND,
		/// 	CARRIABLE_STATE_CARRIED_BY_MOUNT,
		/// 	CARRIABLE_STATE_BEING_PLACED_ON_MOUNT,
		/// 	CARRIABLE_STATE_BEING_PICKED_UP_FROM_MOUNT,
		/// 	CARRIABLE_STATE_BEING_CUT_FREE,
		/// 	CARRIABLE_STATE_BEING_PLACED_ON_GROUND_ESCAPE,
		/// 	CARRIABLE_STATE_BEING_PLACED_IN_VEHICLE
		/// };
		/// </summary>
		public static int GET_CARRIABLE_ENTITY_STATE(int entity) => Function.Call<int>(0x61914209C36EFDDB, entity);
		public static Any _0xD46BF94C4C66FAB0(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xD46BF94C4C66FAB0, p0, p1, p2, p3);
		/// <summary>
		/// Valid indices: 0 - 3
		/// Index 1 always returns a `hogtied` config, doesn't matter the entity.
		/// It's for humans only and the ped must be resurrected first if it's dead.
		/// </summary>
		public static uint _GET_OPTIMAL_CARRY_CONFIG(int entity, int index) => Function.Call<uint>(0x34F008A7E48C496B, entity, index);
		public static Any _0xD21C7418C590BB40(Any p0) => Function.Call<Any>(0xD21C7418C590BB40, p0);
		/// <summary>
		/// Returns zero if the entity is not a carriable
		/// </summary>
		public static uint _GET_ENTITY_CARRY_CONFIG(int entity) => Function.Call<uint>(0x0FD25587BB306C86, entity);
		public static bool _IS_CARRIABLE_MODEL(uint model) => Function.Call<bool>(0x5AFFA9DDC87846F8, model);
		/// <summary>
		/// Returns a hash of an entity's name. (Alternative Name: _GET_ENTITY_PROMPT_NAME_HASH)
		/// </summary>
		public static uint _GET_CARRIABLE_FROM_ENTITY(int entity) => Function.Call<uint>(0x31FEF6A20F00B963, entity);
		/// <summary>
		/// Changes type and quality of skins
		/// type hashes: https://pastebin.com/C1WvQjCy
		/// </summary>
		public static void _SET_ENTITY_CARCASS_TYPE(int entity, uint type) => Function.Call(0x399657ED871B3A6C, entity, type);
		public static Any _0x2A77EF9BEC8518F4(Any p0) => Function.Call<Any>(0x2A77EF9BEC8518F4, p0);
		public static void _DELETE_CARRIABLE(int* entity) => Function.Call(0x0D0DB2B6AF19A987, entity);
		public static bool _IS_ENTITY_FULLY_LOOTED(int entity) => Function.Call<bool>(0x8DE41E9902E85756, entity);
		public static void _SET_ENTITY_FULLY_LOOTED(int entity, bool looted) => Function.Call(0x6BCF5F3D8FFE988D, entity, looted);
		public static Any _0xEF2D9ED7CE684F08(Any p0) => Function.Call<Any>(0xEF2D9ED7CE684F08, p0);
		public static Any _0x0CCEFC6C2C95DA2A(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x0CCEFC6C2C95DA2A, p0, p1, p2, p3);
		/// <summary>
		/// Used when checking if ped is in water
		/// </summary>
		public static bool _0x383F64263F946E45(int* p0, int entity, int p2, int ped, Any p4, int p5) => Function.Call<bool>(0x383F64263F946E45, p0, entity, p2, ped, p4, p5);
		public static Any _0x8E10DF0FFA63FB65(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0x8E10DF0FFA63FB65, p0, p1, p2, p3, p4);
		/// <summary>
		/// flagId: see _SET_ENTITY_CARRYING_FLAG
		/// </summary>
		public static bool _GET_ENTITY_CARRYING_FLAG(int entity, int flagId) => Function.Call<bool>(0x808077647856DE62, entity, flagId);
		/// <summary>
		/// flagId: https://github.com/femga/rdr3_discoveries/tree/master/AI/CARRYING_FLAGS
		/// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CCarryingFlags__Flags
		/// 
		/// enum eCarryingFlag
		/// {
		/// 	CARRYING_FLAG_CAN_BE_CUT_FREE = 1,
		/// 	CARRYING_FLAG_CAN_BE_CARRIED_ON_FOOT = 2,
		/// 	CARRYING_FLAG_CAN_BE_DROPPED = 4,
		/// 	CARRYING_FLAG_CAN_BE_CARRIED_WHEN_DEAD = 7,
		/// 	CARRYING_FLAG_CAN_CARRY_ANYTHING = 9,
		/// 	CARRYING_FLAG_DISABLE_PROMPT_LOS_CHECKS = 19,
		/// 	CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION = 23,
		/// 	CARRYING_FLAG_PICKUPS_IGNORE_HEIGHT_RESTRICTIONS = 26,
		/// 	CARRYING_FLAG_CLEAN_UP_WHEN_NOT_CARRIED = 27,
		/// 	CARRYING_FLAG_BLOCK_KNOCK_OFF_PED_VARIATIONS_FROM_CARRIABLE_INTERACTIONS = 29,
		/// 	CARRYING_FLAG_HIT_WHEN_CARRIABLE = 31,
		/// 	CARRYING_FLAG_DISABLE_CARRIABLE_INTERACTIONS_ON_THIS_MOUNT = 34,
		/// 	CARRYING_FLAG_FORCE_HIDE_PROMPT_GROUP = 37,
		/// };
		/// </summary>
		public static void _SET_ENTITY_CARRYING_FLAG(int entity, int flagId, bool value) => Function.Call(0x18FF3110CF47115D, entity, flagId, value);
		/// <summary>
		/// Returns BOOL in ida
		/// </summary>
		public static void _0xC3ABCFBC7D74AFA5(int ped, int p1, bool p2) => Function.Call(0xC3ABCFBC7D74AFA5, ped, p1, p2);
		/// <summary>
		/// Called if entity is in water and submerged level is larger than 1f. If CARRYING_FLAG_FORCE_ALLOW_WARP_TO_SAFE_GROUND_LOCATION is true, it gets disabled as well.
		/// </summary>
		public static void _0x371D179701D9C082(int entity) => Function.Call(0x371D179701D9C082, entity);
		public static void _0xA48E4801DEBDF7E4(int entity, bool p1) => Function.Call(0xA48E4801DEBDF7E4, entity, p1);
		public static bool _GET_IS_CARRIABLE_PELT(int entity) => Function.Call<bool>(0x255B6DB4E3AD3C3E, entity);
		public static Any _0xF59FDE7B4D31A630(Any p0) => Function.Call<Any>(0xF59FDE7B4D31A630, p0);
		public static Any _0x120376C23F019C6C(Any p0, Any p1) => Function.Call<Any>(0x120376C23F019C6C, p0, p1);
		public static Any _0x5744562E973E33CD(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0x5744562E973E33CD, p0, p1, p2, p3, p4);
		public static void _0xDD03FC2089AD093C(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xDD03FC2089AD093C, p0, p1, p2, p3);
		public static Any _0xB16C780C51E51E2B(Any p0) => Function.Call<Any>(0xB16C780C51E51E2B, p0);
		public static void _0xEF259AA1E097E0AD(int entity, Any p1) => Function.Call(0xEF259AA1E097E0AD, entity, p1);
		public static void _0xBD94CECFB2D65119(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xBD94CECFB2D65119, p0, p1, p2, p3, p4, p5);
		public static void _SET_ENTITY_CUSTOM_PICKUP_RADIUS(int entity, float radius) => Function.Call(0x482D17E45665DA44, entity, radius);
		public static void _0xE75EEA8DB59A9F39(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xE75EEA8DB59A9F39, p0, p1, p2, p3, p4, p5);
		public static Any _0x188736456D1DEDE6(Any p0, Any p1) => Function.Call<Any>(0x188736456D1DEDE6, p0, p1);
		public static void _0xC6A1A3D63F122DE7(Any p0, Any p1) => Function.Call(0xC6A1A3D63F122DE7, p0, p1);
		/// <summary>
		/// p6/relative - makes the xyz force not relative to world coords, but to something else
		/// p7/highForce - setting false will make the force really low
		/// </summary>
		public static void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(int entity, int forceType, float x, float y, float z, bool p5, bool isDirectionRel, bool isForceRel, bool p8) => Function.Call(0x31DA7CEC5334DB37, entity, forceType, x, y, z, p5, isDirectionRel, isForceRel, p8);
		public static void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(int entity, int forceType, Vector3 vec, bool p5, bool isDirectionRel, bool isForceRel, bool p8) => Function.Call(0x31DA7CEC5334DB37, entity, forceType, vec.X, vec.Y, vec.Z, p5, isDirectionRel, isForceRel, p8);
		public static void APPLY_FORCE_TO_ENTITY(int entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13) => Function.Call(0xF15E8F5D333F09C4, entity, forceFlags, x, y, z, offX, offY, offZ, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
		public static void APPLY_FORCE_TO_ENTITY(int entity, int forceFlags, Vector3 vec, Vector3 offset, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13) => Function.Call(0xF15E8F5D333F09C4, entity, forceFlags, vec.X, vec.Y, vec.Z, offset.X, offset.Y, offset.Z, boneIndex, isDirectionRel, ignoreUpVec, isForceRel, p12, p13);
		/// <summary>
		/// Attaches entity1 to bone (boneIndex) of entity2.
		/// 
		/// boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
		/// https://github.com/femga/rdr3_discoveries/tree/master/boneNames
		/// 
		/// useSoftPinning - if set to false attached entity will not detach when fixed
		/// collision - controls collision between the two entities (FALSE disables collision).
		/// isPed - pitch doesn't work when false and roll will only work on negative numbers (only peds)
		/// vertexIndex - position of vertex
		/// fixedRot - if false it ignores entity vector
		/// </summary>
		public static void ATTACH_ENTITY_TO_ENTITY(int entity1, int entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot, bool p15, bool p16) => Function.Call(0x6B9BBD38AB0796DF, entity1, entity2, boneIndex, xPos, yPos, zPos, xRot, yRot, zRot, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15, p16);
		public static void ATTACH_ENTITY_TO_ENTITY(int entity1, int entity2, int boneIndex, Vector3 vec, Vector3 rotation, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot, bool p15, bool p16) => Function.Call(0x6B9BBD38AB0796DF, entity1, entity2, boneIndex, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p9, useSoftPinning, collision, isPed, vertexIndex, fixedRot, p15, p16);
		public static void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(int entity1, int entity2, int p2, int boneIndex, float offsetX, float offsetY, float offsetZ, float p7, float p8, float p9, float p10, float p11, float p12, float p13, bool p14, bool p15, bool p16, bool p17, int p18, bool p19, float p20, float p21) => Function.Call(0xB629A43CA1643481, entity1, entity2, p2, boneIndex, offsetX, offsetY, offsetZ, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
		public static void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(int entity1, int entity2, int p2, int boneIndex, Vector3 offset, float p7, float p8, float p9, float p10, float p11, float p12, float p13, bool p14, bool p15, bool p16, bool p17, int p18, bool p19, float p20, float p21) => Function.Call(0xB629A43CA1643481, entity1, entity2, p2, boneIndex, offset.X, offset.Y, offset.Z, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
		public static void _0x445D7D8EA66E373E(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15) => Function.Call(0x445D7D8EA66E373E, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		public static void _0x16908E859C3AB698(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x16908E859C3AB698, p0, p1, p2, p3, p4);
		public static int GET_ENTITY_BONE_INDEX_BY_NAME(int entity, string boneName) => Function.Call<int>(0xBACA8FE9C76C124E, entity, boneName);
		public static void CLEAR_ENTITY_LAST_DAMAGE_ENTITY(int entity) => Function.Call(0xBB19AC7D4DCEFD0F, entity);
		/// <summary>
		/// Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		public static void DELETE_ENTITY(int* entity) => Function.Call(0x4CD38C78BD19A497, entity);
		/// <summary>
		/// Must be called from a background script, otherwise it will do nothing.
		/// </summary>
		public static void _DELETE_ENTITY_2(int* entity) => Function.Call(0x5E94EA09E7207C16, entity);
		public static void DETACH_ENTITY(int entity, bool p1, bool collision) => Function.Call(0x64CDE9D6BF8ECAD3, entity, p1, collision);
		/// <summary>
		/// Getter for FREEZE_ENTITY_POSITION
		/// </summary>
		public static bool _IS_ENTITY_FROZEN(int entity) => Function.Call<bool>(0x083D497D57B7400F, entity);
		public static void FREEZE_ENTITY_POSITION(int entity, bool toggle) => Function.Call(0x7D9EFB7AD6B19754, entity, toggle);
		/// <summary>
		/// Old name: _SET_ENTITY_CLEANUP_BY_ENGINE
		/// </summary>
		public static void SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(int entity, bool toggle) => Function.Call(0x740CB4F3F602C9F4, entity, toggle);
		/// <summary>
		/// Makes the specified entity (ped, vehicle or object) persistent. Persistent entities will not automatically be removed by the engine.
		/// </summary>
		public static void SET_ENTITY_AS_MISSION_ENTITY(int entity, bool p1, bool p2) => Function.Call(0xDC19C288082E586E, entity, p1, p2);
		/// <summary>
		/// Marks the specified entity (ped, vehicle or object) as no longer needed.
		/// Entities marked as no longer needed, will be deleted as the engine sees fit.
		/// </summary>
		public static void SET_ENTITY_AS_NO_LONGER_NEEDED(int* entity) => Function.Call(0x4971D2F8162B9674, entity);
		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		public static void SET_PED_AS_NO_LONGER_NEEDED(int* ped) => Function.Call(0x2595DD4236549CE3, ped);
		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		public static void SET_VEHICLE_AS_NO_LONGER_NEEDED(int* vehicle) => Function.Call(0x629BFA74418D6239, vehicle);
		/// <summary>
		/// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		/// </summary>
		public static void SET_OBJECT_AS_NO_LONGER_NEEDED(int* _object) => Function.Call(0x3AE22DEB5BA5A3E6, _object);
		public static void _0x20FAEE47427A4497() => Function.Call(0x20FAEE47427A4497);
		/// <summary>
		/// Returns true if calling script owns specified entity
		/// </summary>
		public static bool _DOES_THREAD_OWN_THIS_ENTITY(int entity) => Function.Call<bool>(0x88AD6CC10D8D35B2, entity);
		public static void _0x56E0735D6273B227(Any p0, Any p1) => Function.Call(0x56E0735D6273B227, p0, p1);
		/// <summary>
		/// SET_ENTITY_A*
		/// </summary>
		public static void _0xC0EDEF16D90661EE(int entity, float p1) => Function.Call(0xC0EDEF16D90661EE, entity, p1);
		public static void _0x0FD7D7C232876E72(Any p0) => Function.Call(0x0FD7D7C232876E72, p0);
		public static void _0x0939E773925C4719() => Function.Call(0x0939E773925C4719);
		public static void SET_ENTITY_CAN_BE_DAMAGED(int entity, bool toggle) => Function.Call(0x0D06D522B90E861F, entity, toggle);
		public static bool _GET_ENTITY_CAN_BE_DAMAGED(int entity) => Function.Call<bool>(0x75DF9E73F2F005FD, entity);
		public static void SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(int entity, bool bCanBeDamaged, uint relGroup) => Function.Call(0x0EF1AFB18649E015, entity, bCanBeDamaged, relGroup);
		public static void _0xFF83AF534156B399(Any p0, Any p1) => Function.Call(0xFF83AF534156B399, p0, p1);
		/// <summary>
		/// Sets whether the entity can be targeted without being in line-of-sight.
		/// </summary>
		public static void SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(int entity, bool toggle) => Function.Call(0x6D09F32E284D0FB7, entity, toggle);
		public static bool GET_ENTITY_COLLISION_DISABLED(int entity) => Function.Call<bool>(0xAA2FADD30F45A9DA, entity);
		public static void SET_ENTITY_COLLISION(int entity, bool toggle, bool keepPhysics) => Function.Call(0xF66F820909453B8C, entity, toggle, keepPhysics);
		public static void SET_ENTITY_COMPLETELY_DISABLE_COLLISION(int entity, bool toggle, bool keepPhysics) => Function.Call(0xE0580EC84813875A, entity, toggle, keepPhysics);
		public static void SET_ENTITY_COORDS(int entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea) => Function.Call(0x06843DA7060A026B, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis, clearArea);
		public static void SET_ENTITY_COORDS(int entity, Vector3 vec, bool xAxis, bool yAxis, bool zAxis, bool clearArea) => Function.Call(0x06843DA7060A026B, entity, vec.X, vec.Y, vec.Z, xAxis, yAxis, zAxis, clearArea);
		/// <summary>
		/// Axis - Invert Axis Flags
		/// </summary>
		public static void SET_ENTITY_COORDS_NO_OFFSET(int entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis) => Function.Call(0x239A3351AC1DA385, entity, xPos, yPos, zPos, xAxis, yAxis, zAxis);
		public static void SET_ENTITY_COORDS_NO_OFFSET(int entity, Vector3 vec, bool xAxis, bool yAxis, bool zAxis) => Function.Call(0x239A3351AC1DA385, entity, vec.X, vec.Y, vec.Z, xAxis, yAxis, zAxis);
		public static void SET_ENTITY_DYNAMIC(int entity, bool toggle) => Function.Call(0xFBFC4473F66CE344, entity, toggle);
		public static void SET_ENTITY_HEADING(int entity, float heading) => Function.Call(0xCF2B9C0645C4651B, entity, heading);
		public static void _SET_ENTITY_COORDS_AND_HEADING(int entity, float xPos, float yPos, float zPos, float heading, bool xAxis, bool yAxis, bool zAxis) => Function.Call(0x203BEFFDBE12E96A, entity, xPos, yPos, zPos, heading, xAxis, yAxis, zAxis);
		public static void _SET_ENTITY_COORDS_AND_HEADING(int entity, Vector3 vec, float heading, bool xAxis, bool yAxis, bool zAxis) => Function.Call(0x203BEFFDBE12E96A, entity, vec.X, vec.Y, vec.Z, heading, xAxis, yAxis, zAxis);
		public static void _SET_ENTITY_COORDS_AND_HEADING_NO_OFFSET(int entity, float xPos, float yPos, float zPos, float heading, bool p5, bool p6) => Function.Call(0x0918E3565C20F03C, entity, xPos, yPos, zPos, heading, p5, p6);
		public static void _SET_ENTITY_COORDS_AND_HEADING_NO_OFFSET(int entity, Vector3 vec, float heading, bool p5, bool p6) => Function.Call(0x0918E3565C20F03C, entity, vec.X, vec.Y, vec.Z, heading, p5, p6);
		/// <summary>
		/// Sets the entity's health. healthAmount sets the health value to that, and sets the maximum health core value. Setting healthAmount to 0 will kill the entity. entityKilledBy parameter can also be 0
		/// </summary>
		public static void SET_ENTITY_HEALTH(int entity, int healthAmount, int entityKilledBy) => Function.Call(0xAC2767ED8BDFAB15, entity, healthAmount, entityKilledBy);
		/// <summary>
		/// Sets a ped or an object totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions.
		/// </summary>
		public static void SET_ENTITY_INVINCIBLE(int entity, bool toggle) => Function.Call(0xA5C38736C426FCB8, entity, toggle);
		/// <summary>
		/// SET_ENTITY_LO*
		/// </summary>
		public static void _0xAF7F3099B9FEB535(int entity, float p1, float p2, float p3) => Function.Call(0xAF7F3099B9FEB535, entity, p1, p2, p3);
		public static void SET_ENTITY_IS_TARGET_PRIORITY(int entity, bool p1, float p2) => Function.Call(0x0A5D170C44CB2189, entity, p1, p2);
		public static void _0xB38A29CCD5447783(Any p0, Any p1, Any p2) => Function.Call(0xB38A29CCD5447783, p0, p1, p2);
		/// <summary>
		/// tier: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEntityThreatTier
		/// </summary>
		public static void _SET_ENTITY_THREAT_TIER(int entity, int tier, bool p2) => Function.Call(0x4B436BAC8CBE9B07, entity, tier, p2);
		public static int _GET_ENTITY_THREAT_TIER(int entity) => Function.Call<int>(0xE12F56CB25D9CE23, entity);
		public static void _0x2D40BCBFE9305DEA(Any p0, Any p1) => Function.Call(0x2D40BCBFE9305DEA, p0, p1);
		public static void _SET_ENTITY_LIGHTS_ENABLED(int entity, bool enabled) => Function.Call(0xEBDC12861D079ABA, entity, enabled);
		public static void SET_ENTITY_LOAD_COLLISION_FLAG(int entity, bool toggle) => Function.Call(0x9B9EE31AED48072E, entity, toggle);
		public static bool HAS_COLLISION_LOADED_AROUND_ENTITY(int entity) => Function.Call<bool>(0xBEB1600952B9CF5C, entity);
		/// <summary>
		/// Old name: _HAS_COLLISION_LOADED_AT_COORDS
		/// </summary>
		public static bool HAS_COLLISION_LOADED_AROUND_POSITION(float xPos, float yPos, float zPos) => Function.Call<bool>(0x6BFBDC46139C45AB, xPos, yPos, zPos);
		public static bool HAS_COLLISION_LOADED_AROUND_POSITION(Vector3 vec) => Function.Call<bool>(0x6BFBDC46139C45AB, vec.X, vec.Y, vec.Z);
		public static void SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(int entity, bool toggle) => Function.Call(0x473598683095D430, entity, toggle);
		public static void SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(int entity, bool p1, uint relationshipGroup) => Function.Call(0x6C1F6AA2F0ADD104, entity, p1, relationshipGroup);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/ENTITY_PROOFS
		/// BOOL p2: handles an additional special proofs flag, so it simply indicates whether it should be enabled or disabled, not sure what exactly it proofs the entity from though
		/// </summary>
		public static void SET_ENTITY_PROOFS(int entity, int proofsBitset, bool specialFlag) => Function.Call(0xFAEE099C6F890BB8, entity, proofsBitset, specialFlag);
		/// <summary>
		/// Note: this native was removed in 1232 but added back in 1311
		/// </summary>
		public static int _GET_ENTITY_PROOFS(int entity) => Function.Call<int>(0x6CF0DAD7FA1088EA, entity);
		public static void SET_ENTITY_QUATERNION(int entity, float x, float y, float z, float w) => Function.Call(0x100E7007D13E3687, entity, x, y, z, w);
		public static void SET_ENTITY_QUATERNION(int entity, Vector3 vec, float w) => Function.Call(0x100E7007D13E3687, entity, vec.X, vec.Y, vec.Z, w);
		public static void SET_ENTITY_ROTATION(int entity, float pitch, float roll, float yaw, int rotationOrder, bool p5) => Function.Call(0x9CC8314DFEDE441E, entity, pitch, roll, yaw, rotationOrder, p5);
		public static void SET_ENTITY_ROTATION(int entity, Vector3 rotation, int rotationOrder, bool p5) => Function.Call(0x9CC8314DFEDE441E, entity, rotation.X, rotation.Y, rotation.Z, rotationOrder, p5);
		public static void _0xD45BB89B53FC0CFD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xD45BB89B53FC0CFD, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void SET_ENTITY_VISIBLE(int entity, bool toggle) => Function.Call(0x1794B4FCC84D812F, entity, toggle);
		public static void _0x80FDEB3A9E9AA578(int entity, bool p1) => Function.Call(0x80FDEB3A9E9AA578, entity, p1);
		public static void _0x9C6906EF8CB20C5F(int entity) => Function.Call(0x9C6906EF8CB20C5F, entity);
		/// <summary>
		/// Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
		/// </summary>
		public static void SET_ENTITY_VELOCITY(int entity, float x, float y, float z) => Function.Call(0x1C99BB7B6E96D16F, entity, x, y, z);
		public static void SET_ENTITY_VELOCITY(int entity, Vector3 vec) => Function.Call(0x1C99BB7B6E96D16F, entity, vec.X, vec.Y, vec.Z);
		public static void SET_ENTITY_HAS_GRAVITY(int entity, bool toggle) => Function.Call(0x0CEDB728A1083FA7, entity, toggle);
		/// <summary>
		/// LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
		/// </summary>
		public static void SET_ENTITY_LOD_DIST(int entity, int value) => Function.Call(0x5FB407F0A7C877BF, entity, value);
		/// <summary>
		/// Returns the LOD distance of an entity.
		/// </summary>
		public static int GET_ENTITY_LOD_DIST(int entity) => Function.Call<int>(0xDF240D0C2A948683, entity);
		/// <summary>
		/// skin - everything alpha except skin
		/// Set entity alpha level. Ranging from 0 to 255 but changes occur after every 20 percent (after every 51).
		/// </summary>
		public static void SET_ENTITY_ALPHA(int entity, int alphaLevel, bool skin) => Function.Call(0x0DF7692B1D9E7BA7, entity, alphaLevel, skin);
		public static int GET_ENTITY_ALPHA(int entity) => Function.Call<int>(0x1BB501624FAF2BEA, entity);
		public static void RESET_ENTITY_ALPHA(int entity) => Function.Call(0x744B9EF44779D9AB, entity);
		public static void _SET_ENTITY_FADE_IN(int entity) => Function.Call(0xA91E6CF94404E8C9, entity);
		public static void SET_ENTITY_ALWAYS_PRERENDER(int entity, bool toggle) => Function.Call(0xACAD101E1FB66689, entity, toggle);
		public static void SET_ENTITY_RENDER_SCORCHED(int entity, bool toggle) => Function.Call(0x85B8A7534E44BC23, entity, toggle);
		/// <summary>
		/// Seems to return true if entity is burned / scorched
		/// _GET_ENTITY_*
		/// </summary>
		public static Any _0x37B01666BAE8F7EF(int entity) => Function.Call<Any>(0x37B01666BAE8F7EF, entity);
		public static void _0xA9E6D8F2DDFC4DB9(Any p0, Any p1) => Function.Call(0xA9E6D8F2DDFC4DB9, p0, p1);
		/// <summary>
		/// Only works with objects!
		/// </summary>
		public static void CREATE_MODEL_SWAP(float x, float y, float z, float radius, uint originalModel, uint newModel, bool p6) => Function.Call(0x10B2218320B6F5AC, x, y, z, radius, originalModel, newModel, p6);
		public static void CREATE_MODEL_SWAP(Vector3 vec, float radius, uint originalModel, uint newModel, bool p6) => Function.Call(0x10B2218320B6F5AC, vec.X, vec.Y, vec.Z, radius, originalModel, newModel, p6);
		public static void REMOVE_MODEL_SWAP(float x, float y, float z, float radius, uint originalModel, uint newModel, bool p6) => Function.Call(0x824E1C26A14CB817, x, y, z, radius, originalModel, newModel, p6);
		public static void REMOVE_MODEL_SWAP(Vector3 vec, float radius, uint originalModel, uint newModel, bool p6) => Function.Call(0x824E1C26A14CB817, vec.X, vec.Y, vec.Z, radius, originalModel, newModel, p6);
		public static void CREATE_MODEL_HIDE(float x, float y, float z, float radius, uint model, bool p5) => Function.Call(0x069848B3FB3C4426, x, y, z, radius, model, p5);
		public static void CREATE_MODEL_HIDE(Vector3 vec, float radius, uint model, bool p5) => Function.Call(0x069848B3FB3C4426, vec.X, vec.Y, vec.Z, radius, model, p5);
		public static void CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(float x, float y, float z, float radius, uint model, bool p5) => Function.Call(0xD136090A9AAAB17D, x, y, z, radius, model, p5);
		public static void CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(Vector3 vec, float radius, uint model, bool p5) => Function.Call(0xD136090A9AAAB17D, vec.X, vec.Y, vec.Z, radius, model, p5);
		public static void REMOVE_MODEL_HIDE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x3F38A98576F6213A, p0, p1, p2, p3, p4, p5);
		public static Any _0xD4636C2EDB0DEA8A(Any p0) => Function.Call<Any>(0xD4636C2EDB0DEA8A, p0);
		public static void CREATE_FORCED_OBJECT(float x, float y, float z, Any p3, uint modelHash, bool p5) => Function.Call(0x0961A905AFBC34C7, x, y, z, p3, modelHash, p5);
		public static void CREATE_FORCED_OBJECT(Vector3 vec, Any p3, uint modelHash, bool p5) => Function.Call(0x0961A905AFBC34C7, vec.X, vec.Y, vec.Z, p3, modelHash, p5);
		public static void REMOVE_FORCED_OBJECT(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x553FA683F2BCD814, p0, p1, p2, p3, p4);
		public static void SET_ENTITY_NO_COLLISION_ENTITY(int entity1, int entity2, bool thisFrameOnly) => Function.Call(0xE037BF068223C38D, entity1, entity2, thisFrameOnly);
		public static void SET_ENTITY_MOTION_BLUR(int entity, bool toggle) => Function.Call(0x516C6ABD18322B63, entity, toggle);
		public static void SET_CAN_AUTO_VAULT_ON_ENTITY(int entity, bool toggle) => Function.Call(0x80646744FA88F9D7, entity, toggle);
		public static void SET_CAN_CLIMB_ON_ENTITY(int entity, bool toggle) => Function.Call(0x24AED2A608F93C4C, entity, toggle);
		/// <summary>
		/// Old name: _SET_ENTITY_DECALS_DISABLED
		/// </summary>
		public static void SET_ENTITY_NOWEAPONDECALS(int entity, bool toggle) => Function.Call(0xC64E597783BE9A1D, entity, toggle);
		public static int _GET_ENTITIES_NEAR_POINT(float x, float y, float z, float radius, int itemSet, int p5) => Function.Call<int>(0x59B57C4B06531E1E, x, y, z, radius, itemSet, p5);
		public static int _GET_ENTITIES_NEAR_POINT(Vector3 vec, float radius, int itemSet, int p5) => Function.Call<int>(0x59B57C4B06531E1E, vec.X, vec.Y, vec.Z, radius, itemSet, p5);
		public static int GET_MATCHING_ENTITIES(int volume, int itemSet, int entityType, Any p3, uint p4, string p5) => Function.Call<int>(0x84CCF9A12942C83D, volume, itemSet, entityType, p3, p4, p5);
		public static int _GET_ENTITIES_IN_VOLUME(int volume, int itemSet, int entityType) => Function.Call<int>(0x886171A12F400B89, volume, itemSet, entityType);
		/// <summary>
		/// Alternative Name: _GET_ENTITY_FROM_MAP_OBJECT; You can get existing objects and manipulate them using this native.
		/// </summary>
		public static int _SEARCH_BUILDING_POOL_FOR_ENTITY_WITH_THIS_MODEL(uint modelHash) => Function.Call<int>(0x66B2B83B94B22458, modelHash);
		public static Any _0xC2E71D7E0A7B4C89(Any p0) => Function.Call<Any>(0xC2E71D7E0A7B4C89, p0);
		public static void _0x6C31B06E91518269(Any p0, Any p1) => Function.Call(0x6C31B06E91518269, p0, p1);
		public static void _0x119A5714578F4E05(Any p0, Any p1) => Function.Call(0x119A5714578F4E05, p0, p1);
		/// <summary>
		/// Params: p1 = 0 in R* Scripts (GET_DOOR_ENTITY_FROM_ID)
		/// https://github.com/femga/rdr3_discoveries/blob/master/doorHashes/doorhashes.lua
		/// </summary>
		public static int _GET_ENTITY_BY_DOORHASH(uint doorHash, int p1) => Function.Call<int>(0xF7424890E4A094C0, doorHash, p1);
		public static bool FIND_ANIM_EVENT_PHASE(string animDictionary, string animName, string p2, Any* p3, Any* p4) => Function.Call<bool>(0x42718CC559BD7776, animDictionary, animName, p2, p3, p4);
		public static void FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(int entity, bool p1) => Function.Call(0x4C9E96473D4F1A88, entity, p1);
		public static float _GET_ENTITY_ANIM_CURRENT_TIME(int entity, string animDict, string animName) => Function.Call<float>(0x627520389E288A73, entity, animDict, animName);
		/// <summary>
		/// Used in Script Function GENERIC_ITEM_HAS_ANIM_COMPLETED
		/// _GET_ENTITY_*
		/// </summary>
		public static float _0x8E46E18AA828334F(int entity, string animDict, string animClip) => Function.Call<float>(0x8E46E18AA828334F, entity, animDict, animClip);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _0xDF8E49EA89A01DB1(Any p0, Any p1, Any p2) => Function.Call<Any>(0xDF8E49EA89A01DB1, p0, p1, p2);
		public static bool HAS_ANIM_EVENT_FIRED(int entity, uint actionHash) => Function.Call<bool>(0x5851CC48405F4A07, entity, actionHash);
		public static bool HAS_ENTITY_ANIM_FINISHED(int entity, string animDict, string animName, int p3) => Function.Call<bool>(0xAEB40615337EF1E3, entity, animDict, animName, p3);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/animations
		/// </summary>
		public static bool PLAY_ENTITY_ANIM(int entity, string animName, string animDict, float p3, bool loop, bool stayInAnim, bool p6, float delta, Any bitset) => Function.Call<bool>(0xDC6D22FAB76D4874, entity, animName, animDict, p3, loop, stayInAnim, p6, delta, bitset);
		/// <summary>
		/// https://gfycat.com/amazingmiserlyamericanquarterhorse
		/// </summary>
		public static void _SET_ENTITY_ANIM_CURRENT_TIME(int entity, string animDict, string animName, float time) => Function.Call(0x11CDABDC7783B2BC, entity, animDict, animName, time);
		public static void _SET_ENTITY_ANIM_SPEED(int entity, string animDict, string animName, float speedMultiplier) => Function.Call(0xEAA885BA3CEA4E4A, entity, animDict, animName, speedMultiplier);
		public static Any STOP_ENTITY_ANIM(int entity, string animation, string animGroup, float p3) => Function.Call<Any>(0x786591D986DE9159, entity, animation, animGroup, p3);
		public static void _0x669655FFB29EF1A9(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x669655FFB29EF1A9, p0, p1, p2, p3);
		public static void _ADD_ENTITY_TRACKING_TRAILS(int entity) => Function.Call(0x1AD922AB5038DEF3, entity);
		/// <summary>
		/// _REMOVE_DECALS_* - _REMOVE_FORCED*
		/// </summary>
		public static void _0x5826EFD6D73C4DE5(int entity) => Function.Call(0x5826EFD6D73C4DE5, entity);
		public static void _PAUSE_ENTITY_TRACKING(int entity, bool pause) => Function.Call(0x36EB4D34D4A092C5, entity, pause);
		public static Any _CREATE_FOOTPATH_TRAIL(Any p0, string waypointRecord, bool bUseSnowOffset, float p3, float p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, bool bInit) => Function.Call<Any>(0x29BA9F78321E5A6C, p0, waypointRecord, bUseSnowOffset, p3, p4, p5, p6, p7, p8, p9, p10, bInit);
		public static void _0xC76E94A78127412B(Any p0, Any p1, Any p2) => Function.Call(0xC76E94A78127412B, p0, p1, p2);
		public static void _0x7F20092547B4DDEA(Any p0) => Function.Call(0x7F20092547B4DDEA, p0);
		public static void _0xF41E2979D5BC5370(Any p0) => Function.Call(0xF41E2979D5BC5370, p0);
		public static Any _0xAAACB74442C1BED3(Any p0) => Function.Call<Any>(0xAAACB74442C1BED3, p0);
		public static Any PIN_CLOSEST_MAP_ENTITY(uint modelHash, float x, float y, float z, int flags) => Function.Call<Any>(0x6F3068258A499E52, modelHash, x, y, z, flags);
		public static Any PIN_CLOSEST_MAP_ENTITY(uint modelHash, Vector3 vec, int flags) => Function.Call<Any>(0x6F3068258A499E52, modelHash, vec.X, vec.Y, vec.Z, flags);
		public static void _UNPIN_MAP_ENTITY(int entity) => Function.Call(0xD2B9C78537ED5759, entity);
		public static bool IS_MAP_ENTITY_PINNED(Any p0) => Function.Call<bool>(0x1FF441D7954F8709, p0);
		public static int _GET_PINNED_MAP_ENTITY(Any p0) => Function.Call<int>(0x4735E2A4BB83D9DA, p0);
		public static void _0xEAB3D91D30A344F1(Any p0) => Function.Call(0xEAB3D91D30A344F1, p0);
		public static void _0x37CEB637BA3B1A47(Any p0) => Function.Call(0x37CEB637BA3B1A47, p0);
		public static Any _0x350E9211074955AF(Any p0, Any p1) => Function.Call<Any>(0x350E9211074955AF, p0, p1);
		public static void _0x898586729DB5221D(int ped) => Function.Call(0x898586729DB5221D, ped);
		public static void _0xE9E7A0BAC7F57746(Any p0, Any p1) => Function.Call(0xE9E7A0BAC7F57746, p0, p1);
	}

	public unsafe static class EVENT
	{
		public static void SET_DECISION_MAKER(int ped, uint name) => Function.Call(0x8AE2F981CDDB8FA4, ped, name);
		public static void SET_DECISION_MAKER_TO_DEFAULT(int ped) => Function.Call(0x6B9C5C38838FB6E6, ped);
		public static int _CREATE_SHOCKING_EVENT(Any* args) => Function.Call<int>(0xCA1315C33B9A2847, args);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS
		/// </summary>
		public static int ADD_SHOCKING_EVENT_AT_POSITION(uint eventType, float x, float y, float z, float p4, float p5, float p6, float p7, float p8, int p9, int p10) => Function.Call<int>(0xD9F8455409B525E9, eventType, x, y, z, p4, p5, p6, p7, p8, p9, p10);
		public static int ADD_SHOCKING_EVENT_AT_POSITION(uint eventType, Vector3 vec, float p4, float p5, float p6, float p7, float p8, int p9, int p10) => Function.Call<int>(0xD9F8455409B525E9, eventType, vec.X, vec.Y, vec.Z, p4, p5, p6, p7, p8, p9, p10);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static int ADD_SHOCKING_EVENT_FOR_ENTITY(uint eventType, int entity, float p2, float p3, float p4, float p5, float p6, float p7, bool p8, bool p9, int p10, int p11) => Function.Call<int>(0x7FD8F3BE76F89422, eventType, entity, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static bool IS_SHOCKING_EVENT_IN_SPHERE(uint eventType, float x, float y, float z, float radius) => Function.Call<bool>(0x9DB47E16060D6354, eventType, x, y, z, radius);
		public static bool IS_SHOCKING_EVENT_IN_SPHERE(uint eventType, Vector3 vec, float radius) => Function.Call<bool>(0x9DB47E16060D6354, eventType, vec.X, vec.Y, vec.Z, radius);
		public static bool REMOVE_SHOCKING_EVENT(int _event) => Function.Call<bool>(0xE8BB3CC253A34559, _event);
		public static void REMOVE_ALL_SHOCKING_EVENTS(bool p0) => Function.Call(0xD47A168C2AB90DC4, p0);
		public static void _REMOVE_ALL_SHOCKING_EVENTS_IN_AREA(float x, float y, float z, float radius, bool p4) => Function.Call(0xB4C71BA9CAB097BD, x, y, z, radius, p4);
		public static void _REMOVE_ALL_SHOCKING_EVENTS_IN_AREA(Vector3 vec, float radius, bool p4) => Function.Call(0xB4C71BA9CAB097BD, vec.X, vec.Y, vec.Z, radius, p4);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static void _REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE_IN_AREA(uint eventType, float x, float y, float z, float radius, bool p5) => Function.Call(0x6A648D42BF271DC7, eventType, x, y, z, radius, p5);
		public static void _REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE_IN_AREA(uint eventType, Vector3 vec, float radius, bool p5) => Function.Call(0x6A648D42BF271DC7, eventType, vec.X, vec.Y, vec.Z, radius, p5);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static void REMOVE_ALL_SHOCKING_EVENTS_OF_TYPE(uint eventType, bool p1) => Function.Call(0x118873DD538490B4, eventType, p1);
		public static void REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS() => Function.Call(0xDB249021652420C5);
		/// <summary>
		/// _ADD* (_ADD_SHOCKING_EVENT_* ?)
		/// </summary>
		public static Any _0x36D0F2BA2C0D9BDE(int entity, int p1) => Function.Call<Any>(0x36D0F2BA2C0D9BDE, entity, p1);
		/// <summary>
		/// Only used in R* SP Scripts
		/// Hash only used in R* Script mob3.ysc: ROBBERY
		/// _ADD_PED*
		/// </summary>
		public static void _0x7C511E91738A0828(int ped1, int ped2, int p2, uint p3) => Function.Call(0x7C511E91738A0828, ped1, ped2, p2, p3);
		public static void SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME() => Function.Call(0x84994FAD4E4E4E69);
		/// <summary>
		/// _S* (_SUPPRESS_EVENTS_NEXT_FRAME?)
		/// </summary>
		public static void _0xB6F4825153920582() => Function.Call(0xB6F4825153920582);
		/// <summary>
		/// Only used in R* SP Script coachrobberies
		/// _SET_S*
		/// </summary>
		public static void _0x4B2B1A891D437CA7(float p0) => Function.Call(0x4B2B1A891D437CA7, p0);
		/// <summary>
		/// _SET_P*
		/// </summary>
		public static void _0x9520175B35E2268D(int ped, bool p1) => Function.Call(0x9520175B35E2268D, ped, p1);
		/// <summary>
		/// Only used in R* SP Script beat_rat_infestation and homeinvasion
		/// </summary>
		public static Any _0x18E93EBFC1FCFA48(int volume, bool p1, bool p2) => Function.Call<Any>(0x18E93EBFC1FCFA48, volume, p1, p2);
		/// <summary>
		/// Only used in R* SP Script beat_rat_infestation
		/// Params: p0 = value returned by 0x18E93EBFC1FCFA48
		/// </summary>
		public static void _0x56B3410626A473E7(Any p0) => Function.Call(0x56B3410626A473E7, p0);
		/// <summary>
		/// Models used in the scripts: P_REGISTER05X, P_REGISTER06X, P_REGISTER03X, PLAYER_ZERO, PLAYER_THREE, A_C_HORSE_MORGAN_FLAXENCHESTNUT
		/// </summary>
		public static void _ADD_MODEL_TO_EVENT_MONITOR(uint model, bool p1, bool p2) => Function.Call(0x608AD36A644A97FE, model, p1, p2);
		public static void _0x4465C3D1475BD3FD(uint model) => Function.Call(0x4465C3D1475BD3FD, model);
		public static Any _0x2DD42FAD06E6F19E(int _object, bool p1, bool p2) => Function.Call<Any>(0x2DD42FAD06E6F19E, _object, p1, p2);
		public static void _0xA86B0EE9B39D15D6(int _object) => Function.Call(0xA86B0EE9B39D15D6, _object);
		public static bool _0x26054EB81AC0893B(int _object) => Function.Call<bool>(0x26054EB81AC0893B, _object);
		public static void _SET_EVENT_TRACKER_FOR_PED(int ped, string eventName, int p2) => Function.Call(0xBB1E41DD3D3C6250, ped, eventName, p2);
		/// <summary>
		/// Might return time since some (?) event.
		/// </summary>
		public static int _0xAD17A18215DD23D6(int entity, int p1, int p2) => Function.Call<int>(0xAD17A18215DD23D6, entity, p1, p2);
		public static int _EVENT_GET_TIME_SINCE_EVENT(int entity, uint eventType, int p2, int p3) => Function.Call<int>(0xC6A7DC546E94FED5, entity, eventType, p2, p3);
		/// <summary>
		/// Returns eventType
		/// </summary>
		public static uint _EVENT_GET_RECENT_EVENT(int entity, int p1, int p2) => Function.Call<uint>(0x796EECFF0C6D39BE, entity, p1, p2);
		/// <summary>
		/// _IS_EVENT
		/// </summary>
		public static bool _0x797B3D4D92E56094(string eventName, uint eventType) => Function.Call<bool>(0x797B3D4D92E56094, eventName, eventType);
		public static int _EVENT_GET_SOURCE_ENTITY_FROM_EVENT(int entity, uint eventType, int p2, int p3) => Function.Call<int>(0x822A001BCEA5BD81, entity, eventType, p2, p3);
		public static int _EVENT_GET_TARGET_ENTITY_FROM_EVENT(int entity, uint eventType, int p2, int p3) => Function.Call<int>(0x38497F139981C5C9, entity, eventType, p2, p3);
		/// <summary>
		/// _GET*
		/// </summary>
		public static Any _0x1D1B448D719415AB(int ped) => Function.Call<Any>(0x1D1B448D719415AB, ped);
		/// <summary>
		/// _GET*
		/// </summary>
		public static Any _0x83D43F0FD5276E4D(int entity, int p1) => Function.Call<Any>(0x83D43F0FD5276E4D, entity, p1);
		/// <summary>
		/// HAS_ACTOR_RECEIVED_TRACKED_EVENT_THAT_SHOULD_ALERT - iTimeSinceEvent >= iTimeLimitMS
		/// </summary>
		public static void _0xE28D7FC9FD32ABEB(int entity, uint eventType, int p2) => Function.Call(0xE28D7FC9FD32ABEB, entity, eventType, p2);
		/// <summary>
		/// AGGRO_CHECK_PROPERTY_DAMAGE: Property damage found with event
		/// </summary>
		public static void _0x1A5C5D350068A673(int ped, int p1) => Function.Call(0x1A5C5D350068A673, ped, p1);
		public static void _EVENT_FLUSH_ALL_EVENT_TRACKERS(int ped) => Function.Call(0xAD8F2424C6E1E3A8, ped);
		public static void _0xE2C2FBB7825FFC66() => Function.Call(0xE2C2FBB7825FFC66);
	}

	public unsafe static class FIRE
	{
		/// <summary>
		/// Starts a fire:
		/// 
		/// xyz: Location of fire
		/// maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
		/// isGasFire: Whether or not the fire is powered by gasoline.
		/// </summary>
		public static int START_SCRIPT_FIRE(float x, float y, float z, int p3, float p4, bool p5, string soundsetName, float p7, int p8) => Function.Call<int>(0x6B83617E04503888, x, y, z, p3, p4, p5, soundsetName, p7, p8);
		public static int START_SCRIPT_FIRE(Vector3 vec, int p3, float p4, bool p5, string soundsetName, float p7, int p8) => Function.Call<int>(0x6B83617E04503888, vec.X, vec.Y, vec.Z, p3, p4, p5, soundsetName, p7, p8);
		public static void REMOVE_SCRIPT_FIRE(int fireHandle) => Function.Call(0x790125C36E194069, fireHandle);
		public static void START_ENTITY_FIRE(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xC4DC7418A44D6822, p0, p1, p2, p3);
		public static void STOP_ENTITY_FIRE(Any p0, Any p1) => Function.Call(0x8390751DC40C1E98, p0, p1);
		public static bool IS_ENTITY_ON_FIRE(int entity) => Function.Call<bool>(0x1BD7C371CE257C3E, entity);
		public static void _0x754937C28271BC65(Any p0) => Function.Call(0x754937C28271BC65, p0);
		public static int GET_NUMBER_OF_FIRES_IN_RANGE(float x, float y, float z, float radius) => Function.Call<int>(0xF9617BC6FAE61E08, x, y, z, radius);
		public static int GET_NUMBER_OF_FIRES_IN_RANGE(Vector3 vec, float radius) => Function.Call<int>(0xF9617BC6FAE61E08, vec.X, vec.Y, vec.Z, radius);
		public static void STOP_FIRE_IN_RANGE(float x, float y, float z, float radius) => Function.Call(0xDB38F247BD421708, x, y, z, radius);
		public static void STOP_FIRE_IN_RANGE(Vector3 vec, float radius) => Function.Call(0xDB38F247BD421708, vec.X, vec.Y, vec.Z, radius);
		public static void _STOP_FIRE_IN_BOX(float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call(0xB7C7BDC375AEA9A4, posX, posY, posZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static void _STOP_FIRE_IN_BOX(Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call(0xB7C7BDC375AEA9A4, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static bool GET_CLOSEST_FIRE_POS(Vector3* outPosition, float x, float y, float z) => Function.Call<bool>(0xB646FB657F448261, outPosition, x, y, z);
		public static bool GET_CLOSEST_FIRE_POS(Vector3* outPosition, Vector3 vec) => Function.Call<bool>(0xB646FB657F448261, outPosition, vec.X, vec.Y, vec.Z);
		public static Any _0x559FC1D310813031(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call<Any>(0x559FC1D310813031, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static Any _0x41B87A6495EE13DD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call<Any>(0x41B87A6495EE13DD, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static Any _0xA4454592DCF7C992(Any p0) => Function.Call<Any>(0xA4454592DCF7C992, p0);
		public static bool _IS_ENTITY_CONSUMED_BY_FIRE(int entity) => Function.Call<bool>(0xCDC25355C0D65963, entity);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/graphics/explosions
		/// 
		/// explosionType:
		/// enum eExplosionTag
		/// {
		/// 	EXP_TAG_DONTCARE = -1,
		/// 	EXP_TAG_GRENADE,
		/// 	EXP_TAG_STICKYBOMB,
		/// 	EXP_TAG_MOLOTOV,
		/// 	EXP_TAG_MOLOTOV_VOLATILE,
		/// 	EXP_TAG_HI_OCTANE,
		/// 	EXP_TAG_CAR,
		/// 	EXP_TAG_PLANE,
		/// 	EXP_TAG_PETROL_PUMP,
		/// 	EXP_TAG_DIR_STEAM,
		/// 	EXP_TAG_DIR_FLAME,
		/// 	EXP_TAG_DIR_WATER_HYDRANT,
		/// 	EXP_TAG_BOAT,
		/// 	EXP_TAG_BULLET,
		/// 	EXP_TAG_SMOKEGRENADE,
		/// 	EXP_TAG_BZGAS,
		/// 	EXP_TAG_GAS_CANISTER,
		/// 	EXP_TAG_EXTINGUISHER,
		/// 	EXP_TAG_TRAIN,
		/// 	EXP_TAG_DIR_FLAME_EXPLODE,
		/// 	EXP_TAG_VEHICLE_BULLET,
		/// 	EXP_TAG_BIRD_CRAP,
		/// 	EXP_TAG_FIREWORK,
		/// 	EXP_TAG_TORPEDO,
		/// 	EXP_TAG_TORPEDO_UNDERWATER,
		/// 	EXP_TAG_LANTERN,
		/// 	EXP_TAG_DYNAMITE,
		/// 	EXP_TAG_DYNAMITESTACK,
		/// 	EXP_TAG_DYNAMITE_VOLATILE,
		/// 	EXP_TAG_RIVER_BLAST,
		/// 	EXP_TAG_PLACED_DYNAMITE,
		/// 	EXP_TAG_FIRE_ARROW,
		/// 	EXP_TAG_DYNAMITE_ARROW,
		/// 	EXP_TAG_PHOSPHOROUS_BULLET,
		/// 	EXP_TAG_LIGHTNING_STRIKE,
		/// 	EXP_TAG_TRACKING_ARROW,
		/// 	EXP_TAG_POISON_BOTTLE
		/// };
		/// </summary>
		public static void ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0x7D6F58F69DA92530, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		public static void ADD_EXPLOSION(Vector3 vec, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0x7D6F58F69DA92530, vec.X, vec.Y, vec.Z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static void ADD_OWNED_EXPLOSION(int ped, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0xD84A917A64D4D016, ped, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		public static void ADD_OWNED_EXPLOSION(int ped, Vector3 vec, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0xD84A917A64D4D016, ped, vec.X, vec.Y, vec.Z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		/// <summary>
		/// _ADD_EXPLOSION_*(ON ENTITY?)
		/// </summary>
		public static void _0xB7DF150605EEDC9B(int entity, int p1, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0xB7DF150605EEDC9B, entity, p1, x, y, z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		public static void _0xB7DF150605EEDC9B(int entity, int p1, Vector3 vec, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0xB7DF150605EEDC9B, entity, p1, vec.X, vec.Y, vec.Z, explosionType, damageScale, isAudible, isInvisible, cameraShake);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// Change explosionFx (Visual Effect) for specified explosionType
		/// </summary>
		public static void ADD_EXPLOSION_WITH_USER_VFX(float x, float y, float z, int explosionType, uint explosionFx, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0x53BA259F3A67A99E, x, y, z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
		public static void ADD_EXPLOSION_WITH_USER_VFX(Vector3 vec, int explosionType, uint explosionFx, float damageScale, bool isAudible, bool isInvisible, float cameraShake) => Function.Call(0x53BA259F3A67A99E, vec.X, vec.Y, vec.Z, explosionType, explosionFx, damageScale, isAudible, isInvisible, cameraShake);
		public static void _0x34AE85C7CA4857AA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0x34AE85C7CA4857AA, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static bool IS_EXPLOSION_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call<bool>(0x8391BA4313A25AD3, explosionType, x1, y1, z1, x2, y2, z2);
		public static bool IS_EXPLOSION_IN_AREA(int explosionType, Vector3 vec1, Vector3 vec2) => Function.Call<bool>(0x8391BA4313A25AD3, explosionType, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static bool IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call<bool>(0xD96E82AEBFFAAFF0, explosionType, x1, y1, z1, x2, y2, z2);
		public static bool IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, Vector3 vec1, Vector3 vec2) => Function.Call<bool>(0xD96E82AEBFFAAFF0, explosionType, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static bool IS_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius) => Function.Call<bool>(0xD62DD846D82CBB90, explosionType, x, y, z, radius);
		public static bool IS_EXPLOSION_IN_SPHERE(int explosionType, Vector3 vec, float radius) => Function.Call<bool>(0xD62DD846D82CBB90, explosionType, vec.X, vec.Y, vec.Z, radius);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static bool IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float angle) => Function.Call<bool>(0x5AE661ECD18524C9, explosionType, x1, y1, z1, x2, y2, z2, angle);
		public static bool IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, Vector3 vec1, Vector3 vec2, float angle) => Function.Call<bool>(0x5AE661ECD18524C9, explosionType, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, angle);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static bool _IS_EXPLOSION_IN_VOLUME(int explosionType, int volume) => Function.Call<bool>(0xE24822A4CFC9107A, explosionType, volume);
		/// <summary>
		/// explosionType: see ADD_EXPLOSION
		/// </summary>
		public static int GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius) => Function.Call<int>(0x8002DDAB58594D78, explosionType, x1, y1, z1, x2, y2, z2, radius);
		public static int GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(int explosionType, Vector3 vec1, Vector3 vec2, float radius) => Function.Call<int>(0x8002DDAB58594D78, explosionType, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, radius);
		public static void _0x68F6A75FDF5A70D6(float x, float y, float z, float p3) => Function.Call(0x68F6A75FDF5A70D6, x, y, z, p3);
		public static void _0x68F6A75FDF5A70D6(Vector3 vec, float p3) => Function.Call(0x68F6A75FDF5A70D6, vec.X, vec.Y, vec.Z, p3);
		/// <summary>
		/// Only used in R* SP Related Camp Scripts
		/// </summary>
		public static void _0x24DB6B9F2B719043(float p0) => Function.Call(0x24DB6B9F2B719043, p0);
		/// <summary>
		/// Tested with fire & dynamite. Only returns true using value p1 = 1 and when the ped is affected by fire.
		/// </summary>
		public static bool _IS_PED_SHOCKING_EVENT_ACTIVE(int ped, int p1) => Function.Call<bool>(0xAB7993BA61A4674F, ped, p1);
	}

	public unsafe static class FLOCK
	{
		public static float GET_SPECIES_TUNING_FLOAT_PARAM(uint p0, int p1, int p2) => Function.Call<float>(0xE108489621422F91, p0, p1, p2);
		public static void SET_SPECIES_TUNING_FLOAT_PARAM(uint p0, int p1, int p2, float p3) => Function.Call(0x963240B6C252BA49, p0, p1, p2, p3);
		public static void SET_SPECIES_TUNING_BOOL_PARAM(uint p0, int p1, int p2, bool p3) => Function.Call(0x6D1D94C2459B42EE, p0, p1, p2, p3);
		/// <summary>
		/// index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningFloats
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_FLOAT_PARAMS
		/// </summary>
		public static float GET_ANIMAL_TUNING_FLOAT_PARAM(int animal, int index) => Function.Call<float>(0x4BC3ECFDA0297E27, animal, index);
		public static void SET_ANIMAL_TUNING_FLOAT_PARAM(int animal, int index, float value) => Function.Call(0xCBDA22C87977244F, animal, index, value);
		public static void RESET_ANIMAL_TUNING_FLOAT_PARAM(int animal, int index) => Function.Call(0xE776A195488FC520, animal, index);
		/// <summary>
		/// index: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eAnimalTuningBools
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/ANIMAL_TUNING_BOOL_PARAMS
		/// </summary>
		public static bool GET_ANIMAL_TUNING_BOOL_PARAM(int animal, int index) => Function.Call<bool>(0x1C1993824A396603, animal, index);
		public static void SET_ANIMAL_TUNING_BOOL_PARAM(int animal, int index, bool value) => Function.Call(0x9FF1E042FA597187, animal, index, value);
		public static void RESET_ANIMAL_TUNING_BOOL_PARAM(int animal, int index) => Function.Call(0x96AA1304D30E6BC3, animal, index);
		public static Any _0x8049B17BEC937662(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0x8049B17BEC937662, p0, p1, p2, p3, p4, p5, p6);
		public static Any _0xE93415B3307208E5(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call<Any>(0xE93415B3307208E5, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static Any _0x19870C40C7EE15BE(Any p0, Any p1) => Function.Call<Any>(0x19870C40C7EE15BE, p0, p1);
		public static void _0x0816C31480764AB0(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x0816C31480764AB0, p0, p1, p2, p3);
		public static void _0xC3D581A34BC0A1F0(Any p0, Any p1) => Function.Call(0xC3D581A34BC0A1F0, p0, p1);
		/// <summary>
		/// species: SPECIES_BIRD_CROW
		/// </summary>
		public static void _0xF2CCA7B68CFAB2B9(uint species, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float p10, float p11, float p12, float p13) => Function.Call(0xF2CCA7B68CFAB2B9, species, x1, y1, z1, x2, y2, z2, x3, y3, z3, p10, p11, p12, p13);
		public static void _0xF2CCA7B68CFAB2B9(uint species, Vector3 vec1, Vector3 vec2, Vector3 vec3, float p10, float p11, float p12, float p13) => Function.Call(0xF2CCA7B68CFAB2B9, species, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, vec3.X, vec3.Y, vec3.Z, p10, p11, p12, p13);
		public static void _0xFB16F08F47B83B4C(Any p0) => Function.Call(0xFB16F08F47B83B4C, p0);
		/// <summary>
		/// Ped (horse) will run away from players and mounting will trigger them to buck until disabled.
		/// Used for: REL_DOMESTICATED_ANIMAL
		/// </summary>
		public static bool _GET_ANIMAL_IS_WILD(int ped) => Function.Call<bool>(0x3B005FF0538ED2A9, ped);
		public static void _SET_ANIMAL_IS_WILD(int ped, bool toggle) => Function.Call(0xAEB97D84CDF3C00B, ped, toggle);
		/// <summary>
		/// enum eAnimalRarityLevel
		/// {
		/// 	ARL_COMMON,
		/// 	ARL_RARE,
		/// 	ARL_LEGENDARY,
		/// 	ARL_NUMRARITYLEVELS
		/// };
		/// </summary>
		public static int _GET_ANIMAL_RARITY(int ped) => Function.Call<int>(0xF8B48A361DC388AE, ped);
		/// <summary>
		/// rarityLevel: see _GET_ANIMAL_RARITY
		/// </summary>
		public static void _SET_ANIMAL_RARITY(int ped, int rarityLevel) => Function.Call(0x8B6F0F59B1B99801, ped, rarityLevel);
		public static void _0xFF1E339CE40EAAAF(Any p0, Any p1) => Function.Call(0xFF1E339CE40EAAAF, p0, p1);
		public static Any _0x8D913E493BAFE0A3(Any p0) => Function.Call<Any>(0x8D913E493BAFE0A3, p0);
		public static int _CREATE_HERD() => Function.Call<int>(0xCB4EF7EDAE2E16F1);
		public static void _0xE0961AED72642B80(Any p0) => Function.Call(0xE0961AED72642B80, p0);
		public static void _ADD_PED_TO_FLOCK(Any p0, int ped) => Function.Call(0x933E5D31A7D13069, p0, ped);
		public static void _0x408D1149C5E39C1E(Any p0, Any p1) => Function.Call(0x408D1149C5E39C1E, p0, p1);
		public static Any _0x9E13ACC38BA8F9C3(Any p0, Any p1) => Function.Call<Any>(0x9E13ACC38BA8F9C3, p0, p1);
		public static Any _0x34B9C4D86DF2C2F3(Any p0) => Function.Call<Any>(0x34B9C4D86DF2C2F3, p0);
		public static Vector3 _0x1DA6CB02071055D5(Any p0) => Function.Call<Vector3>(0x1DA6CB02071055D5, p0);
		public static void _0xC95611869E14F8AF(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xC95611869E14F8AF, p0, p1, p2, p3);
		public static Any _0x09EE00B8F858E0BE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0x09EE00B8F858E0BE, p0, p1, p2, p3, p4, p5, p6);
		public static void _0xE36D2CB540597EF7(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xE36D2CB540597EF7, p0, p1, p2, p3, p4, p5, p6, p7);
		public static Any _0xD95F04A4E73BE85E(Any p0, Any p1) => Function.Call<Any>(0xD95F04A4E73BE85E, p0, p1);
		public static void _0x17E3E5C46ECCD308(Any p0, Any p1, Any p2) => Function.Call(0x17E3E5C46ECCD308, p0, p1, p2);
		public static void _0xC72CE37081DAE625(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xC72CE37081DAE625, p0, p1, p2, p3);
		public static void _0x67A43EA3F6FE0076(Any p0) => Function.Call(0x67A43EA3F6FE0076, p0);
		public static Any _0x36486AF7DA93A464(Any p0) => Function.Call<Any>(0x36486AF7DA93A464, p0);
		public static void _0x6C57BEA886A20C6B(Any p0, Any p1) => Function.Call(0x6C57BEA886A20C6B, p0, p1);
		public static void _0x1520626FFAFFFA8F(Any p0, Any p1) => Function.Call(0x1520626FFAFFFA8F, p0, p1);
		public static void _0xFA821997794F48E7(Any p0, Any p1, Any p2) => Function.Call(0xFA821997794F48E7, p0, p1, p2);
		public static void _0xCC6B5AAFC87BFC7B(Any p0, Any p1, Any p2) => Function.Call(0xCC6B5AAFC87BFC7B, p0, p1, p2);
		public static void _0xFDB008B3BCF5992F(Any p0, Any p1, Any p2) => Function.Call(0xFDB008B3BCF5992F, p0, p1, p2);
		public static void _0x2DF3D457D86F8E57(Any p0, Any p1) => Function.Call(0x2DF3D457D86F8E57, p0, p1);
		public static void _0x706B434FEFAD6A24(Any p0) => Function.Call(0x706B434FEFAD6A24, p0);
		public static void _0xA881F5C77A560906(Any p0) => Function.Call(0xA881F5C77A560906, p0);
		public static Any _0x53187E563F938E76(Any p0) => Function.Call<Any>(0x53187E563F938E76, p0);
	}

	public unsafe static class GRAPHICS
	{
		public static void FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO() => Function.Call(0x7DFF8F94937D2659);
		public static bool LOAD_MISSION_CREATOR_PHOTO(Any* p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0x84F0BA7462FF8D58, p0, p1, p2, p3);
		/// <summary>
		/// contentId: returned by NETWORK::_UGC_QUERY_GET_CREATOR_PHOTO(uVar0, 0, sParam3)
		/// </summary>
		public static int GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(string contentId) => Function.Call<int>(0xC71B50AE58D07369, contentId);
		public static bool BEGIN_TAKE_HIGH_QUALITY_PHOTO() => Function.Call<bool>(0xA15BFFC0A01B34E1);
		public static int GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO() => Function.Call<int>(0x4A3DA74C3CCB1725);
		public static void FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO() => Function.Call(0xD45547D8396F002A);
		public static void _SET_PHOTO_SELF_STAT(bool p0) => Function.Call(0x2705D18C11B61046, p0);
		public static void _SET_PHOTO_STUDIO_STAT(int p0) => Function.Call(0x8E6AFF353C09652E, p0);
		public static void _SET_POSSE_ID_FOR_PHOTO(Any posseId) => Function.Call(0x564837D4A9EDE296, posseId);
		public static void _0x9F6D859C80708B26(bool p0, bool p1) => Function.Call(0x9F6D859C80708B26, p0, p1);
		public static bool IS_PHOTO_FRAME() => Function.Call<bool>(0x86076AE35CBBE55F);
		public static void _SET_PHOTO_IN_PHOTOMODE_STAT(bool p0) => Function.Call(0xFA91736933AB3D93, p0);
		public static void _SET_PHOTO_OVERLAY_EFFECT_STAT(int p0) => Function.Call(0x8B3296278328B5EB, p0);
		/// <summary>
		/// Gets set to 1 when GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO = PHOTO_OPERATION_SUCCEEDED
		/// </summary>
		public static void _0x0D5B19C34068FEE7(Any p0) => Function.Call(0x0D5B19C34068FEE7, p0);
		public static void _SET_PLAYER_APPEAR_IN_PHOTO(int player) => Function.Call(0x75D568607909333E, player);
		public static void _SET_REGION_PHOTO_TAKEN_STAT(string p0) => Function.Call(0xD1031B83AC093BC7, p0);
		public static void _SET_DISTRICT_PHOTO_TAKEN_STAT(string p0) => Function.Call(0x9937FACBBF267244, p0);
		public static void _SET_STATE_PHOTO_TAKEN_STAT(string p0) => Function.Call(0x8952E857696B8A79, p0);
		public static bool SAVE_HIGH_QUALITY_PHOTO(int unused) => Function.Call<bool>(0x57639FD876B68A91, unused);
		/// <summary>
		/// 0 = succeeded
		/// 1 = getting status
		/// 2 = failed
		/// </summary>
		public static int GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO() => Function.Call<int>(0xD6663EC374092383);
		/// <summary>
		/// Called together with FREE_MEMORY_FOR_LOW_QUALITY_PHOTO
		/// </summary>
		public static bool BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(int p0) => Function.Call<bool>(0x494A9874F17A7D50, p0);
		/// <summary>
		/// Old name: _GET_STATUS_OF_DRAW_LOW_QUALITY_PHOTO
		/// </summary>
		public static int GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(Any p0) => Function.Call<int>(0x13430D3D5A45F14B, p0);
		public static void FREE_MEMORY_FOR_LOW_QUALITY_PHOTO() => Function.Call(0x614682E715ADBAAC);
		public static void DRAW_LOW_QUALITY_PHOTO_TO_PHONE(bool p0, bool p1) => Function.Call(0xF1142E5D64B47802, p0, p1);
		/// <summary>
		/// Always returns 200.
		/// </summary>
		public static int _GET_MAX_NUMBER_OF_LOCAL_PHOTOS() => Function.Call<int>(0x8E587FCD30E05592);
		public static int _GET_CURRENT_NUMBER_OF_LOCAL_PHOTOS() => Function.Call<int>(0x78C56B8A7B1D000C);
		public static Any QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS() => Function.Call<Any>(0xA42EDF1E88734A7E);
		/// <summary>
		/// 0 = succeeded
		/// 1 = getting status
		/// 2 = failed
		/// </summary>
		public static int GET_STATUS_OF_SORTED_LIST_OPERATION() => Function.Call<int>(0xB28894CD7408BD0C);
		public static void DRAW_LIGHT_WITH_RANGE(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity) => Function.Call(0xD2D9E04C0DF927F4, posX, posY, posZ, colorR, colorG, colorB, range, intensity);
		public static void DRAW_LIGHT_WITH_RANGE(Vector3 vec, int colorR, int colorG, int colorB, float range, float intensity) => Function.Call(0xD2D9E04C0DF927F4, vec.X, vec.Y, vec.Z, colorR, colorG, colorB, range, intensity);
		public static void UPDATE_LIGHTS_ON_ENTITY(int entity) => Function.Call(0xBDBACB52A03CC760, entity);
		/// <summary>
		/// https://gfycat.com/meagerfaireyra
		/// </summary>
		public static void _SET_LIGHTS_COLOR_FOR_ENTITY(int entity, int red, int green, int blue) => Function.Call(0x6EC2A67962296F49, entity, red, green, blue);
		public static void _SET_LIGHTS_INTENSITY_FOR_ENTITY(int entity, float intensity) => Function.Call(0x07C0F87AAC57F2E4, entity, intensity);
		/// <summary>
		/// type must be less than or equal to 20
		/// </summary>
		public static void _SET_LIGHTS_TYPE_FOR_ENTITY(int entity, int type) => Function.Call(0xAB72C67163DC4DB4, entity, type);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/markers/marker_types.lua
		/// </summary>
		public static void _DRAW_MARKER(uint type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts) => Function.Call(0x2A32FAA57B937173, type, posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
		public static void _DRAW_MARKER(uint type, Vector3 vec, Vector3 direction, Vector3 rotation, Vector3 scale, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts) => Function.Call(0x2A32FAA57B937173, type, vec.X, vec.Y, vec.Z, direction.X, direction.Y, direction.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z, red, green, blue, alpha, bobUpAndDown, faceCamera, p19, rotate, textureDict, textureName, drawOnEnts);
		public static int CREATE_CHECKPOINT_WITH_NAMEHASH(uint typeHash, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float radius, int red, int green, int blue, int alpha, int reserved) => Function.Call<int>(0x175668836B44CBB0, typeHash, posX1, posY1, posZ1, posX2, posY2, posZ2, radius, red, green, blue, alpha, reserved);
		public static int CREATE_CHECKPOINT_WITH_NAMEHASH(uint typeHash, Vector3 vec1, Vector3 vec2, float radius, int red, int green, int blue, int alpha, int reserved) => Function.Call<int>(0x175668836B44CBB0, typeHash, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, radius, red, green, blue, alpha, reserved);
		public static bool _DOES_CHECKPOINT_HAVE_FX(int checkpoint) => Function.Call<bool>(0x4C11CCACB7C02B6E, checkpoint);
		/// <summary>
		/// Sets the checkpoint color.
		/// </summary>
		public static void SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha) => Function.Call(0xCAAFC225E33B1D15, checkpoint, red, green, blue, alpha);
		/// <summary>
		/// Sets the checkpoint icon color.
		/// </summary>
		public static void SET_CHECKPOINT_RGBA2(int checkpoint, int red, int green, int blue, int alpha) => Function.Call(0x99AFF17222D4DEB4, checkpoint, red, green, blue, alpha);
		public static void _0xCC3B787E73E64160(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xCC3B787E73E64160, p0, p1, p2, p3, p4);
		public static void _0x171C18E994C1A395(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x171C18E994C1A395, p0, p1, p2, p3, p4);
		public static void DELETE_CHECKPOINT(int checkpoint) => Function.Call(0x0DED5B0C8EBAAE12, checkpoint);
		/// <summary>
		/// Draws a rectangle on the screen.
		/// 
		/// -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
		/// 
		/// -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
		/// 
		/// -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
		/// 
		/// -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
		/// 
		/// -R: Red part of the color. (0-255)
		/// 
		/// -G: Green part of the color. (0-255)
		/// 
		/// -B: Blue part of the color. (0-255)
		/// 
		/// -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
		/// </summary>
		public static void DRAW_RECT(float x, float y, float width, float height, int red, int green, int blue, int alpha, bool p8, bool p9) => Function.Call(0x405224591DF02025, x, y, width, height, red, green, blue, alpha, p8, p9);
		/// <summary>
		/// Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for draw commands that are used with a world render target.
		/// </summary>
		public static void SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(bool toggle) => Function.Call(0x906B86E6D7896B9E, toggle);
		/// <summary>
		/// Sets the draw order for script draw commands.
		/// </summary>
		public static void SET_SCRIPT_GFX_DRAW_ORDER(int drawOrder) => Function.Call(0xCFCC78391C8B3814, drawOrder);
		/// <summary>
		/// Draws a 2D sprite on the screen.
		/// 
		/// Parameters:
		/// textureDict - Name of texture dictionary to load texture from
		/// 
		/// textureName - Name of texture to load from texture dictionary
		/// 
		/// screenX/Y - Screen offset (0.5 = center)
		/// scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
		/// 
		/// heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
		/// 
		/// red,green,blue - Sprite color (default = 255/255/255)
		/// 
		/// alpha - opacity level
		/// 
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures
		/// </summary>
		public static void DRAW_SPRITE(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, bool p11) => Function.Call(0xC9884ECADE94CB34, textureDict, textureName, screenX, screenY, width, height, heading, red, green, blue, alpha, p11);
		public static void ATTACH_TV_AUDIO_TO_ENTITY(int entity) => Function.Call(0x40866A418EB8EFDE, entity);
		/// <summary>
		/// Probably changes tvs from being a 3d audio to being "global" audio
		/// </summary>
		public static void SET_TV_AUDIO_FRONTEND(bool toggle) => Function.Call(0x64437C98FCC5F291, toggle);
		/// <summary>
		/// Hardcoded to always set x to 1280 and y to 720.
		/// </summary>
		public static void GET_SCREEN_RESOLUTION(int* x, int* y) => Function.Call(0x66773C92835D0909, x, y);
		public static void _0xA04EF43030593ABC(Any p0, Any p1) => Function.Call(0xA04EF43030593ABC, p0, p1);
		public static void _0xA21AF60C9F99CCC5() => Function.Call(0xA21AF60C9F99CCC5);
		public static Any _0xC28F62AC9774FC1B() => Function.Call<Any>(0xC28F62AC9774FC1B);
		public static void _0xEB48CE48EEC41FD4(Any p0) => Function.Call(0xEB48CE48EEC41FD4, p0);
		public static bool GET_SCREEN_COORD_FROM_WORLD_COORD(float worldX, float worldY, float worldZ, float* screenX, float* screenY) => Function.Call<bool>(0xCB50D7AFCC8B0EC6, worldX, worldY, worldZ, screenX, screenY);
		public static bool GET_SCREEN_COORD_FROM_WORLD_COORD(Vector3 vec, float* screenX, float* screenY) => Function.Call<bool>(0xCB50D7AFCC8B0EC6, vec.X, vec.Y, vec.Z, screenX, screenY);
		public static bool _IS_TEXTURE_IN_DICT(uint txdHash, uint dict) => Function.Call<bool>(0xA2A51869BDED733B, txdHash, dict);
		/// <summary>
		/// Does not affect weapons, particles, fire/explosions, flashlights or the sun.
		/// When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
		/// 
		/// state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
		/// </summary>
		public static void SET_ARTIFICIAL_LIGHTS_STATE(bool state) => Function.Call(0xB2797619A7C7747B, state);
		public static void DISABLE_HDTEX_THIS_FRAME() => Function.Call(0x98A7CD5EA379A854);
		/// <summary>
		/// Used in shop scripts for CATALOG_BOOK
		/// false = Normal -> [CATALOG_BOOK_SHUTDOWN]
		/// true = Trees flickering? -> [CATALOG_BOOK_OPEN]
		/// </summary>
		public static void _0x1A9F09AB458D49C6(bool p0) => Function.Call(0x1A9F09AB458D49C6, p0);
		/// <summary>
		/// Creates a tracked point, useful for checking the visibility of a 3D point on screen.
		/// </summary>
		public static int CREATE_TRACKED_POINT() => Function.Call<int>(0xFB405CB357C69CB9);
		public static void SET_TRACKED_POINT_INFO(int point, float x, float y, float z, float radius) => Function.Call(0xF6FDA3D4404D4F2C, point, x, y, z, radius);
		public static void SET_TRACKED_POINT_INFO(int point, Vector3 vec, float radius) => Function.Call(0xF6FDA3D4404D4F2C, point, vec.X, vec.Y, vec.Z, radius);
		public static bool IS_TRACKED_POINT_VISIBLE(int point) => Function.Call<bool>(0xCBB056BA159FB48D, point);
		/// <summary>
		/// Returns iNumPixels, iPixelsVisible
		/// </summary>
		public static int _0xDFE332A5DA6FE7C9(int iTrackedPoint) => Function.Call<int>(0xDFE332A5DA6FE7C9, iTrackedPoint);
		public static void DESTROY_TRACKED_POINT(int point) => Function.Call(0x37A59922109F8F1C, point);
		public static bool _IS_TRACKED_POINT_VALID(int point) => Function.Call<bool>(0xF2FDDCC8C6BAE1B3, point);
		/// <summary>
		/// Returns handle to be used with REMOVE_GRASS_CULL_SPHERE
		/// </summary>
		public static int SET_GRASS_CULL_SPHERE(float x, float y, float z, float p3, int p4) => Function.Call<int>(0x27219300C36A8D40, x, y, z, p3, p4);
		public static int SET_GRASS_CULL_SPHERE(Vector3 vec, float p3, int p4) => Function.Call<int>(0x27219300C36A8D40, vec.X, vec.Y, vec.Z, p3, p4);
		public static void REMOVE_GRASS_CULL_SPHERE(int handle) => Function.Call(0xAE7BF7CA9E4BA48D, handle);
		/// <summary>
		/// Adds Vegetation Blocking Zone, Added Snow Flattening veg mod Zone
		/// Returns veg modifier handle
		/// </summary>
		public static int _ADD_VEG_MODIFIER_ZONE(int volume, int p1, int flags, int p3) => Function.Call<int>(0xBD3324281E8B9933, volume, p1, flags, p3);
		/// <summary>
		/// Returns veg modifier handle
		/// </summary>
		public static int ADD_VEG_MODIFIER_SPHERE(float x, float y, float z, float radius, int modType, int flags, int p6) => Function.Call<int>(0xFA50F79257745E74, x, y, z, radius, modType, flags, p6);
		public static int ADD_VEG_MODIFIER_SPHERE(Vector3 vec, float radius, int modType, int flags, int p6) => Function.Call<int>(0xFA50F79257745E74, vec.X, vec.Y, vec.Z, radius, modType, flags, p6);
		public static void REMOVE_VEG_MODIFIER_SPHERE(int vegModifierHandle, int p1) => Function.Call(0x9CF1836C03FB67A2, vegModifierHandle, p1);
		public static void _ENABLE_STATIC_VEG_MODIFIER(uint p0) => Function.Call(0xDFEA23EC90113657, p0);
		public static void _DISABLE_STATIC_VEG_MODIFIER(uint p0) => Function.Call(0xDD0BC0EDCB2162F6, p0);
		public static bool _IS_STATIC_VEG_MODIFIER_ENABLED(uint p0) => Function.Call<bool>(0xDE9BAD3292AA6D5E, p0);
		public static void _0xEC3F7F24EEEB3BA3() => Function.Call(0xEC3F7F24EEEB3BA3);
		public static void _0x9F158A49B0D84C3C(Any p0) => Function.Call(0x9F158A49B0D84C3C, p0);
		public static void _0x910E260AEAD855DE() => Function.Call(0x910E260AEAD855DE);
		public static bool _CREATE_SWATCH_TEXTURE_DICT(int slots) => Function.Call<bool>(0x3D084D5568FB4028, slots);
		public static void _DESTROY_SWATCH_TEXTURE_DICT() => Function.Call(0xDAD7FB8402651654);
		/// <summary>
		/// Example: https://pastebin.com/tTgpER9A
		/// </summary>
		public static void _GENERATE_SWATCH_TEXTURE_DIRECTLY(int slot, Any p1) => Function.Call(0x646ED1A1D28487DF, slot, p1);
		/// <summary>
		/// Example:
		/// local hash = GetHashKey("CLOTHING_ITEM_M_EYES_001_TINT_001")
		/// _GENERATE_SWATCH_TEXTURE(0, hash, 0, true)
		/// metapedType: see 0xEC9A1261BF0CE510
		/// </summary>
		public static void _GENERATE_SWATCH_TEXTURE(int slotId, uint componentHash, int metapedType, bool p3) => Function.Call(0x160921255327C591, slotId, componentHash, metapedType, p3);
		public static void CASCADE_SHADOWS_SET_CASCADE_BOUNDS(Any p0, bool p1, float p2, float p3, float p4, float p5, bool p6, float p7) => Function.Call(0xD9EDB2E4512D563E, p0, p1, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// When this is set to ON, shadows only draw as you get nearer.
		/// 
		/// When OFF, they draw from a further distance.
		/// </summary>
		public static void CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(bool toggle) => Function.Call(0x8FBFD2AEB196B369, toggle);
		/// <summary>
		/// Possible values:
		/// "CSM_ST_POINT"
		/// "CSM_ST_LINEAR"
		/// "CSM_ST_BOX3x3"
		/// "CSM_ST_BOX4x4"
		/// "CSM_ST_DITHER2_LINEAR"
		/// "CSM_ST_CUBIC"
		/// "CSM_ST_POISSON16"
		/// "CSM_ST_SOFT8"
		/// "CSM_ST_SOFT16"
		/// "CSM_ST_SOFT32"
		/// "CSM_ST_DITHER16_RPDB"
		/// "CSM_ST_POISSON16_RPDB_GNORM"
		/// "CSM_ST_HIGHRES_BOX4x4"
		/// "CSM_ST_ESM"
		/// </summary>
		public static void CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(string type) => Function.Call(0xCE4774E0F9AD48D1, type);
		public static void CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE() => Function.Call(0xF7C29D7C12C36F03);
		public static void _0x503941F65DBA24EC(Any p0) => Function.Call(0x503941F65DBA24EC, p0);
		public static void _0x815653A42C5ABE76() => Function.Call(0x815653A42C5ABE76);
		public static void _0xFF8018C778349234(Any p0) => Function.Call(0xFF8018C778349234, p0);
		/// <summary>
		/// Sets an unknown value related to timecycles.
		/// </summary>
		public static void RESET_ADAPTATION(int unk) => Function.Call(0x297B72E2AF094742, unk);
		public static void TOGGLE_PAUSED_RENDERPHASES(bool toggle) => Function.Call(0xEF9E1C45732F55FA, toggle);
		public static bool GET_TOGGLE_PAUSED_RENDERPHASES_STATUS() => Function.Call<bool>(0x86ED21BDB2791CE8);
		public static void RESET_PAUSED_RENDERPHASES() => Function.Call(0xCCD9AAD85E1B559E);
		/// <summary>
		/// Old name: _SET_HIDOF_ENV_BLUR_PARAMS
		/// </summary>
		public static void SET_HIDOF_OVERRIDE(bool p0, bool p1, float p2, float p3, float p4, float p5) => Function.Call(0xCC23AA1A7CBFE840, p0, p1, p2, p3, p4, p5);
		/// <summary>
		/// Params: component - used in odriscolls1 and sean1 R* SP Script: COMPONENT_BINOCULARS_SCOPE01
		/// Triggers the binocular scaleform
		/// </summary>
		public static void _0x21F00E08CBB5F37B(string component) => Function.Call(0x21F00E08CBB5F37B, component);
		/// <summary>
		/// Closes the the binocular scaleform
		/// </summary>
		public static void _0x5AC6E0FA028369DE() => Function.Call(0x5AC6E0FA028369DE);
		public static bool _0xEC3D8C228FE553D7(bool p0) => Function.Call<bool>(0xEC3D8C228FE553D7, p0);
		public static void _0xF5793BB386E1FF9C(Any p0) => Function.Call(0xF5793BB386E1FF9C, p0);
		public static void _0x5CD6A2CCE5087161(Any p0) => Function.Call(0x5CD6A2CCE5087161, p0);
		public static void _0xC8D0611D9A0CF5D3(Any p0) => Function.Call(0xC8D0611D9A0CF5D3, p0);
		public static float _GET_PHOTO_MODE_EXPOSURE() => Function.Call<float>(0x06C0D8BB6B04A709);
		public static void _0x62B9F9A1272AED80(Any p0) => Function.Call(0x62B9F9A1272AED80, p0);
		public static float _GET_PHOTO_MODE_CONTRAST() => Function.Call<float>(0x98F4154989B81EC6);
		public static void _0x9229ED770975BD9E() => Function.Call(0x9229ED770975BD9E);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_non_looped.lua
		/// </summary>
		public static int START_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x2E80BF72EF7C87AC, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, Vector3 vec, Vector3 rotation, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x2E80BF72EF7C87AC, effectName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale, xAxis, yAxis, zAxis);
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<bool>(0xFB97618457994A62, effectName, xPos, yPos, zPos, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, Vector3 vec, Vector3 rotation, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<bool>(0xFB97618457994A62, effectName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale, xAxis, yAxis, zAxis);
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(string effectName, int ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0x3FAA72BD940C3AC0, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(string effectName, int ped, Vector3 offset, Vector3 rotation, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0x3FAA72BD940C3AC0, effectName, ped, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, boneIndex, scale, axisX, axisY, axisZ);
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, int entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xFF4C64C513388C12, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, int entity, Vector3 offset, Vector3 rotation, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xFF4C64C513388C12, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, scale, axisX, axisY, axisZ);
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, int entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xE6CFE43937061143, effectName, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale, axisX, axisY, axisZ);
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, int entity, Vector3 offset, Vector3 rotation, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xE6CFE43937061143, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, scale, axisX, axisY, axisZ);
		public static bool _START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(string effectName, int ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xC695870B8A149B96, effectName, ped, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, boneIndex, scale, axisX, axisY, axisZ);
		public static bool _START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(string effectName, int ped, Vector3 offset, Vector3 rotation, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) => Function.Call<bool>(0xC695870B8A149B96, effectName, ped, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, boneIndex, scale, axisX, axisY, axisZ);
		public static void SET_PARTICLE_FX_NON_LOOPED_COLOUR(float r, float g, float b) => Function.Call(0x60B85BED6577A35B, r, g, b);
		public static void SET_PARTICLE_FX_NON_LOOPED_ALPHA(float alpha) => Function.Call(0xE8A35938A7026CEA, alpha);
		public static void _SET_PARTICLE_FX_NON_LOOPED_EMITTER_SCALE(float p0, float p1, float p2) => Function.Call(0x56C392C2BD78B024, p0, p1, p2);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/ptfx/ptfx_assets_looped.lua
		/// </summary>
		public static int START_PARTICLE_FX_LOOPED_AT_COORD(string effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11) => Function.Call<int>(0xBA32867E86125D3A, effectName, x, y, z, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis, p11);
		public static int START_PARTICLE_FX_LOOPED_AT_COORD(string effectName, Vector3 vec, Vector3 rotation, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11) => Function.Call<int>(0xBA32867E86125D3A, effectName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale, xAxis, yAxis, zAxis, p11);
		public static int START_PARTICLE_FX_LOOPED_ON_PED_BONE(string effectName, int ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xE689C1B1432BB8AF, effectName, ped, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_LOOPED_ON_PED_BONE(string effectName, int ped, Vector3 offset, Vector3 rotation, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xE689C1B1432BB8AF, effectName, ped, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, boneIndex, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, int entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xBD41E1440CE39800, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, int entity, Vector3 offset, Vector3 rotation, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xBD41E1440CE39800, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, int entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xD3BA6EC7F2FBD5E9, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, int entity, Vector3 offset, Vector3 rotation, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0xD3BA6EC7F2FBD5E9, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, boneIndex, scale, xAxis, yAxis, zAxis);
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, int entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x8F90AB32E1944BDE, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, scale, xAxis, yAxis, zAxis);
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, int entity, Vector3 offset, Vector3 rotation, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x8F90AB32E1944BDE, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, scale, xAxis, yAxis, zAxis);
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, int entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x9C56621462FFE7A6, effectName, entity, xOffset, yOffset, zOffset, xRot, yRot, zRot, boneIndex, scale, xAxis, yAxis, zAxis);
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, int entity, Vector3 offset, Vector3 rotation, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) => Function.Call<int>(0x9C56621462FFE7A6, effectName, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, boneIndex, scale, xAxis, yAxis, zAxis);
		public static void STOP_PARTICLE_FX_LOOPED(int ptfxHandle, bool p1) => Function.Call(0x22970F3A088B133B, ptfxHandle, p1);
		public static bool DOES_PARTICLE_FX_LOOPED_EXIST(int ptfxHandle) => Function.Call<bool>(0x9DD5AFF561E88F2A, ptfxHandle);
		public static void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ) => Function.Call(0xD3A4A95FC94FE83B, ptfxHandle, x, y, z, rotX, rotY, rotZ);
		public static void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, Vector3 vec, Vector3 rotation) => Function.Call(0xD3A4A95FC94FE83B, ptfxHandle, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z);
		public static void SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, string propertyName, float amount, bool noNetwork) => Function.Call(0x3674F389B0FACD80, ptfxHandle, propertyName, amount, noNetwork);
		public static void SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, bool p4) => Function.Call(0x239879FC61C610CC, ptfxHandle, r, g, b, p4);
		public static void SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha) => Function.Call(0x88786E76234F7054, ptfxHandle, alpha);
		public static void SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale) => Function.Call(0x1A9E1C0D98D093B7, ptfxHandle, scale);
		public static void SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range) => Function.Call(0x9B04D471DA0AD7AA, ptfxHandle, range);
		/// <summary>
		/// _SET_PARTICLE_FX_LOOPED_FA* - _SET_PARTICLE_FX_LOOPED_OF*
		/// </summary>
		public static void _SET_PARTICLE_FX_LOOPED_UPDATE_DISTANT_SMOKE(int ptfxHandle, float scalar) => Function.Call(0x9DDC222D85D5AF2A, ptfxHandle, scalar);
		public static void REMOVE_PARTICLE_FX(int ptfxHandle, bool p1) => Function.Call(0x459598F579C98929, ptfxHandle, p1);
		public static void REMOVE_PARTICLE_FX_FROM_ENTITY(int entity) => Function.Call(0x92884B4A49D81325, entity);
		public static void REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius) => Function.Call(0x87B5905ECA623B68, X, Y, Z, radius);
		public static void REMOVE_PARTICLE_FX_IN_RANGE(Vector3 vec, float radius) => Function.Call(0x87B5905ECA623B68, vec.X, vec.Y, vec.Z, radius);
		/// <summary>
		/// fxName: see data_0/data/effects/ptfx/fxlists/
		/// </summary>
		public static void USE_PARTICLE_FX_ASSET(string fxName) => Function.Call(0xA10DB07FC234DD12, fxName);
		public static void SET_PARTICLE_FX_OVERRIDE(string oldAsset, string newAsset) => Function.Call(0xBE711A169E9C7E95, oldAsset, newAsset);
		/// <summary>
		/// Resets the effect of SET_PARTICLE_FX_OVERRIDE
		/// </summary>
		public static void RESET_PARTICLE_FX_OVERRIDE(string name) => Function.Call(0x274B3DABF7E72DEF, name);
		/// <summary>
		/// p1: AMB_ANN_COAL_CHUTE_DIVE, AMB_ANN_COAL_CHUTE
		/// p2: EMIT
		/// p3: either 0.0f or 1.0f
		/// </summary>
		public static void _0x4FB67D172C4476F3(int entity, string p1, string p2, float p3) => Function.Call(0x4FB67D172C4476F3, entity, p1, p2, p3);
		/// <summary>
		/// Related to Campfires.
		/// p1: AMB_BONFIRE_MP, AMB_CAMPFIRE_LRG_MP
		/// </summary>
		public static void SET_PARTICLE_FX_AMBIENT_COLOUR(int entity, string p1, float r, float g, float b) => Function.Call(0x3C61B52B00848C26, entity, p1, r, g, b);
		/// <summary>
		/// Only used in R* Script nb_stalking_hunter
		/// </summary>
		public static void _0xD1472AFF30C103D6(float p0) => Function.Call(0xD1472AFF30C103D6, p0);
		public static void SET_PARTICLE_FX_BULLET_IMPACT_SCALE(float scale) => Function.Call(0xA53C8D7D0F8C74D0, scale);
		public static void SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(float p0) => Function.Call(0x8DCCC98DC0DBF9E4, p0);
		public static void _SET_SNIPER_GLINTS_ENABLED(bool enabled) => Function.Call(0x6E8EB45A4F4460EB, enabled);
		public static void SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(float p0) => Function.Call(0x2A1625858887D4E6, p0);
		/// <summary>
		/// _DISABLE_*
		/// </summary>
		public static void _0x4046493D2EEACA0E() => Function.Call(0x4046493D2EEACA0E);
		/// <summary>
		/// https://imgur.com/a/I2swSDJ
		/// 
		/// Old name: _SET_PICKUP_OBJECT_GLOW_ENABLED
		/// </summary>
		public static void SET_PICKUP_LIGHT(int _object, bool toggle) => Function.Call(0x7DFB49BCDB73089A, _object, toggle);
		public static void _BLOCK_PICKUP_OBJECT_LIGHT(int pickupObject, bool toggle) => Function.Call(0x50C14328119E1DD1, pickupObject, toggle);
		public static void BLOCK_PICKUP_PLACEMENT_LIGHT(int pickup, bool toggle) => Function.Call(0x0552AA3FFC5B87AA, pickup, toggle);
		public static void ALLOW_PICKUP_LIGHT_SYNC(int pickupObject, bool allow) => Function.Call(0x7C348310A6E2FB91, pickupObject, allow);
		/// <summary>
		/// Enables/disables a kind of 'shiny' effect on metals.
		/// </summary>
		public static void _SET_PEARLESCENT_FX_ENABLED(int _object, bool toggle) => Function.Call(0x72E30372E7CC4415, _object, toggle);
		/// <summary>
		/// Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
		/// </summary>
		public static void REMOVE_DECALS_IN_RANGE(float x, float y, float z, float range) => Function.Call(0x86DE59FA02902B40, x, y, z, range);
		public static void REMOVE_DECALS_IN_RANGE(Vector3 vec, float range) => Function.Call(0x86DE59FA02902B40, vec.X, vec.Y, vec.Z, range);
		public static void REMOVE_DECALS_FROM_OBJECT(int obj) => Function.Call(0xFB8972BAE0013140, obj);
		public static int ADD_DECAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17, Any p18, Any p19, Any p20, Any p21) => Function.Call<int>(0x57CB267624EF85C0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21);
		/// <summary>
		/// https://i.imgur.com/ULQU9US.jpg
		/// More rounded and small puddle
		/// </summary>
		public static void _ADD_BLOOD_POOL(float x, float y, float z, bool unused) => Function.Call(0xFA2ECC78A6014D4F, x, y, z, unused);
		public static void _ADD_BLOOD_POOL(Vector3 vec, bool unused) => Function.Call(0xFA2ECC78A6014D4F, vec.X, vec.Y, vec.Z, unused);
		/// <summary>
		/// https://i.imgur.com/rPITUCV.jpg
		/// More customizable and more like quadrants
		/// </summary>
		public static void _ADD_BLOOD_POOL_2(float x, float y, float z, float p3, float size, float p5, bool permanent, float p7, bool p8) => Function.Call(0xF708298675ABDC6A, x, y, z, p3, size, p5, permanent, p7, p8);
		public static void _ADD_BLOOD_POOL_2(Vector3 vec, float p3, float size, float p5, bool permanent, float p7, bool p8) => Function.Call(0xF708298675ABDC6A, vec.X, vec.Y, vec.Z, p3, size, p5, permanent, p7, p8);
		/// <summary>
		/// Creates blood pools for the given ped in some interval for a few seconds.
		/// </summary>
		public static void _ADD_BLOOD_POOLS_FOR_PED(int ped) => Function.Call(0xDFCE8CE9F3EBE93F, ped);
		public static void _ADD_BLOOD_POOLS_FOR_PED_WITH_PARAMS(int ped, float p1, float size, float p3) => Function.Call(0xC349EE1E6EFA494B, ped, p1, size, p3);
		public static void START_PETROL_TRAIL_DECALS(Any p0, Any p1) => Function.Call(0x46F246D6504F0031, p0, p1);
		public static void ADD_PETROL_TRAIL_DECAL_INFO(float x, float y, float z, float p3) => Function.Call(0x73354FB6D03D2E8A, x, y, z, p3);
		public static void ADD_PETROL_TRAIL_DECAL_INFO(Vector3 vec, float p3) => Function.Call(0x73354FB6D03D2E8A, vec.X, vec.Y, vec.Z, p3);
		public static void END_PETROL_TRAIL_DECALS() => Function.Call(0x0E126AAE933F3B56);
		public static Any _0xE63D68F455CA0B47(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0xE63D68F455CA0B47, p0, p1, p2, p3, p4, p5, p6);
		public static void REMOVE_DECAL(int decal) => Function.Call(0x49A720552EB0BB88, decal);
		public static bool IS_DECAL_ALIVE(int decal) => Function.Call<bool>(0x3E4B4E5CF5D3EEB5, decal);
		public static void SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME() => Function.Call(0x53ED07BF368EDA59);
		/// <summary>
		/// _SET_D* or _SET_E*
		/// </summary>
		public static void _0xB032C085D9A03907() => Function.Call(0xB032C085D9A03907);
		/// <summary>
		/// _DISABLE_*
		/// </summary>
		public static void _0xFB680A9B33D0EDBE(bool p0) => Function.Call(0xFB680A9B33D0EDBE, p0);
		/// <summary>
		/// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		/// </summary>
		public static void _0x41F88A85A579A61D(float p0) => Function.Call(0x41F88A85A579A61D, p0);
		/// <summary>
		/// p1: 0.3f in R* Scripts
		/// </summary>
		public static void _BLOOD_TRAIL_FOR_WAYPOINT(string waypointRecording, float p1) => Function.Call(0xB9C92616929CC25D, waypointRecording, p1);
		public static void _ADD_BLOOD_TRAIL_POINT(float x, float y, float z) => Function.Call(0xDD9DC1AB63D513CE, x, y, z);
		public static void _ADD_BLOOD_TRAIL_POINT(Vector3 vec) => Function.Call(0xDD9DC1AB63D513CE, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		/// _ENABLE_*
		/// </summary>
		public static void _0x812C1563185C6FB2() => Function.Call(0x812C1563185C6FB2);
		/// <summary>
		/// Used in CREATE_BEZIER_BLOOD_TRAIL_OF_TYPE
		/// </summary>
		public static void _0x4BD66B4E3427689B(string p0) => Function.Call(0x4BD66B4E3427689B, p0);
		public static void _ADD_BLOOD_TRAIL_SPLAT(float x, float y, float z) => Function.Call(0xF5E45CB1CF965D2D, x, y, z);
		public static void _ADD_BLOOD_TRAIL_SPLAT(Vector3 vec) => Function.Call(0xF5E45CB1CF965D2D, vec.X, vec.Y, vec.Z);
		public static void _0xF2F543D48F319A3A() => Function.Call(0xF2F543D48F319A3A);
		/// <summary>
		/// _RESET_*
		/// </summary>
		public static void _0x1460B644397453EB() => Function.Call(0x1460B644397453EB);
		/// <summary>
		/// Only used in guama1 R* Script
		/// Disables lod/distant lights when BOOL is set to true
		/// </summary>
		public static void _DISABLE_FAR_ARTIFICIAL_LIGHTS(bool disable) => Function.Call(0xCD284E2F6AC27EE9, disable);
		public static void _0x453D16D41FC51D3E(bool p0) => Function.Call(0x453D16D41FC51D3E, p0);
		/// <summary>
		/// Used in NET_CAMP_SPIRIT_ANIMAL_CLEAR_ANIMAL_VISIBILITY
		/// </summary>
		public static void _0xC06F2F45A73EABCD(int entity) => Function.Call(0xC06F2F45A73EABCD, entity);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/timecycles
		/// </summary>
		public static void SET_TIMECYCLE_MODIFIER(string modifierName) => Function.Call(0xFA08722A5EA82DA7, modifierName);
		public static void SET_TIMECYCLE_MODIFIER_STRENGTH(float strength) => Function.Call(0xFDB74C9CC54C3F37, strength);
		public static void SET_TRANSITION_TIMECYCLE_MODIFIER(string modifierName, float transitionBlend) => Function.Call(0xFF927A09F481D80C, modifierName, transitionBlend);
		public static void SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(float strength) => Function.Call(0xBB6C707F20D955D4, strength);
		public static void CLEAR_TIMECYCLE_MODIFIER() => Function.Call(0x0E3F4AF2D63491FB);
		public static int GET_TIMECYCLE_MODIFIER_INDEX() => Function.Call<int>(0xA705394293E2B3D3);
		public static int GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX() => Function.Call<int>(0x2DA67BA3C8A6755D);
		public static void _0x67B0778C62E74423(Any p0) => Function.Call(0x67B0778C62E74423, p0);
		public static void _0x6C03118E9E5C1A14(Any p0) => Function.Call(0x6C03118E9E5C1A14, p0);
		/// <summary>
		/// _GET_C* - _GET_E*
		/// </summary>
		public static float _GET_MODIFIED_VISIBILITY_DISTANCE() => Function.Call<float>(0x25CA89B2A39DCC69);
		/// <summary>
		/// Old name: _ENABLE_EXTRA_TIMECYCLE_MODIFIER_STRENGTH
		/// </summary>
		public static void ENABLE_MOON_CYCLE_OVERRIDE(float strength) => Function.Call(0x6FE93BCC7BF12B63, strength);
		public static void SET_TV_CHANNEL(int channel) => Function.Call(0x593FAF7FC9401A56, channel);
		public static int GET_TV_CHANNEL() => Function.Call<int>(0xF90FBFD68F3C59AE);
		public static void SET_TV_VOLUME(float volume) => Function.Call(0x73A97068787D7231, volume);
		public static void DRAW_TV_CHANNEL(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha) => Function.Call(0xC0A145540254A840, xPos, yPos, xScale, yScale, rotation, red, green, blue, alpha);
		public static void SET_TV_CHANNEL_PLAYLIST(int tvChannel, string playlistName, bool restart) => Function.Call(0xDEC6B25F5DC8925B, tvChannel, playlistName, restart);
		/// <summary>
		/// Old name: _IS_TV_PLAYLIST_ITEM_PLAYING
		/// </summary>
		public static bool IS_TVSHOW_CURRENTLY_PLAYING(uint videoCliphash) => Function.Call<bool>(0x4D562223E0EB65F3, videoCliphash);
		public static Any _0x5C674EB487891F6B() => Function.Call<Any>(0x5C674EB487891F6B);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ENABLE_MOVIE_SUBTITLES(bool toggle) => Function.Call(0x6FC9B065229C0787, toggle);
		public static void _0x32DE2BFFDA43E62A() => Function.Call(0x32DE2BFFDA43E62A);
		public static void _0xD543487A1F12828F(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xD543487A1F12828F, p0, p1, p2, p3);
		public static void _0xD9BC98B55BCFAA9B(Any p0) => Function.Call(0xD9BC98B55BCFAA9B, p0);
		public static void _0x48FE0DB54045B975(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x48FE0DB54045B975, p0, p1, p2, p3, p4, p5, p6);
		public static void _0x735762E8D7573E42(Any p0, Any p1, Any p2) => Function.Call(0x735762E8D7573E42, p0, p1, p2);
		public static void _0x981C7D863980FA51() => Function.Call(0x981C7D863980FA51);
		public static void _ANIMPOSTFX_PRELOAD_POSTFX(string effectName) => Function.Call(0x5199405EABFBD7F0, effectName);
		public static bool _ANIMPOSTFX_HAS_LOADED(string effectName) => Function.Call<bool>(0xBF2DD155B2ADCD0A, effectName);
		public static void _ANIMPOSTFX_SET_TO_UNLOAD(string effectName) => Function.Call(0x37D7BDBA89F13959, effectName);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/animpostfx
		/// </summary>
		public static void ANIMPOSTFX_PLAY(string effectName) => Function.Call(0x4102732DF6B4005F, effectName);
		public static void _ANIMPOSTFX_PLAY_TIMED(string effectName, int duration) => Function.Call(0x3A9A281FF71249E9, effectName, duration);
		public static void ANIMPOSTFX_STOP(string effectName) => Function.Call(0xB4FD7446BAB2F394, effectName);
		/// <summary>
		/// effectName2, p2 and p3 are unused
		/// 
		/// ANIMPOSTFX_*
		/// </summary>
		public static void _0x26DD2FB0A88CC412(string effectName, string effectName2, Any p2, Any p3) => Function.Call(0x26DD2FB0A88CC412, effectName, effectName2, p2, p3);
		public static void _ANIMPOSTFX_CLEAR_EFFECT(string effectName) => Function.Call(0xC5CB91D65852ED7E, effectName);
		public static bool ANIMPOSTFX_IS_RUNNING(string effectName) => Function.Call<bool>(0x4A123E85D7C4CA0B, effectName);
		public static bool _ANIMPOSTFX_IS_TAG_PLAYING(string effectName) => Function.Call<bool>(0x2D4F9C852CE8A253, effectName);
		public static void ANIMPOSTFX_STOP_ALL() => Function.Call(0x66560A0D4C64FD21);
		public static void _ANIMPOSTFX_STOP_TAG(string effectName) => Function.Call(0xAD74C22A541AB987, effectName);
		/// <summary>
		/// must be called after ANIMPOSTFX_PLAY, strength 0.0f - 1.0f
		/// </summary>
		public static void _ANIMPOSTFX_SET_STRENGTH(string effectName, float strength) => Function.Call(0xCAB4DD2D5B2B7246, effectName, strength);
		/// <summary>
		/// Health Core Effect Filter Potency: p1 = 1
		/// Stamina Core Effect Filter Potency: p1 = 2
		/// Multiple Core Effect Filter Potency: p1 = 3
		/// </summary>
		public static void _ANIMPOSTFX_SET_POTENCY(string effectName, int p1, float potency) => Function.Call(0xF972F0AB16DC5260, effectName, p1, potency);
		public static void _ANIMPOSTFX_SET_POSTFX_COLOR(string effectName, int p1, int red, int green, int blue, int alpha) => Function.Call(0x63011D0C7C6519E0, effectName, p1, red, green, blue, alpha);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static bool _0xB958D97A0DFAA0C2(string effectName) => Function.Call<bool>(0xB958D97A0DFAA0C2, effectName);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static void _0xA201A3D0AC087C37(string effectName) => Function.Call(0xA201A3D0AC087C37, effectName);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static bool _0xFBF161FCFEC8589E(string effectName, int p1, bool p2, bool* p3) => Function.Call<bool>(0xFBF161FCFEC8589E, effectName, p1, p2, p3);
		/// <summary>
		/// Known effects: MP_Trans_SceneToPhoto
		/// MP_Trans_WinLose
		/// SpectateFilter
		/// MP_CharacterCreatorPhoto
		/// MP_Trans_PhotoToScene
		/// InterrogationHit
		/// </summary>
		public static uint _ANIMPOSTFX_GET_STACKHASH(string effectName) => Function.Call<uint>(0x842CCC9491FFCD9B, effectName);
		public static void _ANIMPOSTFX_PRELOAD_POSTFX_BY_STACKHASH(uint effectNameHash) => Function.Call(0xF3E039322BFBD4D8, effectNameHash);
		public static bool ANIMPOSTFX_IS_PRELOADING_BY_STACKHASH(uint effectNameHash) => Function.Call<bool>(0x59EA80079B86D8C7, effectNameHash);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static void _0x38D9D50F2085E9B3(uint effectNameHash) => Function.Call(0x38D9D50F2085E9B3, effectNameHash);
		public static void _ANIMPOSTFX_PLAY_TAG(uint effectNameHash) => Function.Call(0x9B8D5D4CB8AF58B3, effectNameHash);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static void _0xC76FC4C2FC5F4405(uint effectNameHash) => Function.Call(0xC76FC4C2FC5F4405, effectNameHash);
		public static void _ANIMPOSTFX_STOP_STACKHASH_POSTFX(uint effectNameHash) => Function.Call(0xEDA5CBECF56E1386, effectNameHash);
		public static bool _ANIMPOSTFX_IS_STACKHASH_PLAYING(uint effectNameHash) => Function.Call<bool>(0xEEF83A759AE06A27, effectNameHash);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static bool _0xE75CDDEBF618C8FF(uint effectNameHash) => Function.Call<bool>(0xE75CDDEBF618C8FF, effectNameHash);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static void _0x71845905BCCDE781(uint effectNameHash) => Function.Call(0x71845905BCCDE781, effectNameHash);
		public static bool ANIMPOSTFX_HAS_EVENT_TRIGGERED_BY_STACKHASH(uint effectNameHash, int p1, bool p2, bool* p3) => Function.Call<bool>(0x9AB192A9EF980EED, effectNameHash, p1, p2, p3);
		/// <summary>
		/// Returns whether the 'killFX' setting is enabled.
		/// 
		/// ANIMPOSTFX_*
		/// </summary>
		public static bool _0xFF584F097C17FA8F() => Function.Call<bool>(0xFF584F097C17FA8F);
		/// <summary>
		/// ANIMPOSTFX_*
		/// </summary>
		public static bool _0x3DA7A10583A4BEC0() => Function.Call<bool>(0x3DA7A10583A4BEC0);
		/// <summary>
		/// Doesn't actually return anything.
		/// 
		/// ANIMPOSTFX_*
		/// </summary>
		public static Any _0xC37792A3F9C90771() => Function.Call<Any>(0xC37792A3F9C90771);
		public static void _0xA0F4D12D6042F6D5(Any p0, Any p1) => Function.Call(0xA0F4D12D6042F6D5, p0, p1);
		public static void _0x8996FA6AD9FE4E90(Any p0) => Function.Call(0x8996FA6AD9FE4E90, p0);
		/// <summary>
		/// Only used in guama1 R* SP Script while spawning the ship
		/// </summary>
		public static void _0xC38B4952B728397A(int vehicle, bool toggle) => Function.Call(0xC38B4952B728397A, vehicle, toggle);
		public static bool PEDSHOT_IS_AVAILABLE() => Function.Call<bool>(0xAF6E67D073D2DCE2);
		/// <summary>
		/// R* Script spd_agnesdow1: p0 = SPD_AGNES_DOWD_01
		/// </summary>
		public static bool _0xFD05B1DDE83749FA(string p0) => Function.Call<bool>(0xFD05B1DDE83749FA, p0);
		public static void _0xC2B8164C3BE871A4() => Function.Call(0xC2B8164C3BE871A4);
		public static void _0x3E2FDDBE435A8787() => Function.Call(0x3E2FDDBE435A8787);
		public static void _0x55285F885F662169() => Function.Call(0x55285F885F662169);
		public static bool _0xD9C24F53631F2372(string texture, int ped, int playerSlot) => Function.Call<bool>(0xD9C24F53631F2372, texture, ped, playerSlot);
		public static void _0x196D3ACBEBA4A44B(int personaPhotoLocalCacheType) => Function.Call(0x196D3ACBEBA4A44B, personaPhotoLocalCacheType);
		public static void _0xA1A86055792FB249(int personaPhotoLocalCacheType) => Function.Call(0xA1A86055792FB249, personaPhotoLocalCacheType);
		/// <summary>
		/// Only used in R* SP Script spd_agnesdown1
		/// </summary>
		public static bool _0x402E1A61D2587FCD(Any p0, float x, float y, float z, float p4, float p5, float heading) => Function.Call<bool>(0x402E1A61D2587FCD, p0, x, y, z, p4, p5, heading);
		public static bool _0x402E1A61D2587FCD(Any p0, Vector3 vec, float p4, float p5, float heading) => Function.Call<bool>(0x402E1A61D2587FCD, p0, vec.X, vec.Y, vec.Z, p4, p5, heading);
		/// <summary>
		/// Only used in R* SP Script spd_agnesdown1
		/// </summary>
		public static Any _0x5C9C3A466B3296A8(Any p0) => Function.Call<Any>(0x5C9C3A466B3296A8, p0);
		public static Any _0xA15CCAB8AD038291(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xA15CCAB8AD038291, p0, p1, p2, p3);
		public static Any _0x285438C26C732F9D() => Function.Call<Any>(0x285438C26C732F9D);
		/// <summary>
		/// state: false disables artificial interior light sources for specific proxyInteriorIndex
		/// </summary>
		public static void _SET_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_STATE(int proxyInteriorIndex, bool state) => Function.Call(0xBFCB17895BB99E4E, proxyInteriorIndex, state);
		public static bool _IS_PROXY_INTERIOR_INDEX_ARTIFICIAL_LIGHTS_ENABLED(int proxyInteriorIndex) => Function.Call<bool>(0x113857D66A9CABE6, proxyInteriorIndex);
		/// <summary>
		/// Returns proxyInteriorIndex
		/// </summary>
		public static int _GET_PROXY_INTERIOR_INDEX(int interiorId) => Function.Call<int>(0x5D1C5D8E62E8EE1C, interiorId);
		public static void _0x9D1B0B5066205692() => Function.Call(0x9D1B0B5066205692);
		public static void _0xC489FE31AC726512(Any p0, Any p1) => Function.Call(0xC489FE31AC726512, p0, p1);
		public static void _SET_CLOUD_LAYER(float x, float y, int p2) => Function.Call(0xB8C984C0D47F4F07, x, y, p2);
		public static void _SET_CLOUD_NOISE(float x, float y, float z) => Function.Call(0xFE7966DF01452F32, x, y, z);
		public static void _SET_CLOUD_NOISE(Vector3 vec) => Function.Call(0xFE7966DF01452F32, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Only used in finale2, smuggler2, winter4
		/// _SET_CLOUD_A* - _SET_CLOUD_H*
		/// </summary>
		public static void _SET_CLOUD_POSITION(float x, float y, float z) => Function.Call(0x10C1767B93257480, x, y, z);
		public static void _SET_CLOUD_POSITION(Vector3 vec) => Function.Call(0x10C1767B93257480, vec.X, vec.Y, vec.Z);
		public static void _SET_CLOUD_HEIGHT(float height) => Function.Call(0xC332C91388F5580B, height);
		public static void _0x085C5B61A0114F32(Any p0, Any p1) => Function.Call(0x085C5B61A0114F32, p0, p1);
		public static void _0x1FF8731BE1DFC0C0(Any p0, Any p1) => Function.Call(0x1FF8731BE1DFC0C0, p0, p1);
		public static Any _0xFC9B53C072F418E0() => Function.Call<Any>(0xFC9B53C072F418E0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x94B261F1F35293E1(Any p0) => Function.Call(0x94B261F1F35293E1, p0);
		public static void ENABLE_ENTITYMASK() => Function.Call(0xFAAD23DE7A54FC14);
		public static void DISABLE_ENTITYMASK() => Function.Call(0x5C9978A2A3DC3D0D);
		public static void _ADD_ENTITY_TO_ENTITY_MASK(int entity, int mask) => Function.Call(0xC6F81FCD15350323, entity, mask);
		public static void _ADD_ENTITY_TO_ENTITY_MASK_WITH_INTENSITY(int entity, int mask, float intensity) => Function.Call(0x958DEBD9353C0935, entity, mask, intensity);
		public static void _REMOVE_ENTITY_FROM_ENTITY_MASK(int entity) => Function.Call(0x56A786E87FF53478, entity);
		public static Any _0xE8A8378BF651079C(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0xE8A8378BF651079C, p0, p1, p2, p3, p4);
		public static void _0xE92012611461A42A(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xE92012611461A42A, p0, p1, p2, p3, p4);
		public static void _0x249CD6B7285536F2(Any p0, Any p1, Any p2) => Function.Call(0x249CD6B7285536F2, p0, p1, p2);
		/// <summary>
		/// Used for script function RPG_GLOBAL_STATS__PRIVATE__DEACTIVATE_STAT_FLAG - Inspiration Aura unequip
		/// </summary>
		public static void _0xAF4D239B8903FCBE() => Function.Call(0xAF4D239B8903FCBE);
		/// <summary>
		/// enum class eSnowCoverageType
		/// {
		/// 	Primary,
		/// 	Secondary,
		/// 	Xmas,
		/// 	XmasSecondary // since b1232
		/// };
		/// </summary>
		public static void _SET_SNOW_COVERAGE_TYPE(int type) => Function.Call(0xF02A9C330BBFC5C7, type);
		public static void _0x519928DF02EB5101(Any p0) => Function.Call(0x519928DF02EB5101, p0);
		public static void _0x1C6306E5BC25C29C() => Function.Call(0x1C6306E5BC25C29C);
	}

	public unsafe static class GANG
	{
		public static bool NETWORK_IS_GANG_ID_VALID(Any gangId) => Function.Call<bool>(0xD6F6ACF4392187FB, gangId);
		public static bool NETWORK_IS_GANG_IN_SESSION(Any gangId) => Function.Call<bool>(0x93A91A351A07360E, gangId);
		public static bool NETWORK_IS_GANG_ACTIVE(Any gangId) => Function.Call<bool>(0x0F99F6436528A089, gangId);
		public static bool _NETWORK_IS_GANG_OPEN(Any gangId) => Function.Call<bool>(0xFCF96CCBD81B24C8, gangId);
		public static int _NETWORK_GET_GANG_PRIVACY() => Function.Call<int>(0x9970AE8C3D706139);
		/// <summary>
		/// openStatus = true -> sets privacyType = 2 (PUBLIC_ADVERTISED)
		/// openStatus = false -> sets privacyType = 1 (INVITE_ONLY)
		/// 
		/// campSize: NET_CAMP_SIZE_SMALLEST = 4, NET_CAMP_SIZE_LARGEST = 7
		/// </summary>
		public static void _NETWORK_START_GANG(bool openStatus, int campSize) => Function.Call(0xD1A226F2E05E58FC, openStatus, campSize);
		public static bool _NETWORK_SET_GANG_PRIVACY(int privacyType) => Function.Call<bool>(0xC5BF29F4035277C2, privacyType);
		public static void _NETWORK_LEAVE_GANG(bool disband) => Function.Call(0x0A04A07BC3074EDB, disband);
		/// <summary>
		/// banTimeSeconds is 120 in R* Scripts
		/// </summary>
		public static void _NETWORK_KICK_GANG_MEMBER(int player, int banTimeSeconds) => Function.Call(0xCD9E2D9BC52FD80F, player, banTimeSeconds);
		/// <summary>
		/// Returns true if join succeeded, false if failed.
		/// </summary>
		public static bool _NETWORK_REQUEST_GANG_JOIN(Any gangId) => Function.Call<bool>(0xC0474C8BCF6787AD, gangId);
		public static bool NETWORK_IS_GANG_LEADER(int player) => Function.Call<bool>(0x424B17A7DC5C90BC, player);
		public static bool _NETWORK_IS_GANG_MEMBER(Any gangId, int player) => Function.Call<bool>(0x9BE7DCB22D32CCBE, gangId, player);
		public static bool NETWORK_IS_IN_SAME_GANG(int player1, int player2) => Function.Call<bool>(0x3F59FE6F37869576, player1, player2);
		public static bool _NETWORK_IS_IN_MY_GANG(int player) => Function.Call<bool>(0x81FB74C83C2ED69F, player);
		public static int NETWORK_GET_NUM_GANG_MEMBERS(Any gangId) => Function.Call<int>(0x149A2751AB66AC02, gangId);
		public static int _NETWORK_GET_GANG_SIZE(Any gangId) => Function.Call<int>(0x853B0FA4D8732C57, gangId);
		public static bool _NETWORK_SET_GANG_SIZE(int size) => Function.Call<bool>(0x833D8268D51B4522, size);
		public static Any NETWORK_GET_GANG_ID(int player) => Function.Call<Any>(0x901E0DC25080C8B9, player);
		public static int _NETWORK_GET_GANG_MEMBERS(Any gangId, Any* memberHandles) => Function.Call<int>(0xD1BF325C8252A982, gangId, memberHandles);
		/// <summary>
		/// _NETWORK_GET_* or _NETWORK_IS_*
		/// </summary>
		public static bool _0xDA801F7F6A5278D3(int player) => Function.Call<bool>(0xDA801F7F6A5278D3, player);
		public static Any _0x2F7EB8B6F6AFE79C(Any p0) => Function.Call<Any>(0x2F7EB8B6F6AFE79C, p0);
		public static Any _0x53A94294FDDCF98C(Any p0, Any p1) => Function.Call<Any>(0x53A94294FDDCF98C, p0, p1);
		public static int NETWORK_GET_GANG_LEADER(Any gangId) => Function.Call<int>(0x4BE6C13A45CCA8EC, gangId);
		public static bool _NETWORK_GET_GANG_LEADER_HANDLE(Any gangId, Any* gamerHandle) => Function.Call<bool>(0xCE88A261DCBBA0D9, gangId, gamerHandle);
		public static bool _0x6102830F764B3DE1(int player) => Function.Call<bool>(0x6102830F764B3DE1, player);
		public static void _0xB38C256498748413() => Function.Call(0xB38C256498748413);
		public static Any _0xE4C64CD37CB176AA(int p0) => Function.Call<Any>(0xE4C64CD37CB176AA, p0);
		public static Any _0x7BAA30C9BBE8AEE7(Any p0, Any p1) => Function.Call<Any>(0x7BAA30C9BBE8AEE7, p0, p1);
		public static Any _0x0E5C9FB9ED5DFF1C(Any p0) => Function.Call<Any>(0x0E5C9FB9ED5DFF1C, p0);
		public static void _0xB22B1D9F74095382(Any p0) => Function.Call(0xB22B1D9F74095382, p0);
		public static void _0xEE4F20004D0288B7() => Function.Call(0xEE4F20004D0288B7);
		public static void _0xAD22AB64FA428DF3(Any p0) => Function.Call(0xAD22AB64FA428DF3, p0);
		public static Any _0x48D82C83987E18E4(Any p0) => Function.Call<Any>(0x48D82C83987E18E4, p0);
		public static void _0xA9CEAE8D6637FBAD(Any p0) => Function.Call(0xA9CEAE8D6637FBAD, p0);
		public static Any _0x51C5EF47086AA0D7() => Function.Call<Any>(0x51C5EF47086AA0D7);
		public static Any _0x644E02F24F9D4E98(Any p0, Any p1) => Function.Call<Any>(0x644E02F24F9D4E98, p0, p1);
		public static Any _0x3ADC71A66356D706() => Function.Call<Any>(0x3ADC71A66356D706);
		public static Any _0xFA7C5B7E087A4CEB() => Function.Call<Any>(0xFA7C5B7E087A4CEB);
		public static Any _0x1F11702DDBD915C6(Any p0, Any p1) => Function.Call<Any>(0x1F11702DDBD915C6, p0, p1);
		public static Any _0x7933754F260B428A(int player) => Function.Call<Any>(0x7933754F260B428A, player);
		public static Any _0xAFD3599A3CC5637D() => Function.Call<Any>(0xAFD3599A3CC5637D);
		public static void _0xC81A9E2C8EFD28D5(Any p0) => Function.Call(0xC81A9E2C8EFD28D5, p0);
	}

	public unsafe static class GOOGLE_ANALYTICS
	{
		public static void _GOOGLE_ANALYTICS_PUSH_PAGE(string pageName) => Function.Call(0xD43A616AE3AC4EF6, pageName);
		public static void _GOOGLE_ANALYTICS_POP_PAGE(string pageName) => Function.Call(0xC6DE040378364798, pageName);
		public static bool _GOOGLE_ANALYTICS_START_EVENT(string eventCategory, string eventAction, string eventLabel, int eventValue) => Function.Call<bool>(0x1C54F031D7C0F7AC, eventCategory, eventAction, eventLabel, eventValue);
		public static bool _GOOGLE_ANALYTICS_END_EVENT() => Function.Call<bool>(0x87BBCC4360A9BDE3);
	}

	public unsafe static class HUD
	{
		/// <summary>
		/// Enables reduced time scale while menus such as weapon wheel and satchel are open.
		/// </summary>
		public static void _ENABLE_REDUCED_MENU_TIME_SCALE() => Function.Call(0x26F6BBEA2CE3E3DC);
		/// <summary>
		/// Disables reduced time scale while menus such as weapon wheel and satchel are open.
		/// </summary>
		public static void _DISABLE_REDUCED_MENU_TIME_SCALE() => Function.Call(0xC5C7A2F6567FCCBC);
		public static void _ENABLE_HUD_CONTEXT_THIS_FRAME(uint component) => Function.Call(0xC9CAEAEEC1256E54, component);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/hud_presets
		/// Old name: _HIDE_HUD_COMPONENT
		/// </summary>
		public static void _ENABLE_HUD_CONTEXT(uint component) => Function.Call(0x4CC5F2FC1332577F, component);
		/// <summary>
		/// Old name: _DISPLAY_HUD_COMPONENT
		/// </summary>
		public static void _DISABLE_HUD_CONTEXT(uint component) => Function.Call(0x8BC7C1F929D07BF3, component);
		public static int _0x7EC0D68233E391AC(int p0) => Function.Call<int>(0x7EC0D68233E391AC, p0);
		public static void _BUSYSPINNER_SET_TEXT(string text) => Function.Call(0x7F78CD75CC4539E4, text);
		/// <summary>
		/// Removes the loading prompt at the bottom right of the screen.
		/// </summary>
		public static void BUSYSPINNER_OFF() => Function.Call(0x58F441B90EA84D06);
		public static bool BUSYSPINNER_IS_ON() => Function.Call<bool>(0x823BF7B1DF613A21);
		/// <summary>
		/// Note: you must use VAR_STRING. Byte code very similar to TEXT_COMMAND_DISPLAY_TEXT in V
		/// Old name: _GET_TEXT_SUBSTRING
		/// </summary>
		public static string GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(string text, int position, int length) => Function.Call<string>(0x9D7E12EC6A1EE4E5, text, position, length);
		/// <summary>
		/// Gets a string literal from a label name.
		/// 
		/// Old name: _GET_LABEL_TEXT
		/// </summary>
		public static string GET_FILENAME_FOR_AUDIO_CONVERSATION(string labelName) => Function.Call<string>(0xCFEDCCAD3C5BA90D, labelName);
		public static void CLEAR_ALL_HELP_MESSAGES() => Function.Call(0x916ED8321F087059);
		public static bool TEXT_BLOCK_IS_LOADED(string textBlock) => Function.Call<bool>(0xD0976CC34002DB57, textBlock);
		public static bool _TEXT_BLOCK_IS_STREAMED(string textBlock) => Function.Call<bool>(0x3CF96E16265B7DC8, textBlock);
		public static void TEXT_BLOCK_REQUEST(string textBlock) => Function.Call(0xF66090013DE648D5, textBlock);
		public static void _TEXT_BLOCK_DELETE(string textBlock) => Function.Call(0xAA03F130A637D923, textBlock);
		public static bool _DOES_TEXT_BLOCK_EXIST(string textDatabase) => Function.Call<bool>(0x2C729F2B94CEA911, textDatabase);
		/// <summary>
		/// Checks if the passed gxt name exists in the game files.
		/// </summary>
		public static bool DOES_TEXT_LABEL_EXIST(string label) => Function.Call<bool>(0x73C258C68D6F55B6, label);
		public static string _GET_LABEL_TEXT_2(string label) => Function.Call<string>(0x3429670F9B9EF2D3, label);
		/// <summary>
		/// Similar to 0x9D7E12EC6A1EE4E5(GET_TEXT_SUBSTRING) but starts at the beginning of the string
		/// </summary>
		public static string _GET_TEXT_SUBSTRING_2(string text, int length) => Function.Call<string>(0xD8402B858F4DDD88, text, length);
		public static Any _0x806862E5D266CF38(Any p0, Any p1, Any p2) => Function.Call<Any>(0x806862E5D266CF38, p0, p1, p2);
		/// <summary>
		/// Returns the length of the string passed (much like strlen).
		/// </summary>
		public static int GET_LENGTH_OF_LITERAL_STRING(string _string) => Function.Call<int>(0x481FBF588B0B76DB, _string);
		public static int GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string _string) => Function.Call<int>(0xDC5AD6B7AB8184F5, _string);
		/// <summary>
		/// Returns the label text given the hash.
		/// 
		/// Old name: _GET_LABEL_TEXT_BY_HASH
		/// </summary>
		public static string GET_STRING_FROM_HASH_KEY(uint labelHash) => Function.Call<string>(0xBD5DD5EAE2B6CE14, labelHash);
		public static bool IS_RADAR_PREFERENCE_SWITCHED_ON() => Function.Call<bool>(0x81E47F0EE1F2B21E);
		public static bool IS_SUBTITLE_PREFERENCE_SWITCHED_ON() => Function.Call<bool>(0x7C4AC9573587F2DF);
		/// <summary>
		/// If Hud should be displayed
		/// </summary>
		public static void DISPLAY_HUD(bool toggle) => Function.Call(0xD63FE3AF9FB3D53F, toggle);
		public static bool IS_HUD_HIDDEN() => Function.Call<bool>(0x71B72B478F8189DC);
		public static bool IS_RADAR_HIDDEN() => Function.Call<bool>(0x1B82FD5FFA4D666E);
		public static bool IS_RADAR_HIDDEN_BY_SCRIPT() => Function.Call<bool>(0x66F35DD9D2B58579);
		/// <summary>
		/// colorNameHash: https://alloc8or.re/rdr3/doc/enums/eColor.txt
		/// </summary>
		public static void _GET_COLOR_FROM_NAME(uint colorNameHash, int* red, int* green, int* blue, int* alpha) => Function.Call(0xB981DD2DFAF9B1C9, colorNameHash, red, green, blue, alpha);
		/// <summary>
		/// nullsub, this native does nothing since build 1436, use _BG_DISPLAY_TEXT (0x16794E044C9EFB58) instead.
		/// </summary>
		public static void _DISPLAY_TEXT(string text, float xPos, float yPos) => Function.Call(0xD79334A4BB99BAD1, text, xPos, yPos);
		/// <summary>
		/// This native does nothing since build 1436, use _BG_SET_TEXT_COLOR (0x16FA5CE47F184F1E) instead.
		/// </summary>
		public static void _SET_TEXT_COLOR(int r, int g, int b, int a) => Function.Call(0x50A41AD966910F03, r, g, b, a);
		public static void SET_TEXT_RENDER_ID(int renderId) => Function.Call(0xE550CDE128D56757, renderId);
		public static bool REGISTER_NAMED_RENDERTARGET(string name, bool p1) => Function.Call<bool>(0x98AF2BB6F62BD588, name, p1);
		public static bool IS_NAMED_RENDERTARGET_REGISTERED(string name) => Function.Call<bool>(0x3EE32F7964C40FE6, name);
		public static bool RELEASE_NAMED_RENDERTARGET(string name) => Function.Call<bool>(0x0E692EE61761361F, name);
		public static void LINK_NAMED_RENDERTARGET(uint modelHash) => Function.Call(0x2F506B8556242DDB, modelHash);
		public static int GET_NAMED_RENDERTARGET_RENDER_ID(string name) => Function.Call<int>(0xB6762A85EE29AA60, name);
		public static bool IS_NAMED_RENDERTARGET_LINKED(uint modelHash) => Function.Call<bool>(0x707032835FF09AE7, modelHash);
		public static void _0x9D37EB5003E0F2CF(Any p0, Any p1) => Function.Call(0x9D37EB5003E0F2CF, p0, p1);
		public static void HIDE_LOADING_ON_FADE_THIS_FRAME() => Function.Call(0xEA600AABAF4B9084);
		public static void _0x052D4AC0922AF91A(Any p0, Any p1) => Function.Call(0x052D4AC0922AF91A, p0, p1);
		public static void HIDE_HUD_AND_RADAR_THIS_FRAME() => Function.Call(0x36CDD81627A6FCD2);
		public static void _0x8A59D44189AF2BC5(Any p0, Any p1) => Function.Call(0x8A59D44189AF2BC5, p0, p1);
		public static void _0x160825DADF1B04B3() => Function.Call(0x160825DADF1B04B3);
		public static Any _0x9C409BBC492CB5B1() => Function.Call<Any>(0x9C409BBC492CB5B1);
		public static Any _0x0501D52D24EA8934(Any p0) => Function.Call<Any>(0x0501D52D24EA8934, p0);
		public static Any _0x100157D6D7FE32CA(Any p0, Any p1) => Function.Call<Any>(0x100157D6D7FE32CA, p0, p1);
		public static Any _0x28AE29D909C8FDCE(Any p0) => Function.Call<Any>(0x28AE29D909C8FDCE, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x2F7BB105144ACF30() => Function.Call(0x2F7BB105144ACF30);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xBFFF81E12A745A5F() => Function.Call(0xBFFF81E12A745A5F);
		public static void SET_MISSION_NAME(bool p0, string name) => Function.Call(0x402669A4BDAA72DA, p0, name);
		public static void SET_MISSION_NAME_FOR_UGC_MISSION(bool p0, string name) => Function.Call(0xD98630CE73C61E98, p0, name);
		public static void _0xCE0D2F5586627CCE(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xCE0D2F5586627CCE, p0, p1, p2, p3, p4);
		public static bool GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(float worldX, float worldY, float worldZ, float* screenX, float* screenY) => Function.Call<bool>(0xB39C81628EF10B42, worldX, worldY, worldZ, screenX, screenY);
		public static bool GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(Vector3 vec, float* screenX, float* screenY) => Function.Call<bool>(0xB39C81628EF10B42, vec.X, vec.Y, vec.Z, screenX, screenY);
		public static void _HIDE_HUD_THIS_FRAME() => Function.Call(0xBF4F34A85CA2970D);
		public static void DISABLE_FRONTEND_THIS_FRAME() => Function.Call(0x56CE42A528156A67);
		public static void _0x5651516D947ABC53() => Function.Call(0x5651516D947ABC53);
		/// <summary>
		/// Old name: _ALLOW_PAUSE_MENU_WHEN_DEAD_THIS_FRAME
		/// </summary>
		public static void ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() => Function.Call(0x30996422DF1EE561);
		public static void SET_FRONTEND_ACTIVE(bool active) => Function.Call(0xCE47C21C0687EBC2, active);
		/// <summary>
		/// Returns true when either Pause Menu, a Frontend Menu, Online Policies menu or Social Club menu is active.
		/// </summary>
		public static bool IS_PAUSE_MENU_ACTIVE() => Function.Call<bool>(0x535384D6067BA42E);
		public static void _SHOW_PLAYER_CORES(bool state) => Function.Call(0x50C803A4CD5932C5, state);
		public static void _SHOW_HORSE_CORES(bool state) => Function.Call(0xD4EE21B7CC7FD350, state);
		public static void _0x3FE4FB41EF7D2196(Any p0) => Function.Call(0x3FE4FB41EF7D2196, p0);
		public static void _JOURNAL_WRITE_ENTRY(Any p0) => Function.Call(0x6DFDD665E416B093, p0);
		public static Any _JOURNAL_CAN_WRITE_ENTRY(Any p0) => Function.Call<Any>(0xCF782691D91F270E, p0);
		public static Any _JOURNAL_GET_ENTRY_COUNT() => Function.Call<Any>(0xE65B5DE53351BE22);
		public static Any _JOURNAL_GET_ENTRY_AT_INDEX(Any p0) => Function.Call<Any>(0x3D16ABD7A1FD8C96, p0);
		public static Any _JOURNAL_GET_GRIME_AT_INDEX(Any p0) => Function.Call<Any>(0xCB5945E1B855852F, p0);
		public static Any _JOURNAL_GET_ENTRY_INFO(Any p0, Any p1) => Function.Call<Any>(0x5514C3E60673530F, p0, p1);
		public static Any _JOURNAL_GET_TEXTURE_WITH_LAYOUT(Any p0, Any p1, Any p2) => Function.Call<Any>(0x62CC549B3B8EA2AA, p0, p1, p2);
		public static void _JOURNAL_MARK_READ(Any p0) => Function.Call(0xE4509BABE59BD24E, p0);
		public static void _JOURNAL_CLEAR_ALL_PROGRESS() => Function.Call(0xF402978DE6F88D6E);
		public static Any UI_REQUEST_SCENE(Any p0, Any p1) => Function.Call<Any>(0xB6857100F8FD433C, p0, p1);
		public static void _0xF1E6979C0B779985(int uiscene) => Function.Call(0xF1E6979C0B779985, uiscene);
		public static Any UI_GET_SCENE_UIOBJECT(Any p0) => Function.Call<Any>(0xBE1067CD1C9570F6, p0);
		public static void UI_MOVIEVIEW_SET_RENDER_TARGET(Any p0, Any p1) => Function.Call(0x51DE09A2196BD951, p0, p1);
		public static int _UI_PROMPT_CREATE(uint inputHash, string labelName, Any p2, Any p3, Any p4, int p5) => Function.Call<int>(0x29FA7910726C3889, inputHash, labelName, p2, p3, p4, p5);
		public static int _UI_PROMPT_REGISTER_BEGIN() => Function.Call<int>(0x04F97DE45A519419);
		public static void _UI_PROMPT_REGISTER_END(int prompt) => Function.Call(0xF7AA2696A22AD8B9, prompt);
		/// <summary>
		/// priority: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptPriority
		/// </summary>
		public static void _UI_PROMPT_SET_PRIORITY(int prompt, int priority) => Function.Call(0xCA24F528D0D16289, prompt, priority);
		public static Any _UI_PROMPT_SET_CONTROL_ACTION(int prompt, uint action) => Function.Call<Any>(0xB5352B7494A08258, prompt, action);
		public static void _UI_PROMPT_SET_ALLOWED_ACTION(int prompt, uint action) => Function.Call(0x565C1CE183CB0EAF, prompt, action);
		public static void _UI_PROMPT_SET_STANDARD_MODE(int prompt, bool releaseMode) => Function.Call(0xCC6656799977741B, prompt, releaseMode);
		/// <summary>
		/// Params: p1 is 0
		/// </summary>
		public static bool _UI_PROMPT_HAS_STANDARD_MODE_COMPLETED(int prompt, int p1) => Function.Call<bool>(0xC92AC953F0A982AE, prompt, p1);
		public static void _UI_PROMPT_SET_PRESSED_TIMED_MODE(int prompt, int depletionTimeMs) => Function.Call(0x1473D3AF51D54276, prompt, depletionTimeMs);
		public static bool _UI_PROMPT_HAS_PRESSED_TIMED_MODE_COMPLETED(int prompt) => Function.Call<bool>(0x3CE854D250A88DAF, prompt);
		public static bool _UI_PROMPT_HAS_PRESSED_TIMED_MODE_FAILED(int prompt) => Function.Call<bool>(0x1A17B9ECFF617562, prompt);
		/// <summary>
		/// Params: p2 is 304000 in R* SP Script coachrobberies
		/// </summary>
		public static void _UI_PROMPT_SET_HOLD_MODE(int prompt, int holdTimeMs) => Function.Call(0x94073D5CA3F16B7B, prompt, holdTimeMs);
		/// <summary>
		/// Hashes: SHORT_TIMED_EVENT_MP, SHORT_TIMED_EVENT, MEDIUM_TIMED_EVENT, LONG_TIMED_EVENT, RUSTLING_CALM_TIMING, PLAYER_FOCUS_TIMING, PLAYER_REACTION_TIMING
		/// </summary>
		public static void _UI_PROMPT_SET_STANDARDIZED_HOLD_MODE(int prompt, uint timedEventHash) => Function.Call(0x74C7D7B72ED0D3CF, prompt, timedEventHash);
		public static void _UI_PROMPT_SET_HOLD_INDEFINITELY_MODE(int prompt) => Function.Call(0xEA5CCF4EEB2F82D1, prompt);
		public static void _UI_PROMPT_SET_HOLD_AUTO_FILL_MODE(int prompt, int autoFillTimeMs, int holdTimeMs) => Function.Call(0x3CE932E737C145D6, prompt, autoFillTimeMs, holdTimeMs);
		public static void _UI_PROMPT_SET_HOLD_AUTO_FILL_WITH_DECAY_MODE(int prompt, int autoFillTimeMs, int holdTimeMs) => Function.Call(0xA3F2149AA24F3D8E, prompt, autoFillTimeMs, holdTimeMs);
		public static bool _UI_PROMPT_HAS_HOLD_AUTO_FILL_MODE(int prompt) => Function.Call<bool>(0x8010BEBD0D5ED5BC, prompt);
		public static bool _UI_PROMPT_HAS_HOLD_MODE(int prompt) => Function.Call<bool>(0xB60C9F9ED47ABB76, prompt);
		public static bool _UI_PROMPT_IS_HOLD_MODE_RUNNING(int prompt) => Function.Call<bool>(0xC7D70EAEF92EFF48, prompt);
		public static bool _UI_PROMPT_HAS_HOLD_MODE_COMPLETED(int prompt) => Function.Call<bool>(0xE0F65F0640EF0617, prompt);
		public static Any _0x81801291806DBC50(Any p0) => Function.Call<Any>(0x81801291806DBC50, p0);
		public static void _UI_PROMPT_SET_MASH_MODE(int prompt, int mashes) => Function.Call(0xDF6423BF071C7F71, prompt, mashes);
		public static void _UI_PROMPT_SET_MASH_INDEFINITELY_MODE(int prompt) => Function.Call(0x7B66E89312727274, prompt);
		public static void _UI_PROMPT_SET_MASH_WITH_RESISTANCE_MODE(int prompt, int mashes, float p2, float p3) => Function.Call(0xCD1BDFF15EFA79F5, prompt, mashes, p2, p3);
		public static void _UI_PROMPT_SET_MASH_WITH_RESISTANCE_CAN_FAIL_MODE(int prompt, int mashes, float p2, float p3) => Function.Call(0xDC0CB602DEADBA53, prompt, mashes, p2, p3);
		public static void _UI_PROMPT_SET_MASH_AUTO_FILL_MODE(int prompt, int autoFillTimeMs, int mashes) => Function.Call(0x6C39587D7CC66801, prompt, autoFillTimeMs, mashes);
		public static void _UI_PROMPT_SET_MASH_MANUAL_MODE(int prompt, float p1, float p2, float p3, Any p4) => Function.Call(0x32DF729D8BD3C1C6, prompt, p1, p2, p3, p4);
		public static void _UI_PROMPT_SET_MASH_MANUAL_CAN_FAIL_MODE(int prompt, float p1, float p2, float p3, Any p4) => Function.Call(0x179DCF71F705DA20, prompt, p1, p2, p3, p4);
		public static bool _UI_PROMPT_HAS_MANUAL_MASH_MODE(int prompt) => Function.Call<bool>(0xA6C6A4ADB3BAC409, prompt);
		public static bool _UI_PROMPT_HAS_MASH_MODE(int prompt) => Function.Call<bool>(0xCD072523791DDC1B, prompt);
		public static Any _0xB0E8599243B3F568(Any p0) => Function.Call<Any>(0xB0E8599243B3F568, p0);
		public static bool _UI_PROMPT_HAS_MASH_MODE_COMPLETED(int prompt) => Function.Call<bool>(0x845CE958416DC473, prompt);
		public static bool _UI_PROMPT_HAS_MASH_MODE_FAILED(int prompt) => Function.Call<bool>(0x25B18E530CF39D6F, prompt);
		public static float _UI_PROMPT_GET_MASH_MODE_PROGRESS(int prompt) => Function.Call<float>(0x8A9585293863B8A5, prompt);
		/// <summary>
		/// standard (prompt not held) rate: (1f / 128f)
		/// fast (prompt held) rate: (1f / 64f)
		/// punitive (been hit) rate: (1f / 128f)
		/// </summary>
		public static void _UI_PROMPT_SET_MASH_MANUAL_MODE_INCREASE_PER_PRESS(int prompt, float rate) => Function.Call(0xA0D1D79C6036A855, prompt, rate);
		/// <summary>
		/// standard (prompt not held) rate: 0.035f
		/// fast (prompt held) rate: 0.015f
		/// punitive (been hit) rate: 0.14f
		/// </summary>
		public static void _UI_PROMPT_SET_MASH_MANUAL_MODE_DECAY_SPEED(int prompt, float speed) => Function.Call(0x7D393C247FB9B431, prompt, speed);
		public static void _UI_PROMPT_SET_MASH_MANUAL_MODE_PRESSED_GROWTH_SPEED(int prompt, float speed) => Function.Call(0x56DBB26F98582C29, prompt, speed);
		/// <summary>
		/// Used for controllers
		/// </summary>
		public static void _UI_PROMPT_SET_ROTATE_MODE(int prompt, float p1, bool counterclockwise) => Function.Call(0x7ABE7095FB3D2581, prompt, p1, counterclockwise);
		public static void _UI_PROMPT_SET_TARGET_MODE(int prompt, float p1, float p2, Any p3) => Function.Call(0x5F6503D9CD2754EB, prompt, p1, p2, p3);
		public static void _UI_PROMPT_SET_TARGET_MODE_TARGET(int prompt, float p1, float p2) => Function.Call(0x5E019C45DD3B6A14, prompt, p1, p2);
		public static void _UI_PROMPT_SET_TARGET_MODE_PROGRESS(int prompt, float progress) => Function.Call(0x00123054BEC8A30F, prompt, progress);
		public static void _UI_PROMPT_SET_BEAT_MODE(int prompt, bool toggle) => Function.Call(0xF957A1654C6322FE, prompt, toggle);
		public static bool _UI_PROMPT_WAS_BEAT_MODE_PRESSED_IN_TIME_WINDOW(int prompt) => Function.Call<bool>(0x1FE4788AB1430C55, prompt);
		public static void _UI_PROMPT_SET_BEAT_MODE_GRAYED_OUT(int prompt, Any p1) => Function.Call(0xB487A4936FBF40AC, prompt, p1);
		public static void _UI_PROMPT_RESTART_MODES(int prompt) => Function.Call(0xDC6C55DFA2C24EE5, prompt);
		public static void _UI_PROMPT_SET_SPINNER_SPEED(int prompt, Any p1) => Function.Call(0xAC6586A7FDCD4B68, prompt, p1);
		public static void _UI_PROMPT_SET_SPINNER_POSITION(int prompt, Any p1) => Function.Call(0x832CB510DE546282, prompt, p1);
		public static void _UI_PROMPT_SET_URGENT_PULSING_ENABLED(int prompt, bool toggle) => Function.Call(0xC5F428EE08FA7F2C, prompt, toggle);
		public static bool _UI_PROMPT_GET_URGENT_PULSING_ENABLED(int prompt) => Function.Call<bool>(0x1FBA0DABECDDB52B, prompt);
		public static void _UI_PROMPT_SET_TAG(int prompt, Any p1) => Function.Call(0xDEC85C174751292B, prompt, p1);
		public static int _UI_PROMPT_GET_GROUP_ID_FOR_TARGET_ENTITY(int entity) => Function.Call<int>(0xB796970BD125FCE8, entity);
		public static int _UI_PROMPT_GET_GROUP_ID_FOR_SCENARIO_POINT(Any p0, int p1) => Function.Call<int>(0xCB73D7521E7103F0, p0, p1);
		/// <summary>
		/// tabIndex: specifies tab of prompt
		/// </summary>
		public static void _UI_PROMPT_SET_GROUP(int prompt, int groupId, int tabIndex) => Function.Call(0x2F11D3A254169EA4, prompt, groupId, tabIndex);
		public static void _UI_PROMPT_REMOVE_GROUP(int prompt, Any p1) => Function.Call(0x4E52C800A28F7BE8, prompt, p1);
		/// <summary>
		/// Note: you must use VAR_STRING for p1 if string is not part of text database
		/// tabAmount: specifies number of tabs in prompt group
		/// tabDefaultIndex: specifies starting index
		/// p3 if is set > 3 you can no longer press Q to change tab if there are more than one tab set in tabAmount
		/// </summary>
		public static Any _UI_PROMPT_SET_ACTIVE_GROUP_THIS_FRAME(uint hash, string name, int tabAmount, int tabDefaultIndex, int p4, int prompt) => Function.Call<Any>(0xC65A45D4453C2627, hash, name, tabAmount, tabDefaultIndex, p4, prompt);
		public static int _UI_PROMPT_GET_GROUP_ACTIVE_PAGE(uint hash) => Function.Call<int>(0xC1FCC36C3F7286C8, hash);
		public static Any _UI_PROMPT_SET_AMBIENT_GROUP_THIS_FRAME(int entity, float p1, int p2, int p3, uint p4, string name, int p6) => Function.Call<Any>(0x315C81D760609108, entity, p1, p2, p3, p4, name, p6);
		public static Any _0x8B55B324A9123F6B(int groupId, int volume, string p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0x8B55B324A9123F6B, groupId, volume, p2, p3, p4, p5);
		public static bool _UI_PROMPT_DOES_AMBIENT_GROUP_EXIST(uint hash) => Function.Call<bool>(0xEB550B927B34A1BB, hash);
		public static void _UI_PROMPT_ADD_GROUP_LINK(Any p0, int prompt, Any p2) => Function.Call(0x684C96CC7C66E8EF, p0, prompt, p2);
		public static void _UI_PROMPT_ADD_GROUP_RETURN_LINK(Any p0, int prompt) => Function.Call(0x837972ED28159536, p0, prompt);
		/// <summary>
		/// TM_ANY = 0,
		/// TM_ON_FOOT,
		/// TM_IN_VEHICLE
		/// </summary>
		public static void _UI_PROMPT_SET_TRANSPORT_MODE(int prompt, int mode) => Function.Call(0x876E4A35C73A6655, prompt, mode);
		public static void _UI_PROMPT_DISABLE_PROMPTS_THIS_FRAME() => Function.Call(0xF1622CE88A1946FB);
		public static void _UI_PROMPT_DELETE(int prompt) => Function.Call(0x00EDE88D4D13CF59, prompt);
		public static bool _UI_PROMPT_IS_VALID(int prompt) => Function.Call<bool>(0x347469FBDD1589A9, prompt);
		public static bool _UI_PROMPT_IS_ACTIVE(int prompt) => Function.Call<bool>(0x546E342E01DE71CF, prompt);
		public static void _UI_PROMPT_SET_VISIBLE(int prompt, bool toggle) => Function.Call(0x71215ACCFDE075EE, prompt, toggle);
		public static void _UI_PROMPT_SET_ENABLED(int prompt, bool toggle) => Function.Call(0x8A0FB4D03A630D21, prompt, toggle);
		public static void _UI_PROMPT_SET_TEXT(int prompt, string text) => Function.Call(0x5DD02A8318420DD7, prompt, text);
		/// <summary>
		/// attribute: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIPromptAttribute
		/// </summary>
		public static void _UI_PROMPT_SET_ATTRIBUTE(int prompt, int attribute, bool enabled) => Function.Call(0x560E76D5E2E1803F, prompt, attribute, enabled);
		/// <summary>
		/// Params: type = mostly 0, 6 (net_mission_intro_story_gvo), 7 (fm_mission_controller), 14 (net_ugc_end_flow_transition_online), 15 (net_main_[tlg_]offline)
		/// </summary>
		public static void _UI_PROMPT_SET_TYPE(int prompt, int type) => Function.Call(0xF4A5C4509BF923B1, prompt, type);
		public static void _0x53CE46C01A089DA1(int prompt, Any p1) => Function.Call(0x53CE46C01A089DA1, prompt, p1);
		public static void _UI_PROMPT_SET_MANUAL_RESOLVED(int prompt, Any p1) => Function.Call(0xA520C7B05FA4EB2A, prompt, p1);
		/// <summary>
		/// Attaches a Volume
		/// </summary>
		public static void _UI_PROMPT_CONTEXT_SET_VOLUME(int prompt, int volume) => Function.Call(0x4D107406667423BE, prompt, volume);
		public static void _UI_PROMPT_CONTEXT_SET_POINT(int prompt, float x, float y, float z) => Function.Call(0xAE84C5EE2C384FB3, prompt, x, y, z);
		public static void _UI_PROMPT_CONTEXT_SET_POINT(int prompt, Vector3 vec) => Function.Call(0xAE84C5EE2C384FB3, prompt, vec.X, vec.Y, vec.Z);
		public static void _UI_PROMPT_CONTEXT_SET_RADIUS(int prompt, float radius) => Function.Call(0x0C718001B77CA468, prompt, radius);
		public static bool _UI_PROMPT_IS_PRESSED(int prompt) => Function.Call<bool>(0x21E60E230086697F, prompt);
		public static bool _UI_PROMPT_IS_JUST_PRESSED(int prompt) => Function.Call<bool>(0x2787CC611D3FACC5, prompt);
		public static bool _UI_PROMPT_IS_JUST_RELEASED(int prompt) => Function.Call<bool>(0x635CC82FA297A827, prompt);
		public static bool _UI_PROMPT_IS_RELEASED(int prompt) => Function.Call<bool>(0xAFC887BA7A7756D6, prompt);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/prompts/prompt_types
		/// </summary>
		public static void _UI_PROMPT_ENABLE_PROMPT_TYPE_THIS_FRAME(int p0) => Function.Call(0x06565032897BA861, p0);
		public static void _UI_PROMPT_DISABLE_PROMPT_TYPE_THIS_FRAME(int p0) => Function.Call(0xFC094EF26DD153FA, p0);
		public static void _UI_PROMPT_FILTER_CLEAR() => Function.Call(0x6A2F820452017EA2);
		public static void _UI_PROMPT_SET_PROMPT_PRIORITY_PREFERENCE(int ped) => Function.Call(0x530A428705BE5DEF, ped);
		public static void _UI_PROMPT_CLEAR_PROMPT_PRIORITY_PREFERENCE() => Function.Call(0x51259AE5C72D4A1B);
		public static bool _UI_PROMPT_IS_ENABLED(int prompt) => Function.Call<bool>(0x0D00EDDFB58B7F28, prompt);
		public static bool UI_PROMPT_IS_CONTROL_ACTION_ACTIVE(uint controlAction) => Function.Call<bool>(0x1BE19185B8AFE299, controlAction);
		public static Any _0xD6BD313CFA41E57A(Any p0) => Function.Call<Any>(0xD6BD313CFA41E57A, p0);
		/// <summary>
		/// This returns an id that can be used with 0x6095358C4142932A.
		/// </summary>
		public static int _UI_PROMPT_SET_REGISTER_HORIZONTAL_ORIENTATION() => Function.Call<int>(0xD9459157EB22C895);
		/// <summary>
		/// id is the return value from 0xD9459157EB22C895.
		/// </summary>
		public static void _UI_PROMPT_CLEAR_HORIZONTAL_ORIENTATION(int id) => Function.Call(0x6095358C4142932A, id);
		public static void _UI_PROMPT_SET_ORDERING_AS_INPUT_TYPE(int prompt, Any p1) => Function.Call(0x2F385ECC5200938D, prompt, p1);
		public static Any _0x066725A9D52B3641() => Function.Call<Any>(0x066725A9D52B3641);
		public static void _0x958278B97C4AFFD8(Any p0, Any p1) => Function.Call(0x958278B97C4AFFD8, p0, p1);
		public static int _CREATE_MP_GAMER_TAG(int player, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag) => Function.Call<int>(0xD877AF112AD2B41B, player, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
		public static int CREATE_FAKE_MP_GAMER_TAG(int ped, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag) => Function.Call<int>(0x53CB4B502E1C57EA, ped, username, pointedClanTag, isRockstarClan, clanTag, clanFlag);
		public static int _CREATE_MP_GAMER_TAG_ON_ENTITY(int entity, string text) => Function.Call<int>(0xE961BF23EAB76B12, entity, text);
		public static void REMOVE_MP_GAMER_TAG(int gamerTagId) => Function.Call(0x839BFD7D7E49FE09, gamerTagId);
		public static bool IS_MP_GAMER_TAG_ACTIVE(int gamerTagId) => Function.Call<bool>(0x6E1C31E14C7A5F97, gamerTagId);
		public static bool _IS_MP_GAMER_TAG_ACTIVE_ON_ENTITY(int gamerTagId, int entity) => Function.Call<bool>(0x502E1591A504F843, gamerTagId, entity);
		/// <summary>
		/// visibility:
		/// enum eUIGamertagVisibility
		/// {
		/// 	UIGAMERTAGVISIBILITY_NONE,
		/// 	UIGAMERTAGVISIBILITY_ICON,
		/// 	UIGAMERTAGVISIBILITY_SIMPLE,
		/// 	UIGAMERTAGVISIBILITY_COMPLEX
		/// };
		/// </summary>
		public static void _SET_MP_GAMER_TAG_VISIBILITY(int gamerTagId, int visibility) => Function.Call(0x93171DDDAB274EB8, gamerTagId, visibility);
		/// <summary>
		/// Found types: GENERIC_PLAYER, DEADDROP, HOTPROPERTY, MINIGAMES
		/// </summary>
		public static void _SET_MP_GAMER_TAG_TYPE(int gamerTagId, uint type) => Function.Call(0x25B9C78A25105C35, gamerTagId, type);
		public static void _SET_MP_GAMER_TAG_COLOUR(int gamerTagId, uint colour) => Function.Call(0x84BD27DDF9575816, gamerTagId, colour);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _SET_MP_GAMER_TAG_UNK_ALLOW_LOCALIZED(int gamerTagId, bool allow) => Function.Call(0xEF7AB1A0E8C86170, gamerTagId, allow);
		public static void SET_MP_GAMER_TAG_NAME(int gamerTagId, string _string) => Function.Call(0xEA6F4B8D4B4B5B3E, gamerTagId, _string);
		public static void _SET_MP_GAMER_TAG_NAME_POSSE(int gamerTagId, string text) => Function.Call(0x1EA716E0628A6F44, gamerTagId, text);
		public static void SET_MP_GAMER_TAG_BIG_TEXT(int gamerTagId, string _string) => Function.Call(0xA0D7CE5F83259663, gamerTagId, _string);
		/// <summary>
		/// Found icons: https://pastebin.com/xx6rEgiG
		/// </summary>
		public static void _SET_MP_GAMER_TAG_TOP_ICON(int gamerTagId, uint icon) => Function.Call(0x5F57522BC1EB9D9D, gamerTagId, icon);
		/// <summary>
		/// Found icons: SPEAKER, THROPY
		/// </summary>
		public static void _SET_MP_GAMER_TAG_SECONDARY_ICON(int gamerTagId, uint icon) => Function.Call(0x95384C6CE1526EFF, gamerTagId, icon);
		public static void _MP_GAMER_TAG_ENABLE_REVIVE_TOP_ICON(int gamerTagId) => Function.Call(0xFFF6579CF0139FCE, gamerTagId);
		public static void _MP_GAMER_TAG_DISABLE_REVIVE_TOP_ICON(int gamerTagId) => Function.Call(0x1F9A64C2804B3471, gamerTagId);
	}

	public unsafe static class IK
	{
		public static void _INVERSE_KINEMATICS_REQUEST_LOOK_AT(int ped, Any* args) => Function.Call(0x66F9EB44342BB4C5, ped, args);
		public static void _0x0B9F7A01EC50448D(int ped, Any* args) => Function.Call(0x0B9F7A01EC50448D, ped, args);
		/// <summary>
		/// Seems to disable IK on ped
		/// </summary>
		public static void _INVERSE_KINEMATICS_SET_DISABLED_FOR_PED(int ped, int p1, bool p2) => Function.Call(0x0EABF182FBB63D72, ped, p1, p2);
		public static bool _0x6098139150DCC745(int ped, int p1) => Function.Call<bool>(0x6098139150DCC745, ped, p1);
		public static void _0x873C792E07A32C8B(int ped1, int ped2) => Function.Call(0x873C792E07A32C8B, ped1, ped2);
	}

	public unsafe static class _NAMESPACE30
	{
		/// <summary>
		/// Shows the cursor on screen for one frame.
		/// 
		/// Old name: _SET_MOUSE_CURSOR_ACTIVE_THIS_FRAME
		/// </summary>
		public static void SET_MOUSE_CURSOR_THIS_FRAME() => Function.Call(0xF12E4CCAF249DC10);
		/// <summary>
		/// Changes the mouse cursor's sprite.
		/// 
		/// spriteId's: https://github.com/femga/rdr3_discoveries/tree/master/graphics/HUD/cursor_sprites#readme
		/// 
		/// Old name: _SET_MOUSE_CURSOR_SPRITE
		/// </summary>
		public static void SET_MOUSE_CURSOR_STYLE(int spriteId) => Function.Call(0x7F5858AAB5A58CCE, spriteId);
		/// <summary>
		/// Allows camera to be moved if middle mouse button is held while in first person
		/// Must be called every frame
		/// _SET*
		/// </summary>
		public static void _0x0546B117BB17548B() => Function.Call(0x0546B117BB17548B);
		/// <summary>
		/// Returns true if player is moving mouse while cursor is active
		/// _PI* - _PO*
		/// </summary>
		public static bool _0x2B8B605F2A9E64BF() => Function.Call<bool>(0x2B8B605F2A9E64BF);
		/// <summary>
		/// Returns true if player is holding LMB while cursor is active
		/// _PI* - _PO*
		/// </summary>
		public static bool _0x61CAE9D1FD055E44() => Function.Call<bool>(0x61CAE9D1FD055E44);
		/// <summary>
		/// Returns true if player releases LMB if cursor is active
		/// _PI* - _PO*
		/// </summary>
		public static bool _0xF7F51A57349739F2() => Function.Call<bool>(0xF7F51A57349739F2);
	}

	public unsafe static class INTERIOR
	{
		public static bool IS_VALID_INTERIOR(int interior) => Function.Call<bool>(0x017C1B3159F79F6C, interior);
		public static void GET_INTERIOR_LOCATION_AND_NAMEHASH(int interior, Vector3* position, uint* nameHash) => Function.Call(0x8451E87D3C2B0286, interior, position, nameHash);
		public static uint _GET_INTERIOR_MINIMAP_HASH(int interior) => Function.Call<uint>(0x3039BE60B3749716, interior);
		public static Vector3 _GET_INTERIOR_POSITION(int interior) => Function.Call<Vector3>(0x2C9746D0CA15BE1C, interior);
		public static bool IS_INTERIOR_SCENE() => Function.Call<bool>(0x4200F14D6F840A9A);
		public static void CLEAR_ROOM_FOR_ENTITY(int entity) => Function.Call(0xA1762D5BBFCA13A8, entity);
		public static void FORCE_ROOM_FOR_ENTITY(int entity, int interior, uint roomHashKey) => Function.Call(0xBC29A9894C976945, entity, interior, roomHashKey);
		/// <summary>
		/// Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
		/// </summary>
		public static uint GET_ROOM_KEY_FROM_ENTITY(int entity) => Function.Call<uint>(0x076E46E0EB52AFC6, entity);
		/// <summary>
		/// Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
		/// </summary>
		public static uint GET_KEY_FOR_ENTITY_IN_ROOM(int entity) => Function.Call<uint>(0x27D7B6F79E1F4603, entity);
		/// <summary>
		/// Returns the handle of the interior that the entity is in. Returns 0 if outside.
		/// </summary>
		public static int GET_INTERIOR_FROM_ENTITY(int entity) => Function.Call<int>(0xB417689857646F61, entity);
		public static void RETAIN_ENTITY_IN_INTERIOR(int entity, int interior) => Function.Call(0x5BD616735F16BF5C, entity, interior);
		public static void FORCE_ROOM_FOR_GAME_VIEWPORT(int interiorID, uint roomHashKey) => Function.Call(0x115B4AA8FB28AB43, interiorID, roomHashKey);
		public static void CLEAR_ROOM_FOR_GAME_VIEWPORT() => Function.Call(0x951A049765E0D450);
		public static int GET_INTERIOR_FROM_PRIMARY_VIEW() => Function.Call<int>(0xBC8A281FF125C655);
		public static int GET_INTERIOR_AT_COORDS(float x, float y, float z) => Function.Call<int>(0xCDD36C9E5C469070, x, y, z);
		public static int GET_INTERIOR_AT_COORDS(Vector3 vec) => Function.Call<int>(0xCDD36C9E5C469070, vec.X, vec.Y, vec.Z);
		public static void PIN_INTERIOR_IN_MEMORY(int interior) => Function.Call(0xBD3D33EABF680168, interior);
		/// <summary>
		/// Does something similar to INTERIOR::DISABLE_INTERIOR.
		/// 
		/// You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
		/// </summary>
		public static void UNPIN_INTERIOR(int interior) => Function.Call(0x07FD1A0B814F6055, interior);
		public static bool IS_INTERIOR_READY(int interior) => Function.Call<bool>(0x941560D2D45DBFC8, interior);
		/// <summary>
		/// Actually returns void in IDA but the script header defines a BOOL return type
		/// </summary>
		public static bool SET_INTERIOR_IN_USE(int interior) => Function.Call<bool>(0xB5EF6FEF2DC9EBED, interior);
		public static int GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, string interiorType) => Function.Call<int>(0xAAD6170AA33B13C0, x, y, z, interiorType);
		public static int GET_INTERIOR_AT_COORDS_WITH_TYPE(Vector3 vec, string interiorType) => Function.Call<int>(0xAAD6170AA33B13C0, vec.X, vec.Y, vec.Z, interiorType);
		/// <summary>
		/// Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
		/// </summary>
		public static int GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(float x, float y, float z, uint typeHash) => Function.Call<int>(0x3543AEA1816D1D2B, x, y, z, typeHash);
		public static int GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(Vector3 vec, uint typeHash) => Function.Call<int>(0x3543AEA1816D1D2B, vec.X, vec.Y, vec.Z, typeHash);
		/// <summary>
		/// Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
		/// </summary>
		public static bool IS_COLLISION_MARKED_OUTSIDE(float x, float y, float z) => Function.Call<bool>(0xF291396B517E25B2, x, y, z);
		public static bool IS_COLLISION_MARKED_OUTSIDE(Vector3 vec) => Function.Call<bool>(0xF291396B517E25B2, vec.X, vec.Y, vec.Z);
		public static int GET_INTERIOR_FROM_COLLISION(float x, float y, float z) => Function.Call<int>(0x5054D1A5218FA696, x, y, z);
		public static int GET_INTERIOR_FROM_COLLISION(Vector3 vec) => Function.Call<int>(0x5054D1A5218FA696, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/interiors/interior_sets
		/// </summary>
		public static void ACTIVATE_INTERIOR_ENTITY_SET(int interior, string entitySetName, int p2) => Function.Call(0x174D0AAB11CED739, interior, entitySetName, p2);
		public static void DEACTIVATE_INTERIOR_ENTITY_SET(int interior, string entitySetName, bool p2) => Function.Call(0x33B81A2C07A51FFF, interior, entitySetName, p2);
		public static bool IS_INTERIOR_ENTITY_SET_ACTIVE(int interior, string entitySetName) => Function.Call<bool>(0x32810CA2125F5842, interior, entitySetName);
		public static bool _IS_INTERIOR_ENTITY_SET_VALID(int interior, string entitySetName) => Function.Call<bool>(0xD56FF170710FC826, interior, entitySetName);
		public static void DISABLE_INTERIOR(int interior, bool toggle) => Function.Call(0x3C2B92A1A07D4FCE, interior, toggle);
		public static void _0x2533F2AB0EB9C6F9(Any p0, Any p1) => Function.Call(0x2533F2AB0EB9C6F9, p0, p1);
		public static void _0xFE2B3D5500B1B2E4(Any p0, Any p1) => Function.Call(0xFE2B3D5500B1B2E4, p0, p1);
	}

	public unsafe static class INVENTORY
	{
		/// <summary>
		/// Returns a unique inventory ID for this ped.
		/// For the local player ped, it is an eInventories value.
		/// For other peds, it is the inventory address casted to unsigned int.
		/// 
		/// enum eInventories
		/// {
		/// 	INVENTORY_INVALID,
		/// 	INVENTORY_SP_PLAYER,
		/// 	INVENTORY_MP_PLAYER,
		/// 	INVENTORY_MP_MISSION,
		/// 	INVENTORY_SECOND_SCREEN,
		/// 	INVENTORY_SP_BACKUP,
		/// 	INVENTORY_SP_SNAPSHOT,
		/// 	INVENTORY_0xDE2AE452,
		/// 	INVENTORY_0x399D9B3A,
		/// 	INVENTORY_0x4BD43FA7,
		/// 	INVENTORY_0x9529D251,
		/// 	INVENTORY_0xA75776AC,
		/// 	INVENTORY_MAX_ID = 11,
		/// 	INVENTORY_IDS_COUNT
		/// };
		/// </summary>
		public static int _INVENTORY_GET_INVENTORY_ID_FROM_PED(int ped) => Function.Call<int>(0x13D234A2A3F66E63, ped);
		public static int _GET_ITEM_ROLE_MAX_LEVEL_COUNT(int inventoryId, uint eRoleMaxLevel) => Function.Call<int>(0xADDD1E7C0ECF7D95, inventoryId, eRoleMaxLevel);
		public static int _GET_ITEM_SLOT_MAX_COUNT(uint provision, uint slotId) => Function.Call<int>(0xE80E50BEE276A54A, provision, slotId);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static bool _0x112BCA290D2EB53C(int inventoryId, uint p1, int* year, int* month, int* day, int* hour, int* minute, int* second) => Function.Call<bool>(0x112BCA290D2EB53C, inventoryId, p1, year, month, day, hour, minute, second);
		/// <summary>
		/// eInventoryItem: CLOTHING_FANCY_SUIT, CLOTHING_GUNSLINGER_OUTFIT, etc.
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0x46743BBFEDBC859E(int inventoryId, uint eInventoryItem, bool p2) => Function.Call(0x46743BBFEDBC859E, inventoryId, eInventoryItem, p2);
		/// <summary>
		/// Only works on CClothingItem
		/// </summary>
		public static void _INVENTORY_SET_INVENTORY_ITEM_IN_USE(int inventoryId, Any* guid, bool inUse) => Function.Call(0x65A5F70F4A292EBE, inventoryId, guid, inUse);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_IN_USE(int inventoryId, Any* guid) => Function.Call<bool>(0x70E3A884ED000A01, inventoryId, guid);
		/// <summary>
		/// Used with CClothingItem
		/// </summary>
		public static void _INVENTORY_SET_INVENTORY_ITEM_HIDDEN(int inventoryId, Any* guid, bool hidden) => Function.Call(0x9A113C660AEA3832, inventoryId, guid, hidden);
		/// <summary>
		/// Used with CSatchelItem, R* Script usage: fisihing_core
		/// </summary>
		public static void _INVENTORY_SET_INVENTORY_ITEM_HIDDEN_2(int inventoryId, Any* guid, bool hidden) => Function.Call(0xD740F11FBC8AEF43, inventoryId, guid, hidden);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_HIDDEN(int inventoryId, Any* guid) => Function.Call<bool>(0xF9933164965533B7, inventoryId, guid);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_IS_ANIMAL_PELT(uint item) => Function.Call<bool>(0x4AEF1FB5B9011D75, item);
		public static uint _INVENTORY_GET_INVENTORY_ITEM_DESCRIPTION_HASH(uint item) => Function.Call<uint>(0xA4550FE9C512E3DD, item);
		/// <summary>
		/// flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ItemDatabaseItemFlags
		/// 2097152 (is item read?), 8388608 (is item sent/received/mailable?), 16777216 (is item consumable?)
		/// </summary>
		public static bool _INVENTORY_IS_INVENTORY_ITEM_FLAG_ENABLED(uint item, int flag) => Function.Call<bool>(0x245D07651B1D183B, item, flag);
		/// <summary>
		/// eSoundType:
		/// SI_SFX_INVALID = -1,
		/// SI_SFX_PURCHASE,
		/// SI_SFX_SELL,
		/// SI_SFX_USE
		/// </summary>
		public static bool _INVENTORY_GET_IS_INVENTORY_ITEM_SOUND_VALID(uint item, int soundType) => Function.Call<bool>(0x2BAE4880DCDD560B, item, soundType);
		/// <summary>
		/// eSoundType
		/// Returns item Hash to be used with _IS_SCRIPTED_AUDIO_CUSTOM and _PLAY_SOUND_FROM_ITEM (p0)
		/// </summary>
		public static uint _INVENTORY_GET_INVENTORY_ITEM_SOUND(uint item, int soundType) => Function.Call<uint>(0x2E1CDC1FF3B8473E, item, soundType);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_INSPECTION_INFO(uint item, Any* info) => Function.Call<bool>(0x0C093C1787F18519, item, info);
		/// <summary>
		/// Returns CopyID
		/// </summary>
		public static int _INVENTORY_GET_INVENTORY_ITEM_WEAPON_COPY_ID(int inventoryId, Any* guid) => Function.Call<int>(0xAB5F12746A099A0E, inventoryId, guid);
		/// <summary>
		/// inventoryId: see _INVENTORY_GET_PED_INVENTORY_ID
		/// </summary>
		public static bool _INVENTORY_ARE_LOCAL_CHANGES_ALLOWED(int inventoryId) => Function.Call<bool>(0x0FBBFFC891A97C81, inventoryId);
		public static bool _INVENTORY_IS_GUID_VALID(Any* guid) => Function.Call<bool>(0xB881CA836CC4B6D4, guid);
		public static bool _INVENTORY_COMPARE_GUIDS(Any* guid1, Any* guid2) => Function.Call<bool>(0x4C543D5DFCD2DAFD, guid1, guid2);
		public static bool INVENTORY_GET_GUID_FROM_ITEMID(int inventoryId, Any* guid, uint p2, uint slotId, Any* outGuid) => Function.Call<bool>(0x886DFD3E185C8A89, inventoryId, guid, p2, slotId, outGuid);
		/// <summary>
		/// removeReason: REMOVE_REASON_DEFAULT (eRemoveItemReason)
		/// Example: INVENTORY::_0x5D6182F3BCE1333B(1, joaat("REMOVE_REASON_DEFAULT")); -> clears weapon wheel
		/// Only used in R* SP Scripts
		/// </summary>
		public static bool _0x5D6182F3BCE1333B(int inventoryId, uint removeReason) => Function.Call<bool>(0x5D6182F3BCE1333B, inventoryId, removeReason);
		public static bool INVENTORY_GET_INVENTORY_ITEM(int inventoryId, Any* inData, Any* outData, bool p3) => Function.Call<bool>(0x9700E8EFC4AB9089, inventoryId, inData, outData, p3);
		public static bool _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA(int inventoryId, Any* guid, Any* p2, int p3, int p4) => Function.Call<bool>(0x025A1B1FB03FBF61, inventoryId, guid, p2, p3, p4);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_CHILD(int inventoryId, Any* parentGuid, Any childIndex, Any* outInventoryItem) => Function.Call<bool>(0xCD9A485F2B383B44, inventoryId, parentGuid, childIndex, outInventoryItem);
		/// <summary>
		/// inventoryItemSlotHash: https://pastebin.com/P6fyr3vr
		/// </summary>
		public static bool _INVENTORY_ADD_ITEM_WITH_GUID(int inventoryId, Any* guid1, Any* guid2, uint item, uint inventoryItemSlot, int p5, uint addReason) => Function.Call<bool>(0xCB5D11F9508A928D, inventoryId, guid1, guid2, item, inventoryItemSlot, p5, addReason);
		/// <summary>
		/// Getter: _INVENTORY_GET_FULL_INVENTORY_ITEM_DATA
		/// </summary>
		public static bool _INVENTORY_UPDATE_INVENTORY_ITEM(int inventoryId, Any* guid1, Any* guid2, int p3) => Function.Call<bool>(0xD80A8854DB5CFBA5, inventoryId, guid1, guid2, p3);
		public static bool _INVENTORY_REMOVE_INVENTORY_ITEM_WITH_GUID(int inventoryId, Any* guid, int quantity, uint removeReason) => Function.Call<bool>(0x3E4E811480B3AE79, inventoryId, guid, quantity, removeReason);
		public static bool _INVENTORY_REMOVE_INVENTORY_ITEM_WITH_ITEMID(int inventoryId, uint item, int quantity, uint removeReason) => Function.Call<bool>(0xB4158C8C9A3B5DCE, inventoryId, item, quantity, removeReason);
		/// <summary>
		/// guid1: old parent GUID
		/// guid2: new parent GUID
		/// guid3: new item GUID (out param)
		/// </summary>
		public static bool _INVENTORY_MOVE_INVENTORY_ITEM(int inventoryId, Any* guid1, Any* guid2, uint slotId, int quantity, Any* outGuid) => Function.Call<bool>(0xDCCAA7C3BFD88862, inventoryId, guid1, guid2, slotId, quantity, outGuid);
		public static bool _INVENTORY_SWAP_INVENTORY_ITEM(int inventoryId, Any* guid1, Any* guid2) => Function.Call<bool>(0xF2753D691BCDA314, inventoryId, guid1, guid2);
		/// <summary>
		/// filterName (collections): "ALL", "ALL WEAPONS", "ALL HORSES", "ALL COACHES"
		/// slotId: -1591664384
		/// p3: outCollectionSize (?)
		/// Returns collectionId
		/// </summary>
		public static int _INVENTORY_CREATE_ITEM_COLLECTION(int inventoryId, string filterName, uint slotId, int* size) => Function.Call<int>(0x80D78BDC9D88EF07, inventoryId, filterName, slotId, size);
		public static int _INVENTORY_CREATE_ITEM_COLLECTION_WITH_FILTER(int inventoryId, Any* filter, int* numInCollection) => Function.Call<int>(0x640F890C3E5A3FFD, inventoryId, filter, numInCollection);
		/// <summary>
		/// collectionId is < outCollectionSize
		/// </summary>
		public static bool _INVENTORY_GET_ITEM_FROM_COLLECTION_INDEX(int collectionId, int itemIndex, Any* itemData) => Function.Call<bool>(0x82FA24C3D3FCD9B7, collectionId, itemIndex, itemData);
		/// <summary>
		/// Max num of collections is 5, so release your unused ones.
		/// </summary>
		public static bool _INVENTORY_RELEASE_ITEM_COLLECTION(int collectionId) => Function.Call<bool>(0x42A2F33A1942E865, collectionId);
		public static bool _INVENTORY_EQUIP_ITEM_WITH_GUID(int inventoryId, Any* guid, bool bEquipped) => Function.Call<bool>(0x734311E2852760D0, inventoryId, guid, bEquipped);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT_BY_REF(int inventoryId, Any* guid, uint slotId, Any* outGuid) => Function.Call<bool>(0x22E590F108289A9D, inventoryId, guid, slotId, outGuid);
		public static bool _INVENTORY_DOES_ITEM_OWN_EQUIPMENT(int inventoryId, Any* guid, uint item) => Function.Call<bool>(0x88B58B83A43A8CAB, inventoryId, guid, item);
		/// <summary>
		/// Params: p3 returns an int between 0 and 20 (?)
		/// Only used in R* SP Scripts
		/// </summary>
		public static bool _0xD08685BA892DBFAB(int inventoryId, Any* guid, int* p2, int* p3) => Function.Call<bool>(0xD08685BA892DBFAB, inventoryId, guid, p2, p3);
		/// <summary>
		/// Params: p0 is only 0 or 1
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0x0349404A22736740(bool p0, int inventoryId, Any* guid) => Function.Call(0x0349404A22736740, p0, inventoryId, guid);
		/// <summary>
		/// OWE_INVALID = -1,
		/// OWE_GOOD_IN_HOT
		/// OWE_GOOD_IN_NONE
		/// OWE_GOOD_IN_COLD
		/// OWE_GOOD_IN_ALL
		/// </summary>
		public static void _INVENTORY_SET_INVENTORY_ITEM_WEATHER_EFFECTIVENESS(int inventoryId, Any* guid, int weatherEffectiveness) => Function.Call(0x6D2F987736A42D4C, inventoryId, guid, weatherEffectiveness);
		/// <summary>
		/// Example: (1, WEAPON_REVOLVER_CATTLEMAN, 0) - disables cattleman revolver on weapon wheel
		/// </summary>
		public static void _INVENTORY_DISABLE_ITEM(int inventoryId, uint item, uint gtxReason) => Function.Call(0x766315A564594401, inventoryId, item, gtxReason);
		public static void _INVENTORY_ENABLE_ITEM(int inventoryId, uint item) => Function.Call(0x6A564540FAC12211, inventoryId, item);
		/// <summary>
		/// Alternative Name: _INVENTORY_IS_ITEM_DISABLED
		/// </summary>
		public static bool _INVENTORY_IS_INVENTORY_ITEM_EQUIPPED(int inventoryId, uint item, bool p2) => Function.Call<bool>(0x3D10D7179D7034AF, inventoryId, item, p2);
		public static bool _INVENTORY_SET_INVENTORY_ITEM_INSPECTION_ENABLED(int inventoryId, Any* p1, bool enabled) => Function.Call<bool>(0x227522FD59DDB7E8, inventoryId, p1, enabled);
		public static bool _INVENTORY_IS_ITEM_EXPIRED(Any* itemGUID) => Function.Call<bool>(0x0137C77A2EC64536, itemGUID);
		public static int _INVENTORY_GET_ITEM_EXPIRY_TIME(Any* itemGUID) => Function.Call<int>(0x4A606C17276E1BCC, itemGUID);
		public static int _INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_GUID(int inventoryId, Any* guid, bool p2) => Function.Call<int>(0xC97E0D2302382211, inventoryId, guid, p2);
		public static int _INVENTORY_GET_INVENTORY_ITEM_COUNT_WITH_ITEMID(int inventoryId, uint eInventoryItem, bool p2) => Function.Call<int>(0xE787F05DFC977BDE, inventoryId, eInventoryItem, p2);
		public static bool _0xB1DD74A1F5536622(int inventoryId, Any* itemGUID) => Function.Call<bool>(0xB1DD74A1F5536622, inventoryId, itemGUID);
		public static int _INVENTORY_GET_CHILDREN_COUNT(int inventoryId, Any* parentGuid) => Function.Call<int>(0xE843D21A8E2498AA, inventoryId, parentGuid);
		public static int INVENTORY_GET_CHILDREN_IN_SLOT_COUNT(int inventoryId, Any* guid, uint slotId) => Function.Call<int>(0x033EE4B89F3AC545, inventoryId, guid, slotId);
		public static int _INVENTORY_GET_INVENTORY_ITEM_EQUIPPED_IN_SLOT(int inventoryId, Any* guid, uint slotId, int p3, Any* p4) => Function.Call<int>(0xBE012571B25F5ACA, inventoryId, guid, slotId, p3, p4);
		public static bool _INVENTORY_FITS_SLOT_ID(uint item, uint slotId) => Function.Call<bool>(0x780C5B9AE2819807, item, slotId);
		/// <summary>
		/// p1: WARDROBE, KIT_CAMP, CHARACTER, KIT_MOONSHINER_PROPERTY
		/// Returns slot hash
		/// </summary>
		public static uint _GET_DEFAULT_ITEM_SLOT_INFO(uint item, uint p1) => Function.Call<uint>(0x6452B1D357D81742, item, p1);
		public static bool _INVENTORY_GET_INVENTORY_ITEM_FIT_SLOT(uint p0, Any* p1, int p2) => Function.Call<bool>(0xB991FE166FAF84FD, p0, p1, p2);
		/// <summary>
		/// p1 (out) and p2 (in) are both script arrays?
		/// item: can be a component item, see SHOP_CATALOG_BUILD_LIST_OF_WEAPON_COMPONENTS
		/// </summary>
		public static bool _0x9AC53CB6907B4428(uint item, Any* p1, Any* p2) => Function.Call<bool>(0x9AC53CB6907B4428, item, p1, p2);
		/// <summary>
		/// p0 is the return value of DATABINDING::_DATABINDING_ADD_DATA_CONTAINER_FROM_PATH
		/// p2, p3: 0
		/// Returns databindingEntryId
		/// </summary>
		public static uint _0x9D21B185ABC2DBC4(Any data, string effects, bool p2, bool p3) => Function.Call<uint>(0x9D21B185ABC2DBC4, data, effects, p2, p3);
		/// <summary>
		/// p1, p2: 0
		/// </summary>
		public static void _0x75CFAC49301E134F(uint databindingEntryId, bool p1, bool p2) => Function.Call(0x75CFAC49301E134F, databindingEntryId, p1, p2);
		/// <summary>
		/// p2: 0
		/// p3: -1
		/// Returns databindingEntryId to be used with 0x75CFAC49301E134E (p0)
		/// </summary>
		public static uint _0x9D21B185ABC2DBC5(Any data, string stats, int p2, int p3) => Function.Call<uint>(0x9D21B185ABC2DBC5, data, stats, p2, p3);
		/// <summary>
		/// p0: value returned by 0x9D21B185ABC2DBC5
		/// </summary>
		public static void _0x75CFAC49301E134E(Any data, bool p1, int ped) => Function.Call(0x75CFAC49301E134E, data, p1, ped);
		/// <summary>
		/// Returns databindingEntryId to be used with 0x951847CEF3D829FF (p0)
		/// </summary>
		public static uint _0x46DB71883EE9D5AF(Any data, string stats, Any* guid, int ped) => Function.Call<uint>(0x46DB71883EE9D5AF, data, stats, guid, ped);
		/// <summary>
		/// p0: value returned by 0x46DB71883EE9D5AF
		/// </summary>
		public static void _0x951847CEF3D829FF(Any p0, Any* outGuid, int ped) => Function.Call(0x951847CEF3D829FF, p0, outGuid, ped);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static bool _0x6862E4D93F64CF01(int inventoryId, Any* guid, uint p2, Any* p3) => Function.Call<bool>(0x6862E4D93F64CF01, inventoryId, guid, p2, p3);
		/// <summary>
		/// This native has no functionality.
		/// </summary>
		public static void _INVENTORY_ENABLE_MISSION_INVENTORY(bool toggle) => Function.Call(0x597F571DDEE3FFAC, toggle);
		public static void INVENTORY_DISABLE_MISSION_INVENTORY_PICKUPS() => Function.Call(0xE1F389F03DC83673);
		public static void _INVENTORY_USE_MISSION_INVENTORY(bool enable, bool mirrorTransactions) => Function.Call(0xA6AA9F56BC6CFF58, enable, mirrorTransactions);
		public static void INVENTORY_COPY_MP_INVENTORY_TO_MISSION_INVENTORY(bool p0, bool p1, bool bCopySatchelItems, bool bCopyEmotes, bool bCopyHorse, bool p5) => Function.Call(0x644CCB76A76CFBD6, p0, p1, bCopySatchelItems, bCopyEmotes, bCopyHorse, p5);
		public static void _INVENTORY_COPY_ITEM_TO_MISSION_INVENTORY(Any* guid, bool p1) => Function.Call(0x3112ADB9D5F3426B, guid, p1);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0xE36D4A38D28D9CFB(bool p0) => Function.Call(0xE36D4A38D28D9CFB, p0);
		public static bool _INVENTORY_USE_SP_BACKUP() => Function.Call<bool>(0x7C7E4AB748EA3B07);
		public static bool _INVENTORY_IS_PLAYER_INVENTORY_MIRRORING_TRANSACTIONS() => Function.Call<bool>(0xFC7563F482781A3D);
		public static void _INVENTORY_COPY_ITEM_TO_INVENTORY(int inventoryId, int inventoryIdCloned, Any* p2, Any p3) => Function.Call(0xC04F47D488EF9EBA, inventoryId, inventoryIdCloned, p2, p3);
		public static void _0x9E58207B194488AC(int ped, int p1) => Function.Call(0x9E58207B194488AC, ped, p1);
		public static void _INVENTORY_HANDLE_ITEM_PROMPT_INFO_REQUEST(Any* p0) => Function.Call(0xFD41D1D4350F6413, p0);
		/// <summary>
		/// Used in function SET_SHOP_BEING_ROBBED and many other shop related scripts and functions.
		/// INVENTORY_A*
		/// </summary>
		public static void _0x9B4E793B1CB6550A() => Function.Call(0x9B4E793B1CB6550A);
		public static void _INVENTORY_SET_CARRIABLE_CARRY_ACTION_PROMPT_OVERRIDE(Any* data) => Function.Call(0xF666EF30F4F0AC4E, data);
		public static void _INVENTORY_ENABLE_WEAPONS(int inventoryId) => Function.Call(0xD5D72F1624F3BA7C, inventoryId);
		/// <summary>
		/// Params: p1 = 0
		/// </summary>
		public static void _INVENTORY_DISABLE_WEAPONS(int inventoryId, Any p1) => Function.Call(0xE3A46370F70F3607, inventoryId, p1);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0xE1F45A67A9F0DCBC(int inventoryId) => Function.Call(0xE1F45A67A9F0DCBC, inventoryId);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0x6968CE7AC32F6788(int inventoryId) => Function.Call(0x6968CE7AC32F6788, inventoryId);
		/// <summary>
		/// Returns collectionId
		/// </summary>
		public static int _INVENTORY_CREATE_ITEM_COLLECTION_2(int* collectionSize) => Function.Call<int>(0x97A3646645727F42, collectionSize);
		/// <summary>
		/// p1: 32
		/// Returns collectionId
		/// </summary>
		public static int _INVENTORY_CREATE_SORTED_COLLECTION(int inventoryId, int p1, int* size) => Function.Call<int>(0xBB7F968675B34B0C, inventoryId, p1, size);
	}

	public unsafe static class ITEMDATABASE
	{
		public static bool _ITEMDATABASE_CAN_EQUIP_ITEM_ON_CATEGORY(Any p0, Any p1, Any p2) => Function.Call<bool>(0x856FF92C57742AE5, p0, p1, p2);
		public static int _ITEMDATABASE_GET_FITS_SLOT_COUNT(Any p0) => Function.Call<int>(0x2970D1D6BFCF9B46, p0);
		public static bool _ITEMDATABASE_GET_FITS_SLOT_INFO(Any p0, Any p1, Any p2) => Function.Call<bool>(0x77210C146CED5261, p0, p1, p2);
		public static int _ITEMDATABASE_GET_HAS_SLOT_COUNT(Any p0) => Function.Call<int>(0x44915068579D7710, p0);
		public static bool _ITEMDATABASE_GET_HAS_SLOT_INFO(Any p0, Any p1, Any p2) => Function.Call<bool>(0x8A9BD0DB7E8376CF, p0, p1, p2);
		public static bool ITEMDATABASE_FILLOUT_ITEM_BY_NAME(Any p0, Any p1) => Function.Call<bool>(0x2A610BEE7D341CC4, p0, p1);
		/// <summary>
		/// p0 can be a weapon hash, component item
		/// p1 is a struct containing WEAPON_MOD and WEAPON_DECORATION
		/// </summary>
		public static bool ITEMDATABASE_FILLOUT_ITEM_INFO(uint p0, Any* p1) => Function.Call<bool>(0xFE90ABBCBFDC13B2, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_ACQUIRE_COST(Any p0, Any p1, Any p2) => Function.Call<bool>(0x74F7928816E4E181, p0, p1, p2);
		public static bool _ITEMDATABASE_FILLOUT_SELL_PRICE(Any p0, Any p1, Any p2) => Function.Call<bool>(0x7A62A2EEDE1C3766, p0, p1, p2);
		public static bool _ITEMDATABASE_FILLOUT_SATCHEL_DATA(Any p0, Any p1) => Function.Call<bool>(0x4776EFD78F75C23F, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_UI_DATA(Any p0, Any p1) => Function.Call<bool>(0xB86F7CC2DC67AC60, p0, p1);
		/// <summary>
		/// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		/// </summary>
		public static bool _0x74C3B1093728D263(Any p0, Any p1) => Function.Call<bool>(0x74C3B1093728D263, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_ITEM_EFFECT_IDS(Any p0, Any p1) => Function.Call<bool>(0x9379BE60DC55BBE6, p0, p1);
		public static bool ITEMDATABASE_FILLOUT_ITEM_EFFECT_ID_INFO(Any p0, Any p1) => Function.Call<bool>(0xCF2D360D27FD1ABF, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_TAG_DATA(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0x5A11D6EEA17165B0, p0, p1, p2, p3);
		public static int _ITEMDATABASE_GET_ACQUIRE_COSTS_COUNT(Any p0) => Function.Call<int>(0x01FDDAD392D04144, p0);
		public static bool _ITEMDATABASE_GET_ACQUIRE_COST(Any p0, Any p1, Any p2) => Function.Call<bool>(0x6772A83C67A25775, p0, p1, p2);
		/// <summary>
		/// Returns fillOutIndex (?)
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static int _0xDEE7B3C76ED664BE(uint p0, uint costShop) => Function.Call<int>(0xDEE7B3C76ED664BE, p0, costShop);
		public static bool _ITEMDATABASE_FILLOUT_ITEM(uint p0, uint costShop, int fillOutIndex, Any p3) => Function.Call<bool>(0xAD73B614DF26CF8A, p0, costShop, fillOutIndex, p3);
		/// <summary>
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static int _0x12DF9C58201DD19A(Any p0) => Function.Call<int>(0x12DF9C58201DD19A, p0);
		/// <summary>
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static bool _0x1FC25AEB5F76B38D(Any p0, Any p1, Any p2) => Function.Call<bool>(0x1FC25AEB5F76B38D, p0, p1, p2);
		/// <summary>
		/// Returns itemCount (?)
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static int _0xF540239F9937033B(Any p0, Any p1) => Function.Call<int>(0xF540239F9937033B, p0, p1);
		/// <summary>
		/// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		/// </summary>
		public static bool _0xF27F01BBF5ACD3F3(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xF27F01BBF5ACD3F3, p0, p1, p2, p3);
		/// <summary>
		/// Returns collectionId to be used with 0x8750F69A720C2E41 (p0) and 0xCBB7B6EDFA933ADE (p0)
		/// </summary>
		public static int _ITEMDATABASE_CREATE_ITEM_COLLECTION(Any* p0, int* size, int comparisonType) => Function.Call<int>(0x71EFA7999AE79408, p0, size, comparisonType);
		/// <summary>
		/// Returns (collection?) size/index (?)
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static int _0xD389A2549C4EFB30(int collectionId) => Function.Call<int>(0xD389A2549C4EFB30, collectionId);
		/// <summary>
		/// Params: p2 can be a component item hash
		/// </summary>
		public static bool _ITEMDATABASE_GET_COMPONENT_ITEM(int collectionId, int index, uint* p2) => Function.Call<bool>(0x8750F69A720C2E41, collectionId, index, p2);
		public static bool _ITEMDATABASE_RELEASE_ITEM_COLLECTION(int collectionId) => Function.Call<bool>(0xCBB7B6EDFA933ADE, collectionId);
		public static bool _ITEMDATABASE_IS_INTRINSIC_ITEM(Any p0) => Function.Call<bool>(0x337F88E3A063995E, p0);
		public static bool _ITEMDATABASE_IS_OVERPOWERED_ITEM(Any p0) => Function.Call<bool>(0x337F88E3A063995F, p0);
		public static bool _ITEMDATABASE_IS_KEY_VALID(Any p0, Any p1) => Function.Call<bool>(0x6D5D51B188333FD1, p0, p1);
		public static bool _0x537A0555F62CA01A(uint p0, Any p1) => Function.Call<bool>(0x537A0555F62CA01A, p0, p1);
		public static int _ITEMDATABASE_GET_BUNDLE_ID(Any p0) => Function.Call<int>(0x891A45960B6B768A, p0);
		public static int _ITEMDATABASE_GET_BUNDLE_ITEM_COUNT(Any p0, Any p1) => Function.Call<int>(0x3332695B01015DF9, p0, p1);
		public static bool _ITEMDATABASE_GET_BUNDLE_ITEM_INFO(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0x5D48A77E4B668B57, p0, p1, p2, p3);
		public static bool _ITEMDATABASE_IS_BUNDLE_VALID(Any p0, Any p1) => Function.Call<bool>(0x4308812A6E9CA62E, p0, p1);
		public static int _0x799FCD53358ED5FA(Any p0, Any p1) => Function.Call<int>(0x799FCD53358ED5FA, p0, p1);
		public static bool _0xC4146375D8A0B374(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xC4146375D8A0B374, p0, p1, p2, p3);
		public static bool _0xA97EE5E4589FCF5A(Any p0, Any p1) => Function.Call<bool>(0xA97EE5E4589FCF5A, p0, p1);
		public static int _0x7A35A72A692BE9DB(Any p0) => Function.Call<int>(0x7A35A72A692BE9DB, p0);
		public static bool _0x3A0B667ABFF87F6E(Any p0, Any p1, Any p2) => Function.Call<bool>(0x3A0B667ABFF87F6E, p0, p1, p2);
		public static int _0x388088BFF3681189(Any p0, Any p1) => Function.Call<int>(0x388088BFF3681189, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_BUNDLE(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xB542632693D53408, p0, p1, p2, p3);
		public static bool _ITEMDATABASE_IS_SHOP_KEY_VALID(Any p0) => Function.Call<bool>(0x00B9507D8E1D8716, p0);
		public static int _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEMS_COUNT(Any p0) => Function.Call<int>(0xC568B1A0F17C7025, p0);
		public static bool _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO(Any p0, Any p1, Any p2) => Function.Call<bool>(0x4A79B41B4EB91F4E, p0, p1, p2);
		/// <summary>
		/// Same Native Function as 0x17721003A66C72BF
		/// </summary>
		public static bool _ITEMDATABASE_GET_SHOP_INVENTORIES_ITEM_INFO_BY_KEY(Any p0, Any p1, Any p2) => Function.Call<bool>(0xCFB06801F5099B25, p0, p1, p2);
		public static bool _ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_GROUP_INFO(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0x76C752D788A76813, p0, p1, p2, p3);
		public static bool _ITEMDATABASE_GET_SHOP_INVENTORIES_REQUIREMENT_INFO(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<bool>(0xE0EA5C031AE5539F, p0, p1, p2, p3, p4);
		public static bool _0x17721003A66C72BF(Any p0, Any p1, Any p2) => Function.Call<bool>(0x17721003A66C72BF, p0, p1, p2);
		public static bool _ITEMDATABASE_IS_SHOP_LAYOUT_KEY_VALID(Any p0) => Function.Call<bool>(0x3AFE5182C45A84F6, p0);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_INFO(Any p0, Any p1) => Function.Call<bool>(0x66A6D76B6BB999B4, p0, p1);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_ROOT_MENU_INFO(Any p0, Any p1, Any p2) => Function.Call<bool>(0x86FCB565CCA0CFA7, p0, p1, p2);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_ID(Any p0, Any p1, Any p2) => Function.Call<bool>(0xD66114469978B55B, p0, p1, p2);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_INFO_BY_INDEX(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xF04247092F193B75, p0, p1, p2, p3);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_MENU_PAGE_KEY(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0x9A60570657A7B635, p0, p1, p2, p3);
		public static bool _0xDBEADA0DF5F9AB9F(Any p0, Any p1, Any p2) => Function.Call<bool>(0xDBEADA0DF5F9AB9F, p0, p1, p2);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_INFO_BY_KEY(Any p0, Any p1, Any p2) => Function.Call<bool>(0xB347C100DF0C9B7F, p0, p1, p2);
		public static bool _ITEMDATABASE_GET_SHOP_LAYOUT_PAGE_ITEM_KEY(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<bool>(0xF32BEF578B3DBAE8, p0, p1, p2, p3, p4, p5);
		public static bool ITEMDATABASE_IS_BUYABLE_AWARD_VALID(Any p0) => Function.Call<bool>(0x4CE753203FA42214, p0);
		public static bool _ITEMDATABASE_FILLOUT_BUY_AWARD_ACQUIRE_COSTS(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xB52E20F6767A09A2, p0, p1, p2, p3);
		/// <summary>
		/// _ITEMDATABASE_FILLOUT_(B)* - ITEMDATABASE_FILLOUT_ITEM*
		/// </summary>
		public static bool _0xF8D09EF8CE61D7BF(Any p0, Any p1) => Function.Call<bool>(0xF8D09EF8CE61D7BF, p0, p1);
		public static bool _ITEMDATABASE_GET_ITEM_PRICE_MODIFIERS(Any p0, Any p1) => Function.Call<bool>(0x4EB37AAB79AB0C48, p0, p1);
		public static bool _ITEMDATABASE_FILLOUT_PRICE_MODIFIER_BY_KEY(Any p0, Any p1) => Function.Call<bool>(0x40C5D95818823C94, p0, p1);
		public static int _ITEMDATABASE_GET_NUMBER_OF_MODIFIED_PRICES(Any p0) => Function.Call<int>(0x5AAAF40E9B224F5E, p0);
		/// <summary>
		/// Returns an alternative cost hash to COST_SHOP_DEFAULT
		/// </summary>
		public static uint _ITEMDATABASE_GET_MODIFIED_PRICE(Any p0, Any p1) => Function.Call<uint>(0xCB92EC9C004732B4, p0, p1);
		public static int _ITEMDATABASE_GET_NUMBER_OF_MODIFIERS(Any p0) => Function.Call<int>(0x1289D8315235856D, p0);
		public static bool _ITEMDATABASE_FILLOUT_MODIFIER(Any p0, Any p1, Any p2) => Function.Call<bool>(0x60614A0AB580A2B5, p0, p1, p2);
		/// <summary>
		/// _ITEMDATABASE_GET_* - _ITEMDATABASE_IS_*
		/// </summary>
		public static bool _ITEMDATABASE_GET_PRIORITY_ACCESS_AWARD(uint award) => Function.Call<bool>(0xEF254F1A4C08B7E6, award);
		/// <summary>
		/// Returns iAwardItemCount
		/// </summary>
		public static int _ITEMDATABASE_GET_AWARD_ITEM_COUNT(uint award) => Function.Call<int>(0x3FAA928A79591761, award);
		/// <summary>
		/// _ITEMDATABASE_GET_(A)* - _ITEMDATABASE_GET_(B)*
		/// </summary>
		public static int _0x48229CE0C7938237(uint award) => Function.Call<int>(0x48229CE0C7938237, award);
		public static bool _ITEMDATABASE_FILLOUT_AWARD_ITEM_INFO(uint award, int index, uint* currency) => Function.Call<bool>(0x121D2005DD64496B, award, index, currency);
		/// <summary>
		/// _ITEMDATABASE_FILLOUT_(A)* - _ITEMDATABASE_FILLOUT_(B)*
		/// </summary>
		public static bool _0x8D029948CA29409B(uint award, Any p1, Any p2) => Function.Call<bool>(0x8D029948CA29409B, award, p1, p2);
		public static bool _0xE81D0378A384E755(Any p0, Any p1) => Function.Call<bool>(0xE81D0378A384E755, p0, p1);
		public static bool _0xD076DB9B96FAADF1(Any p0, Any p1) => Function.Call<bool>(0xD076DB9B96FAADF1, p0, p1);
		public static bool _ITEMDATABASE_DOES_ITEM_HAVE_TAG(uint item, uint tag, uint tagType) => Function.Call<bool>(0xFF5FB5605AD56856, item, tag, tagType);
		/// <summary>
		/// Params: tag = TAG_ITEM_PROPERTY (tagType(?))
		/// </summary>
		public static bool _ITEMDATABASE_DOES_BUNDLE_HAVE_TAG(uint bundle, uint tag, uint tagType) => Function.Call<bool>(0x99C6EA66DFE73757, bundle, tag, tagType);
		public static uint _ITEMDATABASE_GET_ITEM_TAG_TYPE(uint item, uint tag) => Function.Call<uint>(0x6111B8F9413F413A, item, tag);
		public static int _0x8870895BA5ED9385(Any p0, uint tagType, Any p2) => Function.Call<int>(0x8870895BA5ED9385, p0, tagType, p2);
		/// <summary>
		/// Returns docData.iNumTotalLabelTypes
		/// </summary>
		public static int _ITEMDATABASE_LOCALIZATION_GET_NUM_LABEL_TYPES(Any p0) => Function.Call<int>(0xCEC6A41E8910486A, p0);
		/// <summary>
		/// Returns iNumValuesForType
		/// </summary>
		public static int _ITEMDATABASE_LOCALIZATION_GET_NUM_VALUES(Any p0, Any p1) => Function.Call<int>(0x49885D82A13EEAEA, p0, p1);
		/// <summary>
		/// Returns LabelType
		/// </summary>
		public static Any _ITEMDATABASE_LOCALIZATION_GET_TYPE(Any p0, Any p1) => Function.Call<Any>(0xCABF5D41D0073D4A, p0, p1);
		public static int _ITEMDATABASE_LOCALIZATION_GET_VALUE(Any p0, uint label, Any p2) => Function.Call<int>(0x9AE5610FDCED6EA7, p0, label, p2);
		public static int _ITEMDATABASE_GET_ITEM_PATHSET(int item, int p1) => Function.Call<int>(0xF4452CE83118C738, item, p1);
		/// <summary>
		/// Returns Pathset Hash
		/// </summary>
		public static uint _0xAA29A5F13B2C20B2(Any p0, uint p1) => Function.Call<uint>(0xAA29A5F13B2C20B2, p0, p1);
	}

	public unsafe static class ITEMSET
	{
		public static int CREATE_ITEMSET(bool p0) => Function.Call<int>(0xA1AF16083320065A, p0);
		public static void DESTROY_ITEMSET(int itemset) => Function.Call(0x712BC69F10549B92, itemset);
		public static bool IS_ITEMSET_VALID(int itemset) => Function.Call<bool>(0xD30765D153EF5C76, itemset);
		public static bool ADD_TO_ITEMSET(int entity, int itemset) => Function.Call<bool>(0xABE74510883C7950, entity, itemset);
		public static void REMOVE_FROM_ITEMSET(int entity, int itemset) => Function.Call(0xC5BAA432B429DC24, entity, itemset);
		public static int GET_ITEMSET_SIZE(int itemset) => Function.Call<int>(0x55F2E375AC6018A9, itemset);
		public static int GET_INDEXED_ITEM_IN_ITEMSET(int index, int itemset) => Function.Call<int>(0x275A2E2C0FAB7612, index, itemset);
		public static Any GET_INDEXED_SCENARIO_POINT_INDEX_IN_ITEMSET(int index, int itemset) => Function.Call<Any>(0x9FC3CDB5CE815901, index, itemset);
		public static bool IS_IN_ITEMSET(int entity, int itemset) => Function.Call<bool>(0xD1503C2EE2FE688C, entity, itemset);
		public static void CLEAN_ITEMSET(int itemset) => Function.Call(0x85F3A86CA9021FB0, itemset);
		public static void _CLEAR_ITEMSET(int itemset) => Function.Call(0x20A4BF0E09BEE146, itemset);
	}

	public unsafe static class LAW
	{
		/// <summary>
		/// crimeType:
		/// enum eCrimeType : Hash
		/// {
		/// 	CRIME_ACCOMPLICE = 0xAF074F6D,
		/// 	CRIME_ARSON = 0x68134DC7,
		/// 	CRIME_ASSAULT = 0x0BADC882,
		/// 	CRIME_ASSAULT_ANIMAL = 0x18DA55EE,
		/// 	CRIME_ASSAULT_CORPSE = 0x4E5F23F2,
		/// 	CRIME_ASSAULT_HORSE = 0xC4736181,
		/// 	CRIME_ASSAULT_LAW = 0xD7466D7C,
		/// 	CRIME_ASSAULT_LIVESTOCK = 0xCCE1CCBD,
		/// 	CRIME_BANK_ROBBERY = 0x6A1ADE3D,
		/// 	CRIME_BURGLARY = 0xA54C77E0,
		/// 	CRIME_CHEATING = 0xA2FF1145,
		/// 	CRIME_DISTURBANCE = 0x5011F613,
		/// 	CRIME_EXPLOSION = 0x3EBA7A37,
		/// 	CRIME_EXPLOSION_POISON = 0x91D0A0E1,
		/// 	CRIME_GRAVE_ROBBERY = 0x971EA5AF,
		/// 	CRIME_HASSLE = 0x58488776,
		/// 	CRIME_HIT_AND_RUN = 0xFF0A3CC4,
		/// 	CRIME_HIT_AND_RUN_LAW = 0x064814AF,
		/// 	CRIME_INTIMIDATION = 0x8319FBAB,
		/// 	CRIME_JACK_HORSE = 0x82F7E4A2,
		/// 	CRIME_JACK_VEHICLE = 0x6B981F4C,
		/// 	CRIME_JAIL_BREAK = 0x12C1D589,
		/// 	CRIME_KIDNAPPING = 0x98F908DB,
		/// 	CRIME_KIDNAPPING_LAW = 0xFD72A7EA,
		/// 	CRIME_LASSO_ASSAULT = 0x56EE5D5A,
		/// 	CRIME_LAW_IS_THREATENED = 0x1CB91DF0,
		/// 	CRIME_LOITERING = 0x6629D2F4,
		/// 	CRIME_LOOTING = 0x55AD2BEB,
		/// 	CRIME_MURDER = 0xE28ECE7E,
		/// 	CRIME_MURDER_ANIMAL = 0x48F59A66,
		/// 	CRIME_MURDER_HORSE = 0xC7261D79,
		/// 	CRIME_MURDER_LAW = 0x7797FCE7,
		/// 	CRIME_MURDER_LIVESTOCK = 0x9569C546,
		/// 	CRIME_MURDER_PLAYER = 0xF5ABD6C9,
		/// 	CRIME_MURDER_PLAYER_HORSE = 0xD55C6A79,
		/// 	CRIME_PROPERTY_DESTRUCTION = 0x533B003D,
		/// 	CRIME_RESIST_ARREST = 0xDF577BA5,
		/// 	CRIME_ROBBERY = 0xA3BEDE4C,
		/// 	CRIME_SELF_DEFENCE = 0xBD6A0AA3,
		/// 	CRIME_STAGECOACH_ROBBERY = 0xFC738E61,
		/// 	CRIME_STOLEN_GOODS = 0x9A949C79,
		/// 	CRIME_THEFT = 0x72ADE410,
		/// 	CRIME_THEFT_HORSE = 0xBE3A5838,
		/// 	CRIME_THEFT_LIVESTOCK = 0x85BA08FD,
		/// 	CRIME_THEFT_VEHICLE = 0x43A9ECA1,
		/// 	CRIME_THREATEN = 0x941C985A,
		/// 	CRIME_THREATEN_LAW = 0x7F908566,
		/// 	CRIME_TRAIN_ROBBERY = 0x647D2A5A,
		/// 	CRIME_TRAMPLE = 0x45DB39D8,
		/// 	CRIME_TRAMPLE_LAW = 0xF00F266B,
		/// 	CRIME_TRAMPLE_PLAYER = 0x75970C15,
		/// 	CRIME_TRESPASSING = 0xAEDE8E35,
		/// 	CRIME_UNARMED_ASSAULT = 0x5098CC5A,
		/// 	CRIME_VANDALISM = 0x80FDC759,
		/// 	CRIME_VANDALISM_VEHICLE = 0xF9E7ECE4,
		/// 	CRIME_VEHICLE_DESTRUCTION = 0x54A85DDC,
		/// 	CRIME_WANTED_LEVEL_UP_DEBUG_HIGH = 0x99C52FF5,
		/// 	CRIME_WANTED_LEVEL_UP_DEBUG_LOW = 0xD891890F
		/// };
		/// </summary>
		public static void _REPORT_CRIME(int player, uint crimeType, int bounty, int entity, bool isKnownSuspect) => Function.Call(0xF60386770878A98F, player, crimeType, bounty, entity, isKnownSuspect);
		/// <summary>
		/// crimeType: see _REPORT_CRIME
		/// </summary>
		public static void SUPPRESS_CRIME_THIS_FRAME(int player, uint crimeType, int p2, int p3, int p4) => Function.Call(0x785177E4D57D7389, player, crimeType, p2, p3, p4);
		/// <summary>
		/// Returns amount of suppressed crimes to be used later in the function MPINTRO_CRIME_MONITOR_MAINTAIN
		/// </summary>
		public static int NUM_CRIMES_SUPPRESSED(int player, uint crimeType) => Function.Call<int>(0xC08E804C91F47C80, player, crimeType);
		public static Any _0xFFEBE5AA96BC2E4E(int ped, uint crimeType, bool p2) => Function.Call<Any>(0xFFEBE5AA96BC2E4E, ped, crimeType, p2);
		/// <summary>
		/// Params: p0 either 0, 1 or -1 in R* Scripts
		/// Set to 0 called together with _SUPPRESS_CRIME
		/// </summary>
		public static void _0x15ABD5004CAD2D99(int p0) => Function.Call(0x15ABD5004CAD2D99, p0);
		public static void _0xF611DE44AEB36A1D(uint crimeType, bool p1) => Function.Call(0xF611DE44AEB36A1D, crimeType, p1);
		public static bool _0x3D2674828A4E6B3C() => Function.Call<bool>(0x3D2674828A4E6B3C);
		public static void _0xC5EB2755FA25F1E9(bool p0) => Function.Call(0xC5EB2755FA25F1E9, p0);
		public static int GET_BOUNTY(int player) => Function.Call<int>(0x54310AAB97B92816, player);
		public static void ADD_BOUNTY(int player, int itemValueAmount) => Function.Call(0x0E3BDEED21BEB945, player, itemValueAmount);
		public static void SET_BOUNTY(int player, int amount) => Function.Call(0x093A9D1F72DF0D19, player, amount);
		public static void CLEAR_BOUNTY(int player) => Function.Call(0xC76F252371150D9A, player);
		public static int GET_WANTED_SCORE(int player) => Function.Call<int>(0xDD5FD601481F648B, player);
		public static void SET_WANTED_SCORE(int player, int intensity) => Function.Call(0xA80FF73F772ACF6A, player, intensity);
		public static void CLEAR_WANTED_SCORE(int player) => Function.Call(0x062B4A4A3396351D, player);
		public static void _0x331D349E0380B097(Any p0) => Function.Call(0x331D349E0380B097, p0);
		/// <summary>
		/// Only used in R* Script fm_mission_controller
		/// _CLEAR_WANTED_*
		/// </summary>
		public static void _0x292AD61A33A7A485() => Function.Call(0x292AD61A33A7A485);
		/// <summary>
		/// Used in SP only, called together with 0x55F37F5F3F2475E1 & CLEAR_WANTED_SCORE
		/// _REPORT_*
		/// </summary>
		public static void _0x07E8B8B20570271C(int player) => Function.Call(0x07E8B8B20570271C, player);
		/// <summary>
		/// Used in SP only
		/// _REPORT_*
		/// </summary>
		public static void _0x22741652985C84D0(int player, uint lawRegionHash) => Function.Call(0x22741652985C84D0, player, lawRegionHash);
		public static void _REPORT_PLAYER_LAW_DISPATCH_RESPONSE_OVERRIDE(int player, uint dispatchResponseHash) => Function.Call(0x9C4352134B2835FB, player, dispatchResponseHash);
		/// <summary>
		/// Only used in shoprobberies R* Scripts
		/// </summary>
		public static bool _0x9EF07CFBB19A9733() => Function.Call<bool>(0x9EF07CFBB19A9733);
		public static void _SET_LAW_DISABLED(bool toggle) => Function.Call(0x8DE82BC774F3B862, toggle);
		public static void _FORCE_LAW_ON_LOCAL_PLAYER_IMMEDIATELY() => Function.Call(0x956510F8C36B5C64);
		/// <summary>
		/// enum eLawRegion : Hash
		/// {
		/// 	LAW_DISPATCH_REGION_NONE = 0,
		/// 	LAW_REGION_AGUASDULCES = 0x2F573EBE,
		/// 	LAW_REGION_ANNESBURG = 0x68CAFD50,
		/// 	LAW_REGION_ARMADILLO = 0xF0B90756,
		/// 	LAW_REGION_BAYOU_NWA = 0x80966B1C,
		/// 	LAW_REGION_BEECHERS_HOPE = 0xE2544977,
		/// 	LAW_REGION_BIG_VALLEY = 0x3DF1559A,
		/// 	LAW_REGION_BLACKWATER = 0x60D4886D,
		/// 	LAW_REGION_BLACKWATER_MAINGAME = 0x66553576,
		/// 	LAW_REGION_BLUEGILL_MARSH = 0x1D6AED8E,
		/// 	LAW_REGION_BRAITHWAITE_MANOR = 0x3D71E7FF,
		/// 	LAW_REGION_BUTCHER_CREEK = 0x2B3E1822,
		/// 	LAW_REGION_CALIGA_HALL = 0xF3FE5080,
		/// 	LAW_REGION_CORNWALL = 0xCC4672FA,
		/// 	LAW_REGION_CUMBERLAND_FOREST = 0x81A78306,
		/// 	LAW_REGION_EMERALD_RANCH = 0x5C069DF3,
		/// 	LAW_REGION_FORT_WALLACE = 0x0AF25192,
		/// 	LAW_REGION_GREAT_PLAINS = 0xB20573FA,
		/// 	LAW_REGION_GREAT_PLAINS_MAINGAME = 0x9862FF7C,
		/// 	LAW_REGION_GRIZZLIES = 0xBB936031,
		/// 	LAW_REGION_GUAMA = 0x200DFF42,
		/// 	LAW_REGION_HEARTLANDS = 0xAD14DA65,
		/// 	LAW_REGION_LAGRAS = 0xC64808D3,
		/// 	LAW_REGION_MACFARLANES_RANCH = 0x396A7D5F,
		/// 	LAW_REGION_MANICATO = 0x039DB6BF,
		/// 	LAW_REGION_MANZANITA_POST = 0x895E580E,
		/// 	LAW_REGION_MANZANITA_POST_MAINGAME = 0x9BDD6A38,
		/// 	LAW_REGION_OCCUPIED_CARAVAN_CAMP = 0x7EBABB01,
		/// 	LAW_REGION_OLD_MAP_WILDERNESS = 0xCBB45950,
		/// 	LAW_REGION_OLD_MAP_WILDERNESS_MAINGAME = 0x9F839BE7,
		/// 	LAW_REGION_OUTLAW3 = 0x97A02FC1,
		/// 	LAW_REGION_PRONGHORN_RANCH = 0x398E4BFC,
		/// 	LAW_REGION_RHODES = 0x89222928,
		/// 	LAW_REGION_RHODES_LOCKDOWN = 0xB1181671,
		/// 	LAW_REGION_RIDGEWOOD_FARM = 0x635C3028,
		/// 	LAW_REGION_ROANOKE_RIDGE = 0x46386A9A,
		/// 	LAW_REGION_SAINT_DENIS = 0x5CF7C268,
		/// 	LAW_REGION_SAINT_DENIS_RURAL = 0x4FD5331A,
		/// 	LAW_REGION_SCARLETT_MEADOWS = 0x5FDD9717,
		/// 	LAW_REGION_SISIKA = 0x2B6BBA52,
		/// 	LAW_REGION_STRAWBERRY = 0xDD932620,
		/// 	LAW_REGION_TALL_TREES = 0xD939B758,
		/// 	LAW_REGION_TALL_TREES_MAINGAME = 0x084B17DF,
		/// 	LAW_REGION_THIEVES_LANDING = 0x3D0C2EB6,
		/// 	LAW_REGION_THIEVES_LANDING_MAINGAME = 0x61C450F3,
		/// 	LAW_REGION_TUMBLEWEED = 0x0EFAF8DC,
		/// 	LAW_REGION_VALENTINE = 0xA7A3F0C3,
		/// 	LAW_REGION_VALENTINE_LOCKDOWN = 0x123582FE,
		/// 	LAW_REGION_VAN_HORN = 0x619B528E,
		/// 	LAW_REGION_WAPITI = 0x7A976E02
		/// };
		/// </summary>
		public static void _SET_LAW_REGION(int player, uint lawRegionHash, uint stateHash) => Function.Call(0x4752F68EB7F2D280, player, lawRegionHash, stateHash);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0x5E6F375CA101C108(int player, bool p1) => Function.Call(0x5E6F375CA101C108, player, p1);
		public static void _SET_LAW_RBS_VOLUME(int player, uint p1) => Function.Call(0x9BBDCB8DF789EBC1, player, p1);
		public static bool IS_LAW_INCIDENT_ACTIVE(int player) => Function.Call<bool>(0xAD401C63158ACBAA, player);
		public static uint _0x148E7AC8141C9E64(int player) => Function.Call<uint>(0x148E7AC8141C9E64, player);
		/// <summary>
		/// _SET_C* - _SET_D*
		/// </summary>
		public static void _0xEDFC6C1FD1C964F5(int player, uint crimeType, int bounty, float p3, float p4, bool p5, float p6, float p7, Any p8) => Function.Call(0xEDFC6C1FD1C964F5, player, crimeType, bounty, p3, p4, p5, p6, p7, p8);
		public static bool _LAW_WITNESS_RESPONSE_TASK(int pedGroup1, int ped, int pedGroup2, float x, float y, float z, uint crimeType) => Function.Call<bool>(0xF0B67BAD53C35BD9, pedGroup1, ped, pedGroup2, x, y, z, crimeType);
		public static bool _LAW_WITNESS_RESPONSE_TASK(int pedGroup1, int ped, int pedGroup2, Vector3 vec, uint crimeType) => Function.Call<bool>(0xF0B67BAD53C35BD9, pedGroup1, ped, pedGroup2, vec.X, vec.Y, vec.Z, crimeType);
		public static Any _0x018F30D762E62DF8(int ped, Any* p1) => Function.Call<Any>(0x018F30D762E62DF8, ped, p1);
		/// <summary>
		/// Only used in R* SP Script av_amb_camp_robbery
		/// </summary>
		public static Any _0x318F0F9A4426CFA2(int ped, Any* p1) => Function.Call<Any>(0x318F0F9A4426CFA2, ped, p1);
		public static Any _0x95878B13E272EF1F(int entity, int ped, bool p2, float x, float y, float z, uint crimeType) => Function.Call<Any>(0x95878B13E272EF1F, entity, ped, p2, x, y, z, crimeType);
		public static Any _0x95878B13E272EF1F(int entity, int ped, bool p2, Vector3 vec, uint crimeType) => Function.Call<Any>(0x95878B13E272EF1F, entity, ped, p2, vec.X, vec.Y, vec.Z, crimeType);
		public static void _ADD_WITNESS_RESPONSE(int player, uint crimeType, int pedGroup) => Function.Call(0x10827B5A0AAC56A7, player, crimeType, pedGroup);
		/// <summary>
		/// Only used in R* SP Scripts
		/// Params: p2 either 1 or 2
		/// </summary>
		public static void _0xD7494DED50C6EF52(int player, uint crimeType, int p2) => Function.Call(0xD7494DED50C6EF52, player, crimeType, p2);
		public static bool ARE_WITNESSES_ACTIVE(int player) => Function.Call<bool>(0x69E181772886F48B, player);
		public static bool _ARE_WITNESSES_PENDING(int player) => Function.Call<bool>(0x0BB6DE7D23C60626, player);
		public static bool _ARE_INVESTIGATORS_ACTIVE(int player, bool areInvestigatorsActive, Any p2) => Function.Call<bool>(0xF0FBFB9AB15F7734, player, areInvestigatorsActive, p2);
		public static void _0x522F74636DF10201(int player, int itemSet) => Function.Call(0x522F74636DF10201, player, itemSet);
		/// <summary>
		/// Only used in R* SP Scripts
		/// Params: p1 = true, p2 = false
		/// </summary>
		public static void _0xDA1A9ADC4E3D4B16(int itemSet, bool p1, bool p2) => Function.Call(0xDA1A9ADC4E3D4B16, itemSet, p1, p2);
		public static void _ENABLE_DISPATCH_LAW(bool toggle) => Function.Call(0xC805EB785824F712, toggle);
		public static void _ENABLE_DISPATCH_LAW_2(bool toggle) => Function.Call(0x710448D44A64C213, toggle);
		/// <summary>
		/// Only used in rcm_homerob00 R* Script
		/// </summary>
		public static bool _0xECE3C34B270428D5() => Function.Call<bool>(0xECE3C34B270428D5);
		/// <summary>
		/// Only used in trainrobbery_ambient R* Script
		/// </summary>
		public static bool _ARE_LAW_PEDS_ENABLED_FOR_TRAIN() => Function.Call<bool>(0xA22C46F16359471C);
		/// <summary>
		/// Only used in rcm_gunslinger1_1 R* Script: p0 = 0
		/// </summary>
		public static void _0x82F11E1296996574(int p0) => Function.Call(0x82F11E1296996574, p0);
		public static void _0x3852237A3D9DF145(int p0) => Function.Call(0x3852237A3D9DF145, p0);
		public static bool _0x0EAF918F751F27BA(int ped) => Function.Call<bool>(0x0EAF918F751F27BA, ped);
		/// <summary>
		/// Only used in rcm_serial_killer1 R* Script
		/// </summary>
		public static bool _0xC0DF161950FB101E(int ped) => Function.Call<bool>(0xC0DF161950FB101E, ped);
		public static Any _0xE4D6E45F491A66CB(int player, int p1) => Function.Call<Any>(0xE4D6E45F491A66CB, player, p1);
		/// <summary>
		/// Returns p1 value for 0xE4D6E45F491A66CB
		/// </summary>
		public static int _0xE9EB79CBF9C0F58A(int player) => Function.Call<int>(0xE9EB79CBF9C0F58A, player);
		public static void _0x21213B833EF4DAE7(int player, int ped, Vector3* outCoords) => Function.Call(0x21213B833EF4DAE7, player, ped, outCoords);
		public static void _0x61B98367D93F012F(int player) => Function.Call(0x61B98367D93F012F, player);
		public static void _0x6ABC50979655BEE7(int player, uint* crimeType, Any p2) => Function.Call(0x6ABC50979655BEE7, player, crimeType, p2);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static void _0x390710D2DAFA6BFF(int player, bool p1) => Function.Call(0x390710D2DAFA6BFF, player, p1);
		/// <summary>
		/// Returns bounty (increment) value
		/// </summary>
		public static int _GET_CRIME_BOUNTY_AMOUNT_BY_TYPE(uint crimeType) => Function.Call<int>(0x35E5E21F9159849C, crimeType);
		/// <summary>
		/// crimeType: see _REPORT_CRIME
		/// </summary>
		public static int _0xDAEFDFDB2AEECE37(uint crimeType, Any p1) => Function.Call<int>(0xDAEFDFDB2AEECE37, crimeType, p1);
		/// <summary>
		/// See _REPORT_CRIME
		/// </summary>
		public static uint _GET_HUD_PLAYER_CRIME_TYPE(int player) => Function.Call<uint>(0x259CE340A8738814, player);
		public static int _0xE083BEDA81709891(int player) => Function.Call<int>(0xE083BEDA81709891, player);
		public static bool _0x89E005B1662F6E48(int player, int p1, int p2) => Function.Call<bool>(0x89E005B1662F6E48, player, p1, p2);
		public static bool _0x3738B784DDD35CC6(int player, int p1, int p2) => Function.Call<bool>(0x3738B784DDD35CC6, player, p1, p2);
		/// <summary>
		/// Only used in net_fetch R* Script
		/// </summary>
		public static int _0x0BDFEBCF40A5F7E3(uint crimeType) => Function.Call<int>(0x0BDFEBCF40A5F7E3, crimeType);
		/// <summary>
		/// Note: This native is only used in multiplayer scripts
		/// dispatchResponseHash: see update1/common/data/dispatchresponses/..
		/// </summary>
		public static void _SET_CUSTOM_LAW_DISPATCH_RESPONSE(uint dispatchResponseHash) => Function.Call(0x009CF9A29972C298, dispatchResponseHash);
		/// <summary>
		/// dispatchResponseHash: see common/data/dispatchresponses/..
		/// </summary>
		public static Any _CREATE_LAW_DISPATCH_RESPONSE_FOR_COORDS(float x, float y, float z, uint dispatchResponseHash) => Function.Call<Any>(0x75CBF20BA47E4F89, x, y, z, dispatchResponseHash);
		public static Any _CREATE_LAW_DISPATCH_RESPONSE_FOR_COORDS(Vector3 vec, uint dispatchResponseHash) => Function.Call<Any>(0x75CBF20BA47E4F89, vec.X, vec.Y, vec.Z, dispatchResponseHash);
		/// <summary>
		/// Force clears local player's wanted level
		/// </summary>
		public static void _SET_BOUNTY_HUNTER_PURSUIT_CLEARED() => Function.Call(0x55F37F5F3F2475E1);
		/// <summary>
		/// Called together with REPORT_POLICE_SPOTTED_PLAYER
		/// </summary>
		public static void _0xBD944A3D36E992DE() => Function.Call(0xBD944A3D36E992DE);
		public static void _0x987BE590FB9D41E5(bool p0) => Function.Call(0x987BE590FB9D41E5, p0);
		public static void _0xDCF12B89624AAC96(bool p0) => Function.Call(0xDCF12B89624AAC96, p0);
		public static void _0xDDCE8E960D1DE240(bool p0) => Function.Call(0xDDCE8E960D1DE240, p0);
		public static void _0xDEA083C16BB91345() => Function.Call(0xDEA083C16BB91345);
		/// <summary>
		/// Only used in act_bankrobbery01 R* Script
		/// </summary>
		public static void _0x9C8A2BF37E966464(int player, int itemSet) => Function.Call(0x9C8A2BF37E966464, player, itemSet);
		public static bool _0x9D5C9A5A3321B128(int player) => Function.Call<bool>(0x9D5C9A5A3321B128, player);
		public static bool _0x0F230DE0DDBE3649(int player) => Function.Call<bool>(0x0F230DE0DDBE3649, player);
		public static bool _0x9945A3E2528A02E8(int player) => Function.Call<bool>(0x9945A3E2528A02E8, player);
		public static float _0x717DA2281DF90855(int player) => Function.Call<float>(0x717DA2281DF90855, player);
		public static void _0x9B4C564BFA7CFF37(float p0) => Function.Call(0x9B4C564BFA7CFF37, p0);
		public static void _SET_ALLOW_DISABLED_LAW_RESPONSES(bool toggle) => Function.Call(0x4B52BF96E225D230, toggle);
		public static void RESET_WANTED_FOR_NEW_INCIDENT(int player) => Function.Call(0x2728C77FBC4B9796, player);
		public static bool _0x856CE8FDE2416602(int ped) => Function.Call<bool>(0x856CE8FDE2416602, ped);
		/// <summary>
		/// Only used in shoprobberies
		/// </summary>
		public static bool _0x7351DA734F989F4E(int entity) => Function.Call<bool>(0x7351DA734F989F4E, entity);
		/// <summary>
		/// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		/// </summary>
		public static int _GET_BOUNTY_HUNTER_GLOBAL_COOLDOWN(uint p0) => Function.Call<int>(0x76CF93D4B416B288, p0);
		/// <summary>
		/// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		/// </summary>
		public static void _SET_BOUNTY_HUNTER_GLOBAL_COOLDOWN(uint p0, int p1) => Function.Call(0xF19706B1F8FFA88F, p0, p1);
		/// <summary>
		/// Only used in resapwn_dump_body R* Script
		/// </summary>
		public static void _0x2001687F9562FD9D(Any p0) => Function.Call(0x2001687F9562FD9D, p0);
		/// <summary>
		/// p0 is always BOUNTYHUNTERSGLOBALCOOLDOWN in R* scripts
		/// </summary>
		public static void _PAUSE_BOUNTY_HUNTER_COOLDOWN(uint p0, bool p1, Any p2) => Function.Call(0xC61EDEBF16CD9668, p0, p1, p2);
		/// <summary>
		/// Only used in R* SP Scripts
		/// Params: p1 = 0
		/// </summary>
		public static void _0xE9AC8466ABE484BB(bool p0, Any p1) => Function.Call(0xE9AC8466ABE484BB, p0, p1);
		public static bool _0x40851BCC33ACD9AB(int ped) => Function.Call<bool>(0x40851BCC33ACD9AB, ped);
		public static bool _0xF46108C50A22B029() => Function.Call<bool>(0xF46108C50A22B029);
		public static void _0x7803436E68C32B26() => Function.Call(0x7803436E68C32B26);
		public static void _0xC310239ACCCF5579() => Function.Call(0xC310239ACCCF5579);
		public static void _0x29CD4896ECB66C12() => Function.Call(0x29CD4896ECB66C12);
		/// <summary>
		/// Seems to disable lawmen guarding behaviors (like during a region lockdown). Must be called every frame.
		/// Only used in R* SP Scripts, mostly used in train_fast_travel_core
		/// </summary>
		public static void _0xE94B5E938619712E() => Function.Call(0xE94B5E938619712E);
		/// <summary>
		/// Only used in R* Script long_update
		/// Returns a value thats being subtracted from GET_GAME_TIMER
		/// </summary>
		public static int _0x7FC667F6DDFBCDCC(int player) => Function.Call<int>(0x7FC667F6DDFBCDCC, player);
		public static void _0x9C5BD8C562565CE6(uint* crimeType) => Function.Call(0x9C5BD8C562565CE6, crimeType);
		public static void _0xCBFB4951F2E3934C(int player, Any p1) => Function.Call(0xCBFB4951F2E3934C, player, p1);
		/// <summary>
		/// behaviour: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLawBehavior__Flags
		/// </summary>
		public static void _SET_PED_LAW_BEHAVIOUR(int ped, int behaviour) => Function.Call(0x819ADD5EF1742F47, ped, behaviour);
		public static void _0x00DB0BC05E3FAA4E(int ped, int bitset) => Function.Call(0x00DB0BC05E3FAA4E, ped, bitset);
		public static void _0x0C392DB374655176(float x, float y, float z, float p3, int itemSet) => Function.Call(0x0C392DB374655176, x, y, z, p3, itemSet);
		public static void _0x0C392DB374655176(Vector3 vec, float p3, int itemSet) => Function.Call(0x0C392DB374655176, vec.X, vec.Y, vec.Z, p3, itemSet);
		public static Any _0xC687A23E166DCF68(Any* p0) => Function.Call<Any>(0xC687A23E166DCF68, p0);
		public static void _SET_DISPATCH_MULTIPLIER_OVERRIDE(float multiplier) => Function.Call(0x002BABE0B7D53136, multiplier);
		public static bool _0x26934083D3F2579C(int player) => Function.Call<bool>(0x26934083D3F2579C, player);
		public static bool GET_PLAYER_REGISTERED_CRIME(int player, int p1, uint* crimeType) => Function.Call<bool>(0x532C5FDDB986EE5C, player, p1, crimeType);
		public static bool _0xB527099D1E1EED49(int player, int p1, uint* crimeType) => Function.Call<bool>(0xB527099D1E1EED49, player, p1, crimeType);
		public static void CLEAR_PLAYER_PAST_CRIMES(int player) => Function.Call(0xBCC6DC59E32A2BDC, player);
		public static void SET_PLAYER_ARRESTED_IN_REGION(int player, uint lawRegionHash) => Function.Call(0xE0FA74AA3CCE650B, player, lawRegionHash);
		public static void SET_PLAYER_TURNED_IN_BOUNTY_IN_REGION(int player, uint lawRegionHash) => Function.Call(0x73BAD7B2F2DB50DE, player, lawRegionHash);
		public static void _0xD6C0A8C7C0B2F82C(int player, bool p1) => Function.Call(0xD6C0A8C7C0B2F82C, player, p1);
		/// <summary>
		/// Default range is 1.0f
		/// </summary>
		public static void SET_LAW_SENSE_RANGE_MODIFIER(int player, float range) => Function.Call(0xFEC85339AACA2A35, player, range);
		/// <summary>
		/// _SET_DISPATCH_*
		/// </summary>
		public static void _0x7EF2A2FE38D74456(int flag, bool p1) => Function.Call(0x7EF2A2FE38D74456, flag, p1);
		/// <summary>
		/// _GET_DISPATCH_*
		/// </summary>
		public static bool _0xC7DC5A0A7DF608CB(int flag) => Function.Call<bool>(0xC7DC5A0A7DF608CB, flag);
		public static void SET_DISABLE_DISTURBANCE_CRIMES(int player, bool p1) => Function.Call(0xDE5FAA741A781F73, player, p1);
		public static void SET_POSTPONE_DISTURBANCE_CRIMES_DURING_COMBAT(int player, bool p1) => Function.Call(0x362086B911657B1A, player, p1);
		public static void _CREATE_GUARD_ZONE(string name) => Function.Call(0x8F9DE75680275C9F, name);
		public static void _REMOVE_GUARD_ZONE(string name) => Function.Call(0x67EBDD958835956C, name);
		/// <summary>
		/// Only used in loanshark_miner1 R* Script: name = ANNESBURG_MINES
		/// </summary>
		public static void _0x9772395CC73E8D1F(int ped, string name) => Function.Call(0x9772395CC73E8D1F, ped, name);
		public static void _DISABLE_GUARD_ZONE(string name) => Function.Call(0x26D558692B25DD95, name);
		/// <summary>
		/// Only used in sisikapenitentiary R* Script: name = SISIKA
		/// _IS_G* or _IS_H*
		/// </summary>
		public static bool _0x0DBACA9C38C9A686(string name) => Function.Call<bool>(0x0DBACA9C38C9A686, name);
		public static bool _IS_GUARD_PED_INVESTIGATING(int ped) => Function.Call<bool>(0xD743C4293F47AFAD, ped);
		/// <summary>
		/// Returns true when investigation creation was successful
		/// </summary>
		public static bool _CREATE_GUARD_ZONE_FOR_ENTITY(string guardZoneName, int entity, float x, float y, float z) => Function.Call<bool>(0x0D4B77E862475ED3, guardZoneName, entity, x, y, z);
		public static bool _CREATE_GUARD_ZONE_FOR_ENTITY(string guardZoneName, int entity, Vector3 vec) => Function.Call<bool>(0x0D4B77E862475ED3, guardZoneName, entity, vec.X, vec.Y, vec.Z);
		public static void _SET_GUARD_ZONE_VOLUME_REGISTRATION_START(string name, int volume) => Function.Call(0x8C598A930F471938, name, volume);
		public static void _SET_GUARD_ZONE_VOLUME_RESTRICTED(string name, int volume) => Function.Call(0x35815F372D43E1E5, name, volume);
		public static void _SET_GUARD_ZONE_VOLUME_THREAT(string name, int volume) => Function.Call(0xA1B0E6301E2E02A6, name, volume);
		public static void _SET_GUARD_ZONE_VOLUME_WARNING(string name, int volume) => Function.Call(0xAD3E07C37A7C1ADC, name, volume);
		public static void _SET_GUARD_ZONE_VOLUME_REGISTRATION_END(string name, int volume) => Function.Call(0xA8A74AA79FB67159, name, volume);
		public static void _SET_GUARD_ZONE_POSITION(string name, float x, float y, float z) => Function.Call(0x7E7BF59F89FC6C6D, name, x, y, z);
		public static void _SET_GUARD_ZONE_POSITION(string name, Vector3 vec) => Function.Call(0x7E7BF59F89FC6C6D, name, vec.X, vec.Y, vec.Z);
		public static void _SET_GUARD_ZONE_POSITION_2(string name, float x, float y, float z) => Function.Call(0x2F9005E2EA4E5EE4, name, x, y, z);
		public static void _SET_GUARD_ZONE_POSITION_2(string name, Vector3 vec) => Function.Call(0x2F9005E2EA4E5EE4, name, vec.X, vec.Y, vec.Z);
	}

	public unsafe static class LOCALIZATION
	{
		/// <summary>
		/// Same return values as GET_CURRENT_LANGUAGE
		/// </summary>
		public static int LOCALIZATION_GET_SYSTEM_LANGUAGE() => Function.Call<int>(0x3C1A05F86AE6ACB5);
		/// <summary>
		/// 0 = american (en-US)
		/// 1 = french (fr-FR)
		/// 2 = german (de-DE)
		/// 3 = italian (it-IT)
		/// 4 = spanish (es-ES)
		/// 5 = brazilian (pt-BR)
		/// 6 = polish (pl-PL)
		/// 7 = russian (ru-RU)
		/// 8 = korean (ko-KR)
		/// 9 = chinesetrad (zh-TW)
		/// 10 = japanese (ja-JP)
		/// 11 = mexican (es-MX)
		/// 12 = chinesesimp (zh-CN)
		/// </summary>
		public static int GET_CURRENT_LANGUAGE() => Function.Call<int>(0xDB917DA5C6835FCC);
		/// <summary>
		/// Returns true if the current language is american, french, german, italian, spanish, brazilian or mexican.
		/// _DOES_*
		/// </summary>
		public static bool _0x45D50415E4D885FF() => Function.Call<bool>(0x45D50415E4D885FF);
		/// <summary>
		/// 0 = DATE_FORMAT_DMY
		/// 1 = DATE_FORMAT_MDY
		/// 2 = DATE_FORMAT_YMD
		/// 
		/// Old name: _LOCALIZATION_GET_SYSTEM_DATE_FORMAT
		/// </summary>
		public static int LOCALIZATION_GET_SYSTEM_DATE_TYPE() => Function.Call<int>(0x76E30B799EBEEA0F);
	}

	public unsafe static class MAP
	{
		/// <summary>
		/// Returns the Blip handle of given Entity.
		/// </summary>
		public static int GET_BLIP_FROM_ENTITY(int entity) => Function.Call<int>(0x6D2C41A8BD6D6FD0, entity);
		public static int GET_MAIN_PLAYER_BLIP_ID() => Function.Call<int>(0x5CD2889B2B381D45);
		public static int _BLIP_ADD_FOR_STYLE(uint styleHash) => Function.Call<int>(0x3E593DF9C2962EC6, styleHash);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/textures/blips_mp
		/// </summary>
		public static int BLIP_ADD_FOR_COORDS(uint blipHash, float x, float y, float z) => Function.Call<int>(0x554D9D53F696D002, blipHash, x, y, z);
		public static int BLIP_ADD_FOR_COORDS(uint blipHash, Vector3 vec) => Function.Call<int>(0x554D9D53F696D002, blipHash, vec.X, vec.Y, vec.Z);
		public static int BLIP_ADD_FOR_ENTITY(uint blipHash, int entity) => Function.Call<int>(0x23F74C2FDA6E7C61, blipHash, entity);
		public static int BLIP_ADD_FOR_PICKUP_PLACEMENT(uint blipHash, int pickup) => Function.Call<int>(0xA486008892065FB9, blipHash, pickup);
		public static int BLIP_ADD_FOR_RADIUS(uint blipHash, float x, float y, float z, float radius) => Function.Call<int>(0x45F13B7E0A15C880, blipHash, x, y, z, radius);
		public static int BLIP_ADD_FOR_RADIUS(uint blipHash, Vector3 vec, float radius) => Function.Call<int>(0x45F13B7E0A15C880, blipHash, vec.X, vec.Y, vec.Z, radius);
		public static int _BLIP_ADD_FOR_AREA(uint blipHash, float x, float y, float z, float scaleX, float scaleY, float scaleZ, int p7) => Function.Call<int>(0xEC174ADBCB611ECC, blipHash, x, y, z, scaleX, scaleY, scaleZ, p7);
		public static int _BLIP_ADD_FOR_AREA(uint blipHash, Vector3 vec, Vector3 scale, int p7) => Function.Call<int>(0xEC174ADBCB611ECC, blipHash, vec.X, vec.Y, vec.Z, scale.X, scale.Y, scale.Z, p7);
		public static int _BLIP_ADD_FOR_VOLUME(uint blipHash, int volume) => Function.Call<int>(0xA6EF0C54A3443E70, blipHash, volume);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_styles
		/// Removes any existing modifiers and sets the style.
		/// </summary>
		public static bool _BLIP_SET_STYLE(int blip, uint styleHash) => Function.Call<bool>(0xEDD964B7984AC291, blip, styleHash);
		public static bool _BLIP_ADD_STYLE(int blip, uint styleHash) => Function.Call<bool>(0xBD62D98799A3DAF0, blip, styleHash);
		/// <summary>
		/// https://alloc8or.re/rdr3/doc/enums/eBlipModifier.txt
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/blip_modifiers
		/// 
		/// Old name: _BLIP_SET_MODIFIER
		/// </summary>
		public static bool BLIP_ADD_MODIFIER(int blip, uint modifierHash) => Function.Call<bool>(0x662D364ABF16DE2F, blip, modifierHash);
		/// <summary>
		/// If modifierHash is 0, ALL modifiers will be removed.
		/// </summary>
		public static bool BLIP_REMOVE_MODIFIER(int blip, uint modifierHash) => Function.Call<bool>(0xB059D7BD3D78C16F, blip, modifierHash);
		public static void _0x250C75EB1728CC0D(int blip) => Function.Call(0x250C75EB1728CC0D, blip);
		public static void SET_BLIP_FLASH_TIMER(int blip, int blipType, uint blipHash) => Function.Call(0x02FF4CF43B7209D1, blip, blipType, blipHash);
		public static bool SET_BLIP_FLASHES(int blip, int* p1, uint* p2) => Function.Call<bool>(0x0DF2B55F717DDB10, blip, p1, p2);
		public static void TRIGGER_SONAR_BLIP(uint typeHash, float x, float y, float z) => Function.Call(0x72DD432F3CDFC0EE, typeHash, x, y, z);
		public static void TRIGGER_SONAR_BLIP(uint typeHash, Vector3 vec) => Function.Call(0x72DD432F3CDFC0EE, typeHash, vec.X, vec.Y, vec.Z);
		public static void _TRIGGER_SONAR_BLIP_ON_ENTITY(uint typeHash, int entity) => Function.Call(0x0C7A2289A5C4D7C9, typeHash, entity);
		public static void ALLOW_SONAR_BLIPS(bool toggle) => Function.Call(0x6E6E64788C07D2E0, toggle);
		public static void SET_BLIP_COORDS(int blip, float posX, float posY, float posZ) => Function.Call(0x4FF674F5E23D49CE, blip, posX, posY, posZ);
		public static void SET_BLIP_COORDS(int blip, Vector3 vec) => Function.Call(0x4FF674F5E23D49CE, blip, vec.X, vec.Y, vec.Z);
		public static Vector3 GET_BLIP_COORDS(int blip) => Function.Call<Vector3>(0x201C319797BDA603, blip);
		public static void SET_BLIP_SPRITE(int blip, uint hash, bool p2) => Function.Call(0x74F74D3207ED525C, blip, hash, p2);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static Any _0x01B928CA2E198B01(Any p0) => Function.Call<Any>(0x01B928CA2E198B01, p0);
		public static void SET_BLIP_NAME_FROM_TEXT_FILE(int blip, string textLabel) => Function.Call(0x0A062D6D7C0B2C2C, blip, textLabel);
		public static void _SET_BLIP_NAME(int blip, string name) => Function.Call(0x9CB1A1623062F402, blip, name);
		public static void SET_BLIP_NAME_TO_PLAYER_NAME(int blip, int player) => Function.Call(0x093DD5A31BC2B459, blip, player);
		public static void SET_BLIP_ROTATION(int blip, int rotation) => Function.Call(0x6049966A94FBE706, blip, rotation);
		public static void SET_BLIP_SCALE(int blip, float scale) => Function.Call(0xD38744167B2FA257, blip, scale);
		public static void REMOVE_BLIP(int* blip) => Function.Call(0xF2C3C9DA47AAA54A, blip);
		public static bool DOES_BLIP_EXIST(int blip) => Function.Call<bool>(0xCD82FA174080B3B1, blip);
		public static bool _DOES_ENTITY_HAVE_BLIP(int entity) => Function.Call<bool>(0x9FA00E2FC134A9D0, entity);
		public static void SET_RADAR_ZOOM(int zoomLevel) => Function.Call(0xCAF6489DA2C8DD9E, zoomLevel);
		/// <summary>
		/// It's unclear what exactly this does, but I assume it marks the blip as "no longer needed"
		/// </summary>
		public static void _ABANDON_BLIP(int blip) => Function.Call(0xDEEDE7C41742E011, blip);
		public static bool _IS_BLIP_ATTACHED_TO_ANY_ENTITY(int blip) => Function.Call<bool>(0xE9F676788F8D5E1E, blip);
		public static bool IS_BLIP_ON_MINIMAP(int blip) => Function.Call<bool>(0x46534526B9CD2D17, blip);
		/// <summary>
		/// Doesn't actually return anything.
		/// </summary>
		public static Any FORCE_SONAR_BLIPS_THIS_FRAME() => Function.Call<Any>(0xEE1C7BA69BB74B08);
		/// <summary>
		/// https://alloc8or.re/rdr3/doc/enums/rage__eGpsFlags.txt
		/// </summary>
		public static void SET_GPS_FLAGS(int p0, float p1) => Function.Call(0x5DE61C90DDECFA2D, p0, p1);
		/// <summary>
		/// Clears the GPS flags.
		/// </summary>
		public static void CLEAR_GPS_FLAGS() => Function.Call(0x4D3771237C79FF41);
		public static void SET_GPS_CUSTOM_ROUTE_RENDER(bool p0, int p1, int p2) => Function.Call(0xF6CEF599FC470B33, p0, p1, p2);
		public static void CLEAR_GPS_CUSTOM_ROUTE() => Function.Call(0x1EAA5674B4D181C5);
		public static void START_GPS_MULTI_ROUTE(uint colorNameHash, bool onFoot, bool inVehicle) => Function.Call(0x3D3D15AF7BCAAF83, colorNameHash, onFoot, inVehicle);
		public static void ADD_POINT_TO_GPS_MULTI_ROUTE(float x, float y, float z, bool p3) => Function.Call(0x64C59DD6834FA942, x, y, z, p3);
		public static void ADD_POINT_TO_GPS_MULTI_ROUTE(Vector3 vec, bool p3) => Function.Call(0x64C59DD6834FA942, vec.X, vec.Y, vec.Z, p3);
		public static void SET_GPS_MULTI_ROUTE_RENDER(bool toggle) => Function.Call(0x4426D65E029A4DC0, toggle);
		/// <summary>
		/// Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
		/// </summary>
		public static void CLEAR_GPS_MULTI_ROUTE() => Function.Call(0x9E0AB9AAEE87CE28);
		public static void _START_GPS_CUSTOM_ROUTE_FROM_WAYPOINT_RECORDING_ROUTE(string waypointRecording, int point, int numPoints, uint colorNameHash, bool p4, bool p5) => Function.Call(0x6B44F13D888F770D, waypointRecording, point, numPoints, colorNameHash, p4, p5);
		public static void CLEAR_GPS_PLAYER_WAYPOINT() => Function.Call(0x08FDC6F796E350D1);
		public static void _0xD3F58E9316B7FC2A(Any p0) => Function.Call(0xD3F58E9316B7FC2A, p0);
		public static void SET_WAYPOINT_OFF() => Function.Call(0xFA8C41E8020D3439);
		public static bool IS_WAYPOINT_ACTIVE() => Function.Call<bool>(0x202B1BBFC6AB5EE4);
		public static Vector3 _GET_WAYPOINT_COORDS() => Function.Call<Vector3>(0x29B30D07C3F7873B);
		public static Any _0xF08E42BFA46BDFF8(Any p0, Any p1) => Function.Call<Any>(0xF08E42BFA46BDFF8, p0, p1);
		public static void _HIDE_ACTIVE_POINTS_OF_INTEREST() => Function.Call(0xA1B4052C2A3DCC1E);
		public static void _SHOW_ACTIVE_POINTS_OF_INTEREST() => Function.Call(0x3FBB838AEA30C1D8);
		public static Any _0xF47A1EB2A538A3A3() => Function.Call<Any>(0xF47A1EB2A538A3A3);
		public static bool _FIND_CLOSEST_GPS_POSITION(float x, float y, float z, Vector3* outPosition) => Function.Call<bool>(0x3FDA2B79AEEE351C, x, y, z, outPosition);
		public static bool _FIND_CLOSEST_GPS_POSITION(Vector3 vec, Vector3* outPosition) => Function.Call<bool>(0x3FDA2B79AEEE351C, vec.X, vec.Y, vec.Z, outPosition);
		/// <summary>
		/// If Minimap / Radar should be displayed.
		/// </summary>
		public static void DISPLAY_RADAR(bool toggle) => Function.Call(0x1B3DA717B9AFF828, toggle);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/graphics/minimap/radar/radar_configs.lua
		/// configHash: -1943724816, 347777538, -117986897, -789269373, -547506804, -1986542417, 2080113112
		/// p1: usually 898171178 or 0 in R* scripts (doesn't seems to have any effect)
		/// </summary>
		public static void _SET_RADAR_CONFIG_TYPE(uint configHash, uint p1) => Function.Call(0x9C113883487FD53C, configHash, p1);
		/// <summary>
		/// list of minimap props: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/minimapObjects
		/// </summary>
		public static void _ADD_PROP_TO_MINIMAP(uint minimapProp, float x, float y, float rotation, int p4) => Function.Call(0x1392105DA88BBFFB, minimapProp, x, y, rotation, p4);
		public static void _REMOVE_PROP_FROM_MINIMAP(uint minimapProp) => Function.Call(0xE057FEA9A22EB3EE, minimapProp);
		public static void SET_RADAR_AS_EXTERIOR_THIS_FRAME() => Function.Call(0xA8EBBAE986FB5457);
		/// <summary>
		/// Reveals the entire minimap (FOW = Fog of War)
		/// </summary>
		public static void SET_MINIMAP_HIDE_FOW(bool toggle) => Function.Call(0x4B8F743A4A6D2FF8, toggle);
		/// <summary>
		/// Used for GUARMA MODE; Enabled: toggle = false, 0; Disabled: toggle = true, 0
		/// Hash p1 seems to be unused, always 0
		/// </summary>
		public static void _SET_FOW_UPDATE_PLAYER_OVERRIDE(bool toggle, uint p1) => Function.Call(0x63E7279D04160477, toggle, p1);
		public static void _SET_MINIMAP_FOW_OVERRIDE_REVEAL_SCALE(float scale, uint p1) => Function.Call(0xE5A7F70B7C0F3271, scale, p1);
		public static void _SET_MINIMAP_FOW_SHOULD_UPDATE(bool toggle, uint p1) => Function.Call(0x632AA10BF7EA53D3, toggle, p1);
		/// <summary>
		/// Up to eight coordinates may be revealed per frame
		/// </summary>
		public static void SET_MINIMAP_FOW_REVEAL_COORDINATE(float x, float y, float z, uint p3) => Function.Call(0x73348402566ECB6E, x, y, z, p3);
		public static void SET_MINIMAP_FOW_REVEAL_COORDINATE(Vector3 vec, uint p3) => Function.Call(0x73348402566ECB6E, vec.X, vec.Y, vec.Z, p3);
		public static void SET_MINIMAP_FOW_REVEAL_VOLUME(int volume, uint p1) => Function.Call(0x63CBBD6CA6F321F9, volume, p1);
		public static void RESET_MINIMAP_FOW(uint hash) => Function.Call(0xEB3CB3386C775D72, hash);
		public static void _REVEAL_MINIMAP_FOW(uint hash) => Function.Call(0xF8096DF9B87246E3, hash);
		/// <summary>
		/// hash can be the hash of "guarma" or "world".
		/// </summary>
		public static void _SET_MINIMAP_ZONE(uint zone) => Function.Call(0xA657EC9DBC6CC900, zone);
		/// <summary>
		/// Locks the minimap to the specified angle in integer degrees.
		/// 
		/// angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
		/// </summary>
		public static void LOCK_MINIMAP_ANGLE(int angle) => Function.Call(0x0BFD145EF819FB3A, angle);
		public static void UNLOCK_MINIMAP_ANGLE() => Function.Call(0x5373DE8E179BC2A0);
		/// <summary>
		/// regionHash: https://github.com/femga/rdr3_discoveries/tree/master/graphics/minimap/wanted_regions
		/// </summary>
		public static void _MAP_ENABLE_REGION_BLIP(uint regionHash, uint styleHash) => Function.Call(0x563FCB6620523917, regionHash, styleHash);
		public static void _MAP_DISABLE_REGION_BLIP(uint regionHash) => Function.Call(0x6786D7AFAC3162B3, regionHash);
		public static bool _MAP_IS_REGION_HIGHLIGHTED_WITH_STYLE(uint regionHash, uint styleHash) => Function.Call<bool>(0xE38450DBCBC70E3D, regionHash, styleHash);
		public static void _MAP_DISCOVER_REGION(uint discoveryHash) => Function.Call(0xD8C7162AB2E2AF45, discoveryHash);
		public static void _MAP_DISCOVERY_SET_ENABLED(uint discoveryHash) => Function.Call(0xDA98246C7A3C2189, discoveryHash);
		public static bool _MAP_IS_DISCOVERY_ACTIVE(uint discoveryHash) => Function.Call<bool>(0x3F81EA4275D39D6F, discoveryHash);
		public static void _SET_PAUSEMAP_COORDS_WITH_RADIUS(float x, float y, float z, float radius) => Function.Call(0xE0884C184728C75B, x, y, z, radius);
		public static void _SET_PAUSEMAP_COORDS_WITH_RADIUS(Vector3 vec, float radius) => Function.Call(0xE0884C184728C75B, vec.X, vec.Y, vec.Z, radius);
		public static void _0x7C9F4CDF402CA82A() => Function.Call(0x7C9F4CDF402CA82A);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static void _0x44813684F72B563C(int entity, Any p1) => Function.Call(0x44813684F72B563C, entity, p1);
		public static void _0x97F6F158CC5B5CA2(int entity, Any p1) => Function.Call(0x97F6F158CC5B5CA2, entity, p1);
		public static void _0xBB68D4D3CA3DE402(Any p0, Any p1) => Function.Call(0xBB68D4D3CA3DE402, p0, p1);
		public static Any _0x3CB8859F04763C78(Any p0, Any p1) => Function.Call<Any>(0x3CB8859F04763C78, p0, p1);
		/// <summary>
		/// FM_CLIENT_SETUP_EAGLE_EYE - setting up eagle eye for entity
		/// </summary>
		public static void _0x7563CBCA99253D1A(int entity, uint blip) => Function.Call(0x7563CBCA99253D1A, entity, blip);
		public static void _0x1726963E6049DB53(Any p0) => Function.Call(0x1726963E6049DB53, p0);
	}

	public unsafe static class MINIGAME
	{
		public static void _0x6480723D3BE535B6(Any p0) => Function.Call(0x6480723D3BE535B6, p0);
		public static void _0x3DF7EE3A76185108() => Function.Call(0x3DF7EE3A76185108);
		public static Any _0xE1F365C4C8F259D8(Any p0, Any p1, Any p2) => Function.Call<Any>(0xE1F365C4C8F259D8, p0, p1, p2);
		public static Any _0xE53A308AC35877A8() => Function.Call<Any>(0xE53A308AC35877A8);
		public static Any _0x580F34C726387226(Any p0, Any p1) => Function.Call<Any>(0x580F34C726387226, p0, p1);
		public static void _0x0876326238914A3F() => Function.Call(0x0876326238914A3F);
		public static Any _0x3FFE60DD8A936551(Any p0, Any p1) => Function.Call<Any>(0x3FFE60DD8A936551, p0, p1);
		public static void _0x18A0D48DF9211C07() => Function.Call(0x18A0D48DF9211C07);
		public static Any _MINIGAME_IS_CONNECTED_TO_SERVER(Any p0) => Function.Call<Any>(0x2A0C4736AC5AF0CE, p0);
		public static Any _0x39654E1F68B78287() => Function.Call<Any>(0x39654E1F68B78287);
		public static Any _0x3EECAADAB0D9FE29() => Function.Call<Any>(0x3EECAADAB0D9FE29);
		public static Any _0xD39D32EB3B52DD83(Any p0) => Function.Call<Any>(0xD39D32EB3B52DD83, p0);
		public static bool _MINIGAME_IS_SEAT_OCCUPIED(Any p0) => Function.Call<bool>(0x8593A8CB0ED2C3B4, p0);
		public static bool _MINIGAME_REQUEST_SEAT_AT_TABLE(Any* data) => Function.Call<bool>(0xF6AC6085D8D6C004, data);
		public static Any _MINIGAME_LEAVE_TABLE(Any p0) => Function.Call<Any>(0xF5446E47941E654C, p0);
		public static Any _MINIGAME_GET_NEXT_EVENT_TYPE() => Function.Call<Any>(0x578907F59BA01B6C);
		public static Any _MINIGAME_GET_NEXT_EVENT(Any p0, Any p1) => Function.Call<Any>(0xDF728C5AE137FC13, p0, p1);
		public static void _MINIGAME_POP_NEXT_EVENT() => Function.Call(0x833E03BAEBADC4B0);
		public static Any _0x3B31732FADE5BAF3() => Function.Call<Any>(0x3B31732FADE5BAF3);
		public static Any _0x578907F59BA01B6D(Any p0) => Function.Call<Any>(0x578907F59BA01B6D, p0);
		public static Any _0xDF728C5AE137FC14(Any p0, Any p1, Any p2) => Function.Call<Any>(0xDF728C5AE137FC14, p0, p1, p2);
		public static Any _MINIGAME_IS_REQUEST_PENDING(Any p0) => Function.Call<Any>(0x9105A4A2556FA937, p0);
		public static Any _0x644439B5387EE57E(Any p0, Any p1) => Function.Call<Any>(0x644439B5387EE57E, p0, p1);
		public static Any _0x15E90B6A993017AA() => Function.Call<Any>(0x15E90B6A993017AA);
		public static Any _0x10342CC82E8356E9(Any p0, Any p1) => Function.Call<Any>(0x10342CC82E8356E9, p0, p1);
		public static Any _0x32A7C216344D623B(Any p0, Any p1, Any p2) => Function.Call<Any>(0x32A7C216344D623B, p0, p1, p2);
		public static Any _0xEC819D612038EF4B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call<Any>(0xEC819D612038EF4B, p0, p1, p2, p3, p4, p5, p6, p7);
		public static Any _POKER_GET_GAME_SETTINGS_FOR_ID(Any p0) => Function.Call<Any>(0x2D20E12E1990D584, p0);
		public static Any _POKER_BUY_IN(Any p0, Any p1) => Function.Call<Any>(0xB4D610EA5A1FDE74, p0, p1);
		public static Any _POKER_CALL(Any p0, Any p1) => Function.Call<Any>(0x8DED681B161EBD78, p0, p1);
		public static Any _POKER_CHECK(Any p0, Any p1) => Function.Call<Any>(0x49A045628D9B1B86, p0, p1);
		public static Any _POKER_FOLD(Any p0) => Function.Call<Any>(0x3DFAB7D9BB45B5BE, p0);
		public static Any _POKER_RAISE(Any p0, Any p1) => Function.Call<Any>(0xECCF45A79A17BB96, p0, p1);
		public static Any _POKER_REVEAL(Any p0) => Function.Call<Any>(0x2F2131DB0A8B02DC, p0);
		public static void _0x58521E6DCDE97D74(Any p0, Any p1, Any p2) => Function.Call(0x58521E6DCDE97D74, p0, p1, p2);
		public static void _0xF6DE98516FD3AC9B() => Function.Call(0xF6DE98516FD3AC9B);
		public static Any _0x3F4FD4BED07AB8C4(Any p0) => Function.Call<Any>(0x3F4FD4BED07AB8C4, p0);
		public static Any _0x3AE451860F03CA8A(Any p0, Any p1) => Function.Call<Any>(0x3AE451860F03CA8A, p0, p1);
		public static Any _0x012027C28F421F46(Any p0, Any p1) => Function.Call<Any>(0x012027C28F421F46, p0, p1);
		public static void _0x455ECCA0715C507F() => Function.Call(0x455ECCA0715C507F);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _DOMINOES_BUY_IN(Any p0) => Function.Call<Any>(0x399E6CD12FC8CA89, p0);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _DOMINOES_PLACE_DOMINO(Any p0, Any p1) => Function.Call<Any>(0xB79A29B33BF29BA5, p0, p1);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _DOMINOES_REQUEST_VALID_PLACEMENTS(Any p0) => Function.Call<Any>(0xE26AEE7E67D9E21D, p0);
		public static Any _0xA2DB3C6270C122E3(Any p0, Any p1) => Function.Call<Any>(0xA2DB3C6270C122E3, p0, p1);
		public static Any _0x398066F893149856(Any p0, Any p1, Any p2) => Function.Call<Any>(0x398066F893149856, p0, p1, p2);
		public static Any _0xBEA7D3CB47E1479C() => Function.Call<Any>(0xBEA7D3CB47E1479C);
		public static Any _0x910B088E51A511AC() => Function.Call<Any>(0x910B088E51A511AC);
		public static Any _0x9DD95B405AB4983E(Any p0, Any p1) => Function.Call<Any>(0x9DD95B405AB4983E, p0, p1);
	}

	public unsafe static class MISC
	{
		public static int GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(int stackSize) => Function.Call<int>(0x40DC2907A9697EF7, stackSize);
		public static int _GET_NUMBER_OF_INSTRUCTIONS() => Function.Call<int>(0x72904D3D62AF5839);
		public static int _GET_MAX_NUM_INSTRUCTIONS() => Function.Call<int>(0xC43CD2668B204419);
		/// <summary>
		/// magdemo = magazine demo, i. e. for magazines such as IGN, pre play phases to prepare articles etc. - example 2012 builds for V
		/// Hardcoded to return false.
		/// </summary>
		public static bool IS_MAG_DEMO_1_ACTIVE() => Function.Call<bool>(0x5FC9357C26DAEFCE);
		public static void SET_RANDOM_SEED(int seed) => Function.Call(0x5CD7A49104AFCB6B, seed);
		/// <summary>
		/// Maximum value is 1.0f
		/// At a value of 0.0f the game will still run at a minimum time scale.
		/// </summary>
		public static void SET_TIME_SCALE(float timeScale) => Function.Call(0x9682AF6050854856, timeScale);
		/// <summary>
		/// If true, the player can't save the game.
		/// </summary>
		public static void SET_MISSION_FLAG(bool toggle) => Function.Call(0x36694B456BE80D0A, toggle);
		public static bool GET_MISSION_FLAG() => Function.Call<bool>(0xB15CD1CF58771DE1);
		public static void _0x5801BE2DF2AF07EC(Any p0) => Function.Call(0x5801BE2DF2AF07EC, p0);
		/// <summary>
		/// If the parameter is true, sets the random event flag to true, if the parameter is false, the function does nothing at all.
		/// Does nothing if the mission flag is set.
		/// </summary>
		public static void SET_RANDOM_EVENT_FLAG(bool toggle) => Function.Call(0xB1ADCCC4150C6473, toggle);
		public static bool GET_RANDOM_EVENT_FLAG() => Function.Call<bool>(0x924D54E5698AE3E0);
		public static void _0x9BF2C0C568C61641(Any p0) => Function.Call(0x9BF2C0C568C61641, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ACTIVITY_FEED_CREATE(string p0, string p1) => Function.Call(0xCC7FC854B956A128, p0, p1);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(string p0) => Function.Call(0x9935F76407C32539, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xFF252E2BAFB7330F(Any p0) => Function.Call(0xFF252E2BAFB7330F, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(string p0, string p1) => Function.Call(0x91D657230BC208D2, p0, p1);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(string p0) => Function.Call(0x1694A053DFB61A34, p0);
		/// <summary>
		/// Hardcoded to return one/true.
		/// </summary>
		public static Any _0xAF530E56505D1BD6(Any p0) => Function.Call<Any>(0xAF530E56505D1BD6, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void ACTIVITY_FEED_POST() => Function.Call(0xB16FC7B364D86585);
		public static string _0xF81C53561D15F330() => Function.Call<string>(0xF81C53561D15F330);
		/// <summary>
		/// _SET_MISSION_NAME_*(FOR_ACTIVITY?/MINIGAME?)
		/// </summary>
		public static void _0x1096603B519C905F(string name) => Function.Call(0x1096603B519C905F, name);
		public static void _0xCC3EDC5614B03F61(int p0) => Function.Call(0xCC3EDC5614B03F61, p0);
		public static void INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(string p0) => Function.Call(0x708DF841B8F27AA2, p0);
		public static void _0xDA4D8EB04E8E2928(Any p0) => Function.Call(0xDA4D8EB04E8E2928, p0);
		public static void _0xB08C4FA25BC29DB9(Any p0) => Function.Call(0xB08C4FA25BC29DB9, p0);
		public static uint _GET_PREV_WEATHER_TYPE_HASH_NAME() => Function.Call<uint>(0x4BEB42AEBCA732E9);
		public static uint _GET_NEXT_WEATHER_TYPE_HASH_NAME() => Function.Call<uint>(0x51021D36F62AAA83);
		public static void _0x0730E518486DEEC3(Any p0) => Function.Call(0x0730E518486DEEC3, p0);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_types.lua
		/// </summary>
		public static void SET_WEATHER_TYPE(uint weatherType, bool p1, bool p2, bool transition, float transitionTime, bool p5) => Function.Call(0x59174F1AFE095B5A, weatherType, p1, p2, transition, transitionTime, p5);
		public static void _SET_WEATHER_TYPE_2(uint weatherType, int p1, int p2, int p3, bool p4) => Function.Call(0x2C6A07AF9AEDABD8, weatherType, p1, p2, p3, p4);
		public static int _GET_RANDOM_WEATHER_TYPE_INDEX() => Function.Call<int>(0x7F4CE164D9A11DFE);
		public static uint _GET_RANDOM_WEATHER_TYPE() => Function.Call<uint>(0x1359C181BC625503);
		public static void SET_RANDOM_WEATHER_TYPE(bool p0, bool p1) => Function.Call(0x6E5A7FBEECAB3C72, p0, p1);
		public static void CLEAR_WEATHER_TYPE_PERSIST() => Function.Call(0xD85DFE5C131E4AE9);
		public static void _CLEAR_WEATHER_TYPE_PERSIST_OVERTIME(int milliseconds) => Function.Call(0xCE7690C0A0D1C36D, milliseconds);
		/// <summary>
		/// Params: percentWeather2: 0f - 0.75f in R* Scripts
		/// 
		/// Old name: _GET_WEATHER_TYPE_TRANSITION
		/// </summary>
		public static void GET_CURR_WEATHER_STATE(uint* weatherType1, uint* weatherType2, float* percentWeather2) => Function.Call(0x0AC679B2342F14F2, weatherType1, weatherType2, percentWeather2);
		/// <summary>
		/// Params: BOOL p3 is always true
		/// 
		/// Old name: _SET_WEATHER_TYPE_TRANSITION
		/// </summary>
		public static void SET_CURR_WEATHER_STATE(uint weatherType1, uint weatherType2, float percentWeather2, bool enabled) => Function.Call(0xFA3E3CA8A1DE6D5D, weatherType1, weatherType2, percentWeather2, enabled);
		public static void _SET_WEATHER_TYPE_FROZEN(bool toggle) => Function.Call(0xD74ACDF7DB8114AF, toggle);
		/// <summary>
		/// Returns the weather type that has been set by a script
		/// </summary>
		public static void _GET_FORCED_WEATHER(uint* weather, uint* p1) => Function.Call(0xDD560ABEF5D3784C, weather, p1);
		public static void _0x2916B30DC6C41179(uint weatherType) => Function.Call(0x2916B30DC6C41179, weatherType);
		public static void _0xD3F943B88F55376A(uint weatherType) => Function.Call(0xD3F943B88F55376A, weatherType);
		public static void _0x243CEDE8F916B994() => Function.Call(0x243CEDE8F916B994);
		public static void _SET_OVERRIDE_WEATHER(uint weatherType) => Function.Call(0xBE83CAE8ED77A94F, weatherType);
		public static void CLEAR_OVERRIDE_WEATHER() => Function.Call(0x80A398F16FFE3CC3);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/weather/weather_variations.lua
		/// </summary>
		public static void _SET_WEATHER_VARIATION(string weatherType, string variation) => Function.Call(0x3373779BAF7CAF48, weatherType, variation);
		public static void _CLEAR_WEATHER_VARIATION(string weatherType, bool p1) => Function.Call(0x0E71C80FA4EC8147, weatherType, p1);
		/// <summary>
		/// Only used in smuggler2 script
		/// </summary>
		public static void WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(float amplitude) => Function.Call(0x55123D5A7D9D3C42, amplitude);
		/// <summary>
		/// Only used in smuggler2 script
		/// </summary>
		public static void WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(float maxAmplitude) => Function.Call(0xF06C5B66DE20B2B8, maxAmplitude);
		public static float _GET_TEMPERATURE_AT_COORDS(float x, float y, float z) => Function.Call<float>(0xB98B78C3768AF6E0, x, y, z);
		public static float _GET_TEMPERATURE_AT_COORDS(Vector3 vec) => Function.Call<float>(0xB98B78C3768AF6E0, vec.X, vec.Y, vec.Z);
		public static void SET_WIND_SPEED(float speed) => Function.Call(0xD00C2D82DC04A99F, speed);
		public static float GET_WIND_SPEED() => Function.Call<float>(0xFFB7E74E041150A4);
		public static void SET_WIND_DIRECTION(float direction) => Function.Call(0xB56C4F5F57A45600, direction);
		public static Vector3 GET_WIND_DIRECTION() => Function.Call<Vector3>(0xF703E82F3FE14A5F);
		/// <summary>
		/// Old name: _SET_RAIN_LEVEL
		/// </summary>
		public static void SET_RAIN(float intensity) => Function.Call(0x193DFC0526830FD6, intensity);
		public static float GET_RAIN_LEVEL() => Function.Call<float>(0x931B5F4CC130224B);
		public static void _0x745808BB01CEC6B9(float p0) => Function.Call(0x745808BB01CEC6B9, p0);
		public static void _SET_SNOW_LEVEL(float level) => Function.Call(0xF6BEE7E80EC5CA40, level);
		public static float GET_SNOW_LEVEL() => Function.Call<float>(0x1E5D727041BE1709);
		/// <summary>
		/// creates single lightning+thunder at random position
		/// </summary>
		public static void FORCE_LIGHTNING_FLASH() => Function.Call(0x369DB5B2510FA080);
		/// <summary>
		/// p3 is always -1.0f in the scripts
		/// </summary>
		public static void _FORCE_LIGHTNING_FLASH_AT_COORDS(float x, float y, float z, float p3) => Function.Call(0x67943537D179597C, x, y, z, p3);
		public static void _FORCE_LIGHTNING_FLASH_AT_COORDS(Vector3 vec, float p3) => Function.Call(0x67943537D179597C, vec.X, vec.Y, vec.Z, p3);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xA9342743B634A462(Any p0) => Function.Call(0xA9342743B634A462, p0);
		public static int GET_GAME_TIMER() => Function.Call<int>(0x4F67E8ECA7D3F667);
		/// <summary>
		/// Returns rage::fwTimer::sm_nonScaledClippedTime
		/// </summary>
		public static int _GET_GAME_TIMER_NON_SCALED_CLIPPED() => Function.Call<int>(0x483B8C542103AD72);
		public static int GET_SYSTEM_TIME() => Function.Call<int>(0xBE7F225417E35A7C);
		public static int GET_NUMBER_OF_MICROSECONDS_SINCE_LAST_CALL() => Function.Call<int>(0xB0CE5E5ED8BB3581);
		public static int GET_SCRIPT_TIME_WITHIN_FRAME_IN_MICROSECONDS() => Function.Call<int>(0x63219768C586667C);
		public static void RESET_SCRIPT_TIME_WITHIN_FRAME() => Function.Call(0x1411A7CBC3A6EB7B);
		public static float GET_FRAME_TIME() => Function.Call<float>(0x5E72022914CE3C38);
		/// <summary>
		/// Old name: _GET_BENCHMARK_TIME
		/// </summary>
		public static float GET_SYSTEM_TIME_STEP() => Function.Call<float>(0x3F3172FEAE3AFE1C);
		public static int GET_FRAME_COUNT() => Function.Call<int>(0x77DFA958FCF100C1);
		public static void _0x6BED40493A1AFDB8(Any* p0, float p1) => Function.Call(0x6BED40493A1AFDB8, p0, p1);
		/// <summary>
		/// Reads the passed value as floating point value and returns it.
		/// Example: _READ_INT_AS_FLOAT(0x3F800000) returns 1.0f because 0x3F800000 is the hexadecimal representation of 1.0f.
		/// </summary>
		public static float _READ_INT_AS_FLOAT(int value) => Function.Call<float>(0xD2C9126410DFA1B2, value);
		public static float GET_RANDOM_FLOAT_IN_RANGE(float startRange, float endRange) => Function.Call<float>(0xE29F927A961F8AAA, startRange, endRange);
		public static int GET_RANDOM_INT_IN_RANGE(int startRange, int endRange) => Function.Call<int>(0xD53343AA4FB7DD28, startRange, endRange);
		public static bool GET_GROUND_Z_FOR_3D_COORD(float x, float y, float z, float* groundZ, bool p4) => Function.Call<bool>(0x24FA4267BB8D2431, x, y, z, groundZ, p4); //GET_GROUND_Z_FOR_3D_COORD
		public static bool GET_GROUND_Z_FOR_3D_COORD(Vector3 vec, float* groundZ, bool p4) => Function.Call<bool>(0x24FA4267BB8D2431, vec.X, vec.Y, vec.Z, groundZ, p4);
		public static bool GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(float x, float y, float z, float* groundZ, Vector3* normal) => Function.Call<bool>(0x2A29CA9A6319E6AB, x, y, z, groundZ, normal);
		public static bool GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(Vector3 vec, float* groundZ, Vector3* normal) => Function.Call<bool>(0x2A29CA9A6319E6AB, vec.X, vec.Y, vec.Z, groundZ, normal);
		public static Any _0xBBE5B63EFFB08E68(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0xBBE5B63EFFB08E68, p0, p1, p2, p3, p4, p5, p6);
		public static float ASIN(float p0) => Function.Call<float>(0x6E3C15D296C15583, p0);
		public static float ACOS(float p0) => Function.Call<float>(0x586690F0176DC575, p0);
		public static float TAN(float p0) => Function.Call<float>(0x8C13DB96497B7ABF, p0);
		public static float ATAN(float p0) => Function.Call<float>(0x503054DED0B78027, p0);
		public static float ATAN2(float p0, float p1) => Function.Call<float>(0x965B220A066E3F07, p0, p1);
		/// <summary>
		/// If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
		/// 
		/// Consider using this faster native instead: BUILTIN::VDIST - DVIST always takes in consideration the 3D coordinates.
		/// </summary>
		public static float GET_DISTANCE_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, bool useZ) => Function.Call<float>(0x0BE7F4E3CDBAFB28, x1, y1, z1, x2, y2, z2, useZ);
		public static float GET_DISTANCE_BETWEEN_COORDS(Vector3 vec1, Vector3 vec2, bool useZ) => Function.Call<float>(0x0BE7F4E3CDBAFB28, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, useZ);
		public static float GET_ANGLE_BETWEEN_2D_VECTORS(float x1, float y1, float x2, float y2) => Function.Call<float>(0xD0DFE1C486097BBB, x1, y1, x2, y2);
		/// <summary>
		/// dx = x1 - x2
		/// dy = y1 - y2
		/// </summary>
		public static float GET_HEADING_FROM_VECTOR_2D(float dx, float dy) => Function.Call<float>(0x38D5202FF9271C62, dx, dy);
		public static Vector3 GET_CLOSEST_POINT_ON_LINE(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, bool p9) => Function.Call<Vector3>(0x83ACC65D9ACEC5EF, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static bool GET_LINE_PLANE_INTERSECTION(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float* p12) => Function.Call<bool>(0xAB6A04CEC428258B, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		public static void SET_BIT(int* address, int offset) => Function.Call(0xF73FBE4845C43B5B, address, offset);
		public static void CLEAR_BIT(int* address, int offset) => Function.Call(0x7D1D4A3602B6AD4E, address, offset);
		public static bool _IS_BIT_FLAG_SET(Any* bitFlags, int flag) => Function.Call<bool>(0x8F4F050054005C27, bitFlags, flag);
		public static bool _IS_ANY_BIT_FLAG_SET(Any* bitFlags) => Function.Call<bool>(0x80E9C316EF84DD81, bitFlags);
		public static int _COUNT_BIT_FLAGS(Any* bitFlags) => Function.Call<int>(0xE704838F36F93B7B, bitFlags);
		/// <summary>
		/// Similar to SET_BIT but specifically designed for large (>32 flags) bit flag sets.
		/// The flags are stored in an int array where each int has the ability to hold 32 flags.
		/// Flags 0-31 would be stored in the first int, flags 32-63 in the second int, etc.
		/// </summary>
		public static void _SET_BIT_FLAG(Any* bitFlags, int flag) => Function.Call(0xE84AAC1B22A73E99, bitFlags, flag);
		public static void _CLEAR_BIT_FLAG(Any* bitFlags, int flag) => Function.Call(0xB909149F2BB5F6DA, bitFlags, flag);
		public static void _CLEAR_ALL_BIT_FLAGS(Any* bitFlags) => Function.Call(0xD2D74F89DF844A50, bitFlags);
		/// <summary>
		/// Computes a hash for the given string. It is hashed using Jenkins' One-at-a-Time hash algorithm (https://en.wikipedia.org/wiki/Jenkins_hash_function)
		/// Note: this implementation is case-insensitive.
		/// </summary>
		public static uint GET_HASH_KEY(string _string) => Function.Call<uint>(0xFD340785ADF8CFB7, _string);
		/// <summary>
		/// https://easings.net/
		/// 
		/// enum class eEasingCurveType
		/// {
		/// 	TYPE_LINEAR,
		/// 	TYPE_QUADRATIC_IN,
		/// 	TYPE_QUADRATIC_OUT,
		/// 	TYPE_QUADRATIC_INOUT,
		/// 	TYPE_CUBIC_IN,
		/// 	TYPE_CUBIC_OUT,
		/// 	TYPE_CUBIC_INOUT,
		/// 	TYPE_QUARTIC_IN,
		/// 	TYPE_QUARTIC_OUT,
		/// 	TYPE_QUARTIC_INOUT,
		/// 	TYPE_QUINTIC_IN,
		/// 	TYPE_QUINTIC_OUT,
		/// 	TYPE_QUINTIC_INOUT,
		/// 	TYPE_EXPONENTIAL_IN,
		/// 	TYPE_EXPONENTIAL_OUT,
		/// 	TYPE_EXPONENTIAL_INOUT,
		/// 	TYPE_SINE_IN,
		/// 	TYPE_SINE_OUT,
		/// 	TYPE_SINE_INOUT,
		/// 	TYPE_CIRCULAR_IN,
		/// 	TYPE_CIRCULAR_OUT,
		/// 	TYPE_CIRCULAR_INOUT,
		/// 	TYPE_BOUNCE_IN,
		/// 	TYPE_BOUNCE_OUT,
		/// 	TYPE_BOUNCE_INOUT,
		/// 	TYPE_CUSTOM
		/// };
		/// </summary>
		public static float _GET_EASING_CURVE_VALUE(float t, float b, float d, int easingCurveType) => Function.Call<float>(0xEF50E344A8F93784, t, b, d, easingCurveType);
		public static bool IS_POSITION_OCCUPIED(float x, float y, float z, float range, bool p4, bool p5, bool p6, bool p7, bool p8, Any p9, bool p10) => Function.Call<bool>(0x825CA3ED43831015, x, y, z, range, p4, p5, p6, p7, p8, p9, p10);
		public static bool IS_POSITION_OCCUPIED(Vector3 vec, float range, bool p4, bool p5, bool p6, bool p7, bool p8, Any p9, bool p10) => Function.Call<bool>(0x825CA3ED43831015, vec.X, vec.Y, vec.Z, range, p4, p5, p6, p7, p8, p9, p10);
		/// <summary>
		/// flag |= 1 | 1048576 | 524288
		/// ALL_BASE, PROJECTILES, AMBIENT_POPULATION, BROADCAST
		/// </summary>
		public static void CLEAR_AREA(float x, float y, float z, float radius, int flag) => Function.Call(0x3B882A96EA77D5B1, x, y, z, radius, flag);
		public static void CLEAR_AREA(Vector3 vec, float radius, int flag) => Function.Call(0x3B882A96EA77D5B1, vec.X, vec.Y, vec.Z, radius, flag);
		public static void _CLEAR_VOLUME_AREA(int volume, int flag) => Function.Call(0x2FCD528A397E5C88, volume, flag);
		public static void CLEAR_ANGLED_AREA_OF_VEHICLES(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xA4D83115C1E02F8A, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void SET_CREDITS_ACTIVE(bool toggle) => Function.Call(0xD37BECF862DA726F, toggle);
		public static void NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME() => Function.Call(0x3D0EAC6385DD6100);
		public static void PAUSE_DEATH_ARREST_RESTART(bool toggle) => Function.Call(0x66AB6B6C7E72F393, toggle);
		public static void IGNORE_NEXT_RESTART(bool toggle) => Function.Call(0x6C9FF40FF1B69F8F, toggle);
		/// <summary>
		/// Sets whether the game should fade in after the player dies or is arrested.
		/// </summary>
		public static void SET_FADE_IN_AFTER_DEATH_ARREST(bool toggle) => Function.Call(0xDF3B5846DE5904AF, toggle);
		public static void SET_FADE_IN_AFTER_LOAD(bool toggle) => Function.Call(0xAC806C4CAB973517, toggle);
		public static bool OVERRIDE_SAVE_HOUSE(bool p0, float p1, float p2, float p3, float p4, bool p5, float p6, float p7) => Function.Call<bool>(0xB2C69E11A37B5AF0, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, uint weaponHash, int ownerPed, bool isAudible, bool isInvisible, float speed, bool p13) => Function.Call(0x867654CBC7606F2C, x1, y1, z1, x2, y2, z2, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, p13);
		public static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(Vector3 vec1, Vector3 vec2, int damage, bool p7, uint weaponHash, int ownerPed, bool isAudible, bool isInvisible, float speed, bool p13) => Function.Call(0x867654CBC7606F2C, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, damage, p7, weaponHash, ownerPed, isAudible, isInvisible, speed, p13);
		public static void FIRE_SINGLE_BULLET(Any* args) => Function.Call(0xCBC9A21F6A2A679C, args);
		public static void GET_MODEL_DIMENSIONS(uint modelHash, Vector3* minimum, Vector3* maximum) => Function.Call(0xDCB8DDD5D054A7E7, modelHash, minimum, maximum);
		public static bool IS_BIT_SET(int address, int offset) => Function.Call<bool>(0x4ED6CFDFE8D4131A, address, offset);
		public static void _0x0A487CC74A517FB5(Any p0) => Function.Call(0x0A487CC74A517FB5, p0);
		public static bool IS_MINIGAME_IN_PROGRESS() => Function.Call<bool>(0xF4D8BCD052E7EA1B);
		/// <summary>
		/// Returns whether the game's measurement system is set to metric.
		/// </summary>
		public static bool SHOULD_USE_METRIC_MEASUREMENTS() => Function.Call<bool>(0x4FB556ACEFA93098);
		/// <summary>
		/// Same as SHOULD_USE_METRIC_MEASUREMENTS
		/// </summary>
		public static bool _SHOULD_USE_METRIC_MEASUREMENTS_2() => Function.Call<bool>(0x58BCDC75BA52110A);
		public static bool _SHOULD_USE_METRIC_TEMPERATURE() => Function.Call<bool>(0xFF4AAF3275BAAB4F);
		public static bool _SHOULD_USE_METRIC_WEIGHT() => Function.Call<bool>(0x8F24157FEDB85EA2);
		public static bool _SHOULD_USE_24_HOUR_CLOCK() => Function.Call<bool>(0x0177CF20345F44DD);
		public static int COMPARE_STRINGS(string str1, string str2, bool matchCase, int maxLength) => Function.Call<int>(0xBFBB74A15EFC149B, str1, str2, matchCase, maxLength);
		public static int ABSI(int value) => Function.Call<int>(0x0C214D5B8A38C828, value);
		public static float ABSF(float value) => Function.Call<float>(0x134549B388167CBF, value);
		/// <summary>
		/// Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
		/// 
		/// ownedByPlayer = only projectiles fired by the player will be detected.
		/// </summary>
		public static bool IS_PROJECTILE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer) => Function.Call<bool>(0x05B0061EFDFC8941, x1, y1, z1, x2, y2, z2, ownedByPlayer);
		public static bool IS_PROJECTILE_IN_AREA(Vector3 vec1, Vector3 vec2, bool ownedByPlayer) => Function.Call<bool>(0x05B0061EFDFC8941, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, ownedByPlayer);
		/// <summary>
		/// Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a rectangle.
		/// </summary>
		public static bool IS_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, int type, bool p7) => Function.Call<bool>(0x04965FB9E14235C7, x1, y1, z1, x2, y2, z2, type, p7);
		public static bool IS_PROJECTILE_TYPE_IN_AREA(Vector3 vec1, Vector3 vec2, int type, bool p7) => Function.Call<bool>(0x04965FB9E14235C7, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, type, p7);
		public static bool IS_PROJECTILE_TYPE_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, bool p8) => Function.Call<bool>(0x928431F4133CD3D4, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static bool IS_PROJECTILE_TYPE_WITHIN_DISTANCE(float p0, float p1, float p2, Any p3, float p4, bool p5) => Function.Call<bool>(0xF51C9BAAD9ED64C4, p0, p1, p2, p3, p4, p5);
		public static bool GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(int ped, uint weaponHash, float distance, Vector3* outCoords, bool p4, bool mustBeOwnedByThisPed) => Function.Call<bool>(0xD73C960A681052DF, ped, weaponHash, distance, outCoords, p4, mustBeOwnedByThisPed);
		public static bool GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(int ped, uint weaponHash, float distance, Vector3* outCoords, int* outProjectile, bool p5, bool mustBeOwnedByThisPed) => Function.Call<bool>(0x9578986A6105A6AD, ped, weaponHash, distance, outCoords, outProjectile, p5, mustBeOwnedByThisPed);
		public static bool IS_BULLET_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, bool p7) => Function.Call<bool>(0x9D09D8493747CF02, p0, p1, p2, p3, p4, p5, p6, p7);
		public static bool IS_BULLET_IN_AREA(float p0, float p1, float p2, float p3, bool p4) => Function.Call<bool>(0xC652FD308772D79E, p0, p1, p2, p3, p4);
		public static bool IS_BULLET_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, bool p6) => Function.Call<bool>(0xC128137C52152741, p0, p1, p2, p3, p4, p5, p6);
		/// <summary>
		/// p3 - possibly radius?
		/// </summary>
		public static bool HAS_BULLET_IMPACTED_IN_AREA(float x, float y, float z, float p3, bool p4, bool p5) => Function.Call<bool>(0xC153E5BCCF411814, x, y, z, p3, p4, p5);
		public static bool HAS_BULLET_IMPACTED_IN_AREA(Vector3 vec, float p3, bool p4, bool p5) => Function.Call<bool>(0xC153E5BCCF411814, vec.X, vec.Y, vec.Z, p3, p4, p5);
		public static bool HAS_BULLET_IMPACTED_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7) => Function.Call<bool>(0x3B6A4C05FB2B33AC, p0, p1, p2, p3, p4, p5, p6, p7);
		public static Any _0x7A76104CC2CC69E8(int entity, int p1, int p2) => Function.Call<Any>(0x7A76104CC2CC69E8, entity, p1, p2);
		public static Any _0xDC416CA762BC4F43(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0xDC416CA762BC4F43, p0, p1, p2, p3, p4, p5);
		public static Any _0x970339EFA4FDE518(Any p0, Any p1, Any p2) => Function.Call<Any>(0x970339EFA4FDE518, p0, p1, p2);
		/// <summary>
		/// Hardcoded to return false.
		/// Checks for PS4 Game Build.
		/// </summary>
		public static bool IS_ORBIS_VERSION() => Function.Call<bool>(0x88CFAE250D3E0C71);
		/// <summary>
		/// Hardcoded to return false.
		/// Checks for XBOXONE Game Build.
		/// </summary>
		public static bool IS_DURANGO_VERSION() => Function.Call<bool>(0xD1CCC2A2639D325F);
		/// <summary>
		/// Hardcoded to return true.
		/// </summary>
		public static bool IS_PC_VERSION() => Function.Call<bool>(0xB0FB6CFAA5A1C833);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool IS_STADIA_VERSION() => Function.Call<bool>(0x268AB8420A9E4ED7);
		public static bool IS_STRING_NULL(string _string) => Function.Call<bool>(0x602102324604D96B, _string);
		public static bool IS_STRING_NULL_OR_EMPTY(string _string) => Function.Call<bool>(0x2CF12F9ACF18F048, _string);
		/// <summary>
		/// Returns true if the entire string consists only of space characters.
		/// </summary>
		public static bool IS_STRING_NULL_OR_EMPTY_OR_SPACES(string _string) => Function.Call<bool>(0x375F5870A7B8BEC1, _string);
		public static bool ARE_STRINGS_EQUAL(string string1, string string2) => Function.Call<bool>(0xD3852F22AB713A1F, string1, string2);
		public static bool _DOES_STRING_EXIST_IN_STRING(string string1, string string2) => Function.Call<bool>(0x9382D5D43D2AA6FF, string1, string2);
		public static void _0x3C3C7B1B5EC08764() => Function.Call(0x3C3C7B1B5EC08764);
		public static Any _0x94E8CA3DEE952789(Any p0, Any p1) => Function.Call<Any>(0x94E8CA3DEE952789, p0, p1);
		public static Any _0x5B4A8121A47D844D(Any p0) => Function.Call<Any>(0x5B4A8121A47D844D, p0);
		/// <summary>
		/// Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
		/// </summary>
		public static bool STRING_TO_INT(string _string, int* outInteger) => Function.Call<bool>(0xF2DD2298B3AF23E2, _string, outInteger);
		/// <summary>
		/// Note: the buffer should be exactly 32 bytes long
		/// </summary>
		public static void _INT_TO_STRING(int value, string format, string buffer) => Function.Call(0xCF11C0CEB40C401B, value, format, buffer);
		public static void _0x74ACA66484CEBAF0(Any p0) => Function.Call(0x74ACA66484CEBAF0, p0);
		public static void _0x49C44FE78A135A1D(Any p0) => Function.Call(0x49C44FE78A135A1D, p0);
		public static void _0xF650DCF5D6F312C1(Any p0) => Function.Call(0xF650DCF5D6F312C1, p0);
		public static string _GET_STRING_FROM_FLOAT(float value, int digits) => Function.Call<string>(0x2B6846401D68E563, value, digits);
		public static string _GET_STRING_FROM_VECTOR(float x, float y, float z) => Function.Call<string>(0x6C4DBF553885F9EB, x, y, z);
		public static string _GET_STRING_FROM_VECTOR(Vector3 vec) => Function.Call<string>(0x6C4DBF553885F9EB, vec.X, vec.Y, vec.Z);
		public static string _GET_STRING_FROM_BOOL(bool value) => Function.Call<string>(0xF216F74101968DB0, value);
		/// <summary>
		/// Note: The first bit in 'flags' must not be set.
		/// It is also required to pass at least one extra argument (this must be a text label string or hash).
		/// When passing a hash, flags should be 0.
		/// </summary>
		public static string VAR_STRING(int flags, params InputArgument[] args) => Function.Call<string>(0xFA925AC00EB830B9, flags, args);
		/// <summary>
		/// Returns a formatted string (0x%x)
		/// </summary>
		public static string _CREATE_COLOR_STRING(int rgb) => Function.Call<string>(0xBCC2CFADEA1AEA6C, rgb);
		public static void SET_BITS_IN_RANGE(int* var, int rangeStart, int rangeEnd, int p3) => Function.Call(0x324DC1CEF57F31E6, var, rangeStart, rangeEnd, p3);
		public static int GET_BITS_IN_RANGE(int var, int rangeStart, int rangeEnd) => Function.Call<int>(0x68E1352AF48F905D, var, rangeStart, rangeEnd);
		/// <summary>
		/// Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused.
		/// </summary>
		public static void SET_GAME_PAUSED(bool toggle) => Function.Call(0xFAEC088D28B1DE4A, toggle);
		public static void SET_THIS_SCRIPT_CAN_BE_PAUSED(bool toggle) => Function.Call(0x3215376E79F6EA18, toggle);
		public static void SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(bool toggle) => Function.Call(0x8ABD939C2E5D00ED, toggle);
		/// <summary>
		/// Cheats are GTA IV cheats:
		/// 
		/// 0 = unknown
		/// 1 = unknown (same as 0)
		/// 2 = Max Health and Armor
		/// 3 = Raise Wanted Level
		/// 4 = Lower Wanted Level
		/// 5 = unknown (does nothing)
		/// 6 = Change Weather
		/// 7 = Spawn Annihilator
		/// 8 = Spawn NRG 900
		/// 9 = Spawn FBI
		/// 10 = Spawn Jetmax
		/// 11 = Spawn Comet
		/// 12 = Spawn Turismo
		/// 13 = Spawn Cognoscenti
		/// 14 = Spawn Super GT
		/// 15 = Spawn Sanchez
		/// 
		/// Initially used in Max Payne 3, that's why we know the name.
		/// </summary>
		public static void SET_CHEAT_ACTIVE(int cheatId) => Function.Call(0xD4958E8CF0DE0DD0, cheatId);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xB711EB4BC8D06013() => Function.Call(0xB711EB4BC8D06013);
		/// <summary>
		/// spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
		/// </summary>
		public static void POPULATE_NOW() => Function.Call(0xEA6DC3A8ADD2005F);
		public static bool IS_GAME_SESSION_STATE_MACHINE_IDLE() => Function.Call<bool>(0xF9E7DBB39080640B);
		/// <summary>
		/// p0 must be < 2
		/// </summary>
		public static bool _QUEUE_SAVEGAME_OPERATION(int p0) => Function.Call<bool>(0x279B0696DA4657EB, p0);
		/// <summary>
		/// Only 0 and 1 are valid for p0, higher values causes the native to return 2.
		/// </summary>
		public static int _GET_STATUS_OF_SAVEGAME_OPERATION(int p0) => Function.Call<int>(0x1B065A2BF7953815, p0);
		public static Any _0x6C7B68D3CE60E8DE(Any p0) => Function.Call<Any>(0x6C7B68D3CE60E8DE, p0);
		public static Any _0x627B68D9CE6EE8DE(Any p0) => Function.Call<Any>(0x627B68D9CE6EE8DE, p0);
		public static Any _0x7CF96F1250EF3221(Any p0) => Function.Call<Any>(0x7CF96F1250EF3221, p0);
		/// <summary>
		/// Old name: _COPY_MEMORY
		/// </summary>
		public static void COPY_SCRIPT_STRUCT(Any* dst, Any* src, int size) => Function.Call(0xF7AC7DC0DEE7C9BE, dst, src, size);
		/// <summary>
		/// enum DispatchType
		/// {
		/// 	DT_Invalid,
		/// 	DT_PoliceAutomobile,
		/// 	DT_PoliceHelicopter,
		/// 	DT_FireDepartment,
		/// 	DT_SwatAutomobile,
		/// 	DT_AmbulanceDepartment,
		/// 	DT_PoliceRiders,
		/// 	DT_PoliceVehicleRequest,
		/// 	DT_PoliceRoadBlock,
		/// 	DT_PoliceAutomobileWaitPulledOver,
		/// 	DT_PoliceAutomobileWaitCruising,
		/// 	DT_Gangs,
		/// 	DT_SwatHelicopter,
		/// 	DT_PoliceBoat,
		/// 	DT_ArmyVehicle,
		/// 	DT_OnFoot,
		/// 	DT_PoliceDogs
		/// };
		/// </summary>
		public static void ENABLE_DISPATCH_SERVICE(int dispatchService, bool toggle) => Function.Call(0x50E52637EF70EF77, dispatchService, toggle);
		/// <summary>
		/// dispatchService: see ENABLE_DISPATCH_SERVICE
		/// </summary>
		public static void BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(int dispatchService, bool toggle) => Function.Call(0x66947E61A44DE2C6, dispatchService, toggle);
		/// <summary>
		/// dispatchService: see ENABLE_DISPATCH_SERVICE
		/// </summary>
		public static bool CREATE_INCIDENT(int dispatchService, float x, float y, float z, int numUnits, float radius, int* outIncidentID, Any p7, Any p8) => Function.Call<bool>(0x3F892CAF67444AE7, dispatchService, x, y, z, numUnits, radius, outIncidentID, p7, p8);
		public static bool CREATE_INCIDENT(int dispatchService, Vector3 vec, int numUnits, float radius, int* outIncidentID, Any p7, Any p8) => Function.Call<bool>(0x3F892CAF67444AE7, dispatchService, vec.X, vec.Y, vec.Z, numUnits, radius, outIncidentID, p7, p8);
		/// <summary>
		/// dispatchService: see ENABLE_DISPATCH_SERVICE
		/// 
		/// The entities must be added to itemSet.
		/// </summary>
		public static bool _CREATE_INCIDENT_WITH_ENTITIES(int dispatchService, float x, float y, float z, int itemSet, float radius, int* outIncidentID) => Function.Call<bool>(0xAB3D3F45436DB1D8, dispatchService, x, y, z, itemSet, radius, outIncidentID);
		public static bool _CREATE_INCIDENT_WITH_ENTITIES(int dispatchService, Vector3 vec, int itemSet, float radius, int* outIncidentID) => Function.Call<bool>(0xAB3D3F45436DB1D8, dispatchService, vec.X, vec.Y, vec.Z, itemSet, radius, outIncidentID);
		/// <summary>
		/// Delete an incident with a given id.
		/// </summary>
		public static void DELETE_INCIDENT(int incidentId) => Function.Call(0x5CFD0F0D6AAE0AEE, incidentId);
		public static bool IS_INCIDENT_VALID(int incidentId) => Function.Call<bool>(0x39F2B1BAD412246A, incidentId);
		public static void _SET_INCIDENT_UNK(int incidentId) => Function.Call(0x9617B6E5F6537B63, incidentId);
		public static int ADD_POP_MULTIPLIER_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float pedDensity, float trafficDensity, bool p8, bool p9) => Function.Call<int>(0x5EBDA1A3B8CB5EF7, x1, y1, z1, x2, y2, z2, pedDensity, trafficDensity, p8, p9);
		public static int ADD_POP_MULTIPLIER_AREA(Vector3 vec1, Vector3 vec2, float pedDensity, float trafficDensity, bool p8, bool p9) => Function.Call<int>(0x5EBDA1A3B8CB5EF7, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, pedDensity, trafficDensity, p8, p9);
		public static bool DOES_POP_MULTIPLIER_AREA_EXIST(int id) => Function.Call<bool>(0x03BA619C81A646B3, id);
		public static void REMOVE_POP_MULTIPLIER_AREA(int id, bool p1) => Function.Call(0x88CB484364EFB37A, id, p1);
		/// <summary>
		/// Only used in script function PROCESS_ZONE_CREATION
		/// Returns Pop multiplier volume ID
		/// </summary>
		public static int _ADD_POP_MULTIPLIER_VOLUME(int volume, float pedDensity, float vehicleDensity, bool p3, bool p4) => Function.Call<int>(0x3233C4EC0514C7EC, volume, pedDensity, vehicleDensity, p3, p4);
		public static bool _DOES_POP_MULTIPLIER_AREA_EXIST_FOR_VOLUME(int volume) => Function.Call<bool>(0x39D6DACE323A20B6, volume);
		public static void _REMOVE_POP_MULTIPLIER_AREA_FOR_VOLUME(int volume, int p1) => Function.Call(0xBD090F5B1DB82189, volume, p1);
		public static void _0xF569E33FB72ED28E() => Function.Call(0xF569E33FB72ED28E);
		public static void RESET_DISPATCH_IDEAL_SPAWN_DISTANCE() => Function.Call(0xC7817264BC4B6377);
		public static void SET_DISPATCH_IDEAL_SPAWN_DISTANCE(float fIdealSpawnDistance) => Function.Call(0xEAB6823B82FBD283, fIdealSpawnDistance);
		public static void _RESET_DISPATCH_MIN_SPAWN_DISTANCE() => Function.Call(0x96498D922D8D0D0A);
		public static void _SET_DISPATCH_MIN_SPAWN_DISTANCE(float minSpawnDistance) => Function.Call(0x27A1B170AA8AF84C, minSpawnDistance);
		public static void _RESET_DISPATCH_MAX_SPAWN_DISTANCE() => Function.Call(0x54EC7B6BC72BAD69);
		public static void _SET_DISPATCH_MAX_SPAWN_DISTANCE(float maxSpawnDistance) => Function.Call(0x89314FB3463E28DE, maxSpawnDistance);
		public static void _0x4B0501A468B749F8() => Function.Call(0x4B0501A468B749F8);
		/// <summary>
		/// _SET_DISPATCH_*, unused
		/// </summary>
		public static void _0x6BCF7B5CD338281A(Any p0, Any p1, Any p2) => Function.Call(0x6BCF7B5CD338281A, p0, p1, p2);
		public static Any _ADD_DISPATCH_SPAWN_BLOCKING_AREA(int volume) => Function.Call<Any>(0xA2D5A26208421426, volume);
		public static void REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(Any p0) => Function.Call(0x49F751F6868DDC5B, p0);
		public static void RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN() => Function.Call(0xEF42F56F69877125);
		/// <summary>
		/// Params: p3 is 0 in R* Script utopia2
		/// </summary>
		public static void ADD_TACTICAL_NAV_MESH_POINT(float x, float y, float z, int p3) => Function.Call(0xE4EE55E63FA9AF45, x, y, z, p3);
		public static void ADD_TACTICAL_NAV_MESH_POINT(Vector3 vec, int p3) => Function.Call(0xE4EE55E63FA9AF45, vec.X, vec.Y, vec.Z, p3);
		public static void CLEAR_TACTICAL_NAV_MESH_POINTS() => Function.Call(0xD93B6516C6878267);
		/// <summary>
		/// enum eOnscreenKeyboardTextType
		/// {
		/// 	KTEXTTYPE_INVALID = -1,
		/// 	KTEXTTYPE_DEFAULT,
		/// 	KTEXTTYPE_EMAIL,
		/// 	KTEXTTYPE_PASSWORD,
		/// 	KTEXTTYPE_NUMERIC,
		/// 	KTEXTTYPE_ALPHABET,
		/// 	KTEXTTYPE_GAMERTAG,
		/// 	KTEXTTYPE_FILENAME,
		/// 	KTEXTTYPE_COUNT
		/// };
		/// </summary>
		public static void DISPLAY_ONSCREEN_KEYBOARD(int textType, string windowTitle, string p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, int maxInputLength) => Function.Call(0x044131118D8DB3CD, textType, windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3, maxInputLength);
		/// <summary>
		/// Returns the current status of the onscreen keyboard, and updates the output.
		/// 
		/// Status Codes:
		/// 
		/// 0 - User still editing
		/// 1 - User has finished editing
		/// 2 - User has canceled editing
		/// 3 - Keyboard isn't active
		/// </summary>
		public static int UPDATE_ONSCREEN_KEYBOARD() => Function.Call<int>(0x37DF360F235A3893);
		/// <summary>
		/// Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
		/// </summary>
		public static string GET_ONSCREEN_KEYBOARD_RESULT() => Function.Call<string>(0xAFB4CF58A4A292B1);
		/// <summary>
		/// Old name: _CANCEL_ONSCREEN_KEYBOARD
		/// </summary>
		public static void CANCEL_ONSCREEN_KEYBOARD() => Function.Call(0x58A39BE597CE99CD);
		public static void NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(int p0) => Function.Call(0x5CB71EAA1429A358, p0);
		/// <summary>
		/// Appears to remove stealth kill action from memory (?)
		/// </summary>
		public static void ACTION_MANAGER_ENABLE_ACTION(uint hash, bool enable) => Function.Call(0x7ACF124C12A2B045, hash, enable);
		public static bool ACTION_MANAGER_IS_ACTION_ENABLED(uint hash) => Function.Call<bool>(0xFD0759658268FD8E, hash);
		/// <summary>
		/// Returns GET_GAME_TIMER() / 1000
		/// Only used in rcm_pearson1.ysc
		/// </summary>
		public static int GET_REAL_WORLD_TIME() => Function.Call<int>(0x2E036F0480B8BF02);
		public static void SET_SUPER_JUMP_THIS_FRAME(int player) => Function.Call(0xB3E9BE963F10C445, player);
		public static void SCRIPT_RACE_INIT(int numCheckpoints, int numLaps, int numPlayers, Any p3) => Function.Call(0x8AE059F47158417E, numCheckpoints, numLaps, numPlayers, p3);
		public static void SCRIPT_RACE_SHUTDOWN() => Function.Call(0x334CE0DA4FAF330C);
		public static void SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(int part, int checkpoint, int lap, int time) => Function.Call(0xBA62B4D80FA66BD6, part, checkpoint, lap, time);
		public static bool SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(Any p0, Any* p1, Any* p2) => Function.Call<bool>(0x769E848C66E3C2BB, p0, p1, p2);
		/// <summary>
		/// Begins with START_*. Next character in the name is either D or E.
		/// 
		/// Old name: _START_BENCHMARK_RECORDING
		/// </summary>
		public static void START_END_USER_BENCHMARK() => Function.Call(0x29D1F6DF864A094E);
		/// <summary>
		/// Begins with STOP_*. Next character in the name is either D or E.
		/// 
		/// Old name: _STOP_BENCHMARK_RECORDING
		/// </summary>
		public static void STOP_END_USER_BENCHMARK() => Function.Call(0xB89AEC71AFF2B599);
		/// <summary>
		/// Begins with RESET_*. Next character in the name is either D or E.
		/// 
		/// Old name: _RESET_BENCHMARK_RECORDING
		/// </summary>
		public static void RESET_END_USER_BENCHMARK() => Function.Call(0xECBABD0307FB216F);
		/// <summary>
		/// Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\Red Dead Redemption 2\Benchmarks and submits some metrics.
		/// 
		/// Old name: _SAVE_BENCHMARK_RECORDING
		/// </summary>
		public static void SAVE_END_USER_BENCHMARK() => Function.Call(0xF4743E2ECC02B3DA);
		/// <summary>
		/// Hardcoded to return false.
		/// 
		/// Old name: _UI_IS_SINGLEPLAYER_PAUSE_MENU_ACTIVE
		/// </summary>
		public static bool UI_STARTED_END_USER_BENCHMARK() => Function.Call<bool>(0x4FFA0386A6216113);
		/// <summary>
		/// Returns value of the '-benchmarkIterations' command line option.
		/// 
		/// Old name: _GET_BENCHMARK_ITERATIONS_FROM_COMMAND_LINE
		/// </summary>
		public static int GET_BENCHMARK_ITERATIONS() => Function.Call<int>(0x22FC52CF470CC98D);
		/// <summary>
		/// Returns value of the '-benchmarkPass' command line option.
		/// 
		/// Old name: _GET_BENCHMARK_PASS_FROM_COMMAND_LINE
		/// </summary>
		public static int GET_BENCHMARK_PASS() => Function.Call<int>(0x9297DACF3A2CDFF7);
		/// <summary>
		/// Hardcoded to return one/true.
		/// </summary>
		public static Any _0xDC057B86FC157031() => Function.Call<Any>(0xDC057B86FC157031);
		public static void _0x9A252AA23D7098F2() => Function.Call(0x9A252AA23D7098F2);
		public static bool _DOES_ITEM_HAVE_VALID_BASE(int item) => Function.Call<bool>(0xBDC6E364C9C78178, item);
		/// <summary>
		/// 0 = invalid
		/// 1 = CEntity
		/// 2 = rage::volBase
		/// 3 = rage::volSphere
		/// 4 = rage::volBox
		/// 5 = rage::volAggregate
		/// 6 = rage::volCylinder
		/// 7 = CScriptedCoverPoint
		/// 8 = rage::ptfxScriptInfo
		/// 9 = CPed
		/// 10 = CVehicle
		/// 11 = CObject
		/// 12 = CItemSet
		/// 13 = CPersistentCharacter
		/// </summary>
		public static int _GET_ITEM_TYPE(int handle) => Function.Call<int>(0xDC8D2FF478DF9553, handle);
		public static bool _IS_BASE_A_PERSISTENT_CHARACTER(int handle) => Function.Call<bool>(0x716F17F8A0419F95, handle);
		public static bool _IS_BASE_A_COVER_POINT(int handle) => Function.Call<bool>(0xFEC1D4B5C82C176F, handle);
		/// <summary>
		/// UPDATE_PICKUP_COLLECTIBLE: set Eagle Eye fountain
		/// _J*, _K*, _L*
		/// </summary>
		public static void _0x553D67295DDD2309(int entity) => Function.Call(0x553D67295DDD2309, entity);
		public static Any _0xF18AF483DF70BBDE(Any p0) => Function.Call<Any>(0xF18AF483DF70BBDE, p0);
		public static int _GET_ENTITY_FROM_ITEM(int item) => Function.Call<int>(0xEE04C0AFD4EFAF0E, item);
		public static int _GET_PED_FROM_INDEXED_ITEM(int item) => Function.Call<int>(0x3FFB15534067DCD4, item);
		public static int _GET_VEHICLE_FROM_INDEXED_ITEM(int item) => Function.Call<int>(0xE578C8AE173719B3, item);
		public static int _GET_OBJECT_FROM_INDEXED_ITEM(int item) => Function.Call<int>(0x18013392501CE5DC, item);
		public static Any _0x33982467B1E349EF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0x33982467B1E349EF, p0, p1, p2, p3, p4, p5, p6);
		public static Any _0x8314FC2013ECE2DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0x8314FC2013ECE2DA, p0, p1, p2);
		public static void _0x4D5C9CC7E7E23E09() => Function.Call(0x4D5C9CC7E7E23E09);
		/// <summary>
		/// p3 is usually the same value of radius
		/// p8 determines whether the ILO prompt is a lock on prompt with RMB
		/// </summary>
		public static bool REGISTER_INTERACTION_LOCKON_PROMPT(int entity, string text, float radius, float p3, int flag, float p5, float p6, int prompt, bool p8, int p9) => Function.Call<bool>(0x870708A6E147A9AD, entity, text, radius, p3, flag, p5, p6, prompt, p8, p9);
		public static bool UNREGISTER_INTERACTION_LOCKON_PROMPT(int entity) => Function.Call<bool>(0xE98D55C5983F2509, entity);
		public static void _0xFC6ECB9170145ECE() => Function.Call(0xFC6ECB9170145ECE);
		public static Any _0x35165C658077CD0B() => Function.Call<Any>(0x35165C658077CD0B);
		public static bool _0x4B101DBCC9482F2D(int ped) => Function.Call<bool>(0x4B101DBCC9482F2D, ped);
		public static bool _IS_MISSION_CREATOR_ACTIVE() => Function.Call<bool>(0xF236C84C6ADFCB2F);
		public static void _0xA3A8926951471C82() => Function.Call(0xA3A8926951471C82);
		/// <summary>
		/// aiMemoryType: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/_CREATE_AI_MEMORY
		/// </summary>
		public static void _CREATE_AI_MEMORY(Any* args, int aiMemoryType) => Function.Call(0x88BC5F4AEF77FC4E, args, aiMemoryType);
		public static bool _GET_AI_PED_DOES_HAVE_EVENT_MEMORY(Any* args, int p1) => Function.Call<bool>(0xFDF38E2B711BF78E, args, p1);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void _0xEB946B9E579729AD(int ped, Any p1) => Function.Call(0xEB946B9E579729AD, ped, p1);
		/// <summary>
		/// Used in CAIConditionAmbientAIMemoryReactionsEnabled
		/// </summary>
		public static void _SET_AI_MEMORY_REACTIONS_ENABLED(bool enabled) => Function.Call(0x6AC4AF46A6B8DFB2, enabled);
		public static Any _0x8DB104CCEBCD58C5(Any p0, Any p1) => Function.Call<Any>(0x8DB104CCEBCD58C5, p0, p1);
		public static void _0x68319452C5064ABA(Any p0, Any p1) => Function.Call(0x68319452C5064ABA, p0, p1);
		public static void _0xDE2C3B74D2B3705C(Any p0, Any p1) => Function.Call(0xDE2C3B74D2B3705C, p0, p1);
		public static void _0x49F3241C28EBBFBC(Any p0) => Function.Call(0x49F3241C28EBBFBC, p0);
		public static void _0x183672FE838A661B(Any p0) => Function.Call(0x183672FE838A661B, p0);
		public static void _0x38C0C9CAE1544500(Any p0) => Function.Call(0x38C0C9CAE1544500, p0);
		public static void _0x154340E87D8CC178(Any p0) => Function.Call(0x154340E87D8CC178, p0);
		public static void _0x94FCADCF9F0C368E(Any p0) => Function.Call(0x94FCADCF9F0C368E, p0);
		public static Any _0x0D0AE5081F88CFE1(Any p0) => Function.Call<Any>(0x0D0AE5081F88CFE1, p0);
		public static void _0xAF3A84C7DE6A1DC5(Any p0, Any p1) => Function.Call(0xAF3A84C7DE6A1DC5, p0, p1);
		public static void _LOOT_TABLES_GET_INFO(int ped, bool p1, bool p2, uint lootTableKey, Any* p4, Any p5) => Function.Call(0x48E4D50F87A96AA5, ped, p1, p2, lootTableKey, p4, p5);
		public static Any _0xB1F6665AA54DCD5C(Any p0) => Function.Call<Any>(0xB1F6665AA54DCD5C, p0);
		public static Any _0x8BB99B85444544D9(Any p0, Any p1) => Function.Call<Any>(0x8BB99B85444544D9, p0, p1);
		public static Any _0x6F02B5E50511721E(Any p0) => Function.Call<Any>(0x6F02B5E50511721E, p0);
		public static Any _0xCC1BAF72D571DB8D(Any p0, Any p1, Any p2) => Function.Call<Any>(0xCC1BAF72D571DB8D, p0, p1, p2);
		public static bool _IS_PED_DECOMPOSED(int ped) => Function.Call<bool>(0x5170DDA6D63ACAAA, ped);
		public static void SET_PED_DECOMPOSED(int ped, bool toggle) => Function.Call(0x674B90BE1115846D, ped, toggle);
		public static void _0xAB26DEEE120FD3FD(Any p0, Any p1) => Function.Call(0xAB26DEEE120FD3FD, p0, p1);
		public static void _0x082C043C7AFC3747(int compositeId, bool p1) => Function.Call(0x082C043C7AFC3747, compositeId, p1);
		public static void DISABLE_LOOTING_COMPOSITE_LOOTABLE_THIS_FRAME(int compositeId, bool p1) => Function.Call(0x40D72189F46D2E15, compositeId, p1);
		public static void _0xBB282CF5D2333FB8(Any p0, Any p1) => Function.Call(0xBB282CF5D2333FB8, p0, p1);
		public static void _0xAD44856A1CD29635(Any p0, Any p1, Any p2) => Function.Call(0xAD44856A1CD29635, p0, p1, p2);
		public static Any _0x38C2BF94D15F464D(Any p0) => Function.Call<Any>(0x38C2BF94D15F464D, p0);
		public static void _0x3A87FDA8F1B6CDFB(Any p0, Any p1, Any p2) => Function.Call(0x3A87FDA8F1B6CDFB, p0, p1, p2);
		public static void _0x4647842FE8F31C1E(Any p0, Any p1) => Function.Call(0x4647842FE8F31C1E, p0, p1);
		/// <summary>
		/// Event names in the scripts: MGBegin, MGEnd, ReadyForCut
		/// </summary>
		public static bool _GET_LOOTING_EVENT_HAS_FIRED(int ped, string eventName) => Function.Call<bool>(0xF9B91C5129EABC08, ped, eventName);
		public static void _SET_LOOT_PELT_SATCHEL_ITEM(int ped, Any item) => Function.Call(0x9B47971234169990, ped, item);
		public static void _0x96282005C5C6801F(Any p0, Any p1) => Function.Call(0x96282005C5C6801F, p0, p1);
		public static void _0xF63FA29D4A9ACA86(Any p0, Any p1) => Function.Call(0xF63FA29D4A9ACA86, p0, p1);
		public static void _0x8C0F6A3D7236DEEB(Any p0, Any p1) => Function.Call(0x8C0F6A3D7236DEEB, p0, p1);
		public static void _0x7FA58CED69405F9A(Any p0, Any p1) => Function.Call(0x7FA58CED69405F9A, p0, p1);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static void _0xA08111B053D84B4D(Any p0) => Function.Call(0xA08111B053D84B4D, p0);
		public static bool _IS_GLOBAL_BLOCK_VALID(int index) => Function.Call<bool>(0xACB7E1418A8B6E32, index);
		public static void _SET_GLOBAL_BLOCK_IS_LOADED(int index, bool toggle) => Function.Call(0xE97240065406CB80, index, toggle);
		public static bool GAME_FRAMEWORK_MANAGER_INIT(uint transitionMode) => Function.Call<bool>(0x4CABE596D632E4B0, transitionMode);
		public static void _GAME_FRAMEWORK_MANAGER_SHUTDOWN() => Function.Call(0xAFF2FD8ADD927585);
		public static uint _GAME_FRAMEWORK_MANAGER_GET_MODE() => Function.Call<uint>(0xFAED234C7F53ABEB);
		public static bool _IS_PLAYER_OWNING_STANDALONE_SP() => Function.Call<bool>(0x36040772DF5E59A0);
		public static Any _0x0358B8A41916C613(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x0358B8A41916C613, p0, p1, p2, p3);
		/// <summary>
		/// Note: this native was added in build 1232.56
		/// </summary>
		public static void _SET_GAME_LOGIC_PAUSED() => Function.Call(0x550F05CFFBD63C8C);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void STOP_CURRENT_LOADING_PROGRESS_TIMER() => Function.Call(0xA565FAC215CBC77D);
		public static void _0xDBDA48EC456ED908() => Function.Call(0xDBDA48EC456ED908);
	}

	public unsafe static class MISSIONDATA
	{
		public static bool MISSIONDATA_IS_VALID(Any p0) => Function.Call<bool>(0xE54DC27571D5EDC5, p0);
		public static uint MISSIONDATA_GET_CATAGORY(uint missionId) => Function.Call<uint>(0x57E798B65C45EE17, missionId);
		public static uint MISSIONDATA_GET_TEXTURE_NAME(uint missionId) => Function.Call<uint>(0x57E798B56C45EE15, missionId);
		public static uint MISSIONDATA_GET_TEXTURE_TXD(uint missionId) => Function.Call<uint>(0x57E798B57C45EE16, missionId);
		/// <summary>
		/// see: missions.meta
		/// </summary>
		public static bool MISSIONDATA_WAS_COMPLETED(uint missionId) => Function.Call<bool>(0xE54DC27571D5EDC4, missionId);
		public static int MISSIONDATA_GET_RATING(uint missionId) => Function.Call<int>(0x57E798B54C45EE1A, missionId);
		/// <summary>
		/// MISSION_RATING_INCOMPLETE = 0,
		/// MISSION_RATING_SKIPPED,
		/// MISSION_RATING_COMPLETE,
		/// MISSION_RATING_BRONZE,
		/// MISSION_RATING_SILVER,
		/// MISSION_RATING_GOLD,
		/// </summary>
		public static void _MISSIONDATA_SET_MISSION_RATING(uint missionId, int rating) => Function.Call(0xE824CE7D13FCB300, missionId, rating);
		public static bool MISSIONDATA_IS_REQUIRED_STORY_MISSION(uint missionId) => Function.Call<bool>(0xE824CE7D13FCB35E, missionId);
		/// <summary>
		/// replayState: MISSIONDATA_GET_REPLAY_STATE
		/// </summary>
		public static void _MISSIONDATA_SET_REPLAY_STATE_LOCKED(uint missionId, int replayState) => Function.Call(0xE4E2C581F127A11C, missionId, replayState);
		public static int MISSIONDATA_GET_REPLAY_STATE(Any p0) => Function.Call<int>(0x8C32D86E9556ED86, p0);
		public static void MISSIONDATA_SET_RATING_SCORES(uint missionId, int bronzeScore, int silverScore, int goldScore) => Function.Call(0x12F65317708749A5, missionId, bronzeScore, silverScore, goldScore);
		public static void MISSIONDATA_SET_HIGH_SCORE(uint missionId, int score) => Function.Call(0x3A04F0169DA87A9D, missionId, score);
		public static int MISSIONDATA_GET_HIGH_SCORE(uint missionId) => Function.Call<int>(0x9AABABF8313C3516, missionId);
		public static bool _MISSIONDATA_IS_REPLAY_CATEGORY_LOCKED(uint category) => Function.Call<bool>(0xE145864DECC34219, category);
		public static void MISSIONDATA_SET_REPLAY_LOCKED_FOR_CATEGORY(uint category, bool locked) => Function.Call(0x957A830C9B4B99EA, category, locked);
		public static void _MISSIONDATA_TIMECYCLE_BOX_SET_MODIFIER(string timecycleName) => Function.Call(0x25855B1574BF8CD5, timecycleName);
		public static void _MISSIONDATA_TIMECYCLE_BOX_DELETE() => Function.Call(0x7F89E15A8FB8DE97);
		public static bool _MISSIONDATA_TIMECYCLE_BOX_EXISTS() => Function.Call<bool>(0x7E8F86A4FA33033C);
	}

	public unsafe static class MONEY
	{
		public static int _MONEY_GET_CASH_BALANCE() => Function.Call<int>(0x0C02DABFA3B98176);
		public static bool _MONEY_DECREMENT_CASH_BALANCE(int amount) => Function.Call<bool>(0x466BC8769CF26A7A, amount);
		public static bool _MONEY_INCREMENT_CASH_BALANCE(int amount, uint addReason) => Function.Call<bool>(0xBC3422DC91667621, amount, addReason);
		public static string _NETWORK_GET_STRING_CASH_BALANCE() => Function.Call<string>(0x282D36FF103D78DF);
		public static bool _NETWORK_IS_MONEY_BALANCE_NOT_LESS_THAN(int cashBalance, int goldBarBalance) => Function.Call<bool>(0xAEC5F0119867E457, cashBalance, goldBarBalance);
		public static string _0xA46FD001D1BE896C() => Function.Call<string>(0xA46FD001D1BE896C);
		public static bool _0x07AD9E43FD478527(Any p0, Any p1) => Function.Call<bool>(0x07AD9E43FD478527, p0, p1);
		public static int _NETWORK_GET_CASH_BALANCE() => Function.Call<int>(0x8A67120DBC299525);
	}

	public unsafe static class NETSHOPPING
	{
		public static bool CASHINVENTORY_INIT_SESSION_STATUS(int* p0, int* p1) => Function.Call<bool>(0xC019112F8995DC1C, p0, p1);
		public static bool _CASHINVENTORY_IS_SESSION_READY() => Function.Call<bool>(0xFCC24220FDDAC929);
		public static bool CASHINVENTORY_IS_CONNECTION_FAULTED() => Function.Call<bool>(0x6CE9FB6332B5E46E);
		public static bool _CASHINVENTORY_INIT_SESSION_IS_FAULTED() => Function.Call<bool>(0xD1CE92D1D9BE170A);
		public static bool _CASHINVENTORY_TRANSACTION_FIRE_AND_FORGET_ITEM(uint actionHash, int* id, Any* item, int p3) => Function.Call<bool>(0xFFEA09CCEC4AF32F, actionHash, id, item, p3);
		public static bool _CASHINVENTORY_TRANSACTION_START(int* id, uint type, uint actionHash) => Function.Call<bool>(0xF039EC27F4490E96, id, type, actionHash);
		public static bool _CASHINVENTORY_TRANSACTION_GET_BASKET_IS_VALID(int id) => Function.Call<bool>(0x52A226ADF4A270D2, id);
		public static bool _CASHINVENTORY_TRANSACTION_DELETE(int id) => Function.Call<bool>(0x59EF5D516E2D96B9, id);
		public static int _CASHINVENTORY_TRANSACTION_VALIDATE_ITEM(uint p0, Any* p1) => Function.Call<int>(0x6C9F12700BCE69F4, p0, p1);
		public static int _0x38640A8C2DEF011B(int p0) => Function.Call<int>(0x38640A8C2DEF011B, p0);
		public static bool _0xA3B8D31C13CB4239(int p0, uint p1, Any* p2, int p3, Any* p4, int p5) => Function.Call<bool>(0xA3B8D31C13CB4239, p0, p1, p2, p3, p4, p5);
		public static bool _CASHINVENTORY_TRANSACTION_ADD_AWARD(int id, uint hash, Any* p2, Any* p3) => Function.Call<bool>(0x52BDE32F21BA3B6D, id, hash, p2, p3);
		public static bool _CASHINVENTORY_TRANSACTION_GET_ITEM_INFO(int id, int index, Any* itemInfo) => Function.Call<bool>(0x7616B5F0895C2D99, id, index, itemInfo);
		public static int _CASHINVENTORY_TRANSACTION_GET_NUM_OF_ITEMS(int id) => Function.Call<int>(0xCF2D04D076847478, id);
		public static uint _CASHINVENTORY_TRANSACTION_GET_ACTION(int id) => Function.Call<uint>(0xBD2D520C51CCFF52, id);
		public static bool _CASHINVENTORY_TRANSACTION_CHECKOUT(int id) => Function.Call<bool>(0x592BC00BF6629BE7, id);
		public static bool _CASHINVENTORY_TRANSACTION_CHECKOUT_STATUS(int id, int* status) => Function.Call<bool>(0x26C008791D066F37, id, status);
		public static int _0xB6F4557060EF0FB4(int p0, int p1) => Function.Call<int>(0xB6F4557060EF0FB4, p0, p1);
		public static bool _CASHINVENTORY_TRANSACTION_RESPONSE_GET_ITEM_INFO(int id, int index, Any* itemInfo) => Function.Call<bool>(0x98412398BBE73F61, id, index, itemInfo);
		public static bool _0xCE54C9ABE6FBC6DB(uint p0) => Function.Call<bool>(0xCE54C9ABE6FBC6DB, p0);
		public static bool _0xA0B7094629724974(uint p0, Any p1) => Function.Call<bool>(0xA0B7094629724974, p0, p1);
		public static bool _0x92A32BA29622763F(int id, int index, Any* p2) => Function.Call<bool>(0x92A32BA29622763F, id, index, p2);
		public static bool _0x3FA09DD57B93C0DE(uint p0, int p1, int p2, Any p3, int p4) => Function.Call<bool>(0x3FA09DD57B93C0DE, p0, p1, p2, p3, p4);
		public static bool _0xD1555FBC96C88444(uint p0, int p1, int p2, Any p3, int p4) => Function.Call<bool>(0xD1555FBC96C88444, p0, p1, p2, p3, p4);
	}

	public unsafe static class NETWORK
	{
		public static bool NETWORK_IS_SIGNED_ONLINE() => Function.Call<bool>(0x1077788E268557C2);
		/// <summary>
		/// Hardcoded to return zero.
		/// 
		/// ==== PS4 specific info ====
		/// 
		/// Returns some sort of unavailable reason:
		/// -1 = REASON_INVALID
		///  0 = REASON_OTHER
		///  1 = REASON_SYSTEM_UPDATE
		///  2 = REASON_GAME_UPDATE
		///  3 = REASON_SIGNED_OUT
		///  4 = REASON_AGE
		///  5 = REASON_CONNECTION
		/// 
		/// =================================
		/// </summary>
		public static int NETWORK_GET_NP_UNAVAILABLE_REASON() => Function.Call<int>(0x74FB3E29E6D10FA9);
		/// <summary>
		/// Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
		/// </summary>
		public static bool NETWORK_HAS_VALID_ROS_CREDENTIALS() => Function.Call<bool>(0x85443FF4C328F53B);
		public static bool NETWORK_IS_CLOUD_AVAILABLE() => Function.Call<bool>(0x9A4CF4F48AD77302);
		public static bool NETWORK_HAS_SOCIAL_CLUB_ACCOUNT() => Function.Call<bool>(0x67A5589628E0CFF6);
		/// <summary>
		/// If you are host, returns true else returns false.
		/// </summary>
		public static bool NETWORK_IS_HOST() => Function.Call<bool>(0x8DB296B814EDDA07);
		public static bool NETWORK_HAVE_ONLINE_PRIVILEGES() => Function.Call<bool>(0x25CB5A9F37BFD063);
		public static bool NETWORK_CHECK_USER_CONTENT_PRIVILEGES(int p0) => Function.Call<bool>(0x595F028698072DD9, p0);
		public static bool NETWORK_CHECK_COMMUNICATION_PRIVILEGES(int p0) => Function.Call<bool>(0x83F28CE49FBBFFBA, p0);
		public static bool NETWORK_CAN_VIEW_GAMER_USER_CONTENT(Any* gamerHandle) => Function.Call<bool>(0x246545C37C27A717, gamerHandle);
		public static bool _0xF23A6D6C11D8EC15(Any* gamerHandle) => Function.Call<bool>(0xF23A6D6C11D8EC15, gamerHandle);
		/// <summary>
		/// Stadia only; always returns -1 on other platforms. p0 may be a BOOL.
		/// </summary>
		public static int _0x3E8CCE6769DB5F34(int p0) => Function.Call<int>(0x3E8CCE6769DB5F34, p0);
		public static void NETWORK_SHOW_ACCOUNT_UPGRADE_UI() => Function.Call(0x83FE8D7229593017);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_IS_PROMOTION_ENABLED() => Function.Call<bool>(0x8FF6059DA26E688A);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_IS_CUSTOM_UPSELL_ENABLED() => Function.Call<bool>(0x78A9535AF83715C6);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_SHOULD_SHOW_PROMOTION_DLG() => Function.Call<bool>(0xDA4B1A479C414FB2);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xFC6FCF4C03F1BBF6() => Function.Call(0xFC6FCF4C03F1BBF6);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any _0x160F0CE6D76A39C9() => Function.Call<Any>(0x160F0CE6D76A39C9);
		/// <summary>
		/// Hardcoded to return zero.
		/// </summary>
		public static int NETWORK_GET_PROMOTION_DLG_SEEN_COUNT() => Function.Call<int>(0x2FB53C631A49BE92);
		public static void _0xE5FF65CFF5160752() => Function.Call(0xE5FF65CFF5160752);
		public static bool NETWORK_CAN_ACCESS_MULTIPLAYER(int* loadingState) => Function.Call<bool>(0xAF50DA1A3F8B1BA4, loadingState);
		public static bool NETWORK_CHECK_ACCESS_AND_ALERT_IF_FAIL() => Function.Call<bool>(0x2A8112A974DE1EF6);
		public static int _NETWORK_GET_GLOBAL_ENTITY_FLAGS(int entity) => Function.Call<int>(0xDD7806FD0543BC3D, entity);
		public static void _0xA95470DA137587F5(bool p0) => Function.Call(0xA95470DA137587F5, p0);
		public static Any _0xBB697756309D77EE(bool p0) => Function.Call<Any>(0xBB697756309D77EE, p0);
		public static bool _NETWORK_HAS_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT() => Function.Call<bool>(0xDD73C9838CE7181D);
		public static bool NETWORK_SET_COMPLETED_MP_INTRO_FLOW_ON_CURRENT_SLOT(bool completed) => Function.Call<bool>(0x2C5BD9A43987AA27, completed);
		public static bool _0xD7D0DF27CB1765B5(int p0) => Function.Call<bool>(0xD7D0DF27CB1765B5, p0);
		public static bool NETWORK_SET_MP_MISSION_FLAG_ON_CURRENT_SLOT(bool enabled, int flagIndex) => Function.Call<bool>(0x86FD10251A7118A4, enabled, flagIndex);
		public static void _0x3E74A687A73979C6(bool p0) => Function.Call(0x3E74A687A73979C6, p0);
		/// <summary>
		/// Checks for session flag 'SF_PRIVATE'
		/// </summary>
		public static bool NETWORK_SESSION_IS_PRIVATE() => Function.Call<bool>(0xCEF70AA5B3F89BA1);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _NETWORK_SESSION_GET_SESSION_ID(Any* sessionId) => Function.Call(0xE9B356C330C0A806, sessionId);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static bool _NETWORK_SESSION_ARE_SESSION_IDS_EQUAL(Any* sessionId1, Any* sessionId2) => Function.Call<bool>(0x4DEC5000F7B508F0, sessionId1, sessionId2);
		/// <summary>
		/// flags:
		/// enum eSessionRequestOptionFlags
		/// {
		/// 	SESSION_REQUEST_OPTION_FLAG_INCLUDE_GANG_MEMBERS = (1 << 1),
		/// 	SESSION_REQUEST_OPTION_FLAG_LEADER_KEEPS_GANG = (1 << 7),
		/// };
		/// 
		/// seamlessType:
		/// enum eSeamlessType
		/// {
		/// 	SEAMLESS_TYPE_NORMAL,
		/// 	SEAMLESS_TYPE_PVE,
		/// 	SEAMLESS_TYPE_DEV,
		/// 	SEAMLESS_TYPE_NO_SEAMLESS
		/// };
		/// </summary>
		public static bool NETWORK_REQUEST_SESSION_SEAMLESS(int flags, int seamlessType, Any* sessionRequestId) => Function.Call<bool>(0x04019AE4956D4393, flags, seamlessType, sessionRequestId);
		/// <summary>
		/// Equivalent to NETWORK_REQUEST_SESSION_SEAMLESS if userHash == 0.
		/// Otherwise it is equivalent to NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(flags, MATCHTYPE_SEAMLESS, userHash, 0, sessionRequestId);
		/// 
		/// p1 is unused
		/// </summary>
		public static bool NETWORK_SESSION_REQUEST_SESSION_SEAMLESS(int flags, int seamlessType, int userHash, Any* sessionRequestId) => Function.Call<bool>(0x2989E131FDE37E97, flags, seamlessType, userHash, sessionRequestId);
		/// <summary>
		/// matchType:
		/// enum eMatchType
		/// {
		/// 	MATCHTYPE_DEPRECATED,
		/// 	MATCHTYPE_UGCPLAYLIST,
		/// 	MATCHTYPE_UGCMISSION,
		/// 	MATCHTYPE_MINIGAME,
		/// 	MATCHTYPE_SEAMLESS,
		/// 	MATCHTYPE_PRIVATE_DO_NOT_USE
		/// };
		/// </summary>
		public static bool NETWORK_SESSION_REQUEST_SESSION_COMPETITIVE(int flags, int matchType, int userHash, int p3, Any* sessionRequestId) => Function.Call<bool>(0x309BBEBEA8A3986C, flags, matchType, userHash, p3, sessionRequestId);
		/// <summary>
		/// Session flag 'SF_PRIVATE' is set internally
		/// p1 represents max amount of players in private session
		/// </summary>
		public static bool NETWORK_SESSION_REQUEST_SESSION_PRIVATE(int flags, int numPlayers, int userHash, Any* sessionRequestId) => Function.Call<bool>(0x39A8EF7AF29A192C, flags, numPlayers, userHash, sessionRequestId);
		/// <summary>
		/// category:
		/// enum eOnCallType
		/// {
		/// 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_STORY = 2,
		/// 	NETWORK_SESSION_REQUEST_ON_CALL_TYPE_MATCH = 3
		/// };
		/// </summary>
		public static bool _NETWORK_SESSION_REQUEST_SESSION_ON_CALL(int flags, int category, Any* p2, int userHash, Any* sessionRequestId) => Function.Call<bool>(0x23D9C1F2E4098EDC, flags, category, p2, userHash, sessionRequestId);
		public static bool _NETWORK_SESSION_REQUEST_SESSION_NOMINATED(int flags, int userHash, int p2, Any* sessionRequestId) => Function.Call<bool>(0x4F4672457FF597D1, flags, userHash, p2, sessionRequestId);
		public static bool NETWORK_SESSION_IS_SESSION_REQUEST_ID_VALID(Any* sessionRequestId) => Function.Call<bool>(0x2F54B146D3EDCE4D, sessionRequestId);
		public static int NETWORK_SESSION_GET_SESSION_TYPE() => Function.Call<int>(0xF0C0C94B404206FA);
		public static int _0x1413B6BF27AB7A95() => Function.Call<int>(0x1413B6BF27AB7A95);
		public static bool NETWORK_SESSION_IS_ANY_REQUEST_IN_PROGRESS() => Function.Call<bool>(0xBAFFDE5F953720D9);
		public static bool _0xAFA14F98327791CE(Any* sessionRequestId) => Function.Call<bool>(0xAFA14F98327791CE, sessionRequestId);
		public static bool NETWORK_SESSION_IS_REQUEST_IN_PROGRESS(Any* sessionRequestId) => Function.Call<bool>(0x8FB7C254CFCBF78E, sessionRequestId);
		public static bool _NETWORK_SESSION_IS_REQUEST_IN_PROGRESS_BY_QUEUE_GROUP(int queueGroup) => Function.Call<bool>(0x9E762A595CF88E4A, queueGroup);
		public static bool _NETWORK_SESSION_CANCEL_REQUEST(Any* sessionRequestId) => Function.Call<bool>(0xE72E5C1289BD1F40, sessionRequestId);
		public static void _0xA6F1BAABFF6AD7B9(Any* p0) => Function.Call(0xA6F1BAABFF6AD7B9, p0);
		/// <summary>
		/// Returns result of session request:
		/// 0 - NOT_FOUND
		/// 1 - IN_PROGRESS
		/// 2 - TIMEOUT
		/// 3 - PLAYER_OFFLINE
		/// 4 - GANG_MEMBERS_CHANGED
		/// 5 - PLAYER_CANCELLED
		/// 6 - PLAYER_SET_TOO_LARGE
		/// 7 - MATCH_ACCEPTED
		/// 8 - OTHER
		/// </summary>
		public static int _NETWORK_SESSION_GET_SESSION_REQUEST_RESULT(Any* sessionRequestId, int* p1) => Function.Call<int>(0x0DD051B1BF4B8BD6, sessionRequestId, p1);
		public static bool NETWORK_SESSION_IS_REQUEST_PENDING_TRANSITION(Any* sessionRequestId) => Function.Call<bool>(0xCCF878D50F8AB10D, sessionRequestId);
		public static bool _NETWORK_SESSION_TRANSITION_TO_SESSION(Any* sessionRequestId) => Function.Call<bool>(0xF20B18A330E6DB5C, sessionRequestId);
		public static bool _NETWORK_SESSION_IS_NSRR_SUCCESS(Any* sessionRequestId) => Function.Call<bool>(0x0F44A5C78D114922, sessionRequestId);
		public static bool NETWORK_SESSION_LEFT_QUEUE_OR_REQUESTED_SESSION(Any* sessionRequestId) => Function.Call<bool>(0xECE6A0C1B59CD8BE, sessionRequestId);
		public static bool NETWORK_SESSION_LEAVE_SESSION() => Function.Call<bool>(0x17C21B7319A05047);
		public static bool NETWORK_SESSION_IS_TRANSITIONING() => Function.Call<bool>(0xF2CBC969C4F090C7);
		/// <summary>
		/// Only used in R* Script startup_clip
		/// </summary>
		public static void _0xFD4272A137703449() => Function.Call(0xFD4272A137703449);
		/// <summary>
		/// Only used in R* Script net_rolling_playlist
		/// </summary>
		public static void _NETWORK_SESSION_PLAYLIST_GO_TO_NEXT_CONTENT() => Function.Call(0xBDE605F925B07127);
		/// <summary>
		/// Only used in R* Script net_rolling_playlist
		/// </summary>
		public static void _NETWORK_SESSION_PLAYLIST_GET_UPCOMING_CONTENT() => Function.Call(0x8F9DB6CD03B42B58);
		public static void NETWORK_DISABLE_REALTIME_MULTIPLAYER() => Function.Call(0x236905C700FDB54D);
		/// <summary>
		/// Only used in R* Script fm_race_controller
		/// </summary>
		public static void _0x71FA2D1880C48032(bool p0) => Function.Call(0x71FA2D1880C48032, p0);
		public static void NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(int* hours, int* minutes, int* seconds) => Function.Call(0x6D03BFBD643B2A02, hours, minutes, seconds);
		public static void NETWORK_CLEAR_CLOCK_TIME_OVERRIDE() => Function.Call(0xD972DF67326F966E);
		public static bool NETWORK_IS_CLOCK_TIME_OVERRIDDEN() => Function.Call<bool>(0xD7C95D322FF57522);
		public static bool NETWORK_GET_GLOBAL_CLOCK(int* hour, int* minute, int* second) => Function.Call<bool>(0x11A7ADCD629E170F, hour, minute, second);
		public static void _NETWORK_CLOCK_TIME_OVERRIDE(int hour, int minute, int second, int transitionTime, bool pauseClock) => Function.Call(0x669E223E64B1903C, hour, minute, second, transitionTime, pauseClock);
		public static void _NETWORK_CLOCK_TIME_OVERRIDE_2(int hour, int minute, int second, int transitionTime, bool pauseClock, bool clockwise) => Function.Call(0xE28C13ECC36FF14E, hour, minute, second, transitionTime, pauseClock, clockwise);
		public static void _NETWORK_CLEAR_CLOCK_OVERRIDE_OVERTIME(int milliseconds) => Function.Call(0x65F040D91001ED4B, milliseconds);
		public static bool _0x0E54D4DA6018FF8E() => Function.Call<bool>(0x0E54D4DA6018FF8E);
		public static bool NETWORK_IS_FINDING_GAMERS() => Function.Call<bool>(0xDDDF64C91BFCF0AA);
		public static bool NETWORK_DID_FIND_GAMERS_SUCCEED() => Function.Call<bool>(0xF9B83B77929D8863);
		public static int _0x7BCA0A3972708436(Any* outData, int p1) => Function.Call<int>(0x7BCA0A3972708436, outData, p1);
		public static void NETWORK_CLEAR_FOUND_GAMERS() => Function.Call(0x6D14CCEE1B40381A);
		public static bool _NETWORK_GET_GAMER_SESSION_FROM_HANDLE(Any* data, int count) => Function.Call<bool>(0xFBDFE1C1356E12E8, data, count);
		public static bool _NETWORK_HAS_CURRENT_GET_GAMER_STATUS_STARTED() => Function.Call<bool>(0x25189F9908E9CD65);
		public static bool NETWORK_DID_GET_GAMER_STATUS_SUCCEED() => Function.Call<bool>(0x5AE17C6B0134B7F1);
		public static int _NETWORK_GET_GAMER_STATUS(Any* gamerHandle, int p1) => Function.Call<int>(0xDDAEB478E58F8DEA, gamerHandle, p1);
		public static void NETWORK_CLEAR_GET_GAMER_STATUS() => Function.Call(0x86E0660E4F5C956D);
		public static void NETWORK_SET_SCRIPT_READY_FOR_EVENTS(bool toggle) => Function.Call(0x7AC752103856FB20, toggle);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static bool _0x316FD416C432C761() => Function.Call<bool>(0x316FD416C432C761);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static bool _0x062842D61D0D53FD() => Function.Call<bool>(0x062842D61D0D53FD);
		public static bool NETWORK_IS_GAME_IN_PROGRESS() => Function.Call<bool>(0x10FAB35428CCC9D7);
		public static bool NETWORK_IS_SESSION_ACTIVE() => Function.Call<bool>(0xD83C2B94E7508980);
		public static bool NETWORK_IS_IN_SESSION() => Function.Call<bool>(0xCA97246103B63917);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool _NETWORK_IS_IN_SESSION_LOBBY() => Function.Call<bool>(0xC5196C42DE19F646);
		public static bool NETWORK_IS_SESSION_STARTED() => Function.Call<bool>(0x9DE624D2FC4B603F);
		public static bool NETWORK_CAN_SESSION_END() => Function.Call<bool>(0x4EEBC3694E49C572);
		public static int NETWORK_GET_GAME_MODE() => Function.Call<int>(0x225640E09EFFDC3F);
		/// <summary>
		/// enum eSessionFlags
		/// {
		/// 	SESSION_FLAG_NONE = 0,
		/// 	SF_INSTANCE = (1 << 0),
		/// 	SF_MATCH = (1 << 1),
		/// 	SF_PRIVATE = (1 << 2),
		/// 	SF_BLOCK_INVITES = (1 << 3),
		/// 	SF_BLOCK_JOIN_VIA_PRESENCE = (1 << 4),
		/// 	SF_BLOCK_NON_HOST_INVITES = (1 << 5),
		/// 	SF_BLOCK_IN_PROGRESS_MATCHMAKING_BACKFILL = (1 << 6),
		/// 	SF_BLOCK_IN_GAMEPLAY_MATCHMAKING_BACKFILL = (1 << 7),
		/// 	SF_BLOCK_INVITES_TEMPORARY = (1 << 8),
		/// 	SF_IN_GAMEPLAY = (1 << 9),
		/// 	SF_COMPETITIVE = (1 << 10),
		/// 	SF_MATCHMAKING_BACKFILL_IS_BLOCKED = (1 << 11)
		/// };
		/// </summary>
		public static bool _NETWORK_SESSION_ADD_SESSION_FLAGS(int flags) => Function.Call<bool>(0xE546BDA1B3E288EE, flags);
		/// <summary>
		/// See _NETWORK_SESSION_ADD_SESSION_FLAGS
		/// </summary>
		public static bool NETWORK_SESSION_REMOVE_SESSION_FLAGS(int flags) => Function.Call<bool>(0x78335E12DB0BF961, flags);
		public static int NETWORK_SESSION_GET_SESSION_FLAGS() => Function.Call<int>(0x51F33DBC1A41CBFD);
		public static bool _NETWORK_SESSION_SET_PLAYER_FLAGS(int flags) => Function.Call<bool>(0x0AE241A4A9ADEEEC, flags);
		public static bool _NETWORK_SESSION_REMOVE_PLAYER_FLAGS(int flags) => Function.Call<bool>(0x3215BBE34D3418C5, flags);
		public static int _NETWORK_GET_SESSION_HOST() => Function.Call<int>(0x8DC9AA3B508B1A85);
		public static Any _0xD3A3C8B9F3BDEF81() => Function.Call<Any>(0xD3A3C8B9F3BDEF81);
		public static bool _0x18B94666CF610AEB() => Function.Call<bool>(0x18B94666CF610AEB);
		public static bool _0x981146E5C9CE9250(int inviteIndex) => Function.Call<bool>(0x981146E5C9CE9250, inviteIndex);
		public static int _0xBF8276E51761F9DA() => Function.Call<int>(0xBF8276E51761F9DA);
		public static bool _0xDCA4A74135E1DEA5(Any p0) => Function.Call<bool>(0xDCA4A74135E1DEA5, p0);
		public static bool NETWORK_HAS_PENDING_INVITE_FAILURE() => Function.Call<bool>(0xD0498AD30E16B6BD);
		public static bool _NETWORK_CAN_RECEIVE_INVITE_FROM_HANDLE(Any* gamerHandle) => Function.Call<bool>(0xF23D6475640D29EB, gamerHandle);
		public static void _0x704F92B3AF20D857(bool setting) => Function.Call(0x704F92B3AF20D857, setting);
		public static void _0xF342F6BD0A8287D5(Any p0) => Function.Call(0xF342F6BD0A8287D5, p0);
		public static void _0xD39A72AE5EBD57E5() => Function.Call(0xD39A72AE5EBD57E5);
		public static bool _NETWORK_SEND_SESSION_INVITE(Any* gamerHandle, string contentId, Any* data, int dataSize, int p4, int flags) => Function.Call<bool>(0xE47001B7CB8B98AE, gamerHandle, contentId, data, dataSize, p4, flags);
		public static bool _0xD1FFB246F4E088AC(int p0) => Function.Call<bool>(0xD1FFB246F4E088AC, p0);
		public static int _0x27B1AE4D8C652F08(int p0) => Function.Call<int>(0x27B1AE4D8C652F08, p0);
		public static int _0x6C27442A225A241A(int p0) => Function.Call<int>(0x6C27442A225A241A, p0);
		public static string _0xE59F4924BD3A718D(int p0) => Function.Call<string>(0xE59F4924BD3A718D, p0);
		/// <summary>
		/// Note: this native was added in build 1436.31
		/// </summary>
		public static int _0x78271BC02AE9AF83(int p0) => Function.Call<int>(0x78271BC02AE9AF83, p0);
		public static bool _0x16EFB123C4451032(int p0, Any* gamerHandle) => Function.Call<bool>(0x16EFB123C4451032, p0, gamerHandle);
		public static string _0xE79BA3BC265895DA(int p0) => Function.Call<string>(0xE79BA3BC265895DA, p0);
		public static Any _0xC0CFFDA87C2C163D(int p0, Any p1, int p2) => Function.Call<Any>(0xC0CFFDA87C2C163D, p0, p1, p2);
		public static Any _0x5ED39DA62BEB1330(int p0) => Function.Call<Any>(0x5ED39DA62BEB1330, p0);
		public static bool NETWORK_ACCEPT_RS_INVITE(int p0) => Function.Call<bool>(0xB2CEA5105AAC8DDE, p0);
		public static bool _0x3AA0CDC63696166D(int p0) => Function.Call<bool>(0x3AA0CDC63696166D, p0);
		public static int NETWORK_REQUEST_JOIN(Any p0) => Function.Call<int>(0xE483BB6BE686F632, p0);
		public static int _0xE8E633215471BB5D(Any p0) => Function.Call<int>(0xE8E633215471BB5D, p0);
		public static bool _0xA2837A5E21FB5A58(Any p0) => Function.Call<bool>(0xA2837A5E21FB5A58, p0);
		public static bool _0xE39600E50D608693(Any p0, Any p1) => Function.Call<bool>(0xE39600E50D608693, p0, p1);
		public static bool _0xD7BAD4062074B9C1(Any p0) => Function.Call<bool>(0xD7BAD4062074B9C1, p0);
		public static int _0xCA58D4FD20D70F24(Any p0) => Function.Call<int>(0xCA58D4FD20D70F24, p0);
		public static bool _0xC028B3F52C707C49(Any p0) => Function.Call<bool>(0xC028B3F52C707C49, p0);
		public static bool NETWORK_IS_PLATFORM_INVITE_PENDING() => Function.Call<bool>(0xFC4165C9165C166F);
		public static void _0x5B9C6AC118FD4774() => Function.Call(0x5B9C6AC118FD4774);
		public static int _NETWORK_GET_PLATFORM_INVITE_ID() => Function.Call<int>(0x9BCF28FB5D65A9BE);
		public static bool NETWORK_ACTION_PLATFORM_INVITE() => Function.Call<bool>(0x3B82ACC3F4B6240C);
		public static void NETWORK_CLEAR_PLATFORM_INVITE() => Function.Call(0xA4484173759749B1);
		public static void _0x603469298A4308AF(bool p0) => Function.Call(0x603469298A4308AF, p0);
		/// <summary>
		/// Returns value of fwuiCachedSetting "general.onlineNotificationsInStoryMode"
		/// </summary>
		public static bool _NETWORK_ARE_ONLINE_NOTIFICATIONS_SHOWN_IN_STORY_MODE() => Function.Call<bool>(0xF5C5929E07512F80);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_IS_IN_PLATFORM_PARTY() => Function.Call<bool>(0x2FC5650B0271CB57);
		public static bool _NETWORK_ARE_PLAYERS_IN_SAME_PLATFORM_PARTY(Any* gamerHandle1, Any* gamerHandle2) => Function.Call<bool>(0x11820D1AE80DEA39, gamerHandle1, gamerHandle2);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_IS_IN_PLATFORM_PARTY_CHAT() => Function.Call<bool>(0xFD8B834A8BA05048);
		public static void NETWORK_SEED_RANDOM_NUMBER_GENERATOR(int seed) => Function.Call(0xF1B84178F8674195, seed);
		public static int NETWORK_GET_RANDOM_INT_RANGED(int rangeStart, int rangeEnd) => Function.Call<int>(0xE30CF56F1EFA5F43, rangeStart, rangeEnd);
		public static void NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int maxNumMissionParticipants, bool p1, int instanceId) => Function.Call(0x1CA59E306ECB80A5, maxNumMissionParticipants, p1, instanceId);
		public static bool NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT() => Function.Call<bool>(0x2910669969E9535E);
		/// <summary>
		/// Seems to always return 0, but it's used in quite a few loops.
		/// 
		/// for (num3 = 0; num3 < NETWORK::0xCCD8C02D(); num3++)
		///     {
		///         if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::0x98F3B274(num3)) != 0)
		///         {
		///             var num5 = NETWORK::NETWORK_GET_PLAYER_INDEX(PLAYER::0x98F3B274(num3));
		/// </summary>
		public static int NETWORK_GET_MAX_NUM_PARTICIPANTS() => Function.Call<int>(0xA6C90FBC38E395EE);
		public static int NETWORK_GET_NUM_PARTICIPANTS() => Function.Call<int>(0x18D0456E86604654);
		public static int NETWORK_GET_SCRIPT_STATUS() => Function.Call<int>(0x57D158647A6BFABF);
		public static void NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(Any p0, Any p1, Any p2) => Function.Call(0x3E9B2F01C50DF595, p0, p1, p2);
		public static int _NETWORK_GET_SIZE_OF_HOST_BROADCAST_DATA_STORAGE(int* p0) => Function.Call<int>(0xBA24095EA96DFE17, p0);
		public static void NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(Any p0, Any p1, Any p2) => Function.Call(0x3364AA97340CA215, p0, p1, p2);
		public static int _NETWORK_GET_SIZE_OF_PLAYER_BROADCAST_DATA_STORAGE(int* p0) => Function.Call<int>(0x690806BC83BC8CA2, p0);
		public static bool NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA() => Function.Call<bool>(0x5D10B3795F3FC886);
		public static int NETWORK_GET_PLAYER_INDEX(int player) => Function.Call<int>(0x24FB80D107371267, player);
		public static int NETWORK_GET_PARTICIPANT_INDEX(int index) => Function.Call<int>(0x1B84DF6AF2A46938, index);
		/// <summary>
		/// Returns the Player associated to a given Ped when in an online session.
		/// </summary>
		public static int NETWORK_GET_PLAYER_INDEX_FROM_PED(int ped) => Function.Call<int>(0x6C0E2E0125610278, ped);
		/// <summary>
		/// Returns the amount of players connected in the current session. Only works when connected to a session/server.
		/// </summary>
		public static int NETWORK_GET_NUM_CONNECTED_PLAYERS() => Function.Call<int>(0xA4A79DD2D9600654);
		public static bool NETWORK_IS_PLAYER_CONNECTED(int player) => Function.Call<bool>(0x93DC1BE4E1ABE9D1, player);
		public static int NETWORK_GET_TOTAL_NUM_PLAYERS() => Function.Call<int>(0xCF61D4B4702EE9EB);
		public static bool NETWORK_IS_PARTICIPANT_ACTIVE(int p0) => Function.Call<bool>(0x6FF8FF40B6357D45, p0);
		public static bool NETWORK_IS_PLAYER_ACTIVE(int player) => Function.Call<bool>(0xB8DFD30D6973E135, player);
		public static bool NETWORK_IS_PLAYER_A_PARTICIPANT(int player) => Function.Call<bool>(0x3CA58F6CB7CBD784, player);
		public static bool NETWORK_IS_HOST_OF_THIS_SCRIPT() => Function.Call<bool>(0x83CD99A1E6061AB5);
		public static int NETWORK_GET_HOST_OF_THIS_SCRIPT() => Function.Call<int>(0xC7B4D79B01FA7A5C);
		public static int NETWORK_GET_HOST_OF_SCRIPT(string scriptName, int p1, int p2) => Function.Call<int>(0x1D6A14F1F9A736FC, scriptName, p1, p2);
		public static int NETWORK_GET_HOST_OF_THREAD(int threadId) => Function.Call<int>(0xB4A25351D79B444C, threadId);
		public static void NETWORK_SET_MISSION_FINISHED() => Function.Call(0x3B3D11CD9FFCDFC9);
		public static bool NETWORK_IS_SCRIPT_ACTIVE(string scriptName, int p1, bool p2, int p3) => Function.Call<bool>(0x9D40DF90FAD26098, scriptName, p1, p2, p3);
		public static bool NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(uint scriptHash, int p1, bool p2, int p3) => Function.Call<bool>(0x1B89BC43B6E69107, scriptHash, p1, p2, p3);
		public static bool _NETWORK_IS_THREAD_ACTIVE(int threadId) => Function.Call<bool>(0x31DAD2CD6D49546E, threadId);
		public static int _NETWORK_GET_INSTANCE_ID_OF_THREAD(int threadId) => Function.Call<int>(0xFB9ECED5B68F3B78, threadId);
		public static int NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(string scriptName, int instanceId, uint position) => Function.Call<int>(0x3658E8CD94FC121A, scriptName, instanceId, position);
		public static int NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT() => Function.Call<int>(0x638A3A81733086DB);
		public static bool NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(int p0, Any* p1, Any p2) => Function.Call<bool>(0x1AD5B71586B94820, p0, p1, p2);
		public static void NETWORK_PREVENT_SCRIPT_HOST_MIGRATION() => Function.Call(0x2302C0264EA58D31);
		public static bool NETWORK_IS_FEATURE_SUPPORTED(int featureId) => Function.Call<bool>(0x9C725D149622BFDE, featureId);
		/// <summary>
		/// Return the local Participant ID
		/// </summary>
		public static int PARTICIPANT_ID() => Function.Call<int>(0x90986E8876CE0A83);
		/// <summary>
		/// Return the local Participant ID.
		/// 
		/// This native is exactly the same as 'PARTICIPANT_ID' native.
		/// </summary>
		public static int PARTICIPANT_ID_TO_INT() => Function.Call<int>(0x57A3BDDAD8E5AA0A);
		public static int NETWORK_GET_DESTROYER_OF_NETWORK_ID(int netId, uint* weaponHash) => Function.Call<int>(0x7A1ADEEF01740A24, netId, weaponHash);
		/// <summary>
		/// _NETWORK_GET_A* - _NETWORK_GET_D*
		/// </summary>
		public static int _0x6CF82A7F65A5AD5F(int ped, Any* p1) => Function.Call<int>(0x6CF82A7F65A5AD5F, ped, p1);
		/// <summary>
		/// _NETWORK_GET_A* - _NETWORK_GET_D*
		/// </summary>
		public static bool _0x236321F1178A5446(int player, int ped, Any* p2) => Function.Call<bool>(0x236321F1178A5446, player, ped, p2);
		public static bool NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(int player, int entity, int* p2) => Function.Call<bool>(0x4CACA84440FA26F6, player, entity, p2);
		public static int NETWORK_GET_ENTITY_KILLER_OF_PLAYER(int player, uint* weaponHash) => Function.Call<int>(0x42B2DAA6B596F5F8, player, weaponHash);
		public static void NETWORK_RESURRECT_LOCAL_PLAYER(float x, float y, float z, float heading, int p4, bool p5, Any p6, bool p7) => Function.Call(0xEA23C49EAA83ACFB, x, y, z, heading, p4, p5, p6, p7);
		public static void NETWORK_RESURRECT_LOCAL_PLAYER(Vector3 vec, float heading, int p4, bool p5, Any p6, bool p7) => Function.Call(0xEA23C49EAA83ACFB, vec.X, vec.Y, vec.Z, heading, p4, p5, p6, p7);
		public static void _NETWORK_RESURRECT_LOCAL_PLAYER_2(Any* args) => Function.Call(0x4154B7D8C75E5DCF, args);
		public static void NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(int time) => Function.Call(0x2D95C7E2D7E07307, time);
		public static void NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(bool toggle) => Function.Call(0x524FF0AEFF9C3973, toggle);
		public static bool NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(int entity) => Function.Call<bool>(0xB07D3185E11657A5, entity);
		public static int NETWORK_GET_NETWORK_ID_FROM_ENTITY(int entity) => Function.Call<int>(0xA11700682F3AD45C, entity);
		public static int NETWORK_GET_ENTITY_FROM_NETWORK_ID(int netId) => Function.Call<int>(0xCE4E5D9B0A4FF560, netId);
		public static bool NETWORK_GET_ENTITY_IS_NETWORKED(int entity) => Function.Call<bool>(0xC7827959479DCC78, entity);
		public static void NETWORK_REGISTER_ENTITY_AS_NETWORKED(int entity) => Function.Call(0x06FAACD625D80CAA, entity);
		public static bool NETWORK_DOES_NETWORK_ID_EXIST(int netID) => Function.Call<bool>(0x38CE16C96BD11344, netID);
		/// <summary>
		/// Related to container entity (RANSACK_ATTACHED_LOCKBOX / RANSACK_ATTACHED_CHEST)
		/// </summary>
		public static Any _0x950ACD8F05B7B9DF(Any p0) => Function.Call<Any>(0x950ACD8F05B7B9DF, p0);
		public static bool NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(int netId) => Function.Call<bool>(0xA670B3662FAFFBD0, netId);
		public static bool NETWORK_HAS_CONTROL_OF_NETWORK_ID(int netId) => Function.Call<bool>(0x4D36070FE0215186, netId);
		public static bool NETWORK_REQUEST_CONTROL_OF_ENTITY(int entity) => Function.Call<bool>(0xB69317BF5E782347, entity);
		public static bool _NETWORK_REQUEST_CONTROL_OF_ANIM_SCENE(int animScene) => Function.Call<bool>(0xAAA92B631B13F614, animScene);
		public static bool NETWORK_REQUEST_CONTROL_OF_PICKUP_PLACEMENT(Any p0) => Function.Call<bool>(0x56ED2C48558DAB78, p0);
		public static bool NETWORK_HAS_CONTROL_OF_ENTITY(int entity) => Function.Call<bool>(0x01BF60A500E28887, entity);
		public static bool NETWORK_HAS_CONTROL_OF_PICKUP(int pickup) => Function.Call<bool>(0x5BC9495F0B3B6FA6, pickup);
		public static bool _NETWORK_HAS_CONTROL_OF_ANIM_SCENE(int animScene) => Function.Call<bool>(0x26A5C12FACFF8724, animScene);
		public static bool NETWORK_HAS_CONTROL_OF_PICKUP_PLACEMENT(Any p0) => Function.Call<bool>(0x51EABCF2786515AB, p0);
		/// <summary>
		/// Same Native Handler as VEH_TO_NET, PED_TO_NET, OBJ_TO_NET and NETWORK_GET_NETWORK_ID_FROM_ENTITY
		/// </summary>
		public static int _0xF260AF6F43953316(int handle) => Function.Call<int>(0xF260AF6F43953316, handle);
		/// <summary>
		/// Returns the network ID of the given vehicle.
		/// </summary>
		public static int VEH_TO_NET(int vehicle) => Function.Call<int>(0xB4C94523F023419C, vehicle);
		/// <summary>
		/// Returns the network ID of the given ped.
		/// </summary>
		public static int PED_TO_NET(int ped) => Function.Call<int>(0x0EDEC3C276198689, ped);
		/// <summary>
		/// Returns the network ID of the given object.
		/// </summary>
		public static int OBJ_TO_NET(int _object) => Function.Call<int>(0x99BFDC94A603E541, _object);
		public static int _ANIM_SCENE_TO_NET(int animScene) => Function.Call<int>(0xE0D73CDDEA79DDCD, animScene);
		public static int NET_TO_VEH(int netHandle) => Function.Call<int>(0x367B936610BA360C, netHandle);
		/// <summary>
		/// gets the ped id of a network id
		/// </summary>
		public static int NET_TO_PED(int netHandle) => Function.Call<int>(0xBDCD95FC216A8B3E, netHandle);
		/// <summary>
		/// gets the object id of a network id
		/// </summary>
		public static int NET_TO_OBJ(int netHandle) => Function.Call<int>(0xD8515F5FEA14CB3F, netHandle);
		/// <summary>
		/// gets the entity id of a network id
		/// </summary>
		public static int NET_TO_ENT(int netHandle) => Function.Call<int>(0xBFFEAB45A9A9094A, netHandle);
		public static int _NET_TO_ANIM_SCENE(int netId) => Function.Call<int>(0xD7F6781A0ABAF6FB, netId);
		public static int _PROPSET_TO_NET(int propSet) => Function.Call<int>(0x74F99EF7EF503398, propSet);
		public static int _NET_TO_PROPSET(int netId) => Function.Call<int>(0xD08066E00D26C448, netId);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x0CC28C08613BA9E5(int p0) => Function.Call(0x0CC28C08613BA9E5, p0);
		public static void NETWORK_GET_LOCAL_HANDLE(Any* gamerHandle) => Function.Call(0xE86051786B66CD8E, gamerHandle);
		public static void NETWORK_HANDLE_FROM_PLAYER(int player, Any* gamerHandle) => Function.Call(0x388EB2B86C73B6B3, player, gamerHandle);
		public static uint NETWORK_HASH_FROM_PLAYER_HANDLE(int player) => Function.Call<uint>(0xBC1D768F2F5D6C05, player);
		public static void NETWORK_HANDLE_FROM_FRIEND(int friendIndex, Any* gamerHandle) => Function.Call(0xD45CB817D7E177D2, friendIndex, gamerHandle);
		/// <summary>
		/// Always returns a null string.
		/// </summary>
		public static string NETWORK_GET_GAMERTAG_FROM_HANDLE(Any* gamerHandle) => Function.Call<string>(0x426141162EBE5CDB, gamerHandle);
		/// <summary>
		/// Hardcoded to return -1.
		/// </summary>
		public static int NETWORK_DISPLAYNAMES_FROM_HANDLES_START(Any* p0, Any p1) => Function.Call<int>(0xD66C9E72B3CC4982, p0, p1);
		/// <summary>
		/// Hardcoded to return zero.
		/// </summary>
		public static int NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(Any p0, Any p1, Any p2) => Function.Call<int>(0x58CC181719256197, p0, p1, p2);
		/// <summary>
		/// Example:
		/// 
		/// char displayName[64];
		/// if (_NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(handle, displayName))
		/// {
		/// 	// use displayName
		/// }
		/// </summary>
		public static bool _NETWORK_GET_DISPLAY_NAME_FROM_HANDLE(Any* gamerHandle, string displayName) => Function.Call<bool>(0x7FEE4F07C54B6B3C, gamerHandle, displayName);
		public static bool NETWORK_ARE_HANDLES_THE_SAME(Any* gamerHandle1, Any* gamerHandle2) => Function.Call<bool>(0x57DBA049E110F217, gamerHandle1, gamerHandle2);
		public static bool NETWORK_IS_HANDLE_VALID(Any* gamerHandle) => Function.Call<bool>(0x6F79B93B0A8E4133, gamerHandle);
		public static int NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(Any* gamerHandle) => Function.Call<int>(0xCE5F689CF5A0A49D, gamerHandle);
		public static bool NETWORK_IS_GAMER_IN_MY_SESSION(Any* gamerHandle) => Function.Call<bool>(0x0F10B05DDF8D16E9, gamerHandle);
		public static void NETWORK_SHOW_PROFILE_UI(Any* gamerHandle) => Function.Call(0x859ED1CEA343FCA8, gamerHandle);
		public static void _0x5759160AC17C13CE(Any* gamerHandle, string message) => Function.Call(0x5759160AC17C13CE, gamerHandle, message);
		/// <summary>
		/// Returns the entity's network ID.
		/// </summary>
		public static int _0xF302AB9D978352EE(int entity) => Function.Call<int>(0xF302AB9D978352EE, entity);
		/// <summary>
		/// Returns the entity associated with the given network ID.
		/// </summary>
		public static int _0x4538EE7C321590BC(int networkId) => Function.Call<int>(0x4538EE7C321590BC, networkId);
		public static bool _0xA47D48D06AA5A188() => Function.Call<bool>(0xA47D48D06AA5A188);
		public static int NETWORK_GET_TOTAL_NUM_FRIENDS() => Function.Call<int>(0xDB7ABDD203FA3704);
		public static int _0xA94ECE191D90637A() => Function.Call<int>(0xA94ECE191D90637A);
		public static void _0x5CB8B0C846D0F30B(Any p0) => Function.Call(0x5CB8B0C846D0F30B, p0);
		public static void _0xFF36F36B07E69059(Any p0) => Function.Call(0xFF36F36B07E69059, p0);
		public static bool _NETWORK_GET_CURRENT_FRIEND_PAGE_DATA(Any* p0) => Function.Call<bool>(0xA3EEC0A5AFF3FC5B, p0);
		public static int _0xB389289F031F059A() => Function.Call<int>(0xB389289F031F059A);
		public static bool NETWORK_CAN_REFRESH_FRIEND_PAGE() => Function.Call<bool>(0x1AF5E28E64A76A9F);
		public static bool NETWORK_REFRESH_CURRENT_FRIEND_PAGE() => Function.Call<bool>(0x1F51F367B710A832);
		public static bool _0xDA1BFED8582F61F0() => Function.Call<bool>(0xDA1BFED8582F61F0);
		public static bool _0x232E1EB23CDB313C() => Function.Call<bool>(0x232E1EB23CDB313C);
		public static bool _0x3E4A16BC669E71B3() => Function.Call<bool>(0x3E4A16BC669E71B3);
		public static bool _0xE348D1404BD80146(Any* gamerHandle) => Function.Call<bool>(0xE348D1404BD80146, gamerHandle);
		public static bool _0x665161D250850A9F(Any* gamerHandle) => Function.Call<bool>(0x665161D250850A9F, gamerHandle);
		public static string _NETWORK_GET_GAMERTAG_FROM_FRIEND(Any* gamerHandle) => Function.Call<string>(0x5659D87BE674AB17, gamerHandle);
		public static bool NETWORK_IS_FRIEND(Any* gamerHandle) => Function.Call<bool>(0x1A24A179F9B31654, gamerHandle);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool NETWORK_IS_PENDING_FRIEND(Any* gamerHandle) => Function.Call<bool>(0x0BE73DA6984A6E33, gamerHandle);
		public static bool NETWORK_ADD_FRIEND(Any* gamerHandle, string message) => Function.Call<bool>(0x8E02D73914064223, gamerHandle, message);
		public static bool _NETWORK_REMOVE_FRIEND(Any* gamerHandle) => Function.Call<bool>(0x55F618F68AB854D3, gamerHandle);
		/// <summary>
		/// On PC this returns true if gamerHandle is a valid handle.
		/// </summary>
		public static bool _NETWORK_CAN_ADD_FRIEND(Any* gamerHandle) => Function.Call<bool>(0x99ABE9BF9DADA162, gamerHandle);
		/// <summary>
		/// Old name: _NETWORK_SET_PASSIVE_MODE_OPTION
		/// </summary>
		public static void NETWORK_SET_PLAYER_IS_PASSIVE(bool toggle) => Function.Call(0x9C25E8EC4C535FBD, toggle);
		public static void NETWORK_SET_FRIENDLY_FIRE_OPTION(bool toggle) => Function.Call(0xF808475FA571D823, toggle);
		public static void NETWORK_SET_RICH_PRESENCE(int p0, Any* p1, int p2, int p3) => Function.Call(0x1DCCACDCFC569362, p0, p1, p2, p3);
		public static int NETWORK_GET_TIMEOUT_TIME() => Function.Call<int>(0x5ED0356A0CE3A34F);
		/// <summary>
		/// Only used in fm_race_controller R* Script (PROCESS_LOCAL_PLAYER_INIT)
		/// </summary>
		public static void _0xBC7D36946D19E60E(bool p0) => Function.Call(0xBC7D36946D19E60E, p0);
		/// <summary>
		/// Params: p5 = 50.f, p6 = 0 in R* Script net_fetch (NET_FETCH_CLIENT_UPDATE_PED_ROLE_CLUE_IDLE)
		/// </summary>
		public static bool _0x880A7202301E282B(Any* p0, Any* p1, float x, float y, float z, float p5, Any p6) => Function.Call<bool>(0x880A7202301E282B, p0, p1, x, y, z, p5, p6);
		public static bool _0x880A7202301E282B(Any* p0, Any* p1, Vector3 vec, float p5, Any p6) => Function.Call<bool>(0x880A7202301E282B, p0, p1, vec.X, vec.Y, vec.Z, p5, p6);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any _0xC964FCD3D1720697() => Function.Call<Any>(0xC964FCD3D1720697);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any _0xEC089F84A9C16C62() => Function.Call<Any>(0xEC089F84A9C16C62);
		public static void PREVENT_NETWORK_ID_MIGRATION(int netId) => Function.Call(0x7182EDDA1EE7DB5A, netId);
		public static void KEEP_NETWORK_ID_IN_FAST_INSTANCE(int netId, bool p1, int p2) => Function.Call(0xE1BC73D6815BA361, netId, p1, p2);
		/// <summary>
		/// Only used in SP R* Script dominoes_sp: p1 = 0
		/// </summary>
		public static void _0x02C4C6C2900D84DF(int player, Any p1) => Function.Call(0x02C4C6C2900D84DF, player, p1);
		public static void _0xD78A26024BB13E08(int player) => Function.Call(0xD78A26024BB13E08, player);
		public static void SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(int netId, bool toggle) => Function.Call(0xE05E81A888FA63C8, netId, toggle);
		public static void SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(int netId, int player, bool toggle) => Function.Call(0xA8A024587329F36A, netId, player, toggle);
		public static void SET_NETWORK_ID_STOP_CLONING(int networkId, bool bStopCloning) => Function.Call(0x9ED3108D6847760A, networkId, bStopCloning);
		public static void NETWORK_SET_ENTITY_REMAINS_WHEN_UNNETWORKED(int entity, bool toggle) => Function.Call(0xD785864798258032, entity, toggle);
		/// <summary>
		/// if set to true other network players can't see it
		/// if set to false other network player can see it
		/// =========================================
		/// ^^ I attempted this by grabbing an object with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
		/// 
		/// pc or last gen?
		/// 
		/// ^^ last-gen
		/// 
		/// Old name: _NETWORK_SET_ENTITY_INVISIBLE_TO_NETWORK
		/// </summary>
		public static void NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(int entity, bool toggle) => Function.Call(0xF1CA12B18AEF5298, entity, toggle);
		public static void _0xE31A04513237DC89(int entity) => Function.Call(0xE31A04513237DC89, entity);
		public static void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xA6928482543022B4, p0, p1, p2, p3);
		public static bool IS_NETWORK_ID_OWNED_BY_PARTICIPANT(int netId) => Function.Call<bool>(0xA1607996431332DF, netId);
		public static int _NETWORK_GET_PLAYER_OWNER_OF_NETWORK_ID(int netId) => Function.Call<int>(0xA6C0787443C9583E, netId);
		public static void SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(bool local, bool remote, int instanceId) => Function.Call(0xD1065D68947E7B6E, local, remote, instanceId);
		public static void PREVENT_MIGRATION_OF_ENTITIES_IN_FAST_INSTANCE_FOR_LOCAL_PLAYER(bool toggle) => Function.Call(0x89D803CD48622150, toggle);
		public static void SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bool p0) => Function.Call(0xE5F773C1A1D9D168, p0);
		public static void SET_PLAYER_INVISIBLE_LOCALLY(int player, bool toggle) => Function.Call(0x12B37D54667DB0B8, player, toggle);
		public static void SET_PLAYER_VISIBLE_LOCALLY(int player, bool toggle) => Function.Call(0xFAA10F1FAFB11AF2, player, toggle);
		public static void SET_ENTITY_VISIBLE_IN_CUTSCENE(int entity, bool p1, bool p2, int p3) => Function.Call(0xE0031D3C8F36AB82, entity, p1, p2, p3);
		public static void _SET_DOOR_NETWORKED(uint doorHash) => Function.Call(0x51D99497ABF3F451, doorHash);
		public static void _SET_DOOR_UNNETWORKED(Any p0, bool toggle) => Function.Call(0xC1E1A3D5ED7617B8, p0, toggle);
		public static bool IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(int netID) => Function.Call<bool>(0x6E192E33AD436366, netID);
		public static void ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(int netID, bool toggle) => Function.Call(0xD45B1FFCCD52FF19, netID, toggle);
		public static bool IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<bool>(0xD82CF8E64C8729D8, p0, p1, p2, p3, p4);
		public static bool IS_SPHERE_VISIBLE_TO_PLAYER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<bool>(0xDC3A310219E5DA62, p0, p1, p2, p3, p4, p5);
		public static void _0xD42C543F73233041(bool p0) => Function.Call(0xD42C543F73233041, p0);
		public static void RESERVE_NETWORK_MISSION_OBJECTS(int amount) => Function.Call(0x4E5C93BD0C32FBF8, amount);
		public static void RESERVE_NETWORK_CLIENT_MISSION_OBJECTS(int amount) => Function.Call(0xE7DDA8BD3BCF751C, amount);
		public static void RESERVE_NETWORK_MISSION_PEDS(int amount) => Function.Call(0xB60FEBA45333D36F, amount);
		public static void RESERVE_NETWORK_CLIENT_MISSION_PEDS(int amount) => Function.Call(0x807E119F80231732, amount);
		public static void RESERVE_NETWORK_MISSION_VEHICLES(int amount) => Function.Call(0x76B02E21ED27A469, amount);
		public static void RESERVE_NETWORK_MISSION_PICKUPS(int amount) => Function.Call(0x4D40E7D749BC6E6D, amount);
		public static bool CAN_REGISTER_MISSION_OBJECTS(int amount) => Function.Call<bool>(0x800DD4721A8B008B, amount);
		public static bool CAN_REGISTER_MISSION_PEDS(int amount) => Function.Call<bool>(0xBCBF4FEF9FA5D781, amount);
		public static bool CAN_REGISTER_MISSION_VEHICLES(int amount) => Function.Call<bool>(0x7277F1F2E085EE74, amount);
		public static bool CAN_REGISTER_MISSION_PICKUPS(int amount) => Function.Call<bool>(0xF0460C7BF80011EA, amount);
		public static bool CAN_REGISTER_MISSION_ENTITIES(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt) => Function.Call<bool>(0x69778E7564BADE6D, ped_amt, vehicle_amt, object_amt, pickup_amt);
		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		public static int GET_NUM_RESERVED_MISSION_OBJECTS(bool p0) => Function.Call<int>(0xAA81B5F10BC43AC2, p0);
		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		public static int GET_NUM_RESERVED_MISSION_PEDS(bool p0) => Function.Call<int>(0x1F13D5AE5CB17E17, p0);
		/// <summary>
		/// p0 appears to be for MP
		/// </summary>
		public static int GET_NUM_RESERVED_MISSION_VEHICLES(bool p0) => Function.Call<int>(0xCF3A965906452031, p0);
		public static int _GET_NUM_RESERVED_MISSION_PICKUPS(bool p0) => Function.Call<int>(0x62BE3ECC79FBD004, p0);
		public static int GET_NUM_CREATED_MISSION_OBJECTS(bool p0) => Function.Call<int>(0x12B6281B6C6706C0, p0);
		public static int GET_NUM_CREATED_MISSION_PEDS(bool p0) => Function.Call<int>(0xCB215C4B56A7FAE7, p0);
		public static int GET_NUM_CREATED_MISSION_VEHICLES(bool p0) => Function.Call<int>(0x0CD9AB83489430EA, p0);
		public static int _GET_NUM_CREATED_MISSION_PICKUPS(bool p0) => Function.Call<int>(0xD2BA051B94CA9BCC, p0);
		/// <summary>
		/// Only used in R* Script net_stable_manager
		/// </summary>
		public static void _GET_RESERVED_MISSION_ENTITIES_FOR_THREAD(int threadId, int* pedMax, int* vehicleMax, int* unkMax, int* pedMin, int* vehicleMin, int* unkMin) => Function.Call(0x99AAC89C510DEB0D, threadId, pedMax, vehicleMax, unkMax, pedMin, vehicleMin, unkMin);
		/// <summary>
		/// Used in Script Function NET_ACE_CLIENT_VERIFY_ENTITY_RESERVATIONS
		/// Coords: Slot world position
		/// 
		/// Old name: _GET_RESERVATIONS_FOR_SLOT_WORLD_POSITION
		/// </summary>
		public static void GET_RESERVED_MISSION_ENTITIES_IN_AREA(float x, float y, float z, bool p3, int* peds, int* vehicles, int* objects, int* pickups) => Function.Call(0x5E71E72A94985214, x, y, z, p3, peds, vehicles, objects, pickups);
		public static void GET_RESERVED_MISSION_ENTITIES_IN_AREA(Vector3 vec, bool p3, int* peds, int* vehicles, int* objects, int* pickups) => Function.Call(0x5E71E72A94985214, vec.X, vec.Y, vec.Z, p3, peds, vehicles, objects, pickups);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static bool _0x5F328FC909F0E0FF(int p0, int p1, int p2, int p3) => Function.Call<bool>(0x5F328FC909F0E0FF, p0, p1, p2, p3);
		/// <summary>
		/// Always returns 60
		/// </summary>
		public static int GET_MAX_NUM_NETWORK_OBJECTS() => Function.Call<int>(0xC7BE335216B5EC7C);
		/// <summary>
		/// Always returns 110
		/// </summary>
		public static int GET_MAX_NUM_NETWORK_PEDS() => Function.Call<int>(0x0C1F7D49C39D2289);
		/// <summary>
		/// Always returns 40
		/// </summary>
		public static int GET_MAX_NUM_NETWORK_VEHICLES() => Function.Call<int>(0x0AFCE529F69B21FF);
		/// <summary>
		/// Always returns 80
		/// </summary>
		public static int GET_MAX_NUM_NETWORK_PICKUPS() => Function.Call<int>(0xA72835064DD63E4C);
		public static bool _0x75FC34A2BA345BD1(int entity, int player, Any* p2) => Function.Call<bool>(0x75FC34A2BA345BD1, entity, player, p2);
		/// <summary>
		/// Must be called from a background script, otherwise it will do nothing.
		/// </summary>
		public static void _0x979765465A6F25FC(int entity, bool p1) => Function.Call(0x979765465A6F25FC, entity, p1);
		/// <summary>
		/// Hardcoded to return zero.
		/// </summary>
		public static int _0x5133CF81924F1129() => Function.Call<int>(0x5133CF81924F1129);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x1E4E097D71D449FB(bool p0) => Function.Call<int>(0x1E4E097D71D449FB, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x982D7AD755B8F62C(bool p0) => Function.Call<int>(0x982D7AD755B8F62C, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x917AD74BDCF8B6E9(bool p0) => Function.Call<int>(0x917AD74BDCF8B6E9, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0xF8DC69DC1AD19072(bool p0) => Function.Call<int>(0xF8DC69DC1AD19072, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x744BFBB0CA908161(bool p0) => Function.Call<int>(0x744BFBB0CA908161, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x106CBDD5077DEDE1(bool p0) => Function.Call<int>(0x106CBDD5077DEDE1, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0xBAF7E2979442B29F(bool p0) => Function.Call<int>(0xBAF7E2979442B29F, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x039B692B3318FAB6(bool p0) => Function.Call<int>(0x039B692B3318FAB6, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x4835413EA6F9C9CD(bool p0) => Function.Call<int>(0x4835413EA6F9C9CD, p0);
		public static int GET_NETWORK_TIME() => Function.Call<int>(0x7A5487FE9FAA6B48);
		public static int GET_NETWORK_TIME_ACCURATE() => Function.Call<int>(0x89023FBBF9200E9F);
		public static bool HAS_NETWORK_TIME_STARTED() => Function.Call<bool>(0x46718ACEEDEAFC84);
		/// <summary>
		/// Adds the first argument to the second.
		/// </summary>
		public static int GET_TIME_OFFSET(int timeA, int timeB) => Function.Call<int>(0x017008CCDAD48503, timeA, timeB);
		/// <summary>
		/// Subtracts the second argument from the first, then returns whether the result is negative.
		/// </summary>
		public static bool IS_TIME_LESS_THAN(int timeA, int timeB) => Function.Call<bool>(0xCB2CF5148012C8D0, timeA, timeB);
		/// <summary>
		/// Subtracts the first argument from the second, then returns whether the result is negative.
		/// </summary>
		public static bool IS_TIME_MORE_THAN(int timeA, int timeB) => Function.Call<bool>(0xDE350F8651E4346C, timeA, timeB);
		/// <summary>
		/// Subtracts the second argument from the first.
		/// </summary>
		public static int GET_TIME_DIFFERENCE(int timeA, int timeB) => Function.Call<int>(0xA2C6FC031D46FFF0, timeA, timeB);
		public static int GET_CLOUD_TIME_AS_INT() => Function.Call<int>(0x9A73240B49945C76);
		/// <summary>
		/// Takes the specified time and writes it to the structure specified in the second argument.
		/// 
		/// struct date_time
		/// {
		///     int year;
		///     int PADDING1;
		///     int month;
		///     int PADDING2;
		///     int day;
		///     int PADDING3;
		///     int hour;
		///     int PADDING4;
		///     int minute;
		///     int PADDING5;
		///     int second;
		///     int PADDING6;
		/// };
		/// </summary>
		public static void CONVERT_POSIX_TIME(int posixTime, Any* timeStructure) => Function.Call(0xAC97AF97FA68E5D5, posixTime, timeStructure);
		public static void NETWORK_SET_IN_SPECTATOR_MODE(bool toggle, int playerPed) => Function.Call(0x423DE3854BB50894, toggle, playerPed);
		public static void _NETWORK_SET_IN_STATIC_SPECTATOR_MODE(bool toggle, float x, float y, float z) => Function.Call(0xFBF1ECFB39A77B5F, toggle, x, y, z);
		public static void _NETWORK_SET_IN_STATIC_SPECTATOR_MODE(bool toggle, Vector3 vec) => Function.Call(0xFBF1ECFB39A77B5F, toggle, vec.X, vec.Y, vec.Z);
		public static bool NETWORK_IS_IN_SPECTATOR_MODE() => Function.Call<bool>(0x048746E388762E11);
		public static bool _NETWORK_IS_PLAYER_IN_SPECTATOR_MODE(int player) => Function.Call<bool>(0x5B709519997ECF0F, player);
		public static void NETWORK_SET_IN_MP_CUTSCENE(bool p0, bool p1, int p2, bool p3) => Function.Call(0x9CA5DE655269FEC4, p0, p1, p2, p3);
		public static bool NETWORK_IS_IN_MP_CUTSCENE() => Function.Call<bool>(0x6CC27C9FA2040220);
		/// <summary>
		/// Note: scripts seem to indicate that this was renamed to NETWORK_IS_PLAYER_IN_MP_FAST_INSTANCE
		/// </summary>
		public static bool NETWORK_IS_PLAYER_IN_MP_CUTSCENE(int player) => Function.Call<bool>(0x63F9EE203C3619F2, player);
		/// <summary>
		/// _NETWORK_A* - _NETWORK_C*
		/// </summary>
		public static void _0x34BC1E79546BA543(bool p0) => Function.Call(0x34BC1E79546BA543, p0);
		public static void _SET_NETWORK_RESPOT_TIMER(int entity, int timer, bool p2) => Function.Call(0x442B4347B6EC36E8, entity, timer, p2);
		/// <summary>
		/// _GET_LAUNCH_PARAM_(RESPOT?)*
		/// Name is probably invalid since this native only reads data from parsed entity.
		/// </summary>
		public static bool _0x26A867C0B7A456D1(int entity) => Function.Call<bool>(0x26A867C0B7A456D1, entity);
		/// <summary>
		/// Old name: _SET_LOCAL_PLAYER_AS_GHOST
		/// </summary>
		public static void SET_LOCAL_PLAYER_AS_GHOST(bool toggle) => Function.Call(0x5FFE9B4144F9712F, toggle);
		/// <summary>
		/// Old name: _IS_ENTITY_GHOSTED_TO_LOCAL_PLAYER
		/// </summary>
		public static bool IS_ENTITY_A_GHOST(int entity) => Function.Call<bool>(0x21D04D7BC538C146, entity);
		/// <summary>
		/// _SET_PLAYER_V* - _SET_S*
		/// </summary>
		public static void _SET_PLAYER_VISIBILITY_TO_LOCAL_PLAYER_DISABLED(int player, bool disabled) => Function.Call(0xDCA6ABDB9288FBE4, player, disabled);
		public static void _SET_ENTITY_GHOSTED_TO_LOCAL_PLAYER(int entity, bool toggle) => Function.Call(0xEE5AE9956743BA20, entity, toggle);
		/// <summary>
		/// Note: this native was added in build 1311.16
		/// </summary>
		public static bool IS_OBJECT_REASSIGNMENT_IN_PROGRESS() => Function.Call<bool>(0x8FE9EB11EC9CC23A);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0x039AD6B57D5179FF() => Function.Call<int>(0x039AD6B57D5179FF);
		/// <summary>
		/// Note: this native was added in build 1311.16
		/// 
		/// GET_NUM_*
		/// </summary>
		public static int _0x02B3CDD652B3CDD6() => Function.Call<int>(0x02B3CDD652B3CDD6);
		/// <summary>
		/// Note: this native was added in build 1311.16
		/// </summary>
		public static int _GET_NUM_PEER_NEGOTIATION_RESPONSES() => Function.Call<int>(0x4FE932E84FE932E8);
		/// <summary>
		/// Must be called from a background script, otherwise it will do nothing.
		/// </summary>
		public static void _NETWORK_DEBUG_REQUEST_ENTITY_POSITION(Any* p0) => Function.Call(0xFA38B52F91B59075, p0);
		public static int NETWORK_GET_NETWORK_ID_FROM_ROPE_ID(int ropeId) => Function.Call<int>(0x42871327315EDAE8, ropeId);
		public static int NETWORK_GET_ROPE_ID_FROM_NETWORK_ID(int netId) => Function.Call<int>(0xEB1A4DD8352EC828, netId);
		public static void _NETWORK_SPAWN_CONFIG_ADD_SPAWN_POINT(float x, float y, float z, float heading) => Function.Call(0xFD1AC0B3858F224C, x, y, z, heading);
		public static void _NETWORK_SPAWN_CONFIG_ADD_SPAWN_POINT(Vector3 vec, float heading) => Function.Call(0xFD1AC0B3858F224C, vec.X, vec.Y, vec.Z, heading);
		public static void _0xA63E4F050F20021F() => Function.Call(0xA63E4F050F20021F);
		public static void _NETWORK_SPAWN_CONFIG_ADD_EXCLUSION_VOLUME(int volume) => Function.Call(0xEEB7818B1D307212, volume);
		public static void _NETWORK_SPAWN_CONFIG_REMOVE_EXCLUSION_VOLUME(int volume) => Function.Call(0xA35E7BF20FA269E0, volume);
		public static void _0x0BF90CBB6B72977B() => Function.Call(0x0BF90CBB6B72977B);
		public static void _0x7B3FF2D193628126(int player) => Function.Call(0x7B3FF2D193628126, player);
		public static void _0x19B52C20B5C4757C() => Function.Call(0x19B52C20B5C4757C);
		public static void NETWORK_SPAWN_CONFIG_SET_FLAGS(int flags) => Function.Call(0xF94A0D5B254375DF, flags);
		public static void _0x6CEE2E30021DAEC6() => Function.Call(0x6CEE2E30021DAEC6);
		public static void _NETWORK_SPAWN_CONFIG_ADD_PROPERTY_SCRIPTED(int configProperty, bool include) => Function.Call(0x44D59EC597BBF348, configProperty, include);
		public static void _0xB131E686BD97B3F8() => Function.Call(0xB131E686BD97B3F8);
		public static void _NETWORK_SPAWN_CONFIG_ADD_PROPERTY_PREFERENCE(int configProperty, bool include, float weight) => Function.Call(0xEB6027FD1B4600D5, configProperty, include, weight);
		public static void _0x405DDEFB1F531B18(int volume, bool p1, Any p2, Any p3) => Function.Call(0x405DDEFB1F531B18, volume, p1, p2, p3);
		public static void _0x43CF999205084B4B() => Function.Call(0x43CF999205084B4B);
		public static void _0x13F592FC3BF0EA84(int volume, bool p1, float originalWeight, Any p3, Any p4) => Function.Call(0x13F592FC3BF0EA84, volume, p1, originalWeight, p3, p4);
		public static void _0xCF23AB5BD47B384D(Any p0) => Function.Call(0xCF23AB5BD47B384D, p0);
		public static void _0xE5634491A58C2703(float p0) => Function.Call(0xE5634491A58C2703, p0);
		public static void NETWORK_SPAWN_CONFIG_SET_GROUND_TO_ROOT_OFFSET(float offset) => Function.Call(0x59577799F6AE2F34, offset);
		public static void _NETWORK_SPAWN_CONFIG_SET_LEVEL_WATER_DEPTH(int waterDepthLevel) => Function.Call(0xBDCC671B911040F9, waterDepthLevel);
		public static void NETWORK_SPAWN_CONFIG_SET_TUNING_FLOAT(uint p0, float p1) => Function.Call(0x0608326F7B98C08D, p0, p1);
		public static void _0x5D3C528B7A7DF836(uint p0) => Function.Call(0x5D3C528B7A7DF836, p0);
		public static void _0x2686BD9566B65EDA(float x, float y, float z) => Function.Call(0x2686BD9566B65EDA, x, y, z);
		public static void _0x2686BD9566B65EDA(Vector3 vec) => Function.Call(0x2686BD9566B65EDA, vec.X, vec.Y, vec.Z);
		public static void _0xBB1EC8C2EEF33BAA(int entity) => Function.Call(0xBB1EC8C2EEF33BAA, entity);
		public static bool _0x67CCDF74C4DF7169() => Function.Call<bool>(0x67CCDF74C4DF7169);
		public static void _0xC8B6D18E22484643() => Function.Call(0xC8B6D18E22484643);
		public static void _0x97BCE4C4B3191228() => Function.Call(0x97BCE4C4B3191228);
		public static int _0x41452E8A3B9C0C4B() => Function.Call<int>(0x41452E8A3B9C0C4B);
		public static bool _NETWORK_SPAWN_CONFIG_SEARCH_IN_PROGRESS() => Function.Call<bool>(0x89EC2FC89ECB1005);
		public static void _0x61BFBAA795E712AD() => Function.Call(0x61BFBAA795E712AD);
		public static void _NETWORK_SPAWN_CONFIG_SET_CANCEL_SEARCH() => Function.Call(0x765E60A1DCB8B1CE);
		public static void _0x691E4DE5309EAEFC(Any p0, Any* p1) => Function.Call(0x691E4DE5309EAEFC, p0, p1);
		public static void NETWORK_START_SOLO_TUTORIAL_SESSION() => Function.Call(0x17E0198B3882C2CB);
		public static void NETWORK_END_TUTORIAL_SESSION() => Function.Call(0xD0AFAFF5A51D72F7);
		public static bool NETWORK_IS_IN_TUTORIAL_SESSION() => Function.Call<bool>(0xADA24309FE08DACF);
		public static bool NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING() => Function.Call<bool>(0x35F0B98A8387274D);
		/// <summary>
		/// Old name: _NETWORK_IS_PLAYER_EQUAL_TO_INDEX
		/// </summary>
		public static bool NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(int player, int index) => Function.Call<bool>(0x9DE986FC9A87C474, player, index);
		public static void NETWORK_ALLOW_ALL_ENTITY_FADING_FOR_INSTANCES(bool toggle) => Function.Call(0x4B05B97BA46F419D, toggle);
		public static void NETWORK_ALLOW_ENTITY_FADING_FOR_INSTANCES(int entity, bool toggle) => Function.Call(0xF3354D6CA46F419D, entity, toggle);
		public static void _0xDC6AD5C046F33AB4(bool p0, bool p1) => Function.Call(0xDC6AD5C046F33AB4, p0, p1);
		public static void _0x6C7E04E9DE451789() => Function.Call(0x6C7E04E9DE451789);
		public static void NETWORK_SET_LOCAL_PLAYER_PENDING_FAST_INSTANCE_ID(int instanceId) => Function.Call(0x007FF852DCF49DA4, instanceId);
		public static int _NETWORK_GET_PLAYER_FAST_INSTANCE_ID(int player) => Function.Call<int>(0xD9267375834C5EAB, player);
		public static void NETWORK_CONCEAL_PLAYER(int player, bool toggle) => Function.Call(0xBBDF066252829606, player, toggle);
		public static bool NETWORK_IS_PLAYER_CONCEALED(int player) => Function.Call<bool>(0x919B3C98ED8292F9, player);
		/// <summary>
		/// Note: this native was added in build 1355.30
		/// </summary>
		public static void _0x40FEDB13870042F1() => Function.Call(0x40FEDB13870042F1);
		/// <summary>
		/// Note: this native was added in build 1355.30
		/// </summary>
		public static void _0x422F9D6D6C7BC290(int p0) => Function.Call(0x422F9D6D6C7BC290, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23, but was only used after build 1436.25
		/// </summary>
		public static void NETWORK_REQUEST_CLOUD_TUNABLES() => Function.Call(0x42FB3B532D526E6C);
		public static bool NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING() => Function.Call<bool>(0x0467C11ED88B7D28);
		public static int NETWORK_GET_TUNABLE_CLOUD_CRC() => Function.Call<int>(0x10BD227A753B0D84);
		public static bool NETWORK_DOES_TUNABLE_EXIST(uint tunableContext, uint tunableName) => Function.Call<bool>(0x85E5F8B9B898B20A, tunableContext, tunableName);
		public static bool NETWORK_ACCESS_TUNABLE_INT(uint tunableContext, uint tunableName, int* value) => Function.Call<bool>(0x8BE1146DFD5D4468, tunableContext, tunableName, value);
		public static bool NETWORK_ACCESS_TUNABLE_BOOL(uint tunableContext, uint tunableName) => Function.Call<bool>(0xAA6A47A573ABB75A, tunableContext, tunableName);
		public static int NETWORK_TRY_ACCESS_TUNABLE_INT_HASH(uint tunableContext, uint tunableName, int defaultValue) => Function.Call<int>(0xA25E006B36719774, tunableContext, tunableName, defaultValue);
		public static float NETWORK_TRY_ACCESS_TUNABLE_FLOAT_HASH(uint tunableContext, uint tunableName, float defaultValue) => Function.Call<float>(0xA18393089C05E49C, tunableContext, tunableName, defaultValue);
		public static bool NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(uint tunableContext, uint tunableName, bool defaultValue) => Function.Call<bool>(0xB2AD5D29A99D4B26, tunableContext, tunableName, defaultValue);
		public static void _0x894B5ECAB45D2342(int netHandle, Any p1) => Function.Call(0x894B5ECAB45D2342, netHandle, p1);
		public static void NETWORK_DISABLE_PROXIMITY_MIGRATION(int netID) => Function.Call(0x407091CF6037118E, netID);
		public static bool _COMMERCE_STORE_IS_OPEN() => Function.Call<bool>(0xCE5E79D9E303628E);
		public static bool _COMMERCE_STORE_IS_ENABLED() => Function.Call<bool>(0xDBC754CB6CCB9378);
		public static bool CLOUD_HAS_REQUEST_COMPLETED(int id) => Function.Call<bool>(0x4C61B39930D045DA, id);
		public static bool CLOUD_DID_REQUEST_SUCCEED(int id) => Function.Call<bool>(0x3A3D5568AF297CD5, id);
		public static bool _GET_LAUNCH_PARAM_EXISTS(string paramName) => Function.Call<bool>(0x02E97CE283648CD9, paramName);
		public static string GET_LAUNCH_PARAM_VALUE(string paramName) => Function.Call<string>(0x65E65CA6A0FE59D4, paramName);
		public static void _SET_LAUNCH_PARAM_VALUE(string paramName, string value) => Function.Call(0x668AF6E4933AC13F, paramName, value);
		public static void _CLEAR_LAUNCH_PARAM(string paramName) => Function.Call(0x782C94DB6469634D, paramName);
		public static string _GET_LAUNCH_PARAM_STRING() => Function.Call<string>(0xC59AB6A04333C502);
		public static void _SET_LAUNCH_PARAM_STRING(string _params) => Function.Call(0xDFFC15AA63D04AAB, _params);
		/// <summary>
		/// Old name: _CLEAR_LAUNCH_PARAMS
		/// </summary>
		public static void CLEAR_SERVICE_EVENT_ARGUMENTS() => Function.Call(0x966DD84FB6A46017);
		public static bool UGC_IS_REQUEST_PENDING(int ugcRequestId) => Function.Call<bool>(0xF4AC4FA844FD559A, ugcRequestId);
		public static bool UGC_HAS_REQUEST_FINISHED(int ugcRequestId) => Function.Call<bool>(0xA9EB4D606076615D, ugcRequestId);
		public static bool UGC_DID_REQUEST_SUCCEED(int ugcRequestId) => Function.Call<bool>(0x0B6009A90B8495F1, ugcRequestId);
		public static bool _0xCD53E6CBF609C012(int ugcRequestId) => Function.Call<bool>(0xCD53E6CBF609C012, ugcRequestId);
		/// <summary>
		/// Returns ugcRequestId
		/// </summary>
		public static int _UGC_QUERY_BY_CONTENT_TYPE(int p0, int maxGet, string contentTypeName, int p3, int p4, int p5) => Function.Call<int>(0xF40EF49B3099E98E, p0, maxGet, contentTypeName, p3, p4, p5);
		/// <summary>
		/// Returns ugcRequestId
		/// </summary>
		public static int _UGC_QUERY_BY_CATEGORY(int categoryType, int p1, int maxGet, string contentTypeName, int p4, bool p5) => Function.Call<int>(0x8C109958C9BB559D, categoryType, p1, maxGet, contentTypeName, p4, p5);
		/// <summary>
		/// Returns ugcRequestId
		/// </summary>
		public static int _UGC_QUERY_BY_CONTENT_ID(string contentId, bool latestVersion, string contentTypeName) => Function.Call<int>(0x69D22E183580113F, contentId, latestVersion, contentTypeName);
		public static bool _UGC_IS_BOOK_MARKED(string contentId) => Function.Call<bool>(0xE42D1042F09865FE, contentId);
		public static void UGC_CLEAR_QUERY_RESULTS(int ugcRequestId) => Function.Call(0xE931354FEA710038, ugcRequestId);
		public static bool UGC_QUERY_WAS_FORCE_CANCELLED(int ugcRequestId) => Function.Call<bool>(0xF8F0705E77A0E705, ugcRequestId);
		public static int UGC_QUERY_GET_CONTENT_NUM(int ugcRequestId) => Function.Call<int>(0x76160E0396142765, ugcRequestId);
		public static Any _UGC_QUERY_GET_CREATOR_HANDLE(Any p0, int index, Any* gamerHandle) => Function.Call<Any>(0xADB56322EEDFBDC9, p0, index, gamerHandle);
		public static string _UGC_QUERY_GET_OWNER_ID(Any p0, int index) => Function.Call<string>(0xF9F0B3028431967B, p0, index);
		public static string _UGC_QUERY_GET_NAME(Any p0, int index) => Function.Call<string>(0x2D053EA815702DD1, p0, index);
		public static string _UGC_QUERY_GET_ROOT_CONTENT_ID(Any p0, int index) => Function.Call<string>(0x566CEB0542EF5ECF, p0, index);
		public static string _UGC_QUERY_GET_PLAYLIST_NAME(Any p0, int index) => Function.Call<string>(0xCAF50048C8D0FBA0, p0, index);
		public static uint _UGC_QUERY_GET_MISSION_DESC_HASH(Any p0, int index) => Function.Call<uint>(0xA6BF569956C60A60, p0, index);
		/// <summary>
		/// Returns string for GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO
		/// </summary>
		public static string _UGC_QUERY_GET_CREATOR_PHOTO(Any p0, int p1, Any p2) => Function.Call<string>(0x409FE0CA6A4D1D49, p0, p1, p2);
		public static void _UGC_QUERY_GET_DATE(Any p0, int index, Any* p2) => Function.Call(0xE0CB4AB15CB32710, p0, index, p2);
		public static int _UGC_QUERY_GET_POSIX_UPDATED_DATE(Any p0, Any p1) => Function.Call<int>(0x21A99A72B00D8002, p0, p1);
		public static int _UGC_QUERY_GET_POSIX_PUBLISHED_DATE(Any p0, Any p1) => Function.Call<int>(0x104080CA9E519B00, p0, p1);
		public static int _UGC_QUERY_GET_VERSION(Any p0, int index, int p2) => Function.Call<int>(0x63E9DCBC8B0931ED, p0, index, p2);
		public static int _UGC_QUERY_GET_LANGUAGE(Any p0, int index) => Function.Call<int>(0x97764E8AC6487A9A, p0, index);
		public static bool _UGC_QUERY_GET_PUBLISHED(Any p0, Any p1) => Function.Call<bool>(0x9993F1E11944A3DD, p0, p1);
		public static float _UGC_QUERY_GET_RATING(Any p0, int index, int p2) => Function.Call<float>(0x24CD8FAEA1368379, p0, index, p2);
		public static Any _0x5F0E99071582DECA(Any p0, int index, int p2) => Function.Call<Any>(0x5F0E99071582DECA, p0, index, p2);
		public static bool UGC_QUERY_GET_CONTENT_HAS_PLAYER_RECORD(Any p0, int index) => Function.Call<bool>(0xF794765390A6DCA5, p0, index);
		public static bool _UGC_QUERY_GET_BOOK_MARKED(Any p0, int index) => Function.Call<bool>(0x98539FC453AEA639, p0, index);
		/// <summary>
		/// Checks if the user has ROS privilege 14.
		/// </summary>
		public static bool _UGC_HAS_PRIVILEGE() => Function.Call<bool>(0x6506BFA755FB209C);
		public static int UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(string contentTypeName, string contentId, int fileId, int fileVersion, int languageId) => Function.Call<int>(0x7FD2990AF016795E, contentTypeName, contentId, fileId, fileVersion, languageId);
		public static int UGC_REQUEST_CACHED_DESCRIPTION(uint description) => Function.Call<int>(0x5E0165278F6339EE, description);
		public static bool UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(uint description) => Function.Call<bool>(0x2D5DC831176D0114, description);
		public static bool UGC_HAS_DESCRIPTION_REQUEST_FINISHED(uint description) => Function.Call<bool>(0xEBFA8D50ADDC54C4, description);
		public static bool UGC_DID_DESCRIPTION_REQUEST_SUCCEED(uint description) => Function.Call<bool>(0x162C23CA83ED0A62, description);
		public static string UGC_GET_CACHED_DESCRIPTION(uint description, int length) => Function.Call<string>(0x40F7E66472DF3E5C, description, length);
		public static bool UGC_RELEASE_CACHED_DESCRIPTION(uint description) => Function.Call<bool>(0x5A34CD9C3C5BEC44, description);
		public static void UGC_RELEASE_ALL_CACHED_DESCRIPTIONS() => Function.Call(0x68103E2247887242);
		public static void UGC_SET_QUERY_DATA_FROM_OFFLINE(bool p0) => Function.Call(0xF98DDE0A8ED09323, p0);
		public static bool UGC_IS_LANGUAGE_SUPPORTED(int languageId) => Function.Call<bool>(0xF53E48461B71EECB, languageId);
		public static Any _0xD4022C7286B0DFA2(string p0, int p1, int p2) => Function.Call<Any>(0xD4022C7286B0DFA2, p0, p1, p2);
		/// <summary>
		/// Returns false if pedshot push failed
		/// </summary>
		public static bool _NETWORK_PERSONA_PHOTO_WRITE_SC_PROFILE(string texture, int personaPhotoType, int formatIndex) => Function.Call<bool>(0xB72999D3120599DF, texture, personaPhotoType, formatIndex);
		/// <summary>
		/// Returns false if pedshot push failed
		/// </summary>
		public static bool _NETWORK_PERSONA_PHOTO_WRITE_LOCAL(string texture, int playerSlot, int p2, int personaPhotoLocalCacheType) => Function.Call<bool>(0x2A48D9567940598F, texture, playerSlot, p2, personaPhotoLocalCacheType);
		/// <summary>
		/// _NETWORK_IS_T* - _NETWORK_RE*
		/// </summary>
		public static bool _NETWORK_IS_PREVIOUS_UPLOAD_PENDING() => Function.Call<bool>(0xA21E3BAD0A42D199);
		public static Any _0xCC4E72C339461ED1() => Function.Call<Any>(0xCC4E72C339461ED1);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static string _0x356F9FB0698C1FEB(int player, int personaPhotoLocalCacheType) => Function.Call<string>(0x356F9FB0698C1FEB, player, personaPhotoLocalCacheType);
		/// <summary>
		/// Only used in R* SP Script map_app_event_handler
		/// </summary>
		public static string _0xCAF4CA2F87779F8F(Any* gamerHandle, int p1) => Function.Call<string>(0xCAF4CA2F87779F8F, gamerHandle, p1);
		public static string _REQUEST_PEDSHOT_TEXTURE_DOWNLOAD(Any* gamerHandle, int p1) => Function.Call<string>(0xB5C4B18B12A2AF23, gamerHandle, p1);
		public static bool _TEXTURE_DOWNLOAD_TEXTURE_NAME_IS_VALID(string name) => Function.Call<bool>(0xE2C3CEC3C0903A00, name);
		/// <summary>
		/// Returns textureDownloadId
		/// </summary>
		public static int TEXTURE_DOWNLOAD_REQUEST(Any* gamerHandle, string filePath, string name, bool p3) => Function.Call<int>(0x16160DA74A8E74A2, gamerHandle, filePath, name, p3);
		/// <summary>
		/// Returns textureDownloadId
		/// </summary>
		public static int _MUGSHOT_TEXTURE_DOWNLOAD_REQUEST(Any* gamerHandle, int p1, string name, bool p3) => Function.Call<int>(0x9B5DB6CEAFAA10BB, gamerHandle, p1, name, p3);
		public static int UGC_TEXTURE_DOWNLOAD_REQUEST(Any* p0, Any p1, Any p2, Any p3, Any* p4, bool p5) => Function.Call<int>(0x308F96458B7087CC, p0, p1, p2, p3, p4, p5);
		public static int _LOCAL_PLAYER_PEDSHOT_TEXTURE_DOWNLOAD_REQUEST(int playerSlot, int personaPhotoLocalCacheType) => Function.Call<int>(0x6E2FD8CF7EB10E53, playerSlot, personaPhotoLocalCacheType);
		public static void TEXTURE_DOWNLOAD_RELEASE(int textureDownloadId) => Function.Call(0x487EB90B98E9FB19, textureDownloadId);
		public static void _TEXTURE_DOWNLOAD_RELEASE_BY_NAME(string name) => Function.Call(0x7A17B7981560FFA5, name);
		public static string TEXTURE_DOWNLOAD_GET_NAME(int textureDownloadId) => Function.Call<string>(0x3448505B6E35262D, textureDownloadId);
		/// <summary>
		/// 0 = succeeded
		/// 1 = pending
		/// 2 = failed
		/// </summary>
		public static int GET_STATUS_OF_TEXTURE_DOWNLOAD(int textureDownloadId) => Function.Call<int>(0x8BD6C6DEA20E82C6, textureDownloadId);
		public static int _PEDMUGSHOT_GET_STATUS() => Function.Call<int>(0xCBAC13F065C47596);
		public static bool _PEDMUGSHOT_TAKE() => Function.Call<bool>(0xCD954F330693F5F2);
		public static Any _PEDMUGSHOT_REQUEST_SEND() => Function.Call<Any>(0xFBC30B70B3CDB87E);
		public static void _0x814729078AED6D30() => Function.Call(0x814729078AED6D30);
		public static bool NETWORK_HAVE_ROS_BANNED_PRIV() => Function.Call<bool>(0x8020A73847E0CA7D);
		public static bool NETWORK_HAS_ROS_PRIVILEGE(int index) => Function.Call<bool>(0xA699957E60D80214, index);
		/// <summary>
		/// Always returns -1. Seems to be XB1 specific.
		/// </summary>
		public static int NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(Any* gamerHandle) => Function.Call<int>(0xDEB2B99A1AF1A2A6, gamerHandle);
		public static void _NETWORK_AUTO_SESSION_SET_ALLOWED_TO_SPLIT(bool toggle) => Function.Call(0x0A428058079EE65C, toggle);
		public static bool NETWORK_AUTO_SESSION_IS_ALLOWED_TO_MERGE() => Function.Call<bool>(0xAADED99A6B268A27);
		public static void _NETWORK_AUTO_SESSION_SET_ALLOWED_TO_MERGE(bool toggle, Any* p1, int p2) => Function.Call(0x63246A24F5747510, toggle, p1, p2);
		public static bool _NETWORK_AUTO_SESSION_IS_AUTO_WARP_DISABLED() => Function.Call<bool>(0xE258570E0C116A66);
		public static void _NETWORK_AUTO_SESSION_SET_AUTO_WARP_ENABLED(bool toggle) => Function.Call(0x4440FEE3EFE78F54, toggle);
		public static bool NETWORK_AUTO_SESSION_CAN_SPLIT_SESSION(int* p0) => Function.Call<bool>(0xE404BFF0ABA23CDC, p0);
		public static bool NETWORK_AUTO_SESSION_SPLIT_SESSION(int playersToTake, int maxInstancePlayers, int sessionFlags, int bucketId) => Function.Call<bool>(0xC223D299C670413D, playersToTake, maxInstancePlayers, sessionFlags, bucketId);
		public static bool _NETWORK_AUTO_SESSION_IS_PROCESSING_SESSION_SPLIT() => Function.Call<bool>(0xA021095C983F20D8);
		public static bool _NETWORK_AUTO_SESSION_SPLIT_SESSION_SUCCESSFUL() => Function.Call<bool>(0x6D87BA8EF15226CD);
		public static bool _NETWORK_AUTO_SESSION_IS_INSTANCED_SESSION() => Function.Call<bool>(0x277865A734918AE6);
		public static void NETWORK_AUTO_SESSION_FINISH_INSTANCE() => Function.Call(0xBB51299166B844F3);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0xFD8112109A96877C() => Function.Call(0xFD8112109A96877C);
		public static void _0x5A91BCEF74944E93(int player, float p1) => Function.Call(0x5A91BCEF74944E93, player, p1);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static int _0xFB3205788F8AFA3F() => Function.Call<int>(0xFB3205788F8AFA3F);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0x335AF56613CA0F49(int p0) => Function.Call(0x335AF56613CA0F49, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static bool _0x9E5A47744C0F0376(int p0) => Function.Call<bool>(0x9E5A47744C0F0376, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0xD3B6EBC6C3D77D44(int p0) => Function.Call(0xD3B6EBC6C3D77D44, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0xA7670F7991099680(int p0) => Function.Call(0xA7670F7991099680, p0);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0x7673C0D2C5CDAC55() => Function.Call(0x7673C0D2C5CDAC55);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0x3CBD6565D9C3B133(int p0, int p1, float p2) => Function.Call(0x3CBD6565D9C3B133, p0, p1, p2);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0x0D183D8490EE4366(int p0, int p1) => Function.Call(0x0D183D8490EE4366, p0, p1);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0xC1968045EEB563B7(int p0) => Function.Call(0xC1968045EEB563B7, p0);
		public static bool NETWORK_AUTO_SESSION_IS_OBJECT_CREATION_PAUSED() => Function.Call<bool>(0x0E2C3AEE6CE603B7);
		public static bool _0x0B6B4507AC5EA8B8() => Function.Call<bool>(0x0B6B4507AC5EA8B8);
		public static bool NETWORK_IS_RESETTING_POPULATION() => Function.Call<bool>(0x1BB50CD340A996E6);
		public static bool NETWORK_RESET_POPULATION(bool p0, int p1) => Function.Call<bool>(0x101F538C25ABB39A, p0, p1);
		public static void NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(bool toggle) => Function.Call(0xC505036A35AFD01B, toggle);
		public static void _0x3034C77C79A58880(bool p0) => Function.Call(0x3034C77C79A58880, p0);
		/// <summary>
		/// Old name: _NETWORK_ALLOW_LOCAL_ENTITY_ATTACHMENT
		/// </summary>
		public static void NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(int entity, bool toggle) => Function.Call(0x267C78C60E806B9A, entity, toggle);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void NETWORK_SHOW_CHAT_RESTRICTION_MSC(int player) => Function.Call(0x6BFF5F84102DF80A, player);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void NETWORK_SHOW_PSN_UGC_RESTRICTION() => Function.Call(0x5C497525F803486B);
		/// <summary>
		/// Old name: _NETWORK_IS_CONNECTION_ENDPOINT_RELAY_SERVER
		/// </summary>
		public static bool NETWORK_IS_CONNECTED_VIA_RELAY(int player) => Function.Call<bool>(0x16D3D49902F697BB, player);
		/// <summary>
		/// Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER
		/// </summary>
		public static float NETWORK_GET_AVERAGE_LATENCY(int player) => Function.Call<float>(0xD414BE129BB81B32, player);
		/// <summary>
		/// Same as NETWORK_GET_AVERAGE_LATENCY (0xD414BE129BB81B32)
		/// 
		/// Old name: _NETWORK_GET_AVERAGE_LATENCY_FOR_PLAYER_2
		/// </summary>
		public static float NETWORK_GET_AVERAGE_PING(int player) => Function.Call<float>(0x0E3A041ED6AC2B45, player);
		/// <summary>
		/// Old name: _NETWORK_GET_AVERAGE_PACKET_LOSS_FOR_PLAYER
		/// </summary>
		public static float NETWORK_GET_AVERAGE_PACKET_LOSS(int player) => Function.Call<float>(0x350C23949E43686C, player);
		/// <summary>
		/// Old name: _NETWORK_GET_NUM_UNACKED_FOR_PLAYER
		/// </summary>
		public static int NETWORK_GET_NUM_UNACKED_RELIABLES(int player) => Function.Call<int>(0xFF8FCF9FFC458A1C, player);
		/// <summary>
		/// Old name: _NETWORK_GET_UNRELIABLE_RESEND_COUNT_FOR_PLAYER
		/// </summary>
		public static int NETWORK_GET_UNRELIABLE_RESEND_COUNT(int player) => Function.Call<int>(0x3765C3A3E8192E10, player);
		/// <summary>
		/// Old name: _NETWORK_GET_OLDEST_RESEND_COUNT_FOR_PLAYER
		/// </summary>
		public static int NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(int player) => Function.Call<int>(0x52C1EADAF7B10302, player);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any NETWORK_DUMP_NET_IF_CONFIG() => Function.Call<Any>(0xAEDF1BC1C133D6E3);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static Any NETWORK_GET_NET_STATISTICS_INFO() => Function.Call<Any>(0x6FD992C4A1C1B986);
		/// <summary>
		/// Returns true if the passed value is less than 32.
		/// </summary>
		public static bool NETWORK_IS_PLAYER_INDEX_VALID(int player) => Function.Call<bool>(0x255A5EF65EDA9167, player);
		public static bool _GET_PLAYER_WAYPOINT_IS_ACTIVE(int player) => Function.Call<bool>(0xDCC4B7F7112E8AB7, player);
		public static void _0x455156F47DC6B78C(bool p0) => Function.Call(0x455156F47DC6B78C, p0);
		public static void _SET_LOCAL_PLAYER_DAMAGE_MULTIPLIER_FOR_PLAYER(int player, float damageMultiplier) => Function.Call(0xD041A32992A55F84, player, damageMultiplier);
		/// <summary>
		/// Old name: _NETWORK_SET_VEHICLE_WHEELS_DESTRUCTIBLE
		/// </summary>
		public static void NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(int entity, bool p1) => Function.Call(0x0C8BC052AE87D744, entity, p1);
		public static void _0x5CD3AAD8FF9ED121(Any p0) => Function.Call(0x5CD3AAD8FF9ED121, p0);
		public static void _0x51951DE06C0D1C40(int player, int type) => Function.Call(0x51951DE06C0D1C40, player, type);
		public static void _0xE3AB5EEFCB6671A2(int setting) => Function.Call(0xE3AB5EEFCB6671A2, setting);
		public static void _0x9B39B0555CC692B5() => Function.Call(0x9B39B0555CC692B5);
		public static int _0xFE53B1F8D43F19BF(int player1, int player2) => Function.Call<int>(0xFE53B1F8D43F19BF, player1, player2);
		public static bool _0x862C5040F4888741(int player1, int player2) => Function.Call<bool>(0x862C5040F4888741, player1, player2);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x2CD41AC000E6F611() => Function.Call(0x2CD41AC000E6F611);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xACC44768AF229042() => Function.Call(0xACC44768AF229042);
		public static void _0x7E300B5B86AB1D1A(Any* p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11, int p12, int p13, int p14) => Function.Call(0x7E300B5B86AB1D1A, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		public static int GET_UNIQUE_INT_FOR_PLAYER(int player) => Function.Call<int>(0x07F723401B9D921C, player);
		public static void _0x780A13F780A13F1B(bool toggle) => Function.Call(0x780A13F780A13F1B, toggle);
		public static bool _NETWORK_IS_TRACKED_PLAYER_VISIBLE(int player, int trackedPlayer) => Function.Call<bool>(0xE525878A35B9EEBD, player, trackedPlayer);
		public static bool NETWORK_IS_AIM_CAM_ACTIVE(int player) => Function.Call<bool>(0x8E7CE19219669AEB, player);
		public static void _NETWORK_ALERT(uint ctx, uint lh, int ec, int h) => Function.Call(0x1BAA028F52EED310, ctx, lh, ec, h);
		/// <summary>
		/// Note: this native was added in build 1311.23
		/// </summary>
		public static void _0x19447FCAE97704DC(uint ctx, int ec, bool ex, bool ro) => Function.Call(0x19447FCAE97704DC, ctx, ec, ex, ro);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x2C4E98DDA475364F(string p0) => Function.Call(0x2C4E98DDA475364F, p0);
		public static void _0x3F0ABAE38A0515AD(int p0, int p1) => Function.Call(0x3F0ABAE38A0515AD, p0, p1);
		public static int _0x3F2EE18A3E294801(int p0) => Function.Call<int>(0x3F2EE18A3E294801, p0);
		public static void _SET_SOCIAL_MATCHMAKING_ALLOWED(bool toggle) => Function.Call(0x777D0571A466B520, toggle);
		public static bool _GET_SOCIAL_MATCHMAKING_ALLOWED() => Function.Call<bool>(0xD0541EF28E9C4783);
		public static bool NETWORK_AWARD_HAS_REACHED_MAXCLAIM(Any p0) => Function.Call<bool>(0xFBE782B3165AC8EC, p0);
		public static Any _0x271F95E55C663B8B(Any p0, Any p1) => Function.Call<Any>(0x271F95E55C663B8B, p0, p1);
		public static Any _0x64A36BA85CE01A81(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x64A36BA85CE01A81, p0, p1, p2, p3);
		public static Any _0xE10F2D7715ABABEC(Any p0) => Function.Call<Any>(0xE10F2D7715ABABEC, p0);
		public static Any _0x7A8E8DF782B47EB0(Any p0, Any p1, Any p2) => Function.Call<Any>(0x7A8E8DF782B47EB0, p0, p1, p2);
		public static Any _0x77B299E8799B1332(Any p0, Any p1, Any p2) => Function.Call<Any>(0x77B299E8799B1332, p0, p1, p2);
		public static Any _0x923346025512DFB7(Any p0) => Function.Call<Any>(0x923346025512DFB7, p0);
		public static int _NETWORK_GET_XP() => Function.Call<int>(0xDB438CC9BC6F4022);
		public static int _NETWORK_GET_RANK() => Function.Call<int>(0x32C90CDFAF40514C);
		public static void NETWORK_SET_RECENT_GAMERS_ENABLED(bool toggle) => Function.Call(0x29FE035D35B8589C, toggle);
		public static bool _0x273E04A3A7AD1F2D() => Function.Call<bool>(0x273E04A3A7AD1F2D);
		public static void _NETWORK_ADD_PLAYER_TO_RECENT_GAMERS_LIST(int player, int p1) => Function.Call(0x157D8F3DE12B307F, player, p1);
		public static bool NETWORK_REQUEST_RECENT_GAMER_NAMES(int p0, int playerCount) => Function.Call<bool>(0x6D206D383BB5F6B1, p0, playerCount);
		public static bool _NETWORK_IS_RECENT_GAMER_NAMES_REQUEST_IN_PROGRESS() => Function.Call<bool>(0x4664D213A0CCAF40);
		public static bool _NETWORK_DID_RECENT_GAMER_NAMES_REQUEST_SUCCEED() => Function.Call<bool>(0x12AEB56B489415C5);
		public static int _NETWORK_GET_NUM_RECENT_GAMERS() => Function.Call<int>(0x37A834AEC6A4F74A);
		public static bool NETWORK_GET_RECENT_GAMER_NAMES(int p0, int p1, Any* outData, int dataSize) => Function.Call<bool>(0xFEFCC345CE357453, p0, p1, outData, dataSize);
		public static void _0x49CF17A564918E8D() => Function.Call(0x49CF17A564918E8D);
		public static void _0xD637D327080CD86E(int p0) => Function.Call(0xD637D327080CD86E, p0);
		public static void _0x564552C6AF1EEAB1() => Function.Call(0x564552C6AF1EEAB1);
		public static void NETWORK_ACTIVITY_RESET_TO_IDLE() => Function.Call(0x3FE141FDB990E3D1);
		public static void NETWORK_ACTIVITY_SET_CURRENT(int netPlaylistActivity) => Function.Call(0x9ADAC065D9F6706F, netPlaylistActivity);
		/// <summary>
		/// Returns CGameConfig->ConfigOnlineServices->RosTitleName (see gameconfig.xml)
		/// </summary>
		public static string _NETWORK_GET_ROS_TITLE_NAME() => Function.Call<string>(0xAC6153A0722F524C);
		public static void _REPORT_PLAYER(int player, int reportType, string description, string horseName) => Function.Call(0xA197C35F73AC0F12, player, reportType, description, horseName);
	}

	public unsafe static class OBJECT
	{
		public static int CREATE_OBJECT(uint modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic, bool p7, bool p8) => Function.Call<int>(0x509D5878EB39E842, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7, p8);
		public static int CREATE_OBJECT(uint modelHash, Vector3 vec, bool isNetwork, bool bScriptHostObj, bool dynamic, bool p7, bool p8) => Function.Call<int>(0x509D5878EB39E842, modelHash, vec.X, vec.Y, vec.Z, isNetwork, bScriptHostObj, dynamic, p7, p8);
		public static int CREATE_OBJECT_NO_OFFSET(uint modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic, bool p7) => Function.Call<int>(0x9A294B2138ABB884, modelHash, x, y, z, isNetwork, bScriptHostObj, dynamic, p7);
		public static int CREATE_OBJECT_NO_OFFSET(uint modelHash, Vector3 vec, bool isNetwork, bool bScriptHostObj, bool dynamic, bool p7) => Function.Call<int>(0x9A294B2138ABB884, modelHash, vec.X, vec.Y, vec.Z, isNetwork, bScriptHostObj, dynamic, p7);
		/// <summary>
		/// Deletes the specified object, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		public static void DELETE_OBJECT(int* _object) => Function.Call(0x931914268722C263, _object);
		public static bool PLACE_OBJECT_ON_GROUND_PROPERLY(int _object, bool p1) => Function.Call<bool>(0x58A850EAEE20FAA3, _object, p1);
		public static bool SLIDE_OBJECT(int _object, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collision) => Function.Call<bool>(0x2FDFF4107B8C1147, _object, toX, toY, toZ, speedX, speedY, speedZ, collision);
		public static void SET_OBJECT_TARGETTABLE(int _object, bool targettable) => Function.Call(0x8A7391690F5AFD81, _object, targettable);
		public static void _SET_OBJECT_TARGETTABLE_2(int _object, bool targettable) => Function.Call(0x581EDBE56E8D62C9, _object, targettable);
		/// <summary>
		/// When p1 and p2 are true you can focus on the object (similar to when you focus a ped)
		/// </summary>
		public static void _SET_OBJECT_TARGETTABLE_FOCUS(int _object, bool p1, bool p2) => Function.Call(0xA22712E8471AA08E, _object, p1, p2);
		public static void _0xF6E88489B4E6EBE5(Any p0, Any p1) => Function.Call(0xF6E88489B4E6EBE5, p0, p1);
		public static void _0xE157A8A336C7F04A(Any p0, Any p1) => Function.Call(0xE157A8A336C7F04A, p0, p1);
		public static void _0x46CBCF0E98A4E156(Any p0, Any p1) => Function.Call(0x46CBCF0E98A4E156, p0, p1);
		/// <summary>
		/// isMission - if true doesn't return mission objects
		/// </summary>
		public static int GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, uint modelHash, bool isMission, bool p6, bool p7) => Function.Call<int>(0xE143FA2249364369, x, y, z, radius, modelHash, isMission, p6, p7);
		public static int GET_CLOSEST_OBJECT_OF_TYPE(Vector3 vec, float radius, uint modelHash, bool isMission, bool p6, bool p7) => Function.Call<int>(0xE143FA2249364369, vec.X, vec.Y, vec.Z, radius, modelHash, isMission, p6, p7);
		public static bool HAS_OBJECT_BEEN_BROKEN(Any p0) => Function.Call<bool>(0x8ABFB70C49CC43E2, p0);
		public static bool HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(float p0, float p1, float p2, float p3, uint modelHash, Any p5) => Function.Call<bool>(0x761B0E69AC4D007E, p0, p1, p2, p3, modelHash, p5);
		/// <summary>
		/// Old name: _GET_OBJECT_OFFSET_FROM_COORDS
		/// </summary>
		public static Vector3 GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset) => Function.Call<Vector3>(0x163E252DE035A133, xPos, yPos, zPos, heading, xOffset, yOffset, zOffset);
		public static Vector3 GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(Vector3 vec, float heading, Vector3 offset) => Function.Call<Vector3>(0x163E252DE035A133, vec.X, vec.Y, vec.Z, heading, offset.X, offset.Y, offset.Z);
		/// <summary>
		/// Registers a door, hashes: https://github.com/femga/rdr3_discoveries/tree/master/doorHashes
		/// </summary>
		public static void _ADD_DOOR_TO_SYSTEM_NEW(uint doorHash, bool p1, bool p2, bool p3, int threadId, int p5, bool p6) => Function.Call(0xD99229FE93B46286, doorHash, p1, p2, p3, threadId, p5, p6);
		public static bool _IS_DOOR_REGISTERED_WITH_NETWORK(uint doorHash) => Function.Call<bool>(0xB5DED7B65C604FDF, doorHash);
		public static void REMOVE_DOOR_FROM_SYSTEM(uint doorHash) => Function.Call(0x464D8E1427156FE4, doorHash);
		/// <summary>
		/// Door lock states:
		/// enum eDoorState
		/// {
		/// 	DOORSTATE_INVALID = -1,
		/// 	DOORSTATE_UNLOCKED,
		/// 	DOORSTATE_LOCKED_UNBREAKABLE,
		/// 	DOORSTATE_LOCKED_BREAKABLE,
		/// 	DOORSTATE_HOLD_OPEN_POSITIVE,
		/// 	DOORSTATE_HOLD_OPEN_NEGATIVE
		/// };
		/// </summary>
		public static void DOOR_SYSTEM_SET_DOOR_STATE(uint doorHash, int state) => Function.Call(0x6BAB9442830C7F53, doorHash, state);
		public static int DOOR_SYSTEM_GET_DOOR_STATE(uint doorHash) => Function.Call<int>(0x160AA1B32F6139B8, doorHash);
		public static void DOOR_SYSTEM_SET_AUTOMATIC_RATE(uint doorHash, float rate) => Function.Call(0x03C27E13B42A0E82, doorHash, rate);
		public static void DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(uint doorHash, float distance) => Function.Call(0x9BA001CB45CBF627, doorHash, distance);
		public static void _0xB3B1546D23DF8DE1(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xB3B1546D23DF8DE1, p0, p1, p2, p3, p4);
		/// <summary>
		/// Sets the ajar angle of a door.
		/// Ranges from -1.0 to 1.0, and 0.0 is closed / default.
		/// </summary>
		public static void DOOR_SYSTEM_SET_OPEN_RATIO(uint doorHash, float ajar, bool forceUpdate) => Function.Call(0xB6E6FBA95C7324AC, doorHash, ajar, forceUpdate);
		public static void _0x3A77DAE8B4FD7586(Any p0, Any p1) => Function.Call(0x3A77DAE8B4FD7586, p0, p1);
		public static void _DOOR_SYSTEM_SET_ABLE_TO_CHANGE_OPEN_RATIO_WHILE_LOCKED(uint doorHash, bool p1) => Function.Call(0x1F1FABFE9B2A1254, doorHash, p1);
		/// <summary>
		/// Returns true if door is alredy registered with owner
		/// </summary>
		public static bool _IS_DOOR_REGISTERED_WITH_OWNER(uint doorHash) => Function.Call<bool>(0x4F89DAD4156BA145, doorHash);
		public static void _DOOR_SYSTEM_CHANGE_SCRIPT_OWNER(uint doorHash) => Function.Call(0x985767F5FA45BC44, doorHash);
		public static float _DOOR_SYSTEM_GET_AUTOMATIC_RATE(uint doorHash) => Function.Call<float>(0x8433E1954BE323FC, doorHash);
		public static Any _0x6E2AA80BB0C03728(Any p0, Any p1) => Function.Call<Any>(0x6E2AA80BB0C03728, p0, p1);
		public static void _0x1BC47A9DEDC8DF5D(Any p0, Any p1) => Function.Call(0x1BC47A9DEDC8DF5D, p0, p1);
		public static float DOOR_SYSTEM_GET_OPEN_RATIO(uint doorHash) => Function.Call<float>(0x65499865FCA6E5EC, doorHash);
		public static void _0x7F458B543006C8FE(Any p0, Any p1) => Function.Call(0x7F458B543006C8FE, p0, p1);
		public static Any _0xACD4F9831DFAD7F5(Any p0) => Function.Call<Any>(0xACD4F9831DFAD7F5, p0);
		public static void _0x0C0A373D181BF900(Any p0) => Function.Call(0x0C0A373D181BF900, p0);
		public static void _0xA93F925F1942E434(Any p0, Any p1) => Function.Call(0xA93F925F1942E434, p0, p1);
		public static Any _0x4D8611DFE1126478(Any p0) => Function.Call<Any>(0x4D8611DFE1126478, p0);
		public static void _0x57C242543B7B8FB9(Any p0, Any p1) => Function.Call(0x57C242543B7B8FB9, p0, p1);
		public static void _0x4AE07EBA3462C5D5(Any p0, Any p1) => Function.Call(0x4AE07EBA3462C5D5, p0, p1);
		public static void _0x22031584496CFB70(Any p0, Any p1) => Function.Call(0x22031584496CFB70, p0, p1);
		public static void _0xC07B91B996C1DE89(Any p0, Any p1) => Function.Call(0xC07B91B996C1DE89, p0, p1);
		public static bool IS_DOOR_REGISTERED_WITH_SYSTEM(uint doorHash) => Function.Call<bool>(0xC153C43EA202C8C1, doorHash);
		public static bool IS_DOOR_CLOSED(uint doorHash) => Function.Call<bool>(0xC531EE8A1145A149, doorHash);
		/// <summary>
		/// Params: p1 = 23 in R* Scripts
		/// </summary>
		public static Any _0x0943113E02322164(int _object, int p1) => Function.Call<Any>(0x0943113E02322164, _object, p1);
		public static Any _0x614D0B4533F842D3(Any p0) => Function.Call<Any>(0x614D0B4533F842D3, p0);
		public static void _DOOR_SYSTEM_FORCE_SHUT(uint doorHash, bool p1) => Function.Call(0x276AAF0F1C7F2494, doorHash, p1);
		public static Any _0xEBA314768FB35D58(Any p0) => Function.Call<Any>(0xEBA314768FB35D58, p0);
		public static void _0x5230BF34EB0EC645(Any p0) => Function.Call(0x5230BF34EB0EC645, p0);
		public static bool DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(float x, float y, float z, float radius, uint hash, bool p5) => Function.Call<bool>(0xBFA48E2FF417213F, x, y, z, radius, hash, p5);
		public static bool DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(Vector3 vec, float radius, uint hash, bool p5) => Function.Call<bool>(0xBFA48E2FF417213F, vec.X, vec.Y, vec.Z, radius, hash, p5);
		public static bool IS_POINT_IN_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, bool p10, bool p11) => Function.Call<bool>(0x2A70BAE8883E4C81, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		public static void SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(int _object, bool toggle) => Function.Call(0x4D89D607CB3DD1D2, _object, toggle);
		/// <summary>
		/// Adjust the physics parameters of a prop, or otherwise known as "object". This is useful for simulated gravity.
		/// 
		/// Other parameters seem to be unknown.
		/// 
		/// p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
		/// p3: seems similar to p2
		/// p4: makes obj fall slower the higher the value
		/// p5: similar to p4
		/// </summary>
		public static void SET_OBJECT_PHYSICS_PARAMS(int _object, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy) => Function.Call(0xF6DF6E90DE7DF90F, _object, weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy);
		public static float GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(Any p0, bool p1) => Function.Call<float>(0xB6FBFD079B8D0596, p0, p1);
		public static Any _0x235C863DA77BD88D(Any p0, Any p1, Any p2) => Function.Call<Any>(0x235C863DA77BD88D, p0, p1, p2);
		public static void SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(int _object, bool toggle) => Function.Call(0x406137F8EF90EAF5, _object, toggle);
		public static void BREAK_OBJECT_FRAGMENT_CHILD(int _object, Any p1, bool p2) => Function.Call(0xE7E4C198B0185900, _object, p1, p2);
		public static void BREAK_ALL_OBJECT_FRAGMENT_BONES(int _object) => Function.Call(0x8462BE2341A55B6F, _object);
		public static void _0xAAACF33CBF9B990A(Any p0, Any p1) => Function.Call(0xAAACF33CBF9B990A, p0, p1);
		public static void _DAMAGE_BONE_ON_PROP(int _object, int bone) => Function.Call(0xE4EFB315BCD2A838, _object, bone);
		public static void FIX_OBJECT_FRAGMENT(int _object) => Function.Call(0xF9C1681347C8BD15, _object);
		public static Any _0x58DE624FA7FB0E7F(Any p0) => Function.Call<Any>(0x58DE624FA7FB0E7F, p0);
		public static void _0x491439AEF410A2FC(Any p0) => Function.Call(0x491439AEF410A2FC, p0);
		public static void _SET_OBJECT_BREAK_SCALE(int _object, float scale) => Function.Call(0xFFB99FFD17F65889, _object, scale);
		public static void _0xCEAB54F4632C6EF6(Any p0, Any p1) => Function.Call(0xCEAB54F4632C6EF6, p0, p1);
		public static void TRACK_OBJECT_VISIBILITY(int _object) => Function.Call(0xB252BC036B525623, _object);
		public static bool IS_OBJECT_VISIBLE(int _object) => Function.Call<bool>(0x8B32ACE6326A7546, _object);
		public static void SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(int _object, bool enabled) => Function.Call(0xEB6F1A9B5510A5D2, _object, enabled);
		public static void ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(bool enabled) => Function.Call(0xE2B3B852B537C398, enabled);
		public static void _0x6579860A5558524A(Any p0, Any p1) => Function.Call(0x6579860A5558524A, p0, p1);
		public static void _0xDFA1237F5228263F(Any p0, Any p1) => Function.Call(0xDFA1237F5228263F, p0, p1);
		public static float _GET_LIGHT_INTENSITY_FROM_OBJECT(int _object) => Function.Call<float>(0xFA3B61EC249B4674, _object);
		public static void _SET_LIGHT_INTENSITY_FOR_OBJECT(int _object, float lightIntensity) => Function.Call(0xF49574E2332A8F06, _object, lightIntensity);
		/// <summary>
		/// Params: value = 0.0 - 586.67 (?)
		/// </summary>
		public static void _SET_LIGHT_TRANSLUCENCY_FOR_OBJECT(int _object, float value) => Function.Call(0x63E39F09310F481F, _object, value);
		public static void _SET_LIGHT_SCATTERING_DISABLED_FOR_OBJECT(int _object, bool disable) => Function.Call(0x04D1D4E411CE52D0, _object, disable);
		public static void _0x7FCD49388BC9B775(Any p0, Any p1) => Function.Call(0x7FCD49388BC9B775, p0, p1);
		public static Any _0xFA99E8E575F2FEF8(Any p0) => Function.Call<Any>(0xFA99E8E575F2FEF8, p0);
		public static int GET_RAYFIRE_MAP_OBJECT(float x, float y, float z, float radius, string name) => Function.Call<int>(0xB48FCED898292E52, x, y, z, radius, name);
		public static int GET_RAYFIRE_MAP_OBJECT(Vector3 vec, float radius, string name) => Function.Call<int>(0xB48FCED898292E52, vec.X, vec.Y, vec.Z, radius, name);
		public static void SET_STATE_OF_RAYFIRE_MAP_OBJECT(int _object, int state) => Function.Call(0x5C29F698D404C5E1, _object, state);
		public static int GET_STATE_OF_RAYFIRE_MAP_OBJECT(int _object) => Function.Call<int>(0x899BA936634A322E, _object);
		public static bool DOES_RAYFIRE_MAP_OBJECT_EXIST(int _object) => Function.Call<bool>(0x52AF537A0C5B8AAD, _object);
		public static float GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(int _object) => Function.Call<float>(0x260EE4FDBDF4DB01, _object);
		/// <summary>
		/// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Placement%20Flags
		/// https://github.com/femga/rdr3_discoveries/blob/master/objects/pickup_list.lua
		/// </summary>
		public static int CREATE_PICKUP(uint pickupHash, float x, float y, float z, int flags, int p5, bool p6, uint modelHash, int p8, float p9, Any p10) => Function.Call<int>(0xFBA08C503DD5FA58, pickupHash, x, y, z, flags, p5, p6, modelHash, p8, p9, p10);
		public static int CREATE_PICKUP(uint pickupHash, Vector3 vec, int flags, int p5, bool p6, uint modelHash, int p8, float p9, Any p10) => Function.Call<int>(0xFBA08C503DD5FA58, pickupHash, vec.X, vec.Y, vec.Z, flags, p5, p6, modelHash, p8, p9, p10);
		/// <summary>
		/// flags: see CREATE_PICKUP
		/// </summary>
		public static int CREATE_PICKUP_ROTATE(uint pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flags, int p8, int p9, bool p10, uint modelHash, int p12, float p13, Any p14) => Function.Call<int>(0x891804727E0A98B7, pickupHash, posX, posY, posZ, rotX, rotY, rotZ, flags, p8, p9, p10, modelHash, p12, p13, p14);
		public static int CREATE_PICKUP_ROTATE(uint pickupHash, Vector3 vec, Vector3 rotation, int flags, int p8, int p9, bool p10, uint modelHash, int p12, float p13, Any p14) => Function.Call<int>(0x891804727E0A98B7, pickupHash, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, flags, p8, p9, p10, modelHash, p12, p13, p14);
		/// <summary>
		/// flags: see CREATE_PICKUP
		/// </summary>
		public static int CREATE_AMBIENT_PICKUP(uint pickupHash, float x, float y, float z, int flags, int value, uint modelHash, bool p7, bool p8, int p9, float p10) => Function.Call<int>(0x673966A0C0FD7171, pickupHash, x, y, z, flags, value, modelHash, p7, p8, p9, p10);
		public static int CREATE_AMBIENT_PICKUP(uint pickupHash, Vector3 vec, int flags, int value, uint modelHash, bool p7, bool p8, int p9, float p10) => Function.Call<int>(0x673966A0C0FD7171, pickupHash, vec.X, vec.Y, vec.Z, flags, value, modelHash, p7, p8, p9, p10);
		public static int CREATE_PORTABLE_PICKUP(uint pickupHash, float x, float y, float z, bool placeOnGround, uint modelHash) => Function.Call<int>(0x2EAF1FDB2FB55698, pickupHash, x, y, z, placeOnGround, modelHash);
		public static int CREATE_PORTABLE_PICKUP(uint pickupHash, Vector3 vec, bool placeOnGround, uint modelHash) => Function.Call<int>(0x2EAF1FDB2FB55698, pickupHash, vec.X, vec.Y, vec.Z, placeOnGround, modelHash);
		public static void ATTACH_PORTABLE_PICKUP_TO_PED(int pickupObject, int ped) => Function.Call(0x8DC39368BDD57755, pickupObject, ped);
		public static void DETACH_PORTABLE_PICKUP_FROM_PED(int pickupObject) => Function.Call(0xCF463D1E9A0AECB1, pickupObject);
		public static void _HIDE_PICKUP_OBJECT(int pickupObject, bool toggle) => Function.Call(0x2777150CC7D9365E, pickupObject, toggle);
		public static void SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(uint modelHash, int p1) => Function.Call(0x0BF3B3BD47D79C08, modelHash, p1);
		public static Any _0x3E2616E7EA539480(Any p0) => Function.Call<Any>(0x3E2616E7EA539480, p0);
		public static void SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(bool toggle) => Function.Call(0x78857FC65CADB909, toggle);
		public static Vector3 GET_SAFE_PICKUP_COORDS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Vector3>(0x6E16BC2503FF1FF0, p0, p1, p2, p3, p4, p5);
		public static Vector3 GET_PICKUP_COORDS(int pickup) => Function.Call<Vector3>(0x225B8B35C88029B3, pickup);
		public static void REMOVE_ALL_PICKUPS_OF_TYPE(uint pickupHash) => Function.Call(0x27F9D613092159CF, pickupHash);
		public static bool HAS_PICKUP_BEEN_COLLECTED(int pickup) => Function.Call<bool>(0x80EC48E6679313F9, pickup);
		public static void REMOVE_PICKUP(int pickup) => Function.Call(0x3288D8ACAECD2AB2, pickup);
		public static void SET_PICKUP_DO_NOT_AUTO_PLACE_ON_GROUND(int pickupObject) => Function.Call(0x634C19521485AB25, pickupObject);
		public static bool DOES_PICKUP_EXIST(int pickup) => Function.Call<bool>(0xAFC1CA75AD4074D1, pickup);
		public static bool DOES_PICKUP_OBJECT_EXIST(int pickupObject) => Function.Call<bool>(0xD9EFB6DBF7DAAEA3, pickupObject);
		public static int GET_PICKUP_OBJECT(int pickup) => Function.Call<int>(0x5099BC55630B25AE, pickup);
		public static bool IS_OBJECT_A_PORTABLE_PICKUP(int _object) => Function.Call<bool>(0x0378C08504160D0D, _object);
		public static bool _IS_PICKUP_TYPE_VALID(uint pickupHash) => Function.Call<bool>(0x007BD043587F7C82, pickupHash);
		public static bool DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(uint pickupHash, float x, float y, float z, float radius) => Function.Call<bool>(0xF9C36251F6E48E33, pickupHash, x, y, z, radius);
		public static bool DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(uint pickupHash, Vector3 vec, float radius) => Function.Call<bool>(0xF9C36251F6E48E33, pickupHash, vec.X, vec.Y, vec.Z, radius);
		public static void SET_PICKUP_REGENERATION_TIME(int pickup, int duration) => Function.Call(0x78015C9B4B3ECC9D, pickup, duration);
		public static void FORCE_PICKUP_REGENERATE(Any p0) => Function.Call(0x758A5C1B3B1E1990, p0);
		/// <summary>
		/// Params: p2 controls whether to make pickups usable/collectable or not in networked games
		/// </summary>
		public static void _SET_NETWORK_PICKUP_USABLE_FOR_PLAYER(int player, uint pickupHash, bool isUsable) => Function.Call(0x94F3D956BFAEAE18, player, pickupHash, isUsable);
		/// <summary>
		/// Maximum amount of pickup models that can be disallowed is 10.
		/// 
		/// Old name: _SET_LOCAL_PLAYER_CAN_USE_PICKUPS_WITH_THIS_MODEL
		/// </summary>
		public static void SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(uint modelHash, bool toggle) => Function.Call(0x88EAEC617CD26926, modelHash, toggle);
		public static void BLOCK_PICKUP_FROM_PLAYER_COLLECTION(Any p0, Any p1) => Function.Call(0xB8F5062070BB6DBD, p0, p1);
		public static void SET_PICKUP_NOT_LOOTABLE(Any p0, Any p1) => Function.Call(0x92E87F60F21A0C3A, p0, p1);
		/// <summary>
		/// _SET_A(MBIENT_PICKUP_?)*
		/// </summary>
		public static void _0x1F5E07E14A86FAFC(bool p0) => Function.Call(0x1F5E07E14A86FAFC, p0);
		public static void SET_TEAM_PICKUP_OBJECT(int _object, Any p1, bool p2) => Function.Call(0x53E0DF1A2A3CF0CA, _object, p1, p2);
		public static Any _0x9F52AD67D1A91BAD(Any p0, Any p1) => Function.Call<Any>(0x9F52AD67D1A91BAD, p0, p1);
		public static void PREVENT_COLLECTION_OF_PORTABLE_PICKUP(int _object, bool p1, bool p2) => Function.Call(0x92AEFB5F6E294023, _object, p1, p2);
		public static void SET_PICKUP_GENERATION_RANGE_MULTIPLIER(float multiplier) => Function.Call(0x318516E02DE3ECE2, multiplier);
		public static void SET_PICKUP_UNCOLLECTABLE(Any p0, Any p1) => Function.Call(0x4A8CB328CD6F1C9B, p0, p1);
		public static void SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(Any p0, Any p1) => Function.Call(0x81218CE01B672219, p0, p1);
		public static void _SET_AMBIENT_PICKUP_LIFETIME(int lifetime) => Function.Call(0xAC9AE68F0A463752, lifetime);
		public static void SET_PICKUP_PARTICLE_FX_SPAWN(Any p0, Any p1) => Function.Call(0xEB9740A38FD6D634, p0, p1);
		public static void SET_PICKUP_PARTICLE_FX_HIGHLIGHT(Any p0, Any p1) => Function.Call(0x1607C7D9B3021DF5, p0, p1);
		public static void SUPPRESS_PICKUP_REWARD_TYPE(int rewardType, bool suppress) => Function.Call(0xF92099527DB8E2A7, rewardType, suppress);
		public static Any _0x20135AF9C10D2A3D(Any p0) => Function.Call<Any>(0x20135AF9C10D2A3D, p0);
		public static void _SET_PICKUP_COLLECTABLE_ON_MOUNT(int _object) => Function.Call(0x00EE08603EADEE92, _object);
		public static void _0xDE116ECFFDD4B997(Any p0, Any p1) => Function.Call(0xDE116ECFFDD4B997, p0, p1);
		public static uint GET_WEAPON_TYPE_FROM_PICKUP_TYPE(uint pickupHash) => Function.Call<uint>(0x08F96CA6C551AD51, pickupHash);
		public static uint _GET_AMMO_TYPE_FROM_PICKUP_TYPE(uint pickupHash) => Function.Call<uint>(0x44B09A23D728045A, pickupHash);
		/// <summary>
		/// Alt name: _SET_OBJECT_TINT
		/// 
		/// Old name: _SET_OBJECT_TEXTURE_VARIATION
		/// </summary>
		public static void SET_OBJECT_TINT_INDEX(int _object, int textureVariation) => Function.Call(0x971DA0055324D033, _object, textureVariation);
		/// <summary>
		/// Returns float value to be used with _SET_LIGHT_INTENSITY_FOR_OBJECT
		/// </summary>
		public static float _GET_OBJECT_LIGHT_INTENSITY(int _object) => Function.Call<float>(0x3397CD4E0353DFBA, _object);
		public static void _SET_OBJECT_BURN_OPACITY(int _object, float opacity) => Function.Call(0x7D7285EFEAB5AF15, _object, opacity);
		public static void _SET_OBJECT_BURN_INTENSITY(int _object, float intensity) => Function.Call(0xC8E21C1677DC5E6F, _object, intensity);
		/// <summary>
		/// Seems to mostly have effect on wood-made objects https://imgur.com/a/32oQvOn
		/// </summary>
		public static void _SET_OBJECT_BURN_LEVEL(int _object, float burnLevel, bool affectAsh) => Function.Call(0x2797C633DCDBBAC5, _object, burnLevel, affectAsh);
		public static void _0x9A74A9CADFA8A598(Any p0) => Function.Call(0x9A74A9CADFA8A598, p0);
		public static void _RESET_OBJECT_VELOCITY(int _object) => Function.Call(0xF40AB58D83C35027, _object);
		/// <summary>
		/// p2 is usually the same as speed parameter
		/// </summary>
		public static void _SET_OBJECT_BURN_SPEED(int _object, float speed, float p2) => Function.Call(0x646564A3B7DF68F8, _object, speed, p2);
		public static void _0xCBFBD38F2E0A263B(Any p0, Any p1) => Function.Call(0xCBFBD38F2E0A263B, p0, p1);
		/// <summary>
		/// Old name: _GET_PICKUP_HASH
		/// </summary>
		public static uint CONVERT_OLD_PICKUP_TYPE_TO_NEW(uint pickupHash) => Function.Call<uint>(0x5EAAD83F8CFB4575, pickupHash);
		public static void SET_FORCE_OBJECT_THIS_FRAME(float x, float y, float z, float p3) => Function.Call(0xF538081986E49E9D, x, y, z, p3);
		public static void SET_FORCE_OBJECT_THIS_FRAME(Vector3 vec, float p3) => Function.Call(0xF538081986E49E9D, vec.X, vec.Y, vec.Z, p3);
		public static Any _0xD91E55B6C005EB09(Any p0, Any p1) => Function.Call<Any>(0xD91E55B6C005EB09, p0, p1);
		/// <summary>
		/// Old name: _MARK_OBJECT_FOR_DELETION
		/// </summary>
		public static void ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(int _object) => Function.Call(0xADBE4809F19F927A, _object);
		/// <summary>
		/// _SET_OBJECT_*
		/// </summary>
		public static void _0xCAAF2BCCFEF37F77(int _object, Any p1) => Function.Call(0xCAAF2BCCFEF37F77, _object, p1);
		public static Any _0x08C5825A2932EA7B(Any p0) => Function.Call<Any>(0x08C5825A2932EA7B, p0);
		public static Any _0x7D4411D6736CD295(Any p0, Any p1) => Function.Call<Any>(0x7D4411D6736CD295, p0, p1);
		public static Any _0x250EBB11E81A10BE(Any p0) => Function.Call<Any>(0x250EBB11E81A10BE, p0);
		public static Any _0x2BF1953C0C21AC88(Any p0) => Function.Call<Any>(0x2BF1953C0C21AC88, p0);
		public static bool CREATE_OBJECT_SKELETON(int _object) => Function.Call<bool>(0xB6CBD40F8EA69E8A, _object);
		/// <summary>
		/// _PRE* or _Q* or _RE*
		/// </summary>
		public static void _MAKE_ITEM_CARRIABLE(int _object) => Function.Call(0x1461DF6DB886BE3F, _object);
		public static void _0xF65EDE5D02A7A760(Any p0, Any p1) => Function.Call(0xF65EDE5D02A7A760, p0, p1);
		/// <summary>
		/// Sets object as auto-jumpable by horse.
		/// </summary>
		public static void _SET_AUTO_JUMPABLE_BY_HORSE(int _object, bool p1) => Function.Call(0x98D2D9C053A1F449, _object, p1);
		/// <summary>
		/// Sets object as not jumpable by horse.
		/// </summary>
		public static void _SET_NOT_JUMPABLE_BY_HORSE(int _object, bool p1) => Function.Call(0xE1C708BA4885796B, _object, p1);
		public static void _SET_OBJECT_KICKABLE(int _object, bool kickable) => Function.Call(0xB7017DA4D498269F, _object, kickable);
		public static void SET_CUSTOM_TEXTURES_ON_OBJECT(int _object, uint txdHash, Any p2, Any p3) => Function.Call(0xE124889AE0521FCF, _object, txdHash, p2, p3);
		public static void _0xD503D6F0986D58BC(Any p0, Any p1) => Function.Call(0xD503D6F0986D58BC, p0, p1);
		public static void _0xAEE6C800E124CFE1(Any p0, Any p1) => Function.Call(0xAEE6C800E124CFE1, p0, p1);
		public static void _0x3DF1A0A58498E209(int _object, Any p1) => Function.Call(0x3DF1A0A58498E209, _object, p1);
	}

	public unsafe static class PAD
	{
		/// <summary>
		/// Sets the current control context. Must be called every frame.
		/// 
		/// context: https://alloc8or.re/rdr3/doc/misc/input_contexts.txt
		/// For more information, see common:/data/control/settings.meta
		/// https://github.com/femga/rdr3_discoveries/tree/master/Controls
		/// </summary>
		public static void _SET_CONTROL_CONTEXT(int p0, uint context) => Function.Call(0x2804658EB7D8A50B, p0, context);
		public static Any _0xDDCEB0F26C89C00F(int p0) => Function.Call<Any>(0xDDCEB0F26C89C00F, p0);
		public static bool _IS_CONTROL_ACTION_VALID(uint action, int control) => Function.Call<bool>(0xBC0884BC590951C7, action, control);
		public static bool IS_CONTROL_ENABLED(int control, uint action) => Function.Call<bool>(0x1CEA6BFDF248E5D9, control, action);
		public static bool IS_CONTROL_PRESSED(int control, uint action) => Function.Call<bool>(0xF3A21BCD95725A4A, control, action);
		public static bool IS_CONTROL_RELEASED(int control, uint action) => Function.Call<bool>(0x648EE3E7F38877DD, control, action);
		public static bool IS_CONTROL_JUST_PRESSED(int control, uint action) => Function.Call<bool>(0x580417101DDB492F, control, action);
		public static bool IS_CONTROL_JUST_RELEASED(int control, uint action) => Function.Call<bool>(0x50F940259D3841E6, control, action);
		public static int GET_CONTROL_VALUE(int control, uint action) => Function.Call<int>(0xD95E79E8686D2C27, control, action);
		public static float GET_CONTROL_NORMAL(int control, uint action) => Function.Call<float>(0xEC3C9B8D5327B563, control, action);
		public static float GET_CONTROL_UNBOUND_NORMAL(int control, uint action) => Function.Call<float>(0x5B84D09CEC5209C5, control, action);
		/// <summary>
		/// This is for simulating player input.
		/// value is a float value from 0 - 1
		/// 
		/// control: see IS_CONTROL_ENABLED
		/// 
		/// Old name: _SET_CONTROL_NORMAL
		/// </summary>
		public static bool SET_CONTROL_VALUE_NEXT_FRAME(int control, uint action, float value) => Function.Call<bool>(0xE8A25867FBA3B05E, control, action, value);
		public static bool IS_DISABLED_CONTROL_PRESSED(int control, uint action) => Function.Call<bool>(0xE2587F8CBBD87B1D, control, action);
		public static bool IS_DISABLED_CONTROL_JUST_PRESSED(int control, uint action) => Function.Call<bool>(0x91AEF906BCA88877, control, action);
		public static bool IS_DISABLED_CONTROL_JUST_RELEASED(int control, uint action) => Function.Call<bool>(0x305C8DCD79DA8B0F, control, action);
		public static float GET_DISABLED_CONTROL_NORMAL(int control, uint action) => Function.Call<float>(0x11E65974A982637C, control, action);
		public static float GET_DISABLED_CONTROL_UNBOUND_NORMAL(int control, uint action) => Function.Call<float>(0x4F8A26A890FD62FB, control, action);
		/// <summary>
		/// Returns time in ms since last input.
		/// </summary>
		public static int GET_CONTROL_HOW_LONG_AGO(int control) => Function.Call<int>(0xD7D22F5592AED8BA, control);
		public static int _GET_DISABLED_CONTROL_HOW_LONG_AGO(int control) => Function.Call<int>(0x771DFCB24D19C2F6, control);
		/// <summary>
		/// padIndex is not used
		/// 
		/// Old name: _IS_USING_KEYBOARD
		/// </summary>
		public static bool IS_USING_KEYBOARD_AND_MOUSE(int control) => Function.Call<bool>(0xA571D46727E2B718, control);
		public static Any _0x43F35DDB2905D945(Any p0, Any p1) => Function.Call<Any>(0x43F35DDB2905D945, p0, p1);
		public static Any _0xBD629C1C4F501C80(Any p0) => Function.Call<Any>(0xBD629C1C4F501C80, p0);
		public static bool HAVE_CONTROLS_CHANGED(int control) => Function.Call<bool>(0x6CD79468A1E595C6, control);
		/// <summary>
		/// nullsub, doesn't do anything
		/// 
		/// Old name: _SET_CONTROL_GROUP_COLOR
		/// </summary>
		public static void SET_CONTROL_LIGHT_EFFECT_COLOR(int control, int red, int green, int blue) => Function.Call(0x8290252FFF36ACB5, control, red, green, blue);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void CLEAR_CONTROL_LIGHT_EFFECT(int control) => Function.Call(0xCB0360EFEFB2580D, control);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_CONTROL_LIGHT_EFFECT_FLASHING_COLOR(int control, int red, int green, int blue) => Function.Call(0xA45884DB10EC7EE3, control, red, green, blue);
		/// <summary>
		/// Old name: SET_PAD_SHAKE
		/// </summary>
		public static void SET_CONTROL_SHAKE(int control, int duration, int frequency) => Function.Call(0x48B3886C1358D0D5, control, duration, frequency);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_CONTROL_TRIGGER_SHAKE(int control, int leftDuration, int leftFrequency, int rightDuration, int rightFrequency) => Function.Call(0x14D29BB12D47F68C, control, leftDuration, leftFrequency, rightDuration, rightFrequency);
		/// <summary>
		/// Old name: STOP_PAD_SHAKE
		/// </summary>
		public static void STOP_CONTROL_SHAKE(int control) => Function.Call(0x38C16A305E8CDC8D, control);
		/// <summary>
		/// Old name: SET_PAD_SHAKE_SUPPRESSED_ID
		/// </summary>
		public static void SET_CONTROL_SHAKE_SUPPRESSED_ID(int control, int uniqueId) => Function.Call(0xF239400E16C23E08, control, uniqueId);
		/// <summary>
		/// Old name: _CLEAR_SUPPRESSED_PAD_RUMBLE
		/// </summary>
		public static void CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(int control) => Function.Call(0xA0CEFCEA390AAB9B, control);
		public static bool IS_LOOK_INVERTED() => Function.Call<bool>(0x77B612531280010D);
		public static void SET_INPUT_EXCLUSIVE(int control, uint action) => Function.Call(0xEDE476E5EE29EDB1, control, action);
		public static void DISABLE_CONTROL_ACTION(int control, uint action, bool disableRelatedActions) => Function.Call(0xFE99B66D079CF6BC, control, action, disableRelatedActions);
		public static void ENABLE_CONTROL_ACTION(int control, uint action, bool enableRelatedActions) => Function.Call(0x351220255D64C155, control, action, enableRelatedActions);
		public static void DISABLE_ALL_CONTROL_ACTIONS(int control) => Function.Call(0x5F4B6931816E599B, control);
		/// <summary>
		/// rumbleCurve: common_0/data/rumblecurves.meta
		/// </summary>
		public static void _0x5F217BC1190503D8(string rumbleCurve, float p1) => Function.Call(0x5F217BC1190503D8, rumbleCurve, p1);
		public static void _0x709BA8C08C5C008D() => Function.Call(0x709BA8C08C5C008D);
		/// <summary>
		/// _IS_R* - _IS_S*
		/// </summary>
		public static bool _0x1252C029FC8EBB4D() => Function.Call<bool>(0x1252C029FC8EBB4D);
		public static void _0x52C68E92D6E23ADD(Any p0) => Function.Call(0x52C68E92D6E23ADD, p0);
	}

	public unsafe static class PATHFIND
	{
		public static void SET_ROADS_IN_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xBF1A602B5BA52FEE, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void SET_ROADS_IN_ANGLED_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0x1A5AA1208AF5DB59, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void SET_ROADS_IN_VOLUME(int volume, bool p1, bool p2, bool p3) => Function.Call(0xC1799FAFD2FDF52B, volume, p1, p2, p3);
		public static void RESET_ROADS_IN_VOLUME(int volume, bool p1) => Function.Call(0xD17672447692478E, volume, p1);
		public static void SET_ROADS_BACK_TO_ORIGINAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x1EE7063B80FFC77C, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0x0027501B9F3B407E, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void _0xAFE2AE66F6251C66(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xAFE2AE66F6251C66, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _0x4358BCF14C91761C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x4358BCF14C91761C, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _0xB03944057FD735BA(Any p0, Any p1, Any p2) => Function.Call(0xB03944057FD735BA, p0, p1, p2);
		public static void _0x6C3F12ECEB6D2E2A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x6C3F12ECEB6D2E2A, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _0x5A4E1A41E3A02AD0(Any p0, Any p1, Any p2) => Function.Call(0x5A4E1A41E3A02AD0, p0, p1, p2);
		public static bool GET_CLOSEST_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, int nodeType, float p5, float p6) => Function.Call<bool>(0x240A18690AE96513, x, y, z, outPosition, nodeType, p5, p6);
		public static bool GET_CLOSEST_VEHICLE_NODE(Vector3 vec, Vector3* outPosition, int nodeType, float p5, float p6) => Function.Call<bool>(0x240A18690AE96513, vec.X, vec.Y, vec.Z, outPosition, nodeType, p5, p6);
		public static Any _0xCA27A86CAA4E98ED(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0xCA27A86CAA4E98ED, p0, p1, p2, p3, p4, p5, p6);
		public static bool GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, Vector3* outPosition, float* outHeading, int nodeType, float p6, int p7) => Function.Call<bool>(0x23CFFD4CCB243354, x, y, z, outPosition, outHeading, nodeType, p6, p7);
		public static bool GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(Vector3 vec, Vector3* outPosition, float* outHeading, int nodeType, float p6, int p7) => Function.Call<bool>(0x23CFFD4CCB243354, vec.X, vec.Y, vec.Z, outPosition, outHeading, nodeType, p6, p7);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE(float x, float y, float z, int nthClosest, Vector3* outPosition, int unknown1, float unknown2, Any unknown3) => Function.Call<bool>(0x5A6D8DF6FBC5D0C4, x, y, z, nthClosest, outPosition, unknown1, unknown2, unknown3);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE(Vector3 vec, int nthClosest, Vector3* outPosition, int unknown1, float unknown2, Any unknown3) => Function.Call<bool>(0x5A6D8DF6FBC5D0C4, vec.X, vec.Y, vec.Z, nthClosest, outPosition, unknown1, unknown2, unknown3);
		public static int GET_NTH_CLOSEST_VEHICLE_NODE_ID(float x, float y, float z, int nth, int nodetype, float p5, float p6) => Function.Call<int>(0x116443008E5CEFC3, x, y, z, nth, nodetype, p5, p6);
		public static int GET_NTH_CLOSEST_VEHICLE_NODE_ID(Vector3 vec, int nth, int nodetype, float p5, float p6) => Function.Call<int>(0x116443008E5CEFC3, vec.X, vec.Y, vec.Z, nth, nodetype, p5, p6);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* heading, Any* unknown1, int unknown2, float unknown3, float unknown4) => Function.Call<bool>(0x591B40D4390DB54A, x, y, z, nthClosest, outPosition, heading, unknown1, unknown2, unknown3, unknown4);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(Vector3 vec, int nthClosest, Vector3* outPosition, float* heading, Any* unknown1, int unknown2, float unknown3, float unknown4) => Function.Call<bool>(0x591B40D4390DB54A, vec.X, vec.Y, vec.Z, nthClosest, outPosition, heading, unknown1, unknown2, unknown3, unknown4);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float outHeading, Any p6, float p7, float p8) => Function.Call<bool>(0x4114EAA8A7F7766D, x, y, z, nthClosest, outPosition, outHeading, p6, p7, p8);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(Vector3 vec, int nthClosest, Vector3* outPosition, float outHeading, Any p6, float p7, float p8) => Function.Call<bool>(0x4114EAA8A7F7766D, vec.X, vec.Y, vec.Z, nthClosest, outPosition, outHeading, p6, p7, p8);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodetype, Any p10, Any p11) => Function.Call<bool>(0x2FAC235A6062F14A, x, y, z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11);
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(Vector3 vec, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodetype, Any p10, Any p11) => Function.Call<bool>(0x2FAC235A6062F14A, vec.X, vec.Y, vec.Z, desiredX, desiredY, desiredZ, nthClosest, outPosition, outHeading, nodetype, p10, p11);
		/// <summary>
		/// Returns true if the id is non zero.
		/// </summary>
		public static bool IS_VEHICLE_NODE_ID_VALID(int vehicleNodeId) => Function.Call<bool>(0x5829A02AF4F0B3CB, vehicleNodeId);
		public static void GET_VEHICLE_NODE_POSITION(int nodeId, Vector3* outPosition) => Function.Call(0x8E8D72FF24DEE1FB, nodeId, outPosition);
		public static bool GET_VEHICLE_NODE_IS_SWITCHED_OFF(int nodeID) => Function.Call<bool>(0x28533DBDDF7C2C97, nodeID);
		public static Any GET_CLOSEST_ROAD(float x, float y, float z, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, bool p10) => Function.Call<Any>(0x132F52BBA570FE92, x, y, z, p3, p4, p5, p6, p7, p8, p9, p10);
		public static Any GET_CLOSEST_ROAD(Vector3 vec, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, bool p10) => Function.Call<Any>(0x132F52BBA570FE92, vec.X, vec.Y, vec.Z, p3, p4, p5, p6, p7, p8, p9, p10);
		public static bool ARE_NODES_LOADED_FOR_AREA(float x1, float y1, float x2, float y2) => Function.Call<bool>(0xF7B79A50B905A30D, x1, y1, x2, y2);
		/// <summary>
		/// Old name: REQUEST_PATHS_PREFER_ACCURATE_BOUNDINGSTRUCT
		/// </summary>
		public static bool REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(float x1, float y1, float x2, float y2) => Function.Call<bool>(0x07FB139B592FA687, x1, y1, x2, y2);
		public static bool GET_RANDOM_VEHICLE_NODE(float x, float y, float z, float radius, bool p4, bool p5, bool p6, Vector3* outPosition, int* nodeId) => Function.Call<bool>(0x93E0DB8440B73A7D, x, y, z, radius, p4, p5, p6, outPosition, nodeId);
		public static bool GET_RANDOM_VEHICLE_NODE(Vector3 vec, float radius, bool p4, bool p5, bool p6, Vector3* outPosition, int* nodeId) => Function.Call<bool>(0x93E0DB8440B73A7D, vec.X, vec.Y, vec.Z, radius, p4, p5, p6, outPosition, nodeId);
		public static void _GET_SPAWN_DATA_FOR_ROAD_NODE(int nodeId, float x, float y, float z, Vector3* outCoords, float* heading) => Function.Call(0xA3791B915B8B84C6, nodeId, x, y, z, outCoords, heading);
		public static void _GET_SPAWN_DATA_FOR_ROAD_NODE(int nodeId, Vector3 vec, Vector3* outCoords, float* heading) => Function.Call(0xA3791B915B8B84C6, nodeId, vec.X, vec.Y, vec.Z, outCoords, heading);
		/// <summary>
		/// Gets a value indicating whether the specified position is on a road.
		/// </summary>
		public static bool IS_POINT_ON_ROAD(float x, float y, float z, int vehicle) => Function.Call<bool>(0x125BF4ABFC536B09, x, y, z, vehicle);
		public static bool IS_POINT_ON_ROAD(Vector3 vec, int vehicle) => Function.Call<bool>(0x125BF4ABFC536B09, vec.X, vec.Y, vec.Z, vehicle);
		public static void SET_PED_PATHS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool unknown, Any p7) => Function.Call(0x34F060F4BF92E018, x1, y1, z1, x2, y2, z2, unknown, p7);
		public static void SET_PED_PATHS_IN_AREA(Vector3 vec1, Vector3 vec2, bool unknown, Any p7) => Function.Call(0x34F060F4BF92E018, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, unknown, p7);
		public static void _0xE5EF9DE716FF737E(Any p0, Any p1, Any p2) => Function.Call(0xE5EF9DE716FF737E, p0, p1, p2);
		public static bool GET_SAFE_COORD_FOR_PED(float x, float y, float z, bool onGround, Vector3* outPosition, int flags) => Function.Call<bool>(0xB61C8E878A4199CA, x, y, z, onGround, outPosition, flags);
		public static bool GET_SAFE_COORD_FOR_PED(Vector3 vec, bool onGround, Vector3* outPosition, int flags) => Function.Call<bool>(0xB61C8E878A4199CA, vec.X, vec.Y, vec.Z, onGround, outPosition, flags);
		public static void SET_PED_PATHS_BACK_TO_ORIGINAL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xE04B48F2CC926253, p0, p1, p2, p3, p4, p5, p6);
		public static void _0xCF213A5FC3ABFC08(Any p0, Any p1, Any p2) => Function.Call(0xCF213A5FC3ABFC08, p0, p1, p2);
		public static void ADD_NAVMESH_REQUIRED_REGION(float x, float y, float radius) => Function.Call(0x387EAD7EE42F6685, x, y, radius);
		/// <summary>
		/// Returns whether navmesh for the region is loaded.
		/// </summary>
		public static bool IS_NAVMESH_LOADED_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call<bool>(0xF813C7E63F9062A5, x1, y1, z1, x2, y2, z2);
		public static bool IS_NAVMESH_LOADED_IN_AREA(Vector3 vec1, Vector3 vec2) => Function.Call<bool>(0xF813C7E63F9062A5, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		public static int GET_NUM_NAVMESHES_EXISTING_IN_AREA(float p0, float p1, float p2, float p3, float p4, float p5) => Function.Call<int>(0x01708E8DD3FF8C65, p0, p1, p2, p3, p4, p5);
		public static bool _NAVMESH_ACTIVATE_SWAP(string name) => Function.Call<bool>(0x7C334FF4D9215912, name);
		public static bool _NAVMESH_DEACTIVATE_SWAP(string name) => Function.Call<bool>(0x527B97C203BB8606, name);
		public static bool _NAVMESH_IS_SWAP_ACTIVE(string name) => Function.Call<bool>(0x5AC0944C156E5F44, name);
		public static bool _NAVMESH_DOES_SWAP_EXIST(string name) => Function.Call<bool>(0x495CFAB2924237C7, name);
		public static int _0x5A3B54ADDF5472A3(string p0) => Function.Call<int>(0x5A3B54ADDF5472A3, p0);
		public static IntPtr _0xA33914B00CA55756(string p0, int p1) => Function.Call<IntPtr>(0xA33914B00CA55756, p0, p1);
		public static bool _NAVMESH_ASSIGN_NAVMESH_TO_VEHICLE(int vehicle, string navMeshName) => Function.Call<bool>(0x44026E3DB3CED602, vehicle, navMeshName);
		public static Any ADD_NAVMESH_BLOCKING_OBJECT(float p0, float p1, float p2, float p3, float p4, float p5, float p6, bool p7, Any p8) => Function.Call<Any>(0xFCD5C8E06E502F5A, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void REMOVE_NAVMESH_BLOCKING_OBJECT(Any p0) => Function.Call(0x46399A7895957C0E, p0);
		public static bool DOES_NAVMESH_BLOCKING_OBJECT_EXIST(Any p0) => Function.Call<bool>(0x0EAEB0DB4B132399, p0);
		public static bool _ADD_NAVMESH_BLOCKING_VOLUME(int volume, int flags) => Function.Call<bool>(0x19C7567D2F2287D6, volume, flags);
		public static void _REMOVE_NAVMESH_BLOCKING_VOLUME(int volume) => Function.Call(0x2C87C3E1C7B96EE2, volume);
		public static bool _DOES_NAVMESH_BLOCKING_VOLUME_EXIST(int volume) => Function.Call<bool>(0xDE0EA444735C1368, volume);
		public static void _0x6DAD6630AE4A74CB(Any p0, Any p1) => Function.Call(0x6DAD6630AE4A74CB, p0, p1);
		public static Any NAVMESH_REQUEST_PATH(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call<Any>(0x348F211CA2404039, p0, p1, p2, p3, p4, p5, p6, p7);
		public static Any _0x661BB1E1FF77742D(Any p0) => Function.Call<Any>(0x661BB1E1FF77742D, p0);
		/// <summary>
		/// Returns eNavMeshQueryStatus
		/// enum eNavMeshQueryStatus
		/// {
		/// 	QS_NOT_FOUND,
		/// 	QS_COMPLETE,
		/// 	QS_PENDING
		/// };
		/// </summary>
		public static int _NAVMESH_QUERY_STATUS(Any p0) => Function.Call<int>(0x3A0F82F6EE2291C8, p0);
		public static Any _0x8800776E410EB669(Any p0) => Function.Call<Any>(0x8800776E410EB669, p0);
		public static Any _0xF61CFEDEAB627BFA(Any p0) => Function.Call<Any>(0xF61CFEDEAB627BFA, p0);
		public static Any _0xD470725E0703D22F(Any p0) => Function.Call<Any>(0xD470725E0703D22F, p0);
		public static Vector3 _0x430F8319AE56C8A9(Any p0, Any p1) => Function.Call<Vector3>(0x430F8319AE56C8A9, p0, p1);
		/// <summary>
		/// Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
		/// </summary>
		public static float GET_APPROX_FLOOR_FOR_POINT(float x, float y) => Function.Call<float>(0x336511A34F2E5185, x, y);
		public static void SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0x0B919E1FB47CC4E0, multiplier);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_IGNORE_NO_GPS_FLAG(bool toggle) => Function.Call(0x72751156E7678833, toggle);
		public static int GET_GPS_BLIP_ROUTE_LENGTH() => Function.Call<int>(0xBBB45C3CF5C8AA85);
		public static Any _0xEFC535C9FAF563B3(Any p0) => Function.Call<Any>(0xEFC535C9FAF563B3, p0);
		public static Any _0x665B21666351CB37(Any p0, Any p1, Any p2) => Function.Call<Any>(0x665B21666351CB37, p0, p1, p2);
		public static bool GET_GPS_BLIP_ROUTE_FOUND() => Function.Call<bool>(0x869DAACBBE9FA006);
		public static Any _0x54F4D7B6670FBB5A(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0x54F4D7B6670FBB5A, p0, p1, p2, p3, p4);
		public static void _0x34C9AF25649172D0(Any p0) => Function.Call(0x34C9AF25649172D0, p0);
		/// <summary>
		/// GPS disabled zone: p1 = 0
		/// Clearing GPS disabled zone: p1 = 1
		/// </summary>
		public static void _0xF2A2177AC848B3A8(int volume, int p1, int p2) => Function.Call(0xF2A2177AC848B3A8, volume, p1, p2);
		public static void _0x4BDEBEA5702B97A9(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x4BDEBEA5702B97A9, p0, p1, p2, p3, p4, p5);
		public static void _0x264E9A5CD78C338F(Any p0) => Function.Call(0x264E9A5CD78C338F, p0);
		public static void _0x869A7015BD4606E9(Any p0) => Function.Call(0x869A7015BD4606E9, p0);
		public static Any _SIMULATED_ROUTE_CREATE(float x1, float y1, float z1, float x2, float y2, float z2, int p6) => Function.Call<Any>(0xFD5BB35AAB83FD48, x1, y1, z1, x2, y2, z2, p6);
		public static Any _SIMULATED_ROUTE_CREATE(Vector3 vec1, Vector3 vec2, int p6) => Function.Call<Any>(0xFD5BB35AAB83FD48, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p6);
		public static void _SIMULATED_ROUTE_DELETE(Any p0) => Function.Call(0x4907D0E4FB26EE65, p0);
		public static bool _SIMULATED_ROUTE_EXISTS(Any p0) => Function.Call<bool>(0x65A8196B8D7F5E0B, p0);
		public static bool SIMULATED_ROUTE_IS_LOADED(Any p0) => Function.Call<bool>(0x240915043CB799D7, p0);
		public static void SIMULATED_ROUTE_TRAVEL_TO_POINT(Any p0, float p1, float p2) => Function.Call(0xA1A3DE1C215C7394, p0, p1, p2);
		public static float SIMULATED_ROUTE_GET_ETA(Any p0) => Function.Call<float>(0x2DD5F78D73B24172, p0);
	}

	public unsafe static class PED
	{
		public static int CREATE_PED(uint modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed, bool p7, bool p8) => Function.Call<int>(0xD49F9B0955C367DE, modelHash, x, y, z, heading, isNetwork, bScriptHostPed, p7, p8);
		public static int CREATE_PED(uint modelHash, Vector3 vec, float heading, bool isNetwork, bool bScriptHostPed, bool p7, bool p8) => Function.Call<int>(0xD49F9B0955C367DE, modelHash, vec.X, vec.Y, vec.Z, heading, isNetwork, bScriptHostPed, p7, p8);
		/// <summary>
		/// Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		public static void DELETE_PED(int* ped) => Function.Call(0xCC0EF140F99365C5, ped);
		public static void _SET_REMOVE_PED_NETWORKED(int ped, int p1) => Function.Call(0x39A2FC5AF55A52B1, ped, p1);
		/// <summary>
		/// Only used in SP
		/// _SET_REMOVE_PED*
		/// </summary>
		public static void _0x7C08E7CB8D951B70(int ped, float p1) => Function.Call(0x7C08E7CB8D951B70, ped, p1);
		public static void _SET_PED_TO_BE_REMOVED(int ped, float p1, float p2, int p3, Any p4) => Function.Call(0x36E4B61DC56DE77C, ped, p1, p2, p3, p4);
		public static int CLONE_PED(int ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag) => Function.Call<int>(0xEF29A16337FACADB, ped, isNetwork, bScriptHostPed, copyHeadBlendFlag);
		/// <summary>
		/// Copies ped's components and props to targetPed.
		/// Can be used to clear anything from a ped by cloning it, including bullet holes.
		/// </summary>
		public static void CLONE_PED_TO_TARGET(int ped, int targetPed) => Function.Call(0xE952D6431689AD9A, ped, targetPed);
		/// <summary>
		/// Gets a value indicating whether the specified ped is in the specified vehicle.
		/// </summary>
		public static bool IS_PED_IN_VEHICLE(int ped, int vehicle, bool atGetIn) => Function.Call<bool>(0xA3EE4A07279BB9DB, ped, vehicle, atGetIn);
		public static bool IS_PED_IN_MODEL(int ped, uint modelHash) => Function.Call<bool>(0x796D90EFB19AA332, ped, modelHash);
		/// <summary>
		/// Gets a value indicating whether the specified ped is in any vehicle.
		/// </summary>
		public static bool IS_PED_IN_ANY_VEHICLE(int ped, bool atGetIn) => Function.Call<bool>(0x997ABD671D25CA0B, ped, atGetIn);
		public static void _0x9851DE7AEC10B4E1(float x, float y, float z, float p3, int p4, Any p5) => Function.Call(0x9851DE7AEC10B4E1, x, y, z, p3, p4, p5);
		public static void _0x9851DE7AEC10B4E1(Vector3 vec, float p3, int p4, Any p5) => Function.Call(0x9851DE7AEC10B4E1, vec.X, vec.Y, vec.Z, p3, p4, p5);
		/// <summary>
		/// Gets a value indicating whether this ped's health is below its injured threshold.
		/// 
		/// The default threshold is 100.
		/// </summary>
		public static bool IS_PED_INJURED(int ped) => Function.Call<bool>(0x84A2DD9AC37C35C1, ped);
		/// <summary>
		/// Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
		/// If the handle is invalid, the function returns true.
		/// </summary>
		public static bool IS_PED_FATALLY_INJURED(int ped) => Function.Call<bool>(0xD839450756ED5A80, ped);
		public static bool IS_PED_DEAD_OR_DYING(int ped, bool p1) => Function.Call<bool>(0x3317DEDB88C95038, ped, p1);
		/// <summary>
		/// Bleedout profiles:
		/// Animal_FastBleedout
		/// Animal_Generic
		/// Human_FastBleedout
		/// Human_Generic
		/// Human_Mission
		/// 
		/// For more information, see common/data/ai/peddamageinfo.meta
		/// </summary>
		public static void _SET_PED_BLEEDOUT_PROFILE(int ped, uint bleedoutProfile) => Function.Call(0x66C047719B0E80E1, ped, bleedoutProfile);
		public static bool IS_PED_AIMING_FROM_COVER(int ped) => Function.Call<bool>(0x3998B1276A3300E5, ped);
		/// <summary>
		/// Returns whether the specified ped is reloading.
		/// </summary>
		public static bool IS_PED_RELOADING(int ped) => Function.Call<bool>(0x24B100C68C645951, ped);
		public static bool IS_PED_A_PLAYER(int ped) => Function.Call<bool>(0x12534C348C6CB68B, ped);
		/// <summary>
		/// Returns true only if it's a player ped and an animal as well.
		/// _IS_ANY_* - _IS_CONTROL_*
		/// </summary>
		public static bool _IS_ANIMAL_CONTROLLED_BY_A_PLAYER(int ped) => Function.Call<bool>(0x0E2F43516F998269, ped);
		/// <summary>
		/// seatIndex:
		/// enum eVehicleSeat
		/// {
		/// 	VS_ANY_PASSENGER = -2,
		/// 	VS_DRIVER,
		/// 	VS_FRONT_RIGHT,
		/// 	VS_BACK_LEFT,
		/// 	VS_BACK_RIGHT,
		/// 	VS_EXTRA_LEFT_1,
		/// 	VS_EXTRA_RIGHT_1,
		/// 	VS_EXTRA_LEFT_2,
		/// 	VS_EXTRA_RIGHT_2,
		/// 	VS_EXTRA_LEFT_3,
		/// 	VS_EXTRA_RIGHT_3,
		/// 	VS_NUM_SEATS
		/// };
		/// </summary>
		public static int CREATE_PED_INSIDE_VEHICLE(int vehicle, uint modelHash, int seatIndex, bool p3, bool p4, bool p5) => Function.Call<int>(0x7DD959874C1FD534, vehicle, modelHash, seatIndex, p3, p4, p5);
		public static void SET_PED_DESIRED_HEADING(int ped, float heading) => Function.Call(0xAA5A7ECE2AA8FE70, ped, heading);
		/// <summary>
		/// Old name: _FREEZE_PED_CAMERA_ROTATION
		/// </summary>
		public static void FORCE_ALL_HEADING_VALUES_TO_ALIGN(int ped) => Function.Call(0xFF287323B0E2C69A, ped);
		/// <summary>
		/// angle is ped's view cone
		/// </summary>
		public static bool IS_PED_FACING_PED(int ped, int otherPed, float angle) => Function.Call<bool>(0xD71649DB0A545AA3, ped, otherPed, angle);
		/// <summary>
		/// Notes: The function only returns true while the ped is: 
		/// A.) Swinging a random melee attack (including pistol-whipping)
		/// 
		/// B.) Reacting to being hit by a melee attack (including pistol-whipping)
		/// 
		/// C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 
		/// 
		/// You don't have to be holding the melee-targeting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
		/// </summary>
		public static bool IS_PED_IN_MELEE_COMBAT(int ped) => Function.Call<bool>(0x4E209B2C1EAD5159, ped);
		/// <summary>
		/// Only used in R* SP Script winter1: p1 = 5000
		/// _SET_PED_M*
		/// </summary>
		public static Any _0x6DB875AFC584FA32(int ped, int p1) => Function.Call<Any>(0x6DB875AFC584FA32, ped, p1);
		public static bool IS_PED_STOPPED(int ped) => Function.Call<bool>(0x530944F6F4B8A214, ped);
		public static bool IS_PED_SITTING(int ped) => Function.Call<bool>(0x84D0BF2B21862059, ped);
		public static bool _0x09D7AFD3716DA8E1(int ped, int p1) => Function.Call<bool>(0x09D7AFD3716DA8E1, ped, p1);
		/// <summary>
		/// If returned true: CHECK_SHOT_NEAR: Succeeded shot near
		/// If returned false: CHECK_SHOT_NEAR: Failed shot near
		/// </summary>
		public static bool _0x9C81338B2E62CE0A(int player, int ped, int shotNearRecentlyTime) => Function.Call<bool>(0x9C81338B2E62CE0A, player, ped, shotNearRecentlyTime);
		public static bool _0xB7DBB2986B87E230(int ped, float p1) => Function.Call<bool>(0xB7DBB2986B87E230, ped, p1);
		public static bool _0xD355E2F1BB41087E(int ped, float p1) => Function.Call<bool>(0xD355E2F1BB41087E, ped, p1);
		public static bool IS_ANY_PED_SHOOTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7) => Function.Call<bool>(0xA0D3D71EA1086C55, x1, y1, z1, x2, y2, z2, p6, p7);
		public static bool IS_ANY_PED_SHOOTING_IN_AREA(Vector3 vec1, Vector3 vec2, bool p6, bool p7) => Function.Call<bool>(0xA0D3D71EA1086C55, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p6, p7);
		/// <summary>
		/// Returns whether the specified ped is shooting.
		/// </summary>
		public static bool IS_PED_SHOOTING(int ped) => Function.Call<bool>(0x34616828CD07F1A1, ped);
		/// <summary>
		/// Returns time since the specified ped last shot, in seconds. (fPlayerJustShotTime)
		/// </summary>
		public static float TIME_SINCE_PED_LAST_SHOT(int ped) => Function.Call<float>(0x285D36C5C72B0569, ped);
		/// <summary>
		/// accuracy = 0-100, 100 being perfectly accurate
		/// </summary>
		public static void SET_PED_ACCURACY(int ped, int accuracy) => Function.Call(0x7AEFB85C1D49DEB6, ped, accuracy);
		public static int GET_PED_ACCURACY(int ped) => Function.Call<int>(0x37F4AD56ECBC0CD6, ped);
		public static bool IS_PED_MODEL(int ped, uint modelHash) => Function.Call<bool>(0xC9D55B1A358A5BF7, ped, modelHash);
		/// <summary>
		/// Forces the ped to fall back and kills it.
		/// 
		/// It doesn't really explode the ped's head but it kills the ped
		/// </summary>
		public static void EXPLODE_PED_HEAD(int ped, uint weaponHash) => Function.Call(0x2D05CED3A38D0F3A, ped, weaponHash);
		/// <summary>
		/// Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
		/// </summary>
		public static void ADD_ARMOUR_TO_PED(int ped, int amount) => Function.Call(0x5BA652A0CD14DF2F, ped, amount);
		/// <summary>
		/// Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_FLOW & PROCESS_GENERIC_PLAYER_INITIALIZATION
		/// </summary>
		public static void _0x5CA20FBE49891BBD(int ped, int p1) => Function.Call(0x5CA20FBE49891BBD, ped, p1);
		/// <summary>
		/// Ped: The ped to warp.
		/// vehicle: The vehicle to warp the ped into.
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static void SET_PED_INTO_VEHICLE(int ped, int vehicle, int seatIndex) => Function.Call(0xF75B0D629E1C063D, ped, vehicle, seatIndex);
		public static void SET_PED_MOVE_ANIMS_BLEND_OUT(int ped) => Function.Call(0x9E8C908F41584ECD, ped);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void _0x606D529DADA3C940(int ped, Any p1) => Function.Call(0x606D529DADA3C940, ped, p1);
		/// <summary>
		/// Returns true/false if the ped is/isn't male.
		/// </summary>
		public static bool IS_PED_MALE(int ped) => Function.Call<bool>(0x6D9F5FAA7488BA46, ped);
		/// <summary>
		/// Returns true/false if the ped is/isn't humanoid.
		/// </summary>
		public static bool IS_PED_HUMAN(int ped) => Function.Call<bool>(0xB980061DA992779D, ped);
		/// <summary>
		/// Gets the vehicle the specified Ped is in.
		/// 
		/// If the Ped is not in a vehicle and includeLastVehicle is true, the vehicle they were last in is returned.
		/// </summary>
		public static int GET_VEHICLE_PED_IS_IN(int ped, bool lastVehicle) => Function.Call<int>(0x9A9112A0FE9A4713, ped, lastVehicle);
		/// <summary>
		/// Resets the value for the last vehicle driven by the Ped.
		/// </summary>
		public static void RESET_PED_LAST_VEHICLE(int ped) => Function.Call(0xBB8DE8CF6A8DD8BB, ped);
		public static void _0xC6136B40FFFB778B(bool p0) => Function.Call(0xC6136B40FFFB778B, p0);
		/// <summary>
		/// Only used in SP R* Script train_robbery3: p1 = CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC & CLIPSET@VEH_TRAIN@HANDCART@BASE_PANIC_JOHN
		/// </summary>
		public static void _0x6E8B87139854022D(int ped, string clipset) => Function.Call(0x6E8B87139854022D, ped, clipset);
		public static int _GET_NUM_FREE_SLOTS_IN_PED_POOL() => Function.Call<int>(0x313778EDCA9158E2);
		public static void _RESERVE_AMBIENT_PEDS(int numPeds) => Function.Call(0xED9582B3DA8F02B4, numPeds);
		public static void _RESERVE_AMBIENT_PEDS_TOTAL(int numPeds) => Function.Call(0xF008E0BA1FE1D644, numPeds);
		public static void _UNRESERVE_AMBIENT_PEDS(int numPeds) => Function.Call(0x7D4E70A67A651C71, numPeds);
		public static int _GET_NUM_RESERVED_AMBIENT_PEDS_DESIRED() => Function.Call<int>(0x62DE46F061CAA468);
		public static int _GET_NUM_RESERVED_AMBIENT_PEDS_READY() => Function.Call<int>(0x5C16855277819BBF);
		public static bool _ARE_ALL_AMBIENT_PED_RESERVATIONS_READY() => Function.Call<bool>(0x5E420FF293EE5472);
		public static void _SET_SCENARIO_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xA77FA7BE9312F8C0, multiplier);
		/// <summary>
		/// Only used in SP R* Script loanshark_hunter
		/// </summary>
		public static void _0x9E3842E5DAD69F80(int volume) => Function.Call(0x9E3842E5DAD69F80, volume);
		public static void _SET_AMBIENT_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xAB0D553FE20A6E25, multiplier);
		public static void SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0x7A556143A1C03898, multiplier);
		public static void _SET_AMBIENT_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xC0258742B034DFAF, multiplier);
		public static void _SET_AMBIENT_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xBA0980B5C0A11924, multiplier);
		public static void _SET_SCENARIO_ANIMAL_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xDB48E99F8E064E56, multiplier);
		public static void _SET_SCENARIO_HUMAN_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0x28CB6391ACEDD9DB, multiplier);
		/// <summary>
		/// Sets the scenario ped density to the given config.
		/// 
		/// Valid configs:
		/// - BLACKWATER
		/// - DEFAULT
		/// - NEWBORDEAUX
		/// - RHODES
		/// - STRAWBERRY
		/// - TUMBLEWEED
		/// - VALENTINE
		/// - VANHORN
		/// 
		/// See common/data/ai/densityscoringconfigs.meta for more information.
		/// </summary>
		public static void _SET_SCENARIO_PED_DENSITY_THIS_FRAME(uint configHash) => Function.Call(0x95423627A9CA598E, configHash);
		public static void INSTANTLY_FILL_PED_POPULATION() => Function.Call(0x4759CC730F947C81);
		/// <summary>
		/// Only used in R* Script tg_p (CLIENT__AMBIENT_POPULATION - Player starts the populate in region)
		/// </summary>
		public static void _0xBFA6B7731C3BAF02() => Function.Call(0xBFA6B7731C3BAF02);
		public static bool IS_INSTANTLY_FILL_PED_POPULATION_FINISHED() => Function.Call<bool>(0x0EE3F0D7FECCC54F);
		/// <summary>
		/// The distance between these points, is the diagonal of a box (remember it's 3D).
		/// </summary>
		public static void SET_PED_NON_CREATION_AREA(float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call(0xEE01041D559983EA, x1, y1, z1, x2, y2, z2);
		public static void SET_PED_NON_CREATION_AREA(Vector3 vec1, Vector3 vec2) => Function.Call(0xEE01041D559983EA, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		public static void CLEAR_PED_NON_CREATION_AREA() => Function.Call(0x2E05208086BA0651);
		public static void _ATTACH_VOLUME_TO_ENTITY(int volume, int entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int p8, bool p9) => Function.Call(0x7C00CFC48A782DC0, volume, entity, offsetX, offsetY, offsetZ, rotX, rotY, rotZ, p8, p9);
		public static void _ATTACH_VOLUME_TO_ENTITY(int volume, int entity, Vector3 offset, Vector3 rotation, int p8, bool p9) => Function.Call(0x7C00CFC48A782DC0, volume, entity, offset.X, offset.Y, offset.Z, rotation.X, rotation.Y, rotation.Z, p8, p9);
		public static void _DETACH_VOLUME_FROM_ENTITY(int volume, int entity) => Function.Call(0x19C975B81BE53C28, volume, entity);
		public static void SET_PED_ONTO_MOUNT(int ped, int mount, int seatIndex, bool p3) => Function.Call(0x028F76B6E78246EB, ped, mount, seatIndex, p3);
		public static void _REMOVE_PED_FROM_MOUNT(int ped, bool p1, bool p2) => Function.Call(0x5337B721C51883A9, ped, p1, p2);
		public static int CREATE_PED_ON_MOUNT(int mount, uint modelHash, int index, bool p3, bool p4, bool p5, bool p6) => Function.Call<int>(0xF89AA2BD01FC06B7, mount, modelHash, index, p3, p4, p5, p6);
		public static bool _IS_MOUNT_SEAT_FREE(int mount, int seat) => Function.Call<bool>(0xAAB0FE202E9FC9F0, mount, seat);
		public static bool IS_PED_ON_MOUNT(int ped) => Function.Call<bool>(0x460BC76A0E10655E, ped);
		public static bool IS_PED_FULLY_ON_MOUNT(int ped, bool p1) => Function.Call<bool>(0x95CBC65780DE7EB1, ped, p1);
		public static int GET_MOUNT(int ped) => Function.Call<int>(0xE7E11B8DCBED1058, ped);
		/// <summary>
		/// Returns last horse the ped was leading
		/// </summary>
		public static int _GET_LAST_LED_MOUNT(int ped) => Function.Call<int>(0x693126B5D0457D0D, ped);
		public static int _GET_LAST_MOUNT(int ped) => Function.Call<int>(0x4C8B59171957BCF7, ped);
		/// <summary>
		/// Only used in R* Script nb_stalking_hunter
		/// </summary>
		public static void _0xED1C764997A86D5A(int ped1, int ped2) => Function.Call(0xED1C764997A86D5A, ped1, ped2);
		/// <summary>
		/// _SET_HO*
		/// </summary>
		public static void _0xB8AB265426CFE6DD(int ped, bool p1) => Function.Call(0xB8AB265426CFE6DD, ped, p1);
		/// <summary>
		/// Returns dismounted timestamp
		/// </summary>
		public static int _0xE8D1CCB9375C101B(int mount, int player) => Function.Call<int>(0xE8D1CCB9375C101B, mount, player);
		public static void _0xA691C10054275290(int mount, int player, int dismountedTimestamp) => Function.Call(0xA691C10054275290, mount, player, dismountedTimestamp);
		public static void _0x6734F0A6A52C371C(int player, int horseSlot) => Function.Call(0x6734F0A6A52C371C, player, horseSlot);
		public static void _0x024EC9B649111915(int ped, bool p1) => Function.Call(0x024EC9B649111915, ped, p1);
		public static void SET_PED_OWNS_ANIMAL(int ped, int animal, bool p2) => Function.Call(0x931B241409216C1F, ped, animal, p2);
		public static int _GET_ACTIVE_ANIMAL_OWNER(int animal) => Function.Call<int>(0xF103823FFE72BB49, animal);
		public static void _0xBCC76708E5677E1D(int ped, bool p1) => Function.Call(0xBCC76708E5677E1D, ped, p1);
		/// <summary>
		/// Returns an int based on enum eTamingState
		/// 
		/// enum eTamingState
		/// {
		/// 	ATS_INVALID = 0,
		/// 	ATS_INACTIVE,
		/// 	ATS_TARGET_DETECTED,
		/// 	ATS_CALLED_OUT,
		/// 	ATS_MOUNTABLE,
		/// 	ATS_BEING_PATTED,
		/// 	ATS_BREAKING_ACTIVE,
		/// 	ATS_SPOOKED,
		/// 	ATS_RETREATING,
		/// 	ATS_FLEEING
		/// };
		/// </summary>
		public static int _GET_HORSE_TAMING_STATE(int horse) => Function.Call<int>(0x454AD4DA6C41B5BD, horse);
		public static void _0x54D3CD482742C482(int animal, float p2) => Function.Call(0x54D3CD482742C482, animal, p2);
		public static void _0x5CB2EBB467BE3ED6(int animal, float p2) => Function.Call(0x5CB2EBB467BE3ED6, animal, p2);
		public static void _0x9F0F28B42C4EE80A(int animal, float p2) => Function.Call(0x9F0F28B42C4EE80A, animal, p2);
		public static void _SET_MOUNT_BONDING_LEVEL(int ped, int bondingLevel) => Function.Call(0xA69899995997A63B, ped, bondingLevel);
		/// <summary>
		/// Note: this native was added in build 1232.40
		/// </summary>
		public static void _SET_MOUNT_SECURITY_ENABLED(int ped, bool toggle) => Function.Call(0x11E6B9629C46D6EC, ped, toggle);
		/// <summary>
		/// Only used in SP R* Script winter1: p1 = Winter1Mount
		/// </summary>
		public static void _0x9B65444C07B782BF(int ped, string p1) => Function.Call(0x9B65444C07B782BF, ped, p1);
		public static bool IS_ANIMAL_INTERACTION_POSSIBLE(int ped, int animal) => Function.Call<bool>(0xD543D3A8FDE4F185, ped, animal);
		public static bool _IS_ANIMAL_INTERACTION_RUNNING(int ped) => Function.Call<bool>(0x7FC84E85D98F063D, ped);
		/// <summary>
		/// Used in Script Function NET_CAMP_DOG_CLIENT_HANDLE_ANIMAL_INTERACTION
		/// </summary>
		public static int _0x8BE24D74D74C6E9B(int ped) => Function.Call<int>(0x8BE24D74D74C6E9B, ped);
		/// <summary>
		/// _IS_I* - _IS_L*
		/// </summary>
		public static bool _0x77243ED4F7CAAA55(int ped) => Function.Call<bool>(0x77243ED4F7CAAA55, ped);
		/// <summary>
		/// Gets a value indicating whether the specified ped is on top of any vehicle.
		/// 
		/// Return 1 when ped is on vehicle.
		/// Return 0 when ped is not on a vehicle.
		/// </summary>
		public static bool IS_PED_ON_VEHICLE(int ped, bool p1) => Function.Call<bool>(0x67722AEB798E5FAB, ped, p1);
		public static bool IS_PED_ON_SPECIFIC_VEHICLE(int ped, int vehicle) => Function.Call<bool>(0xEC5F66E459AF3BB2, ped, vehicle);
		public static void _WARP_PED_OUT_OF_VEHICLE(int ped) => Function.Call(0xE0B61ED8BB37712F, ped);
		public static void SET_PED_MONEY(int ped, int amount) => Function.Call(0xA9C8960E8684C1B5, ped, amount);
		public static int GET_PED_MONEY(int ped) => Function.Call<int>(0x3F69145BBA87BAE7, ped);
		public static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(bool p0) => Function.Call(0x9911F4A24485F653, p0);
		public static void _0x34EDDD59364AD74A(int ped, Any* p1) => Function.Call(0x34EDDD59364AD74A, ped, p1);
		public static void _0x2D976DBDC731DF80(int ped) => Function.Call(0x2D976DBDC731DF80, ped);
		/// <summary>
		/// Detect if ped is sitting in the specified vehicle
		/// [True/False]
		/// </summary>
		public static bool IS_PED_SITTING_IN_VEHICLE(int ped, int vehicle) => Function.Call<bool>(0xA808AA1D79230FC2, ped, vehicle);
		/// <summary>
		/// Detect if ped is in any vehicle
		/// [True/False]
		/// </summary>
		public static bool IS_PED_SITTING_IN_ANY_VEHICLE(int ped) => Function.Call<bool>(0x826AA586EDB9FEF8, ped);
		public static bool IS_PED_ON_FOOT(int ped) => Function.Call<bool>(0x01FEE67DB37F59B2, ped);
		public static bool IS_PED_PLANTING_BOMB(int ped) => Function.Call<bool>(0xC70B5FAE151982D8, ped);
		public static Vector3 GET_DEAD_PED_PICKUP_COORDS(int ped, float p1, float p2) => Function.Call<Vector3>(0xCD5003B097200F36, ped, p1, p2);
		public static bool IS_PED_IN_ANY_BOAT(int ped) => Function.Call<bool>(0x2E0E1C2B4F6CB339, ped);
		public static bool IS_PED_IN_ANY_HELI(int ped) => Function.Call<bool>(0x298B91AE825E5705, ped);
		public static bool IS_PED_IN_ANY_PLANE(int ped) => Function.Call<bool>(0x5FFF4CFC74D8FB80, ped);
		public static bool IS_PED_IN_FLYING_VEHICLE(int ped) => Function.Call<bool>(0x9134873537FA419C, ped);
		/// <summary>
		/// _IS_PED_FL* - _IS_PED_FU*
		/// </summary>
		public static bool _0x256EDD55C6BE1482(int ped) => Function.Call<bool>(0x256EDD55C6BE1482, ped);
		public static bool GET_PED_LAST_DAMAGE_BONE(int ped, int* outBone) => Function.Call<bool>(0xD75960F6BD9EA49C, ped, outBone);
		public static void CLEAR_PED_LAST_DAMAGE_BONE(int ped) => Function.Call(0x8EF6B7AC68E2F01B, ped);
		/// <summary>
		/// enum ePedDamageCleanliness
		/// {
		/// 	PED_DAMAGE_CLEANLINESS_POOR,
		/// 	PED_DAMAGE_CLEANLINESS_GOOD,
		/// 	PED_DAMAGE_CLEANLINESS_PERFECT
		/// };
		/// </summary>
		public static int _GET_PED_DAMAGE_CLEANLINESS(int ped) => Function.Call<int>(0x88EFFED5FE8B0B4A, ped);
		/// <summary>
		/// damageCleanliness: see _GET_PED_DAMAGE_CLEANLINESS
		/// </summary>
		public static void _SET_PED_DAMAGE_CLEANLINESS(int ped, int damageCleanliness) => Function.Call(0x7528720101A807A5, ped, damageCleanliness);
		/// <summary>
		/// Returns true if _GET_PED_DAMAGE_CLEANLINESS was ever lower than 2
		/// </summary>
		public static bool _GET_PED_DAMAGED(int ped) => Function.Call<bool>(0x6CFC373008A1EDAF, ped);
		public static void _SET_PED_DAMAGED(int ped, bool damaged) => Function.Call(0xDACE03C65C6666DB, ped, damaged);
		/// <summary>
		/// Animal Skin Quality Modifier
		/// Params: p2 = 2, p3 = 3 in R* Scripts
		/// </summary>
		public static Any _SET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER(int player, float modifier, int p2, int p3) => Function.Call<Any>(0x9EFF3C91DF38304F, player, modifier, p2, p3);
		public static void _UPDATE_ANIMAL_DAMAGE_MODIFIER(int player) => Function.Call(0x0F9E754EBE8FDBFA, player);
		/// <summary>
		/// Returns animal skin quality modifier
		/// </summary>
		public static float _GET_PLAYER_CURRENT_ANIMAL_DAMAGE_MODIFIER(int player) => Function.Call<float>(0xEE2D5C819A65BF26, player);
		/// <summary>
		/// Used in Script Function SATCHEL_COUNT_BREAKDOWN_COMPONENTS
		/// </summary>
		public static Any _0xB29C553BA582D09E(Any* p0, uint model, int damageCleanliness, int p3) => Function.Call<Any>(0xB29C553BA582D09E, p0, model, damageCleanliness, p3);
		public static bool _0x101B45C5F56D970F(Any* p0, int ped, int damageCleanliness, int p3) => Function.Call<bool>(0x101B45C5F56D970F, p0, ped, damageCleanliness, p3);
		/// <summary>
		/// Related to dead animals items/loots
		/// Notice: skinningQuality is partially calculated using pedQuality
		/// </summary>
		public static int _COMPUTE_SATCHEL_ITEM_FOR_PED_CARCASS(Any* outInventoryItemArray, int ped, int damageCleanliness, int skinningQuality) => Function.Call<int>(0x6B89FAA36FC909A3, outInventoryItemArray, ped, damageCleanliness, skinningQuality);
		public static bool COMPUTE_SATCHEL_ITEM_FOR_PED_DAMAGE(Any p0, int pedAttached, int damageCleanliness) => Function.Call<bool>(0x9E7738B291706746, p0, pedAttached, damageCleanliness);
		public static void SET_AI_WEAPON_DAMAGE_MODIFIER(float value) => Function.Call(0x1B1E2A40A65B8521, value);
		public static void RESET_AI_WEAPON_DAMAGE_MODIFIER() => Function.Call(0xEA16670E7BA4743C);
		/// <summary>
		/// _SET_W(EAPON?)*
		/// </summary>
		public static void _SET_TOTAL_PED_DAMAGE_FROM_AI(int ped, float totalDamage) => Function.Call(0x73B6F907B913C860, ped, totalDamage);
		/// <summary>
		/// _DELETE_*
		/// </summary>
		public static void _0xA6D6F03095C88F59(int ped) => Function.Call(0xA6D6F03095C88F59, ped);
		/// <summary>
		/// _GET_WA*
		/// </summary>
		public static float _GET_TOTAL_PED_DAMAGE_FROM_AI(int ped) => Function.Call<float>(0x92C8EACA29F6BED6, ped);
		/// <summary>
		/// Old name: _SET_PED_DAMAGE_MODIFIER
		/// </summary>
		public static void SET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER(int ped, float damageModifier) => Function.Call(0xD77AE48611B7B10A, ped, damageModifier);
		public static float GET_PED_TO_PLAYER_WEAPON_DAMAGE_MODIFIER(int ped) => Function.Call<float>(0x936E7CAD0AE2EE14, ped);
		public static void _SET_CURRENT_DEFENSE_AGAINST_PLAYERS_MODIFIER(int horse, float modifier) => Function.Call(0x069EDDF1FD4DEB0A, horse, modifier);
		/// <summary>
		/// Used in Script Function NB_EVENT_OVERRIDE__HANDLE__EVENT_DAMAGE_ENTITY
		/// </summary>
		public static float _0x763FA8A9D76EE3A7(int ped) => Function.Call<float>(0x763FA8A9D76EE3A7, ped);
		public static void SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(float modifier) => Function.Call(0x66460DEDDD417254, modifier);
		public static void _SET_ACCURACY_AGAINST_LOCAL_PLAYER_MODIFIER(int ped, float modifier) => Function.Call(0xC2266AA617668AD3, ped, modifier);
		public static float _0xDC9273D95976BA22(int ped) => Function.Call<float>(0xDC9273D95976BA22, ped);
		public static void _SET_PED_HEADSHOT_DAMAGE_MULTIPLIER(int ped, float multiplier) => Function.Call(0x2BA918C823B8BA56, ped, multiplier);
		public static void _0xDEE8D30AA5C2E28D(int ped, uint p1, bool p2) => Function.Call(0xDEE8D30AA5C2E28D, ped, p1, p2);
		public static void _0xE1B3BE07D3AADDED(int ped, int p1, bool p2) => Function.Call(0xE1B3BE07D3AADDED, ped, p1, p2);
		public static void _0x32CEDA9A0AB4CEF7(int ped, uint p1, bool p2) => Function.Call(0x32CEDA9A0AB4CEF7, ped, p1, p2);
		public static void _0x52A24D8A1DA89658(int ped, int p1, bool p2) => Function.Call(0x52A24D8A1DA89658, ped, p1, p2);
		public static void _0x34B5CEAC180A5D6E(int ped, uint p1, bool p2) => Function.Call(0x34B5CEAC180A5D6E, ped, p1, p2);
		public static void _0x4F27603E44A8E4C0(int ped, int p1, bool p2) => Function.Call(0x4F27603E44A8E4C0, ped, p1, p2);
		/// <summary>
		/// Changes health bar around heart core icon
		/// INITIALISE_NEW_ROLE - Applying Super Jump buffs: p1 = 10, p2 = 0.0f
		/// INITIALISE_NEW_ROLE - Clearing up Super Jump buffs: p1 = 10, p2 = 1.0f
		/// _SET_D*
		/// </summary>
		public static void _0x3FDCC1F8C17E303E(int ped, int p1, float p2) => Function.Call(0x3FDCC1F8C17E303E, ped, p1, p2);
		/// <summary>
		/// _SET_D*
		/// </summary>
		public static void _0xE50C9816B3F22D8B(int ped, uint p1, float p2) => Function.Call(0xE50C9816B3F22D8B, ped, p1, p2);
		public static void _SET_DEFENSE_MODIFIER_FOR_PED(int ped, float modifier) => Function.Call(0x9B6808EC46BE849B, ped, modifier);
		/// <summary>
		/// _SET_M*
		/// </summary>
		public static void _0x7883AA809DF43D98(int ped, float healthLimit) => Function.Call(0x7883AA809DF43D98, ped, healthLimit);
		/// <summary>
		/// _SET_H* - _SET_I*
		/// </summary>
		public static void _0xC5B78E41DCF8227C(int ped, bool p1) => Function.Call(0xC5B78E41DCF8227C, ped, p1);
		public static void SET_PED_CAN_BE_TARGETTED(int ped, bool toggle) => Function.Call(0x63F58F7C80513AAD, ped, toggle);
		public static void SET_PED_CAN_BE_TARGETTED_BY_TEAM(int ped, int team, bool toggle) => Function.Call(0xBF1CA77833E58F2C, ped, team, toggle);
		public static void SET_PED_CAN_BE_TARGETTED_BY_PLAYER(int ped, int player, bool toggle) => Function.Call(0x66B57B72E0836A76, ped, player, toggle);
		public static void _SET_INTERACTION_LOCKON_FLAG(int ped, int player, int flag, bool enable) => Function.Call(0xFECA2081F61ED2CD, ped, player, flag, enable);
		public static bool IS_PED_FALLING(int ped) => Function.Call<bool>(0xFB92A102F1C4DFA3, ped);
		public static bool _IS_PED_SLIDING(int ped) => Function.Call<bool>(0xD6740E14E4CEFC0B, ped);
		public static bool IS_PED_JUMPING(int ped) => Function.Call<bool>(0xCEDABC5900A0BF97, ped);
		public static bool IS_PED_CLIMBING(int ped) => Function.Call<bool>(0x53E8CB4F48BFE623, ped);
		public static bool _IS_PED_CLIMBING_LADDER(int ped) => Function.Call<bool>(0x59643424B68D52B5, ped);
		/// <summary>
		/// _IS_PED_C* - _IS_PED_D*
		/// </summary>
		public static bool _0x577C60BA06D0EA64(int ped) => Function.Call<bool>(0x577C60BA06D0EA64, ped);
		public static bool IS_PED_VAULTING(int ped) => Function.Call<bool>(0x117C70D1F5730B5E, ped);
		public static bool IS_PED_DIVING(int ped) => Function.Call<bool>(0x5527B8246FEF9B11, ped);
		/// <summary>
		/// Returns true if the ped is currently opening a door (CTaskOpenDoor).
		/// 
		/// Old name: _IS_PED_OPENING_A_DOOR
		/// </summary>
		public static bool IS_PED_OPENING_DOOR(int ped) => Function.Call<bool>(0x26AF0E8E30BD2A2C, ped);
		/// <summary>
		/// _IS_PED_IN*
		/// </summary>
		public static bool _0x5C6C7C70CA302801(int ped) => Function.Call<bool>(0x5C6C7C70CA302801, ped);
		/// <summary>
		/// _IS_PED_J* - _IS_PED_L*
		/// </summary>
		public static bool _0xB91AB3BE7F655D49(int ped) => Function.Call<bool>(0xB91AB3BE7F655D49, ped);
		public static bool IS_PED_IN_ANY_TAXI(int ped) => Function.Call<bool>(0x6E575D6A898AB852, ped);
		public static void SET_PED_ID_RANGE(int ped, float value) => Function.Call(0xF107E836A70DCE05, ped, value);
		public static float _GET_PED_ID_RANGE(int ped) => Function.Call<float>(0x31167ED4324B758D, ped);
		public static void SET_PED_HIGHLY_PERCEPTIVE(int ped, bool toggle) => Function.Call(0x52D59AB61DDC05DD, ped, toggle);
		public static void SET_PED_INJURED_ON_GROUND_BEHAVIOUR(int ped, float unk) => Function.Call(0xEC4B4B3B9908052A, ped, unk);
		public static void DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(int ped) => Function.Call(0x733C87D4CE22BEA2, ped);
		/// <summary>
		/// _SET_ST* - _SET_SW*
		/// </summary>
		public static void _0x028E7B3BBA0BD2FC(int ped) => Function.Call(0x028E7B3BBA0BD2FC, ped);
		/// <summary>
		/// _HAS_PED_*
		/// </summary>
		public static bool _0xFA8C10DCE0706D43(int ped) => Function.Call<bool>(0xFA8C10DCE0706D43, ped);
		public static void _SET_PED_ANIMAL_DETECTION_MODIFIER(int ped, float modifier) => Function.Call(0x43CA928E892CFDB8, ped, modifier);
		/// <summary>
		/// Used in Script Function CHECK_IS_PLAYER_SEEN
		/// _GET_PED_*
		/// </summary>
		public static float _0x2BA9D7BF629F920C(int ped) => Function.Call<float>(0x2BA9D7BF629F920C, ped);
		public static void SET_PED_SEEING_RANGE(int ped, float value) => Function.Call(0xF29CF591C4BF6CEE, ped, value);
		/// <summary>
		/// Used in Script Function AGGRO_SHOULD_PED_HEAR_DEATH
		/// _GET_PED_*
		/// </summary>
		public static float _0x900CA00CE703E1E2(int ped) => Function.Call<float>(0x900CA00CE703E1E2, ped);
		public static void SET_PED_HEARING_RANGE(int ped, float value) => Function.Call(0x33A8F7F7D5F7F33C, ped, value);
		public static void SET_PED_VISUAL_FIELD_MIN_ANGLE(int ped, float value) => Function.Call(0x2DB492222FB21E26, ped, value);
		public static void SET_PED_VISUAL_FIELD_MAX_ANGLE(int ped, float value) => Function.Call(0x70793BDCA1E854D4, ped, value);
		public static void SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(int ped, float range) => Function.Call(0x9C74B0BC831B753A, ped, range);
		public static void SET_PED_VISUAL_FIELD_CENTER_ANGLE(int ped, float angle) => Function.Call(0x3B6405E8AB34A907, ped, angle);
		/// <summary>
		/// _SET_PED_M*
		/// </summary>
		public static void _0x9AB33CB5834885B3(int ped, float p1, float p2, float p3, float p4) => Function.Call(0x9AB33CB5834885B3, ped, p1, p2, p3, p4);
		/// <summary>
		/// _SET_PED_O*
		/// </summary>
		public static void _0x899DFA0009AC93DE(int ped, float p1) => Function.Call(0x899DFA0009AC93DE, ped, p1);
		/// <summary>
		/// _SET_PED_MO*
		/// </summary>
		public static void _0x3A5697B80FED5EBE(int ped, float p1, float p2, float p3, float p4) => Function.Call(0x3A5697B80FED5EBE, ped, p1, p2, p3, p4);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void SET_PED_STEALTH_MOVEMENT(int ped, bool toggle, Any p2, Any p3) => Function.Call(0x88CBB5CEB96B7BD2, ped, toggle, p2, p3);
		/// <summary>
		/// Returns whether the entity is in stealth mode
		/// </summary>
		public static bool GET_PED_STEALTH_MOVEMENT(int ped) => Function.Call<bool>(0x7C2AC9CA66575FBF, ped);
		public static void _SET_PED_CROUCH_MOVEMENT(int ped, bool state, int p2, bool immediately) => Function.Call(0x7DE9692C6F64CFE8, ped, state, p2, immediately);
		public static bool GET_PED_CROUCH_MOVEMENT(int ped) => Function.Call<bool>(0xD5FE956C70FF370B, ped);
		public static bool GET_PED_IS_DOING_COMBAT_ROLL(int ped) => Function.Call<bool>(0xC48A9EB0D499B3E5, ped);
		/// <summary>
		/// Creates a new ped group.
		/// Groups can contain up to 8 peds.
		/// 
		/// The parameter is unused.
		/// 
		/// Returns a handle to the created group, or 0 if a group couldn't be created.
		/// </summary>
		public static int CREATE_GROUP(int taskAllocator) => Function.Call<int>(0x90370EBE0FEE1A3D, taskAllocator);
		public static void SET_PED_AS_GROUP_LEADER(int ped, int groupId, bool p2) => Function.Call(0x2A7819605465FBCE, ped, groupId, p2);
		public static void SET_PED_AS_GROUP_MEMBER(int ped, int groupId) => Function.Call(0x9F3480FE65DB31B5, ped, groupId);
		/// <summary>
		/// This only will teleport the ped to the group leader if the group leader teleports (sets coords).
		/// 
		/// Only works in singleplayer
		/// </summary>
		public static void SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(int pedHandle, int groupId, bool toggle) => Function.Call(0x2E2F4240B3F24647, pedHandle, groupId, toggle);
		public static void REMOVE_GROUP(int groupId) => Function.Call(0x8EB2F69076AF7053, groupId);
		public static void REMOVE_PED_FROM_GROUP(int ped) => Function.Call(0xED74007FFB146BC2, ped);
		public static bool IS_PED_GROUP_MEMBER(int ped, int groupId, bool p2) => Function.Call<bool>(0x9BB01E3834671191, ped, groupId, p2);
		public static bool _IS_PED_GROUP_LEADER(int ped, int groupId) => Function.Call<bool>(0x878B68960C1C2A35, ped, groupId);
		public static bool IS_PED_HANGING_ON_TO_VEHICLE(int ped) => Function.Call<bool>(0x1C86D8AEF8254B78, ped);
		/// <summary>
		/// Sets the range at which members will automatically leave the group.
		/// </summary>
		public static void SET_GROUP_SEPARATION_RANGE(int groupId, float separationRange) => Function.Call(0x4102C7858CFEE4E4, groupId, separationRange);
		/// <summary>
		/// _SET_C*
		/// </summary>
		public static void _0x89E59DBD15E21177(int groupId, int p1) => Function.Call(0x89E59DBD15E21177, groupId, p1);
		public static bool IS_PED_PRONE(int ped) => Function.Call<bool>(0xD6A86331A537A7B9, ped);
		/// <summary>
		/// _IS_PED_IN*
		/// </summary>
		public static bool _0x7583A9D35248B83F(int ped) => Function.Call<bool>(0x7583A9D35248B83F, ped);
		public static bool IS_PED_IN_COMBAT(int ped, int target) => Function.Call<bool>(0x4859F1FC66A6278E, ped, target);
		public static bool CAN_PED_IN_COMBAT_SEE_TARGET(int ped, int target) => Function.Call<bool>(0xEAD42DE3610D0721, ped, target);
		public static bool IS_PED_JACKING(int ped) => Function.Call<bool>(0x4AE4FF911DFB61DA, ped);
		public static bool IS_PED_BEING_JACKED(int ped) => Function.Call<bool>(0x9A497FE2DF198913, ped);
		public static bool IS_PED_BEING_STUNNED(int ped, int p1) => Function.Call<bool>(0x4FBACCE3B4138EE8, ped, p1);
		public static int GET_PEDS_JACKER(int ped) => Function.Call<int>(0x9B128DC36C1E04CF, ped);
		public static int GET_JACK_TARGET(int ped) => Function.Call<int>(0x5486A79D9FBD342D, ped);
		public static bool IS_PED_FLEEING(int ped) => Function.Call<bool>(0xBBCCE00B381F8482, ped);
		public static bool IS_PED_IN_COVER(int ped, bool p1, bool p2) => Function.Call<bool>(0x60DFD0691A170B88, ped, p1, p2);
		/// <summary>
		/// _IS_PED_M* - _IS_PED_O*
		/// </summary>
		public static bool _0x2DD4E0E26DFAD97D(int ped1, int ped2, float p2) => Function.Call<bool>(0x2DD4E0E26DFAD97D, ped1, ped2, p2);
		public static bool _0x06FA94C835787C64(int ped) => Function.Call<bool>(0x06FA94C835787C64, ped);
		public static bool _PED_DUELING_DID_PLAYER_HEADSHOT_OPPONENT(int ped) => Function.Call<bool>(0xBD6B242B8BD5543A, ped);
		public static bool IS_PED_IN_COVER_FACING_LEFT(int ped) => Function.Call<bool>(0x845333B3150583AB, ped);
		public static bool IS_PED_GOING_INTO_COVER(int ped) => Function.Call<bool>(0x9F65DBC537E59AD5, ped);
		public static bool IS_PED_RESPONDING_TO_THREAT(int ped) => Function.Call<bool>(0x77525BBF433F2CD6, ped);
		/// <summary>
		/// Returns kneeling, sitting, squating, and sleeping scenario hashes
		/// </summary>
		public static uint _GET_ACTIVE_DYNAMIC_SCENARIO_2(int ped) => Function.Call<uint>(0xC22AA08A8ADB87D4, ped);
		/// <summary>
		/// Returns kneeling, sitting, squating, and sleeping scenario hashes
		/// </summary>
		public static uint _GET_ACTIVE_DYNAMIC_SCENARIO(int ped) => Function.Call<uint>(0x569F1E1237508DEB, ped);
		public static bool _GIVE_PED_SCENARIO_PROP(int ped, int _object, string conditionalAnim, string p3, string p4, bool p5) => Function.Call<bool>(0x3BBDD6143FF16F98, ped, _object, conditionalAnim, p3, p4, p5);
		public static bool GIVE_PED_HASH_SCENARIO_PROP(int ped, int _object, string conditionalAnim, uint scenarioType, uint p4, bool p5) => Function.Call<bool>(0x2B02DB082258625F, ped, _object, conditionalAnim, scenarioType, p4, p5);
		/// <summary>
		/// Only used in SP R* Script rcm_jack2
		/// </summary>
		public static bool _GIVE_PED_SCENARIO_PROP_DYNAMIC(int ped, int _object, string p2, string p3, bool p4) => Function.Call<bool>(0xA0774E388CE4A679, ped, _object, p2, p3, p4);
		public static Any _REQUEST_PROP_SCENARIO_PED(int ped, int _object, string p2, string p3, string p4, bool p5) => Function.Call<Any>(0xBEC65C6049B3219D, ped, _object, p2, p3, p4, p5);
		public static Any _REQUEST_PED_FOR_SCENARIO_TYPE(int ped, int _object, string p2, uint scenarioType, string p4, bool p5) => Function.Call<Any>(0xBDED916A9F9B0604, ped, _object, p2, scenarioType, p4, p5);
		/// <summary>
		/// Params: p1 = p_banjo01x_XH_R_HAND00, mp006_p_dblcello01x_XH_R_HAND00, p_fiddle01x_PH_L_HAND, p_guitar01x_XH_R_HAND00, mp006_p_mnshn_washboard01x_XH_R_HAND00, p_bottleBeer01x_PH_R_HAND
		/// </summary>
		public static int _GET_PED_REGISTER_PROP(int ped, string p1, bool p2) => Function.Call<int>(0x4D0D2E3D8BC000EB, ped, p1, p2);
		public static int GET_SEAT_PED_IS_TRYING_TO_ENTER(int ped) => Function.Call<int>(0x6F4C85ACD641BCD2, ped);
		/// <summary>
		/// Returns the entity that killed the ped
		/// 
		/// It is best to check if the Ped is dead before asking for its killer.
		/// </summary>
		public static int GET_PED_SOURCE_OF_DEATH(int ped) => Function.Call<int>(0x93C8B64DEB84728C, ped);
		/// <summary>
		/// Returns the hash of the weapon/model/object that killed the ped.
		/// </summary>
		public static uint GET_PED_CAUSE_OF_DEATH(int ped) => Function.Call<uint>(0x16FFE42AB2D2DC59, ped);
		public static int GET_PED_TIME_OF_DEATH(int ped) => Function.Call<int>(0x1E98817B311AE98A, ped);
		public static int COUNT_PEDS_IN_COMBAT_WITH_TARGET(int ped, int flag) => Function.Call<int>(0x5407B7288D0478B7, ped, flag);
		public static int _GET_PEDS_IN_COMBAT_WITH_TARGET(int ped, int itemset, int flag) => Function.Call<int>(0x7BE607DAFF382FD2, ped, itemset, flag);
		public static int COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(int ped, float x, float y, float z, float radius, int flag) => Function.Call<int>(0x336B3D200AB007CB, ped, x, y, z, radius, flag);
		public static int COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(int ped, Vector3 vec, float radius, int flag) => Function.Call<int>(0x336B3D200AB007CB, ped, vec.X, vec.Y, vec.Z, radius, flag);
		public static int GET_CURRENT_TARGET_FOR_PED(int ped) => Function.Call<int>(0xCD66FEA29400A0B5, ped);
		public static void SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(int ped, uint hash) => Function.Call(0xADB3F206518799E8, ped, hash);
		public static uint _GET_DEFAULT_RELATIONSHIP_GROUP_HASH(uint modelHash) => Function.Call<uint>(0x3CC4A718C258BDD0, modelHash);
		public static void SET_PED_RELATIONSHIP_GROUP_HASH(int ped, uint relationshipGroup) => Function.Call(0xC80A74AC829DDD92, ped, relationshipGroup);
		public static void SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, uint group1, uint group2) => Function.Call(0xBF25EB89375A37AD, relationship, group1, group2);
		public static void CLEAR_RELATIONSHIP_BETWEEN_GROUPS(int relationship, uint group1, uint group2) => Function.Call(0x5E29243FB56FC6D4, relationship, group1, group2);
		/// <summary>
		/// The hash of the created relationship group is output in the second parameter.
		/// </summary>
		public static bool ADD_RELATIONSHIP_GROUP(string name, uint* groupHash) => Function.Call<bool>(0xF372BC22FCB88606, name, groupHash);
		public static void REMOVE_RELATIONSHIP_GROUP(uint groupHash) => Function.Call(0xB6BA2444AB393DA2, groupHash);
		public static int GET_RELATIONSHIP_BETWEEN_PEDS(int ped1, int ped2) => Function.Call<int>(0xEBA5AD3A0EAF7121, ped1, ped2);
		public static uint GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(int ped) => Function.Call<uint>(0x42FDD0F017B1E38E, ped);
		public static uint GET_PED_RELATIONSHIP_GROUP_HASH(int ped) => Function.Call<uint>(0x7DBDD04862D95F04, ped);
		public static int GET_RELATIONSHIP_BETWEEN_GROUPS(uint group1, uint group2) => Function.Call<int>(0x9E6B70061662AE5C, group1, group2);
		/// <summary>
		/// Used in Script Function MP_MAIN_OFFLINE__INITIALIZE_GAME
		/// _SET_RELATIONSHIP_*
		/// </summary>
		public static void _0xDC91F22F09BC6C2F(uint group, bool p1) => Function.Call(0xDC91F22F09BC6C2F, group, p1);
		public static void _0x9629FAF6460D35CB(uint group, bool p1) => Function.Call(0x9629FAF6460D35CB, group, p1);
		public static void _0x4E68C7EF706DF35D(int ped, float x, float y, float z, float p4, uint relationshipGroup) => Function.Call(0x4E68C7EF706DF35D, ped, x, y, z, p4, relationshipGroup);
		public static void _0x4E68C7EF706DF35D(int ped, Vector3 vec, float p4, uint relationshipGroup) => Function.Call(0x4E68C7EF706DF35D, ped, vec.X, vec.Y, vec.Z, p4, relationshipGroup);
		/// <summary>
		/// Used in R* Script net_fetch (NET_FETCH_UPDATE_RECIPIENT_PROP_ILO_IN_COMBAT) and various SP Scripts
		/// Params: p1 = 4/5/6, p5 = 40.f/100.f, coords = Player ped
		/// Perhaps returns some distance (Clearing that the local player is able to use ILO while in combat because they are near the recipient but also near hated peds)
		/// _GET_NUM_M* - _GET_PEDS_J*
		/// </summary>
		public static int _0x3ACCE14DFA6BA8C2(int ped, int p1, float x, float y, float z, float p5, int itemset) => Function.Call<int>(0x3ACCE14DFA6BA8C2, ped, p1, x, y, z, p5, itemset);
		public static int _0x3ACCE14DFA6BA8C2(int ped, int p1, Vector3 vec, float p5, int itemset) => Function.Call<int>(0x3ACCE14DFA6BA8C2, ped, p1, vec.X, vec.Y, vec.Z, p5, itemset);
		public static void SET_PED_TO_INFORM_RESPECTED_FRIENDS(int ped, float radius, int maxFriends) => Function.Call(0x112942C6E708F70B, ped, radius, maxFriends);
		/// <summary>
		/// _IS_PED_RE*
		/// </summary>
		public static bool _0x40C9155AF8BC13F3(int ped) => Function.Call<bool>(0x40C9155AF8BC13F3, ped);
		/// <summary>
		/// Only used in SP Scripts
		/// Returns count / index
		/// _C*
		/// </summary>
		public static int _0xF4860514AD354226(int shockingEvent, float x, float y, float z, float p4, int* p5) => Function.Call<int>(0xF4860514AD354226, shockingEvent, x, y, z, p4, p5);
		public static int _0xF4860514AD354226(int shockingEvent, Vector3 vec, float p4, int* p5) => Function.Call<int>(0xF4860514AD354226, shockingEvent, vec.X, vec.Y, vec.Z, p4, p5);
		/// <summary>
		/// eventType: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static bool IS_PED_RESPONDING_TO_EVENT(int ped, uint eventType) => Function.Call<bool>(0x625B774D75C87068, ped, eventType);
		/// <summary>
		/// Only used in R* SP Scripts
		/// _GET_PED_IN*
		/// </summary>
		public static int _0x5E9FAF6C513347B4(int ped, uint eventType) => Function.Call<int>(0x5E9FAF6C513347B4, ped, eventType);
		/// <summary>
		/// Only used in R* SP Script short_update
		/// _GET_TARGET_* - _GET_TRACKED*
		/// </summary>
		public static Any _0x326F7951EF0D7F75(int ped, uint eventType) => Function.Call<Any>(0x326F7951EF0D7F75, ped, eventType);
		/// <summary>
		/// Used for AUDIO / ANIMSCENE (REFERENCE_REGIONAL_CHARACTER)
		/// Params: p1 = 0
		/// _GET_PED_IN*
		/// </summary>
		public static int _0xE76687023D8C8505(uint perscharModel, int p1) => Function.Call<int>(0xE76687023D8C8505, perscharModel, p1);
		/// <summary>
		/// Only used in R* SP Scripts
		/// _GET_PLAYER_W* - _GET_RANDOM_*
		/// </summary>
		public static bool _0xCB8F4C9343EBE240(int ped, uint eventType, Vector3* coords) => Function.Call<bool>(0xCB8F4C9343EBE240, ped, eventType, coords);
		/// <summary>
		/// Used in various R* MP & SP Scripts
		/// </summary>
		public static void SET_PED_FIRING_PATTERN(int ped, uint patternHash) => Function.Call(0x9AC577F5A12AD8A9, ped, patternHash);
		/// <summary>
		/// Used in R* MP Script fm_mission_controller and various R* SP Scripts for ambush*
		/// </summary>
		public static void _SET_PED_FIRING_PATTERN_2(int ped, uint patternHash) => Function.Call(0x20E54854DEF6A54A, ped, patternHash);
		/// <summary>
		/// Only used in R* MP Script fm_mission_controller
		/// </summary>
		public static void _SET_PED_FIRING_PATTERN_3(int ped, uint patternHash) => Function.Call(0x244E8C282188E40F, ped, patternHash);
		/// <summary>
		/// Params: shootRate = 0 - 1000
		/// </summary>
		public static void SET_PED_SHOOT_RATE(int ped, int shootRate) => Function.Call(0x614DA022990752DC, ped, shootRate);
		/// <summary>
		/// _SET_PED_TA* - _SET_PED_TO_*
		/// </summary>
		public static void _0x3C529A827998F9B3(int ped, int p1, int p2) => Function.Call(0x3C529A827998F9B3, ped, p1, p2);
		/// <summary>
		/// Only used in SP R* Scripts
		/// Params: p2 = same as p2 of 0x3C529A827998F9B3
		/// _SET_PED_TA* - _SET_PED_TO_*
		/// </summary>
		public static void _0x1F44B7E283C09EDE(int ped, float p1, int p2) => Function.Call(0x1F44B7E283C09EDE, ped, p1, p2);
		/// <summary>
		/// combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_FLOATS
		/// </summary>
		public static void SET_COMBAT_FLOAT(int ped, int combatType, float newValue) => Function.Call(0xFF41B4B141ED981C, ped, combatType, newValue);
		public static float GET_COMBAT_FLOAT(int ped, int combatType) => Function.Call<float>(0x52DFF8A10508090A, ped, combatType);
		public static void GET_GROUP_SIZE(int groupId, bool* hasLeader, int* numberOfFollowers) => Function.Call(0x8DE69FE35CA09A45, groupId, hasLeader, numberOfFollowers);
		public static bool DOES_GROUP_EXIST(int groupId) => Function.Call<bool>(0x7C6B0C22F9F40BBE, groupId);
		/// <summary>
		/// _DOES_GROUP_* - _DOES_N*
		/// </summary>
		public static bool _0x0455546F23FF08E4(int groupId) => Function.Call<bool>(0x0455546F23FF08E4, groupId);
		public static bool IS_GROUP_LOCALLY_CONTROLLED(int groupId) => Function.Call<bool>(0x909AD9E9A92A10DF, groupId);
		/// <summary>
		/// Returns the groupId of which the specified ped is a member of.
		/// </summary>
		public static int GET_PED_GROUP_INDEX(int ped) => Function.Call<int>(0xF162E133B4E7A675, ped);
		public static bool IS_PED_IN_GROUP(int ped) => Function.Call<bool>(0x5891CAC5D4ACFF74, ped);
		/// <summary>
		/// _IS_PED_L* - _IS_PED_M*
		/// </summary>
		public static bool _0x917760CFE7A0E0F1(int ped) => Function.Call<bool>(0x917760CFE7A0E0F1, ped);
		public static int GET_PLAYER_PED_IS_FOLLOWING(int ped) => Function.Call<int>(0x6A3975DEA89F9A17, ped);
		/// <summary>
		/// eFormationType
		/// 
		/// 0: Default
		/// 1: Circle Around Leader
		/// 2: Alternative Circle Around Leader
		/// 3: Line, with Leader at center
		/// </summary>
		public static void SET_GROUP_FORMATION(int groupId, int formationType) => Function.Call(0xCE2F5FC3AF7E8C1E, groupId, formationType);
		public static int _GET_GROUP_FORMATION(int groupId) => Function.Call<int>(0x13A1B061007C906B, groupId);
		public static void SET_GROUP_FORMATION_SPACING(int groupId, float p1, float p2, float p3) => Function.Call(0x1D9D45004C28C916, groupId, p1, p2, p3);
		public static void RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupId) => Function.Call(0x63DAB4CCB3273205, groupId);
		/// <summary>
		/// Used to set up bad guy groups in nb_kidnapped R* Script (MP_RE_KIDNAPPED): p1 = 4.f
		/// _SET_FORMATION_*
		/// </summary>
		public static bool _0xB05CC690CDE8A4A9(int groupId, float p1) => Function.Call<bool>(0xB05CC690CDE8A4A9, groupId, p1);
		public static void ADD_CUSTOM_FORMATION_LOCATION(int groupId, float x, float y, float z, int position) => Function.Call(0x4E23CD07BD161E06, groupId, x, y, z, position);
		public static void ADD_CUSTOM_FORMATION_LOCATION(int groupId, Vector3 vec, int position) => Function.Call(0x4E23CD07BD161E06, groupId, vec.X, vec.Y, vec.Z, position);
		public static bool ADD_FORMATION_LOCATION(int groupId, float p1, float p2, float p3) => Function.Call<bool>(0xB05945C1E9E60D91, groupId, p1, p2, p3);
		public static bool SET_FORMATION_POSITIONS_TARGET_RADIUS(int groupId, float radius) => Function.Call<bool>(0x7CC7D3B7AF7FB71F, groupId, radius);
		public static void _SET_FORMATION_AUTO_ASSIGN_POSITION(int groupId, bool toggle) => Function.Call(0x478F6B9920446CE2, groupId, toggle);
		public static void _SET_PED_FORMATION_POSITION(int ped, int position, bool toggle) => Function.Call(0x0E9E95FDEDCC9D35, ped, position, toggle);
		/// <summary>
		/// Returns offset (0 < 32) to be used with MISC::SET_BIT
		/// _GET_PED_CR*
		/// </summary>
		public static int _0x8AF8E647D6B2A649(int groupId, int ped) => Function.Call<int>(0x8AF8E647D6B2A649, groupId, ped);
		/// <summary>
		/// _CLEAR_PED_E* - _CLEAR_PED_L*
		/// </summary>
		public static void _0x87C2724A56F66020(int ped) => Function.Call(0x87C2724A56F66020, ped);
		/// <summary>
		/// _SET_FORMATION_*
		/// </summary>
		public static void _0xD5BD1B5318A81994(int groupId, bool p1) => Function.Call(0xD5BD1B5318A81994, groupId, p1);
		/// <summary>
		/// _SET_PLAYER_CAN_B* - _SET_PLAYER_CAN_U*
		/// </summary>
		public static void _0x9BBEAF8B0C007F1E(int ped, bool p1) => Function.Call(0x9BBEAF8B0C007F1E, ped, p1);
		/// <summary>
		/// _SET_PLAYER_N* - _SET_PLAYER_S*
		/// </summary>
		public static void _0xC99F104BDF8C7F5A(int ped, bool p1) => Function.Call(0xC99F104BDF8C7F5A, ped, p1);
		/// <summary>
		/// _SET_PLAYER_SN* - _SET_PLAYER_STAMINA*
		/// </summary>
		public static void _0x02E741E19E39628C(int ped, float p1) => Function.Call(0x02E741E19E39628C, ped, p1);
		/// <summary>
		/// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		/// </summary>
		public static void _0x97C475212B327666(int groupId, bool p1) => Function.Call(0x97C475212B327666, groupId, p1);
		/// <summary>
		/// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		/// </summary>
		public static void _0x154B7E841AC7412F(int groupId, bool p1) => Function.Call(0x154B7E841AC7412F, groupId, p1);
		/// <summary>
		/// _SET_FORMATION_*
		/// </summary>
		public static void _0x8AFCCC0F18D70018(int groupId, bool p1) => Function.Call(0x8AFCCC0F18D70018, groupId, p1);
		/// <summary>
		/// _SET_FORMATION_P*
		/// </summary>
		public static void _0xE1103300F3456DE7(int groupId, float p1, float p2) => Function.Call(0xE1103300F3456DE7, groupId, p1, p2);
		/// <summary>
		/// _SET_ENABLE_B* - _SET_ENABLE_H*
		/// </summary>
		public static void _0xA8A95CECB1906EA2(int groupId, bool p1) => Function.Call(0xA8A95CECB1906EA2, groupId, p1);
		/// <summary>
		/// _SET_FORMATION_P*
		/// </summary>
		public static void _0xDDFAD4DEAA7FA362(int groupId, float p1, float p2, float p3, float p4) => Function.Call(0xDDFAD4DEAA7FA362, groupId, p1, p2, p3, p4);
		/// <summary>
		/// _SET_FORMATION_P*
		/// </summary>
		public static void _0x966DE09688A1DE39(int groupId, float p1, float p2, float p3, float p4) => Function.Call(0x966DE09688A1DE39, groupId, p1, p2, p3, p4);
		/// <summary>
		/// _SET_FORMATION_P*
		/// </summary>
		public static void _0x7E5185B979706210(int groupId, int p1) => Function.Call(0x7E5185B979706210, groupId, p1);
		/// <summary>
		/// _SET_SCENARIO_PED_* - _SET_SPAWNER_*
		/// </summary>
		public static void _0x40C3524D4ED83554(int groupId, bool p1) => Function.Call(0x40C3524D4ED83554, groupId, p1);
		public static void _0x86FAFC18E3D4380C(int groupId, bool p1) => Function.Call(0x86FAFC18E3D4380C, groupId, p1);
		public static void _0x07EA5B053FA60AC7(int groupId, bool p1) => Function.Call(0x07EA5B053FA60AC7, groupId, p1);
		/// <summary>
		/// Used in Script Function PLAYER_HEAD_TRACKING_MAINTAIN
		/// </summary>
		public static void _0xF9CBD46433E36713(int ped, int targetEntity, float p2, float p3, float p4, float p5, float p6, float p7, float p8, string p9) => Function.Call(0xF9CBD46433E36713, ped, targetEntity, p2, p3, p4, p5, p6, p7, p8, p9);
		public static int GET_VEHICLE_PED_IS_USING(int ped) => Function.Call<int>(0x6094AD011A2EA87D, ped);
		public static int GET_VEHICLE_PED_IS_ENTERING(int ped) => Function.Call<int>(0xF92691AED837A5FC, ped);
		public static int _GET_VEHICLE_DRAFT_HORSE_IS_ATTACHED_TO(int horse) => Function.Call<int>(0xE4770DA1B8FF4FD1, horse);
		public static int _GET_LAST_VEHICLE_DRAFT_HORSE_WAS_ATTACHED_TO(int horse) => Function.Call<int>(0x5064DB5083C29921, horse);
		public static int GET_SEAT_PED_IS_USING(int ped) => Function.Call<int>(0x4E76CB57222A00E5, ped);
		public static int _GET_TRANSPORT_PED_IS_SEATED_ON(int ped) => Function.Call<int>(0x849BD6C6314793D0, ped);
		public static bool IS_PED_ENTERING_ANY_TRANSPORT(int ped) => Function.Call<bool>(0x1D46B417F926D34D, ped);
		public static void SET_PED_GRAVITY(int ped, bool toggle) => Function.Call(0x9FF447B6B6AD960A, ped, toggle);
		/// <summary>
		/// Only used in R* Script mob4 combined with SET_ANIMAL_TUNING_BOOL_PARAM
		/// _SET_PED_S* - _SET_PED_TARGET_*
		/// </summary>
		public static void _0x96595B36D6A2279B(int animal, bool toggle) => Function.Call(0x96595B36D6A2279B, animal, toggle);
		/// <summary>
		/// Only used in R* Script beat_sharp_shooter
		/// Blocks ped from swimming underwater
		/// </summary>
		public static void _SET_PED_IMMERSION_FLAG(int ped, bool toggle) => Function.Call(0x7FB0088E8769CDDB, ped, toggle);
		/// <summary>
		/// Only used in R* Script mob4 and rcm_mason4
		/// _SET_PED_DEFENSIVE_* - _SET_PED_DESIRED_*
		/// </summary>
		public static void _0xA90684ED185CCB4B(int animal, bool p1, float p2, float p3) => Function.Call(0xA90684ED185CCB4B, animal, p1, p2, p3);
		public static void _FAKE_SET_PED_LOCO_INJURED(int ped, bool enabled) => Function.Call(0x8B3CB08158E98481, ped, enabled);
		public static void _FORCE_PED_DEATH(int ped, int pedKiller, uint weapon) => Function.Call(0x1CE875505D45338A, ped, pedKiller, weapon);
		/// <summary>
		/// damages a ped with the given amount
		/// </summary>
		public static void APPLY_DAMAGE_TO_PED(int ped, int damageAmount, int p2, int boneId, int pedKiller) => Function.Call(0x697157CED63F18D4, ped, damageAmount, p2, boneId, pedKiller);
		/// <summary>
		/// _SET_PED_D*
		/// </summary>
		public static void _0xBAD2A311667A50D7(int ped, bool p1) => Function.Call(0xBAD2A311667A50D7, ped, p1);
		public static int GET_PED_TYPE(int ped) => Function.Call<int>(0xFF059E1E4C01E63C, ped);
		/// <summary>
		/// Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
		/// toggle = bSetRelGroup
		/// </summary>
		public static void SET_PED_AS_COP(int ped, bool toggle) => Function.Call(0xBB03C38DD3FB7FFD, ped, toggle);
		/// <summary>
		/// _SET_PED_A*
		/// </summary>
		public static void _0x405180B14DA5A935(int ped, bool p1) => Function.Call(0x405180B14DA5A935, ped, p1);
		/// <summary>
		/// personality (script_mp_rel): NONE, AGGRESSIVE, TIMID (non-aggressive), CRIPPS, SCRIPTEDINTIMIDATION, MAGGIE, MARCEL, SCRIPTEDSALOON
		/// personality (script_rel): AVOID, SCRIPTEDOUTLAW, TIMIDGUARDDOG, SCRIPTEDTIMIDROB, AGGRESSIVECAMPER, LAZYDOG, KIERANTIEDUP, SCRIPTEDGALA
		/// </summary>
		public static void _SET_PED_INTERACTION_PERSONALITY(int ped, uint personality) => Function.Call(0x24C82EF607105FAA, ped, personality);
		public static uint _GET_PED_INTERACTION_PERSONALITY(int ped) => Function.Call<uint>(0xD7AD3C7EBAF88C92, ped);
		/// <summary>
		/// Hashes: STANDARD_PED_AGRO_GUARD, BOUNTY_HUNTER, PLAYER_HORSE
		/// _SET_PED_P* - _SET_PED_R*
		/// </summary>
		public static void _0xB8B6430EAD2D2437(int ped, uint p1) => Function.Call(0xB8B6430EAD2D2437, ped, p1);
		/// <summary>
		/// _SET_PED_P* - _SET_PED_R*
		/// </summary>
		public static void _0x329772C47DBB2FBC(int ped) => Function.Call(0x329772C47DBB2FBC, ped);
		/// <summary>
		/// Returns true if ped is in a dispute another ped (pedInDisputeWith can also be 0)
		/// </summary>
		public static bool _GET_IS_PED_IN_DISPUTE_WITH_PED(int ped, int pedInDisputeWith) => Function.Call<bool>(0x331550B212014B92, ped, pedInDisputeWith);
		/// <summary>
		/// _GET_IS_PED_*
		/// </summary>
		public static bool _0x94132D7C8D3575C4(int ped) => Function.Call<bool>(0x94132D7C8D3575C4, ped);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0x8AF46E5159A5B620(int ped, uint speechParams) => Function.Call(0x8AF46E5159A5B620, ped, speechParams);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0x45FEA6D5539BD474(int ped, string p1) => Function.Call(0x45FEA6D5539BD474, ped, p1);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0x20C5459379D75C1C(int ped, string p1) => Function.Call(0x20C5459379D75C1C, ped, p1);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0xE37ACEE15AC50C7E(int ped, string p1) => Function.Call(0xE37ACEE15AC50C7E, ped, p1);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0xA3C53CDE922BC78B(int ped, string p1) => Function.Call(0xA3C53CDE922BC78B, ped, p1);
		/// <summary>
		/// _SET_PED_IN*
		/// </summary>
		public static void _0x41C23A8E6B344867(int ped, string p1) => Function.Call(0x41C23A8E6B344867, ped, p1);
		public static bool GET_IS_PED_RESPONDING_TO_POSITIVE_INTERACTION(int ped, int player) => Function.Call<bool>(0x9337183FDA2E9035, ped, player);
		public static bool GET_IS_PED_RESPONDING_TO_NEGATIVE_INTERACTION(int ped, int player) => Function.Call<bool>(0xA454D234E45BB6E5, ped, player);
		/// <summary>
		/// _CLEAR_PED_B* - _CLEAR_PED_C*
		/// </summary>
		public static void _0xA7DC9266ED6A4E51(int ped) => Function.Call(0xA7DC9266ED6A4E51, ped);
		/// <summary>
		/// _GET_PED_B* - _GET_PED_C*
		/// </summary>
		public static Any _0x89816B58C3466262(int ped) => Function.Call<Any>(0x89816B58C3466262, ped);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static void _0x97B06669AC569003(int ped1, int ped2) => Function.Call(0x97B06669AC569003, ped1, ped2);
		/// <summary>
		/// Used in Script Function SKCS_PLAYER_ROBBING
		/// _SET_PED_A*
		/// </summary>
		public static void _0x85F500F4E24CA43E(int ped, float p1) => Function.Call(0x85F500F4E24CA43E, ped, p1);
		/// <summary>
		/// Used in Script Function SKCS_PLAYER_ROBBING
		/// _SET_PED_SHOULD_PLAY_* - _SET_PED_SW*
		/// </summary>
		public static void _0x9B9B9FA0EA283E3D(int ped, float p1) => Function.Call(0x9B9B9FA0EA283E3D, ped, p1);
		/// <summary>
		/// _SET_C*
		/// </summary>
		public static void _0xEC60D1D225BC50AA(int ped, float p1) => Function.Call(0xEC60D1D225BC50AA, ped, p1);
		/// <summary>
		/// _SET_A* - _SET_B*
		/// </summary>
		public static void _0x12F2D161BF4031FC(int ped, float p1) => Function.Call(0x12F2D161BF4031FC, ped, p1);
		public static void _0x0ADA3EC589E1736E() => Function.Call(0x0ADA3EC589E1736E);
		/// <summary>
		/// If p2 is false, then this native will return true until the interaction is complete. If true, the native will return true until player pockets robbery item.
		/// _GET_IS_PED_[M-R]*
		/// </summary>
		public static bool _GET_IS_PED_BEING_ROBBED(int ped, int player, bool trueUntilPlayerPocketsItem) => Function.Call<bool>(0xE33F98BD76490ABC, ped, player, trueUntilPlayerPocketsItem);
		/// <summary>
		/// Used in Script Function LA_CHECK_ALERTED
		/// _GET_IS_PED_*
		/// </summary>
		public static bool _0xD55DB4466D00A258(int legendaryAnimal) => Function.Call<bool>(0xD55DB4466D00A258, legendaryAnimal);
		/// <summary>
		/// Sets the maximum health of a ped.
		/// </summary>
		public static void SET_PED_MAX_HEALTH(int ped, int value) => Function.Call(0xF5F6378C4F3419D3, ped, value);
		public static int GET_PED_MAX_HEALTH(int ped) => Function.Call<int>(0x4700A416E8324EF3, ped);
		/// <summary>
		/// configHash: see pedhealth.meta
		/// </summary>
		public static void _SET_PED_HEALTH_CONFIG(int ped, uint configHash) => Function.Call(0xF6B82FCE03B43A37, ped, configHash);
		public static void INIT_PED_DEFAULT_HEALTH(int ped) => Function.Call(0x7DD7FB3480D8083E, ped);
		public static void SET_PED_MAX_TIME_IN_WATER(int ped, float value) => Function.Call(0x43C851690662113D, ped, value);
		public static void SET_PED_MAX_TIME_UNDERWATER(int ped, float value) => Function.Call(0x6BA428C528D9E522, ped, value);
		/// <summary>
		/// _CLEAR_PED_D*
		/// </summary>
		public static void _0xAF041C10756C30FB(int ped, bool p1, bool p2, bool p3) => Function.Call(0xAF041C10756C30FB, ped, p1, p2, p3);
		/// <summary>
		/// _SET_C*
		/// </summary>
		public static void _0x5AF24CA9C974E51A(int ped1, int ped2) => Function.Call(0x5AF24CA9C974E51A, ped1, ped2);
		/// <summary>
		/// state:
		/// enum eKnockOffVehicle
		/// {
		/// 	KNOCKOFFVEHICLE_DEFAULT,
		/// 	KNOCKOFFVEHICLE_NEVER,
		/// 	KNOCKOFFVEHICLE_EASY,
		/// 	KNOCKOFFVEHICLE_HARD
		/// };
		/// </summary>
		public static void SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(int ped, int state) => Function.Call(0x7A6535691B477C48, ped, state);
		public static bool CAN_KNOCK_PED_OFF_VEHICLE(int ped) => Function.Call<bool>(0x51AC07A44D4F5B8A, ped);
		public static void KNOCK_PED_OFF_VEHICLE(int ped) => Function.Call(0x45BBCBA77C29A841, ped);
		public static int GET_PED_AS_GROUP_MEMBER(int groupID, int memberNumber) => Function.Call<int>(0x51455483CF23ED97, groupID, memberNumber);
		public static int GET_PED_AS_GROUP_LEADER(int groupID) => Function.Call<int>(0x5CCE68DBD5FE93EC, groupID);
		public static void SET_PED_KEEP_TASK(int ped, bool toggle) => Function.Call(0x971D38760FBC02EF, ped, toggle);
		public static bool IS_PED_SWIMMING(int ped) => Function.Call<bool>(0x9DE327631295B4C2, ped);
		public static bool IS_PED_SWIMMING_UNDER_WATER(int ped) => Function.Call<bool>(0xC024869A53992F34, ped);
		/// <summary>
		/// _IS_PED_IN_* (near water?)
		/// </summary>
		public static bool _0xDC88D06719070C39(int ped) => Function.Call<bool>(0xDC88D06719070C39, ped);
		public static void SET_CREATE_RANDOM_COPS(bool toggle) => Function.Call(0x102E68B2024D536D, toggle);
		public static bool IS_PED_IN_ANY_TRAIN(int ped) => Function.Call<bool>(0x6F972C1AB75A1ED0, ped);
		public static bool IS_PED_GETTING_INTO_A_VEHICLE(int ped) => Function.Call<bool>(0xBB062B2B5722478E, ped);
		/// <summary>
		/// _HAS_PED_*
		/// </summary>
		public static bool _0x550CB89DD7F4FA3D(int ped1, int ped2) => Function.Call<bool>(0x550CB89DD7F4FA3D, ped1, ped2);
		/// <summary>
		/// Ped can not pull out a weapon when true
		/// </summary>
		public static void SET_ENABLE_HANDCUFFS(int ped, bool p1, bool p2) => Function.Call(0xDF1AF8B5D56542FA, ped, p1, p2);
		public static void SET_ENABLE_BOUND_ANKLES(int ped, bool toggle) => Function.Call(0xC52E0F855C58FC2E, ped, toggle);
		/// <summary>
		/// If returned true, SET_ENABLE_BOUND_ANKLES is called in R* Script guama2
		/// _GET_D* - _GET_E*
		/// </summary>
		public static bool _0x8822F139408B8D0A(int ped) => Function.Call<bool>(0x8822F139408B8D0A, ped);
		/// <summary>
		/// Only used in R* Script train_robbery4
		/// _SET_PED_D*
		/// </summary>
		public static void _0x8822F124788B8D0A(int ped, bool p1) => Function.Call(0x8822F124788B8D0A, ped, p1);
		public static void RESET_PED_WEAPON_MOVEMENT_CLIPSET(int ped) => Function.Call(0x97B0DB5B4AA74E77, ped);
		public static void _SET_PED_GETUP_ANIMATION(int ped, string animName, bool p2) => Function.Call(0x3AE3552E7C207CC5, ped, animName, p2);
		/// <summary>
		/// Used in R* Script generic_weight_control_item
		/// _CLEAR_PED_E* - CLEAR_PED_(G?)L*
		/// </summary>
		public static void _0x88A95BB640FC186F(int ped) => Function.Call(0x88A95BB640FC186F, ped);
		public static void RESET_PED_IN_VEHICLE_CONTEXT(int ped) => Function.Call(0x22EF8FF8778030EB, ped);
		public static void _0x878E8104FA27CDAE(int vehicle, uint p1) => Function.Call(0x878E8104FA27CDAE, vehicle, p1);
		public static void SET_PED_GESTURE_GROUP(int ped, string gesture, int p2) => Function.Call(0xDDF803377F94AAA8, ped, gesture, p2);
		/// <summary>
		/// Seems to set the ped's loco type.
		/// Values used in the scripts:
		/// algie
		/// angry_female
		/// arthur_healthy
		/// cowboy
		/// cowboy_f
		/// default
		/// default_female
		/// free_slave_01
		/// free_slave_02
		/// gold_panner
		/// guard_lantern
		/// injured_general
		/// john_marston
		/// lilly_millet
		/// lone_prisoner
		/// lost_man
		/// mp_ova_hunter
		/// mp_ova_hunter_female
		/// murfree
		/// old_female
		/// primate
		/// rally
		/// waiter
		/// war_veteran
		/// </summary>
		public static void _SET_PED_DESIRED_LOCO_FOR_MODEL(int ped, string locomotionArchetype) => Function.Call(0x923583741DC87BCE, ped, locomotionArchetype);
		/// <summary>
		/// Clears locomotion archetype
		/// </summary>
		public static void _CLEAR_PED_DESIRED_LOCO_FOR_MODEL(int ped) => Function.Call(0x4FD80C3DD84B817B, ped);
		/// <summary>
		/// Sets peds motion type
		/// </summary>
		public static void _SET_PED_DESIRED_LOCO_MOTION_TYPE(int ped, string locoMotionType) => Function.Call(0x89F5E7ADECCCB49C, ped, locoMotionType);
		public static void _CLEAR_PED_DESIRED_LOCO_MOTION_TYPE(int ped) => Function.Call(0x58F7DB5BD8FA2288, ped);
		public static void _0x2371C39D4F91C288(int ped) => Function.Call(0x2371C39D4F91C288, ped);
		/// <summary>
		/// Known get up animation types: REAR, FRONT
		/// </summary>
		public static void _REQUEST_PED_GETUP_ANIMATION(int ped, string getUpType) => Function.Call(0xEAA8242C8479C27D, ped, getUpType);
		public static void PED_COWER_IN_PLACE(int ped, int ped2) => Function.Call(0xF6E1E9F47A7686F8, ped, ped2);
		public static void PED_COWER_MOVE_TO_POINT(int ped, float p1, float p2, float p3, int ped2, float p5) => Function.Call(0x1E4C940233FC0C6F, ped, p1, p2, p3, ped2, p5);
		/// <summary>
		/// _PED_COWER_M*
		/// </summary>
		public static void _0x16F798A05BB9E3B5(int ped) => Function.Call(0x16F798A05BB9E3B5, ped);
		/// <summary>
		/// target: 0 affects everyone
		/// duration: -1 indefinite
		/// flag: always 4 in R* Scripts
		/// </summary>
		public static void _PED_EMOTIONAL_PRESET_LOCO_MOTION(int ped, string presetName, int targetPed, int duration, int flag) => Function.Call(0xAAB050DA48B57978, ped, presetName, targetPed, duration, flag);
		public static void _PED_CLEAR_LOCO_MOTION(int ped) => Function.Call(0x935CF6E42BAF7F4D, ped);
		/// <summary>
		/// _STOP_(?)*
		/// </summary>
		public static void _0x32CCAD8A981B53D3(int ped) => Function.Call(0x32CCAD8A981B53D3, ped);
		/// <summary>
		/// SOBER = 0.0f, SLIGHTLY_DRUNK = 0.25f, MODERATELY_DRUNK = 0.5f, VERY_DRUNK = 1.0f
		/// </summary>
		public static void _SET_PED_DRUNKNESS(int ped, bool enabled, float drunknessLevel) => Function.Call(0x406CCF555B04FAD3, ped, enabled, drunknessLevel);
		public static bool _IS_PED_DRUNK(int ped) => Function.Call<bool>(0x50F124E6EF188B22, ped);
		/// <summary>
		/// Returns ped drunk level
		/// _H* or _I*
		/// </summary>
		public static float _GET_PED_DRUNKNESS(int ped) => Function.Call<float>(0x6FB76442469ABD68, ped);
		public static Vector3 GET_ANIM_INITIAL_OFFSET_POSITION(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9) => Function.Call<Vector3>(0xBE22B26DD764C040, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		public static Vector3 GET_ANIM_INITIAL_OFFSET_POSITION(string animDict, string animName, Vector3 vec, Vector3 rotation, float p8, int p9) => Function.Call<Vector3>(0xBE22B26DD764C040, animDict, animName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p8, p9);
		public static Vector3 GET_ANIM_INITIAL_OFFSET_ROTATION(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9) => Function.Call<Vector3>(0x4B805E6046EE9E47, animDict, animName, x, y, z, xRot, yRot, zRot, p8, p9);
		public static Vector3 GET_ANIM_INITIAL_OFFSET_ROTATION(string animDict, string animName, Vector3 vec, Vector3 rotation, float p8, int p9) => Function.Call<Vector3>(0x4B805E6046EE9E47, animDict, animName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p8, p9);
		public static void SET_PED_RANDOM_COMPONENT_VARIATION(int ped, int p1) => Function.Call(0xC8A9481A01E63C28, ped, p1);
		public static void KNOCK_OFF_PED_PROP(int ped, bool p1, bool p2, bool p3, bool p4) => Function.Call(0x6FD7816A36615F48, ped, p1, p2, p3, p4);
		public static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(int ped, bool toggle) => Function.Call(0x9F8AA94D6D97DBF4, ped, toggle);
		public static bool _GET_BLOCKING_OF_NON_TEMPORARY_EVENTS(int ped) => Function.Call<bool>(0x268B3AEBF032A88D, ped);
		/// <summary>
		/// _SET_PED_P* - _SET_PED_R*
		/// </summary>
		public static void _0xC17A94CC8FC3C61A(int entity, int flag, float p2, float p3, float p4) => Function.Call(0xC17A94CC8FC3C61A, entity, flag, p2, p3, p4);
		public static void _SET_PED_SCALE(int ped, float scale) => Function.Call(0x25ACFC650B65C538, ped, scale);
		/// <summary>
		/// _GET_PED_M*
		/// </summary>
		public static float _0x134775B093AD5C38(int ped) => Function.Call<float>(0x134775B093AD5C38, ped);
		public static float _GET_PED_HEIGHT(int ped) => Function.Call<float>(0x1D491CCF7211FB74, ped);
		/// <summary>
		/// PS_SMALL = 0,
		/// PS_MEDIUM,
		/// PS_MEDIUM_LARGE,
		/// PS_LARGE,
		/// PS_EXTRA_LARGE
		/// </summary>
		public static int _GET_PED_MODEL_SIZE_FROM_HASH(uint modelHash) => Function.Call<int>(0xA65AA1ACE81E5A77, modelHash);
		public static void REGISTER_TARGET(int ped, int targetPed, bool p2) => Function.Call(0x2F25D9AEFA34FBA2, ped, targetPed, p2);
		public static void _REGISTER_HATED_TARGETS_IN_AREA(int ped, float x, float y, float z, float radius) => Function.Call(0xD8736EFDA38EDC5C, ped, x, y, z, radius);
		public static void _REGISTER_HATED_TARGETS_IN_AREA(int ped, Vector3 vec, float radius) => Function.Call(0xD8736EFDA38EDC5C, ped, vec.X, vec.Y, vec.Z, radius);
		/// <summary>
		/// Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
		/// </summary>
		public static void REGISTER_HATED_TARGETS_AROUND_PED(int ped, float radius) => Function.Call(0x9222F300BF8354FE, ped, radius);
		public static bool _IS_TARGET(int ped, int targetPed) => Function.Call<bool>(0x6E5CBCB3941D7D08, ped, targetPed);
		public static void _REMOVE_TARGET(int ped, int targetPed) => Function.Call(0x4707E9C23D8CA3FE, ped, targetPed);
		/// <summary>
		/// Gets the closest ped in a radius.
		/// </summary>
		public static bool GET_CLOSEST_PED(float x, float y, float z, float radius, bool p4, bool p5, int* outPed, bool p7, bool p8, bool p9, int pedType) => Function.Call<bool>(0xC33AB876A77F8164, x, y, z, radius, p4, p5, outPed, p7, p8, p9, pedType);
		public static bool GET_CLOSEST_PED(Vector3 vec, float radius, bool p4, bool p5, int* outPed, bool p7, bool p8, bool p9, int pedType) => Function.Call<bool>(0xC33AB876A77F8164, vec.X, vec.Y, vec.Z, radius, p4, p5, outPed, p7, p8, p9, pedType);
		public static bool CAN_PED_RAGDOLL(int ped) => Function.Call<bool>(0x128F79EDCECE4FD5, ped);
		/// <summary>
		/// Params: p6 = DraggedByCart in R* SP Script marston8
		/// </summary>
		public static bool SET_PED_TO_RAGDOLL(int ped, int timeMin, int timeMax, int ragdollType, bool p4, bool p5, string p6) => Function.Call<bool>(0xAE99FB955581844A, ped, timeMin, timeMax, ragdollType, p4, p5, p6);
		public static bool SET_PED_TO_RAGDOLL_WITH_FALL(int ped, int timeMin, int timeMax, int ragdollType, float falldirX, float falldirY, float falldirZ, float p7, float p8, float p9, float p10, float p11, float p12, float p13) => Function.Call<bool>(0xD76632D99E4966C8, ped, timeMin, timeMax, ragdollType, falldirX, falldirY, falldirZ, p7, p8, p9, p10, p11, p12, p13);
		/// <summary>
		/// Causes Ped to ragdoll on collision with any object (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
		/// </summary>
		public static void SET_PED_RAGDOLL_ON_COLLISION(int ped, bool toggle, bool p2) => Function.Call(0xF0A4F1BBF4FA7497, ped, toggle, p2);
		public static void _SET_PED_TO_DISABLE_RAGDOLL(int ped, bool toggle) => Function.Call(0x221F4D9912B7FE86, ped, toggle);
		/// <summary>
		/// If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
		/// </summary>
		public static bool IS_PED_RAGDOLL(int ped) => Function.Call<bool>(0x47E4E977581C5B55, ped);
		public static bool IS_PED_RUNNING_RAGDOLL_TASK(int ped) => Function.Call<bool>(0xE3B6097CC25AA69E, ped);
		public static void SET_PED_RAGDOLL_FORCE_FALL(int ped) => Function.Call(0x01F6594B923B9251, ped);
		/// <summary>
		/// _SET_PED_T* - SET_PED_U*
		/// </summary>
		public static void _0x8CB2553C559102C1(int ped, int p1, bool p2) => Function.Call(0x8CB2553C559102C1, ped, p1, p2);
		/// <summary>
		/// _DISABLE_A* - _DISABLE_C*
		/// </summary>
		public static void _0xFD3C31A2E45671E7(int ped, int p1) => Function.Call(0xFD3C31A2E45671E7, ped, p1);
		public static void RESET_PED_RAGDOLL_TIMER(int ped) => Function.Call(0x9FA4664CF62E47E8, ped);
		public static void SET_PED_CAN_RAGDOLL(int ped, bool toggle) => Function.Call(0xB128377056A54E2A, ped, toggle);
		/// <summary>
		/// _IS_PED_R*
		/// </summary>
		public static bool _0x3AEC4A410ECAF30D(int ped) => Function.Call<bool>(0x3AEC4A410ECAF30D, ped);
		public static bool IS_PED_RUNNING_MOBILE_PHONE_TASK(int ped) => Function.Call<bool>(0x2AFE52F782F25775, ped);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/RAGDOLL_BLOCKING_FLAGS
		/// 
		/// flags:
		/// enum eRagdollBlockingFlags
		/// {
		/// 	RBF_BULLET_IMPACT = (1 << 0),
		/// 	RBF_VEHICLE_IMPACT = (1 << 1),
		/// 	RBF_FIRE = (1 << 2),
		/// 	RBF_ELECTROCUTION = (1 << 3),
		/// 	RBF_PLAYER_IMPACT = (1 << 4),
		/// 	RBF_EXPLOSION = (1 << 5),
		/// 	RBF_IMPACT_OBJECT = (1 << 6),
		/// 	RBF_MELEE = (1 << 7),
		/// 	RBF_RUBBER_BULLET = (1 << 8),
		/// 	RBF_FALLING = (1 << 9),
		/// 	RBF_WATER_JET = (1 << 10),
		/// 	RBF_DROWNING = (1 << 11),
		/// 	RBF_0x9F52E2C4 = (1 << 12),
		/// 	RBF_PLAYER_BUMP = (1 << 13),
		/// 	RBF_PLAYER_RAGDOLL_BUMP = (1 << 14),
		/// 	RBF_PED_RAGDOLL_BUMP = (1 << 15),
		/// 	RBF_VEHICLE_GRAB = (1 << 16),
		/// 	RBF_SMOKE_GRENADE = (1 << 17),
		/// 	RBF_HORSE_BUMP = (1 << 18),
		/// 	RBF_ACTIVATE_ON_COLLISION = (1 << 19)
		/// };
		/// </summary>
		public static void SET_RAGDOLL_BLOCKING_FLAGS(int ped, int flags) => Function.Call(0x26695EC767728D84, ped, flags);
		/// <summary>
		/// flags: see SET_RAGDOLL_BLOCKING_FLAGS
		/// </summary>
		public static void CLEAR_RAGDOLL_BLOCKING_FLAGS(int ped, int flags) => Function.Call(0xD86D101FCFD00A4B, ped, flags);
		public static void _0x9F933E0985E12C51(int ped, float p1, float p2, float p3) => Function.Call(0x9F933E0985E12C51, ped, p1, p2, p3);
		public static void _0x88B2026A3B0BE33D(int ped, float p1) => Function.Call(0x88B2026A3B0BE33D, ped, p1);
		public static void SET_PED_DEFENSIVE_AREA_VOLUME(int ped, int volume, bool p2, bool p3, bool p4) => Function.Call(0xFC3DB99C8144CD81, ped, volume, p2, p3, p4);
		public static void SET_PED_SPHERE_DEFENSIVE_AREA(int ped, float x, float y, float z, float radius, bool p5, bool p6, bool p7) => Function.Call(0x9D3151A373974804, ped, x, y, z, radius, p5, p6, p7);
		public static void SET_PED_SPHERE_DEFENSIVE_AREA(int ped, Vector3 vec, float radius, bool p5, bool p6, bool p7) => Function.Call(0x9D3151A373974804, ped, vec.X, vec.Y, vec.Z, radius, p5, p6, p7);
		public static void _SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_ENTITY(int ped, int entity, float x, float y, float z, float radius, int p6, bool p7) => Function.Call(0x1854217C640B39EC, ped, entity, x, y, z, radius, p6, p7);
		public static void _SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_ENTITY(int ped, int entity, Vector3 vec, float radius, int p6, bool p7) => Function.Call(0x1854217C640B39EC, ped, entity, vec.X, vec.Y, vec.Z, radius, p6, p7);
		/// <summary>
		/// _SET_PED_(A?)*
		/// </summary>
		public static void _SET_PED_DEFENSIVE_AREA_TO_ANGLED_AREA(int ped, float x1, float y1, float z1, float x2, float y2, float z2, Any p7, bool p8, bool p9, int entity, bool p11) => Function.Call(0xEB2BFE5D009F0331, ped, x1, y1, z1, x2, y2, z2, p7, p8, p9, entity, p11);
		public static void _SET_PED_DEFENSIVE_AREA_TO_ANGLED_AREA(int ped, Vector3 vec1, Vector3 vec2, Any p7, bool p8, bool p9, int entity, bool p11) => Function.Call(0xEB2BFE5D009F0331, ped, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p7, p8, p9, entity, p11);
		public static void SET_PED_DEFENSIVE_AREA_DIRECTION(int ped, float p1, float p2, float p3, bool p4) => Function.Call(0x413C6C763A4AFFAD, ped, p1, p2, p3, p4);
		/// <summary>
		/// Ped will no longer get angry when you stay near him.
		/// </summary>
		public static void REMOVE_PED_DEFENSIVE_AREA(int ped, bool toggle) => Function.Call(0x74D4E028107450A9, ped, toggle);
		public static Vector3 GET_PED_DEFENSIVE_AREA_POSITION(int ped, bool p1) => Function.Call<Vector3>(0x3C06B8786DD94CD1, ped, p1);
		public static bool IS_PED_DEFENSIVE_AREA_ACTIVE(int ped, bool p1) => Function.Call<bool>(0xBA63D9FE45412247, ped, p1);
		public static int _GET_PED_DEFENSIVE_VOLUME(int ped, Any p1) => Function.Call<int>(0xEF2E6F870783369B, ped, p1);
		/// <summary>
		/// _SET_PED_A*
		/// </summary>
		public static void _0x4EC4EA2F72B36358(int ped, bool p1) => Function.Call(0x4EC4EA2F72B36358, ped, p1);
		/// <summary>
		/// _SET_PED_COMBAT_*
		/// </summary>
		public static void _0xCF0B19806473D324(int ped, float x, float y, float z) => Function.Call(0xCF0B19806473D324, ped, x, y, z);
		public static void _0xCF0B19806473D324(int ped, Vector3 vec) => Function.Call(0xCF0B19806473D324, ped, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// _RESET_PED_C*
		/// </summary>
		public static void _0xB4B7C92FCE7347B7(int ped) => Function.Call(0xB4B7C92FCE7347B7, ped);
		public static void REVIVE_INJURED_PED(int ped) => Function.Call(0x8D8ACD8388CD99CE, ped);
		/// <summary>
		/// This function will simply bring the dead ped back to life.
		/// 
		/// Before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at because theres a chance the ped will fall through the map
		/// 
		/// Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
		/// </summary>
		public static void RESURRECT_PED(int ped) => Function.Call(0x71BC8E838B9C6035, ped);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_PED_NAME_DEBUG(int ped, string name) => Function.Call(0x98EFA132A4117BE1, ped, name);
		public static void SPECIAL_FUNCTION_DO_NOT_USE(int ped, bool p1) => Function.Call(0xF9ACF4A08098EA25, ped, p1);
		/// <summary>
		/// _HAS_*
		/// </summary>
		public static bool _0x7020839C7302D8AC(int ped) => Function.Call<bool>(0x7020839C7302D8AC, ped);
		/// <summary>
		/// _C*
		/// </summary>
		public static void _0xE1AADD0055D76603(int ped, int entity, int boneIndex1, int boneIndex2, float x, float y, float z, float p7, bool p8, bool p9, int p10) => Function.Call(0xE1AADD0055D76603, ped, entity, boneIndex1, boneIndex2, x, y, z, p7, p8, p9, p10);
		public static void _0xE1AADD0055D76603(int ped, int entity, int boneIndex1, int boneIndex2, Vector3 vec, float p7, bool p8, bool p9, int p10) => Function.Call(0xE1AADD0055D76603, ped, entity, boneIndex1, boneIndex2, vec.X, vec.Y, vec.Z, p7, p8, p9, p10);
		/// <summary>
		/// _C*
		/// </summary>
		public static void _0x5A1A929C8B729B4A(int ped) => Function.Call(0x5A1A929C8B729B4A, ped);
		/// <summary>
		/// _SET_PED_D*
		/// </summary>
		public static void _0x97A38B65EBDA3D50(int ped, bool p1) => Function.Call(0x97A38B65EBDA3D50, ped, p1);
		/// <summary>
		/// _GET_PED_D*
		/// </summary>
		public static bool _0x06A10B4D7F50B0C3(int ped) => Function.Call<bool>(0x06A10B4D7F50B0C3, ped);
		public static bool _0x88A5564B19C15391(int ped) => Function.Call<bool>(0x88A5564B19C15391, ped);
		public static int _0x354CA4DDDEEC397A(int ped) => Function.Call<int>(0x354CA4DDDEEC397A, ped);
		/// <summary>
		/// METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
		/// _SET_M* - _SET_P*
		/// </summary>
		public static void _0xFEA6126C34DF2532(int ped, bool p1) => Function.Call(0xFEA6126C34DF2532, ped, p1);
		/// <summary>
		/// _SET_PED_P* - _SET_PED_R*
		/// </summary>
		public static void _0xA967D6A8ED2D713B(int ped, bool p1) => Function.Call(0xA967D6A8ED2D713B, ped, p1);
		public static void APPLY_PED_BLOOD_SPECIFIC(int ped, Any p1, float p2, float p3, float p4, float p5, Any p6, float p7, Any* p8) => Function.Call(0xEF0D582CBF2D9B0F, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void _0x58D32261AE0F0843(int ped, int boneId, float p2, float p3, float p4, float p5, float p6, float p7, string p8) => Function.Call(0x58D32261AE0F0843, ped, boneId, p2, p3, p4, p5, p6, p7, p8);
		/// <summary>
		/// _SET_PED_F*
		/// </summary>
		public static void _0x735662994E60A710(int ped, bool p1) => Function.Call(0x735662994E60A710, ped, p1);
		public static void _0x91BAB9E064F036CD(Any p0, Any p1) => Function.Call(0x91BAB9E064F036CD, p0, p1);
		public static void _0x897934E868EDDD6C(int ped, int p1, float p2, float p3, float p4) => Function.Call(0x897934E868EDDD6C, ped, p1, p2, p3, p4);
		/// <summary>
		/// bloodFountainPressure: visible effect from 0.0 till 20.0
		/// yaw: visible effect from -3.0 till 3.0
		/// bloodFountainDirection: 1.0 left side, -1.0 right side
		/// bloodFountainPulse: from 0.1 (low) till 1.0 (fast)
		/// make blood fountain from your stomach: _SET_PED_ACTIVATE_WOUND_EFFECT(ped, unk, 2, 14411, 0.0, 0.1, 0.0, 0.0, 3.0, -1.0, 1.0)
		/// </summary>
		public static void _SET_PED_ACTIVATE_WOUND_EFFECT(int ped, int p1, int boneId, float moveWoundLeftRight, float bloodFountainPressure, float yaw, float bloodFountainDirection, float bloodFountainPulse, float p8, float p9) => Function.Call(0xFFD54D9FE71B966A, ped, p1, boneId, moveWoundLeftRight, bloodFountainPressure, yaw, bloodFountainDirection, bloodFountainPulse, p8, p9);
		/// <summary>
		/// Params: 0.0f to remove wound effects
		/// </summary>
		public static void _UPDATE_PED_WOUND_EFFECT(int ped, float value) => Function.Call(0x66B1CB778D911F49, ped, value);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_decals.lua
		/// </summary>
		public static void APPLY_PED_DAMAGE_PACK(int ped, string damagePack, float damage, float mult) => Function.Call(0x46DF918788CB093F, ped, damagePack, damage, mult);
		public static void CLEAR_PED_BLOOD_DAMAGE(int ped) => Function.Call(0x8FE22675A5A45817, ped);
		public static void CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(int ped, int p1) => Function.Call(0x56E3B78C5408D9F4, ped, p1);
		public static void CLEAR_PED_DAMAGE_DECAL_BY_ZONE(int ped, int p1, string p2) => Function.Call(0x523C79AEEFCC4A2A, ped, p1, p2);
		public static void _CLEAR_PED_BLOOD_DAMAGE_FACIAL(int ped, int p1) => Function.Call(0x7F5D88333EE8A86F, ped, p1);
		public static void _0x34C11114887150FD(Any p0, Any p1) => Function.Call(0x34C11114887150FD, p0, p1);
		/// <summary>
		/// METAPED_PLAYER_COMPONENTS_SET_META_TYPE_TO_BE_BYPASSED: Setting visibility
		/// p1 is mostly 10
		/// _CLEAR_PED_N* - _CLEAR_PED_W*
		/// </summary>
		public static void _0xD8544F6260F5F01E(int ped, int p1) => Function.Call(0xD8544F6260F5F01E, ped, p1);
		/// <summary>
		/// Washing player's face/hands now
		/// _FA* - _FI*
		/// </summary>
		public static void _0xEB8886E1065654CD(int ped, int p1, string p2, float p3) => Function.Call(0xEB8886E1065654CD, ped, p1, p2, p3);
		public static void FADE_AND_DESTROY_PED(int* ped) => Function.Call(0x7043D0681285BA2D, ped);
		public static bool _IS_PED_QUEUED_FOR_DELETION(int ped) => Function.Call<bool>(0x8D9BFCE3352DE47F, ped);
		/// <summary>
		/// It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
		/// </summary>
		public static void CLEAR_PED_WETNESS(int ped) => Function.Call(0x9C720776DAA43E7E, ped);
		/// <summary>
		/// It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
		/// </summary>
		public static void SET_PED_WETNESS_HEIGHT(int ped, float height) => Function.Call(0x44CB6447D2571AA0, ped, height);
		/// <summary>
		/// _SET_PED_WETNESS*
		/// </summary>
		public static void _0xF9CFF5BB70E8A2CB(int ped, float p1) => Function.Call(0xF9CFF5BB70E8A2CB, ped, p1);
		/// <summary>
		/// combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
		/// </summary>
		public static void SET_PED_WETNESS_ENABLED_THIS_FRAME(int ped) => Function.Call(0xB5485E4907B53019, ped);
		/// <summary>
		/// Washing player's face/hands now
		/// _CLEAR_PED_E* - _CLEAR_PED_L*
		/// </summary>
		public static void _0xA7A806677F8DE138(int ped) => Function.Call(0xA7A806677F8DE138, ped);
		public static void _0xA064BBABB064446F(Any p0) => Function.Call(0xA064BBABB064446F, p0);
		public static void CLEAR_PED_ENV_DIRT(int ped) => Function.Call(0x6585D955A68452A5, ped);
		public static void SET_PED_SWEAT(int ped, float sweat) => Function.Call(0x27B0405F59637D1F, ped, sweat);
		public static void CLEAR_PED_DECORATIONS(int ped) => Function.Call(0x0E5173C163976E38, ped);
		/// <summary>
		/// Despite this function's name, it simply returns whether the specified handle is a Ped.
		/// </summary>
		public static bool WAS_PED_SKELETON_UPDATED(int ped) => Function.Call<bool>(0x11B499C1E0FF8559, ped);
		/// <summary>
		/// Gets the position of the specified bone of the specified ped.
		/// 
		/// ped: The ped to get the position of a bone from.
		/// boneId: The ID of the bone to get the position from. This is NOT the index.
		/// offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
		/// offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
		/// offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
		/// </summary>
		public static Vector3 GET_PED_BONE_COORDS(int ped, int boneId, float offsetX, float offsetY, float offsetZ) => Function.Call<Vector3>(0x17C07FC640E86B4E, ped, boneId, offsetX, offsetY, offsetZ);
		public static Vector3 GET_PED_BONE_COORDS(int ped, int boneId, Vector3 offset) => Function.Call<Vector3>(0x17C07FC640E86B4E, ped, boneId, offset.X, offset.Y, offset.Z);
		/// <summary>
		/// blockingFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScenarioBlockingFlags
		/// </summary>
		public static int ADD_SCENARIO_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, int blockingFlags) => Function.Call<int>(0x1B5C85C612E5256E, x1, y1, z1, x2, y2, z2, p6, blockingFlags);
		public static int ADD_SCENARIO_BLOCKING_AREA(Vector3 vec1, Vector3 vec2, bool p6, int blockingFlags) => Function.Call<int>(0x1B5C85C612E5256E, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p6, blockingFlags);
		public static void REMOVE_SCENARIO_BLOCKING_AREAS() => Function.Call(0xD37401D78A929A49);
		public static void REMOVE_SCENARIO_BLOCKING_AREA(Any p0, bool p1) => Function.Call(0x31D16B74C6E29D66, p0, p1);
		/// <summary>
		/// flag: see ADD_SCENARIO_BLOCKING_AREA
		/// </summary>
		public static Any _ADD_SCENARIO_BLOCKING_VOLUME(int volume, bool p1, int flag) => Function.Call<Any>(0x4C39C95AE5DB1329, volume, p1, flag);
		public static Any _0x6F46F8ACB44C4FC1(Any p0) => Function.Call<Any>(0x6F46F8ACB44C4FC1, p0);
		public static bool _IS_SCENARIO_BLOCKING_AREA_VALID(Any p0) => Function.Call<bool>(0x91A5F9CBEBB9D936, p0);
		/// <summary>
		/// Equivalent to IS_PED_USING_SCENARIO from V but takes a hash instead of a string.
		/// </summary>
		public static bool IS_PED_USING_SCENARIO_HASH(int ped, uint scenarioHash) => Function.Call<bool>(0x34D6AC1157C8226C, ped, scenarioHash);
		public static bool IS_PED_USING_ANY_SCENARIO(int ped) => Function.Call<bool>(0x57AB4A3080F85143, ped);
		public static bool IS_PED_USING_THIS_SCENARIO(int ped, int scenario) => Function.Call<bool>(0x9C54041BB66BCF9E, ped, scenario);
		/// <summary>
		/// p2 is always 0, p3 is always 0, p4 is always 1
		/// </summary>
		public static bool _CAN_PED_USE_SCENARIO_POINT(int ped, int scenario, Any p2, Any p3, Any p4) => Function.Call<bool>(0xAB643407D0B26F07, ped, scenario, p2, p3, p4);
		/// <summary>
		/// _CAN_PED_SEE* - _CAN_PED_USE_(SCENARIO_HASH?)*
		/// </summary>
		public static bool _0x1148F706CF4EBDDA(int ped, uint p1, int p2) => Function.Call<bool>(0x1148F706CF4EBDDA, ped, p1, p2);
		public static bool SET_PED_PANIC_EXIT_SCENARIO(int ped, float x, float y, float z) => Function.Call<bool>(0xFE07FF6495D52E2A, ped, x, y, z);
		public static bool SET_PED_PANIC_EXIT_SCENARIO(int ped, Vector3 vec) => Function.Call<bool>(0xFE07FF6495D52E2A, ped, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// If toggle is true, when the ped is using a scenario he will stop it and become scared
		/// If toggle is false, the ped will not be scared anymore and continue his scenario
		/// 
		/// Old name: _SET_PED_SCARED_WHEN_USING_SCENARIO
		/// </summary>
		public static void TOGGLE_SCENARIO_PED_COWER_IN_PLACE(int ped, bool toggle) => Function.Call(0x9A77DFD295E29B09, ped, toggle);
		public static void _0xD8CEEED54C672B5D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xD8CEEED54C672B5D, p0, p1, p2, p3, p4, p5, p6);
		/// <summary>
		/// Old name: _SET_PED_SHOULD_PLAY_DIRECTED_SCENARIO_EXIT
		/// </summary>
		public static bool SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(int ped, float x, float y, float z) => Function.Call<bool>(0xEC6935EBE0847B90, ped, x, y, z);
		public static bool SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(int ped, Vector3 vec) => Function.Call<bool>(0xEC6935EBE0847B90, ped, vec.X, vec.Y, vec.Z);
		public static void SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(int ped) => Function.Call(0xA3A9299C4F2ADB98, ped);
		public static void SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(int ped) => Function.Call(0xF1C03A5352243A30, ped);
		/// <summary>
		/// lookIntensity:
		/// 0 - REACT_LOOK_NONE
		/// 1 - REACT_LOOK_LOW
		/// 2 - REACT_LOOK_MEDIUM
		/// 3 - REACT_LOOK_HIGH
		/// </summary>
		public static bool SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(int ped, float x, float y, float z, int lookIntensity) => Function.Call<bool>(0xEEED8FAFEC331A70, ped, x, y, z, lookIntensity);
		public static bool SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(int ped, Vector3 vec, int lookIntensity) => Function.Call<bool>(0xEEED8FAFEC331A70, ped, vec.X, vec.Y, vec.Z, lookIntensity);
		/// <summary>
		/// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		/// </summary>
		public static bool SET_PED_SHOULD_PLAY_COMBAT_SCENARIO_EXIT(int ped, float x, float y, float z, int lookIntensity) => Function.Call<bool>(0x802092B07E3B1EEA, ped, x, y, z, lookIntensity);
		public static bool SET_PED_SHOULD_PLAY_COMBAT_SCENARIO_EXIT(int ped, Vector3 vec, int lookIntensity) => Function.Call<bool>(0x802092B07E3B1EEA, ped, vec.X, vec.Y, vec.Z, lookIntensity);
		/// <summary>
		/// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		/// </summary>
		public static bool SET_PED_SHOULD_PLAY_EMOTIONAL_SCENARIO_EXIT(int ped, float x, float y, float z, int lookIntensity, bool p5) => Function.Call<bool>(0x62FDAD5E01D2DD47, ped, x, y, z, lookIntensity, p5);
		public static bool SET_PED_SHOULD_PLAY_EMOTIONAL_SCENARIO_EXIT(int ped, Vector3 vec, int lookIntensity, bool p5) => Function.Call<bool>(0x62FDAD5E01D2DD47, ped, vec.X, vec.Y, vec.Z, lookIntensity, p5);
		/// <summary>
		/// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		/// </summary>
		public static bool SET_PED_SHOULD_PLAY_QUICK_SCENARIO_EXIT(int ped, float x, float y, float z, int lookIntensity, bool p5) => Function.Call<bool>(0x463803429297117C, ped, x, y, z, lookIntensity, p5);
		public static bool SET_PED_SHOULD_PLAY_QUICK_SCENARIO_EXIT(int ped, Vector3 vec, int lookIntensity, bool p5) => Function.Call<bool>(0x463803429297117C, ped, vec.X, vec.Y, vec.Z, lookIntensity, p5);
		public static bool _0xF9331B3A314EB49D(int ped) => Function.Call<bool>(0xF9331B3A314EB49D, ped);
		public static void _0xE735A7DA22E88359(Any p0) => Function.Call(0xE735A7DA22E88359, p0);
		public static Any _0x82CB0F3F0C7785E5(Any p0) => Function.Call<Any>(0x82CB0F3F0C7785E5, p0);
		public static void _0xCA95C156C14B2054(Any p0, Any p1) => Function.Call(0xCA95C156C14B2054, p0, p1);
		public static void SET_FACIAL_IDLE_ANIM_OVERRIDE(int ped, string animName, string animDict) => Function.Call(0xFFC24B988B938B38, ped, animName, animDict);
		public static void CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(int ped) => Function.Call(0x726256CC1EEB182F, ped);
		/// <summary>
		/// Hashes: MOODAGITATED, MOODAIMING, MOODANGRY, MOODBITCHY, MOODCONCENTRATION, MOODCONCENTRATIONEXTREME, MOODCURIOUS, MOODDEAD, MOODDEFUSE, MOODEXERTIONEXTREME, MOODEXERTIONMEDIUM, MOODEXERTIONMILD, MOODHAPPY, MOODINJUREDMILD, MOODINTIMIDATED, MOODKNOCKEDOUT, MOODNERVOUS, MOODNORMAL, MOODNORMALNEUTRAL, MOODPANIC, MOODSCARED, MOODSHOCKED, MOODSLEEPING, MOODSMUG, MOODTIRED
		/// Params: p2 = 6 in R* Scripts
		/// </summary>
		public static void _REQUEST_PED_FACIAL_MOOD_THIS_FRAME(int ped, uint mood, int p2) => Function.Call(0x8B3B71C80A29A4BB, ped, mood, p2);
		public static void _0xD2F0FE8805D91647(Any p0, Any p1) => Function.Call(0xD2F0FE8805D91647, p0, p1);
		public static void SET_PED_CAN_PLAY_GESTURE_ANIMS(int ped, Any p1, Any p2) => Function.Call(0xBAF20C5432058024, ped, p1, p2);
		/// <summary>
		/// Only used in R* Script net_moonshine_property
		/// _A* - _B*
		/// </summary>
		public static void _0x7EDB3C766B0D073F(int ped) => Function.Call(0x7EDB3C766B0D073F, ped);
		public static void SET_PED_CAN_PLAY_AMBIENT_ANIMS(int ped, bool toggle) => Function.Call(0x6373D1349925A70E, ped, toggle);
		public static void SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(int ped, bool toggle) => Function.Call(0x0EB0585D15254740, ped, toggle);
		/// <summary>
		/// Only used in R* Script shop_harriet
		/// _SET_PED_F*
		/// </summary>
		public static void _0x4F63433CE3C08230(int ped, bool p1) => Function.Call(0x4F63433CE3C08230, ped, p1);
		public static void SET_PED_CAN_ARM_IK(int ped, bool toggle) => Function.Call(0x6C3B4D6D13B4C841, ped, toggle);
		/// <summary>
		/// _SET_PED_CAN_(?)_IK*
		/// </summary>
		public static void _SET_PED_CAN_UNK_BODYPART_IK(int ped, bool toggle) => Function.Call(0xEE9DF765990E8D1D, ped, toggle);
		public static void SET_PED_CAN_HEAD_IK(int ped, bool toggle) => Function.Call(0xC11C18092C5530DC, ped, toggle);
		public static void SET_PED_CAN_LEG_IK(int ped, bool toggle) => Function.Call(0x73518ECE2485412B, ped, toggle);
		public static void SET_PED_CAN_TORSO_IK(int ped, bool toggle) => Function.Call(0xF2B7106D37947CE0, ped, toggle);
		public static void SET_PED_CAN_TORSO_REACT_IK(int ped, bool toggle) => Function.Call(0xF5846EDB26A98A24, ped, toggle);
		public static void SET_PED_CAN_TORSO_VEHICLE_IK(int ped, bool toggle) => Function.Call(0x6647C5F6F5792496, ped, toggle);
		public static void SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(int ped, bool toggle) => Function.Call(0xEC4686EC06434678, ped, toggle);
		public static bool IS_PED_HEADTRACKING_PED(int ped1, int ped2) => Function.Call<bool>(0x5CD3CB88A7F8850D, ped1, ped2);
		public static bool IS_PED_HEADTRACKING_ENTITY(int ped, int entity) => Function.Call<bool>(0x813A0A7C9D2E831F, ped, entity);
		public static void _DISABLE_AMBIENT_LOOK_AT_REQUESTS(Any p0, Any p1) => Function.Call(0x80038740C96AD17F, p0, p1);
		public static void _DISABLE_ALL_LOOK_AT_REQUESTS(int ped, int p1) => Function.Call(0xE1965A380342BE1F, ped, p1);
		/// <summary>
		/// _SET_PED_R* - _SET_PED_S*
		/// </summary>
		public static void _0xCD9E5F94A2F38683(int ped, bool p1) => Function.Call(0xCD9E5F94A2F38683, ped, p1);
		/// <summary>
		/// Old name: SET_PED_CLOTH_PACKAGE_INDEX
		/// </summary>
		public static void SET_PED_CLOTH_PIN_FRAMES(int ped, bool p1) => Function.Call(0x78C4E9961DB3EB5B, ped, p1);
		/// <summary>
		/// _SET_PED_CA* - _SET_PED_CO*
		/// </summary>
		public static void _0x1D4636C90BBEFACB(int ped, int p1) => Function.Call(0x1D4636C90BBEFACB, ped, p1);
		/// <summary>
		/// _ADD_*
		/// </summary>
		public static void _0xEF371232BC6053E1(int ped) => Function.Call(0xEF371232BC6053E1, ped);
		/// <summary>
		/// _SET_PED_*
		/// </summary>
		public static void _0x86F0B6730C32AC14(int ped, bool p1) => Function.Call(0x86F0B6730C32AC14, ped, p1);
		/// <summary>
		/// _ATTACH_*
		/// </summary>
		public static void _0x8101BA1C0B462412(int ped, int ropeId) => Function.Call(0x8101BA1C0B462412, ped, ropeId);
		/// <summary>
		/// flagId: https://alloc8or.re/rdr3/doc/enums/ePedScriptConfigFlags.txt
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_CONFIG_FLAGS
		/// </summary>
		public static void SET_PED_CONFIG_FLAG(int ped, int flagId, bool value) => Function.Call(0x1913FE4CBF41C463, ped, flagId, value);
		/// <summary>
		/// Needs to be called every frame
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/CPED_RESET_FLAGS
		/// </summary>
		public static void SET_PED_RESET_FLAG(int ped, int flagId, bool doReset) => Function.Call(0xC1E8A365BF3B29F2, ped, flagId, doReset);
		/// <summary>
		/// flagId: see SET_PED_CONFIG_FLAG
		/// </summary>
		public static bool GET_PED_CONFIG_FLAG(int ped, int flagId, bool p2) => Function.Call<bool>(0x7EE53118C892B513, ped, flagId, p2);
		public static bool GET_PED_RESET_FLAG(int ped, int flagId) => Function.Call<bool>(0xAF9E59B1B1FBF2A0, ped, flagId);
		public static void _0xC6981AFF6D2A71C2(Any p0) => Function.Call(0xC6981AFF6D2A71C2, p0);
		public static void _0xE0FE107AB174D64A(Any p0, Any p1) => Function.Call(0xE0FE107AB174D64A, p0, p1);
		public static void SET_PED_GROUP_MEMBER_PASSENGER_INDEX(int ped, int index) => Function.Call(0x0BDDB8D9EC6BCF3C, ped, index);
		/// <summary>
		/// Presumably returns the Entity that the Ped is currently diving out of the way of.
		/// </summary>
		public static bool IS_PED_EVASIVE_DIVING(int ped, int* evadingEntity) => Function.Call<bool>(0x414641C26E105898, ped, evadingEntity);
		/// <summary>
		/// Triggers a gunshot
		/// Params: p5 = -1 in R* Scripts
		/// </summary>
		public static Any _SHOOT_TRIGGER_AT_COORDS(int ped, float x, float y, float z, int p4, float p5, int p6, float p7) => Function.Call<Any>(0x4C57F27D1554E6B0, ped, x, y, z, p4, p5, p6, p7);
		public static Any _SHOOT_TRIGGER_AT_COORDS(int ped, Vector3 vec, int p4, float p5, int p6, float p7) => Function.Call<Any>(0x4C57F27D1554E6B0, ped, vec.X, vec.Y, vec.Z, p4, p5, p6, p7);
		public static bool _IS_THIS_MODEL_A_HORSE(uint model) => Function.Call<bool>(0x772A1969F649E902, model);
		public static void SET_PED_MODEL_IS_SUPPRESSED(int ped, bool toggle) => Function.Call(0xE163A4BCE4DE6F11, ped, toggle);
		public static bool _IS_PED_MODEL_SUPPRESSED(uint model) => Function.Call<bool>(0xAA9F048DCF69B6DC, model);
		public static void _0x7ABBD9E449E0DB00(int ped, bool p1) => Function.Call(0x7ABBD9E449E0DB00, ped, p1);
		/// <summary>
		/// Disables being able to kick move ped.
		/// </summary>
		public static void _SET_PED_DISABLE_KICK_MOVE(int ped, bool disable) => Function.Call(0xADD31A5C7A5FAA73, ped, disable);
		public static void SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(int ped, bool toggle) => Function.Call(0xDF993EE5E90ABA25, ped, toggle);
		public static void _0xE6CB36F43A95D75F(Any p0) => Function.Call(0xE6CB36F43A95D75F, p0);
		public static void SET_PED_LEG_IK_MODE(int ped, int mode) => Function.Call(0xC396F5B86FF9FEBD, ped, mode);
		/// <summary>
		/// If returned true: There are enemy peds near friendly turn in ped. Going to aggro.
		/// If returned false: Moving back to idle as there aren't any remaining enemy peds near ped
		/// _IS_PED_IN_*
		/// </summary>
		public static bool _0x078076AB50FB117F(int ped, float x, float y, float z, float p4, bool p5) => Function.Call<bool>(0x078076AB50FB117F, ped, x, y, z, p4, p5);
		public static bool _0x078076AB50FB117F(int ped, Vector3 vec, float p4, bool p5) => Function.Call<bool>(0x078076AB50FB117F, ped, vec.X, vec.Y, vec.Z, p4, p5);
		/// <summary>
		/// SET_PED_CAN_*
		/// </summary>
		public static void _SET_PED_CAN_BE_LASSOED(int ped, bool toggle) => Function.Call(0xFD6943B6DF77E449, ped, toggle);
		/// <summary>
		/// 0 - Stationary (Will just stand in place)
		/// 1 - Defensive (Will try to find cover and very likely to blind fire)
		/// 2 - Offensive (Will attempt to charge at enemy but take cover as well)
		/// 3 - Suicidal Offensive (Will try to flank enemy in a suicidal attack)
		/// </summary>
		public static void SET_PED_COMBAT_MOVEMENT(int ped, int combatMovement) => Function.Call(0x4D9CA1009AFBD057, ped, combatMovement);
		public static int GET_PED_COMBAT_MOVEMENT(int ped) => Function.Call<int>(0xDEA92412FCAEB3F5, ped);
		/// <summary>
		/// _SET_PED_COMBAT_R - _SET_PED_C*
		/// </summary>
		public static void _0x815C0074A1BC0D93(int ped, int p1) => Function.Call(0x815C0074A1BC0D93, ped, p1);
		/// <summary>
		/// _GET_PED_COMBAT_M* - _GET_PED_C*
		/// </summary>
		public static int _0xFFDE295662405B25(int ped) => Function.Call<int>(0xFFDE295662405B25, ped);
		/// <summary>
		/// abilityLevel:
		/// enum eCombatAbilityLevel
		/// {
		/// 	CAL_POOR,
		/// 	CAL_AVERAGE,
		/// 	CAL_PROFESSIONAL
		/// };
		/// </summary>
		public static void SET_PED_COMBAT_ABILITY(int ped, int abilityLevel) => Function.Call(0xC7622C0D36B2FDA8, ped, abilityLevel);
		/// <summary>
		/// range:
		/// enum eCombatRange
		/// {
		/// 	CR_NEAR,
		/// 	CR_MEDIUM,
		/// 	CR_FAR,
		/// 	CR_VERY_FAR
		/// };
		/// </summary>
		public static void SET_PED_COMBAT_RANGE(int ped, int range) => Function.Call(0x3C606747B23E497B, ped, range);
		/// <summary>
		/// attributeIndex: https://alloc8or.re/rdr3/doc/enums/eCombatAttribute.txt
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ATTRIBUTES
		/// </summary>
		public static void SET_PED_COMBAT_ATTRIBUTES(int ped, int attributeIndex, bool enabled) => Function.Call(0x9F7794730795E019, ped, attributeIndex, enabled);
		public static bool _GET_PED_COMBAT_ATTRIBUTE(int ped, int attributeIndex) => Function.Call<bool>(0xCC2B20596E29E4E3, ped, attributeIndex);
		/// <summary>
		/// Hashes: GUARD, COMBAT_ANIMAL, LAW, LAW_SHERIFF
		/// _SET_PED_COMBAT_A* - _SET_PED_COMBAT_M*
		/// </summary>
		public static void _SET_PED_COMBAT_ATTRIBUTE_HASH(int ped, uint p1) => Function.Call(0xBD75500141E4725C, ped, p1);
		/// <summary>
		/// TLR_ExitTask = 0,
		/// TLR_NeverLoseTarget,
		/// TLR_SearchForTarget
		/// </summary>
		public static void SET_PED_TARGET_LOSS_RESPONSE(int ped, int responseType) => Function.Call(0x0703B9079823DA4A, ped, responseType);
		public static void _0x0A4618FFD517E24D(Any p0, Any p1) => Function.Call(0x0A4618FFD517E24D, p0, p1);
		/// <summary>
		/// _SET_PED_MO*
		/// </summary>
		public static void _0x712B2C2B2471B493(int ped, uint p1) => Function.Call(0x712B2C2B2471B493, ped, p1);
		public static void _0x00B380FF2DF6AB7A(Any p0, Any p1) => Function.Call(0x00B380FF2DF6AB7A, p0, p1);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_STYLES
		/// Params: p2 is usually 1, sometimes 0 or 2
		/// duration in seconds, -1.0 = forever
		/// </summary>
		public static void _SET_PED_COMBAT_STYLE(int ped, uint combatStyleHash, int p2, float duration) => Function.Call(0x8ACC0506743A8A5C, ped, combatStyleHash, p2, duration);
		/// <summary>
		/// Params: p1 = 1 in R* Scripts
		/// </summary>
		public static void _CLEAR_PED_COMBAT_STYLE(int ped, int p1) => Function.Call(0x78815FC52832B690, ped, p1);
		/// <summary>
		/// duration in seconds, -1.0 = forever
		/// </summary>
		public static void _SET_PED_COMBAT_STYLE_MOD(int ped, uint combatStyleModHash, float duration) => Function.Call(0x8B1E8E35A6E814EA, ped, combatStyleModHash, duration);
		/// <summary>
		/// _CLEAR_PED_COMBAT_*
		/// </summary>
		public static void _0x1FA132CBCD7CB239(int ped, uint p1) => Function.Call(0x1FA132CBCD7CB239, ped, p1);
		/// <summary>
		/// _IS_PED_B* - _IS_PED_C*
		/// </summary>
		public static bool _0x5BF0B9D9A8E227A0(int ped) => Function.Call<bool>(0x5BF0B9D9A8E227A0, ped);
		/// <summary>
		/// _SET_PED_M*
		/// </summary>
		public static void _0x642720D8D69328B6(int ped, uint p1) => Function.Call(0x642720D8D69328B6, ped, p1);
		public static bool IS_PED_PERFORMING_MELEE_ACTION(int ped, int p1, uint p2) => Function.Call<bool>(0xDCCA191DF9980FD7, ped, p1, p2);
		/// <summary>
		/// _CAN_PED_*
		/// </summary>
		public static bool _0x99DF2639DA76C1DC(int ped1, int ped2, int p2) => Function.Call<bool>(0x99DF2639DA76C1DC, ped1, ped2, p2);
		public static float _GET_PED_MELEE_ACTION_PHASE(int ped) => Function.Call<float>(0x6127F25ED21C533C, ped);
		public static bool IS_PED_BEING_STEALTH_KILLED(int ped) => Function.Call<bool>(0x863B23EFDE9C5DF2, ped);
		public static int GET_MELEE_TARGET_FOR_PED(int ped) => Function.Call<int>(0x18A3E9EE1297FD39, ped);
		public static void _0xDEDBED3020DA49DC(Any p0) => Function.Call(0xDEDBED3020DA49DC, p0);
		public static void _0xA405BF9F01960C16(Any p0) => Function.Call(0xA405BF9F01960C16, p0);
		public static uint _GET_PED_BRAWLING_STYLE(int ped) => Function.Call<uint>(0xEC6B59BE445FEC51, ped);
		/// <summary>
		/// brawlingStyle:
		/// enum eBrawlingStyle : Hash
		/// {
		/// 	BS_AI = 0x802C604D,
		/// 	BS_AI_BARBRAWL = 0x4FF5F0C7,
		/// 	BS_AI_DEFENSIVE = 0xD888F2FD,
		/// 	BS_AI_MOONSHINE_BARBRAWL = 0xA01B433A,
		/// 	BS_ALLIGATOR = 0x7A5548ED,
		/// 	BS_ALLIGATOR_LARGE = 0x368EC7CB,
		/// 	BS_ALLY = 0x69C76C14,
		/// 	BS_ANIMAL = 0xD777C754,
		/// 	BS_BADGER = 0x7E7C3F53,
		/// 	BS_BEAR = 0x0BC66E35,
		/// 	BS_BEAVER = 0x4E313783,
		/// 	BS_BOAR = 0x176A5831,
		/// 	BS_BOUNTY_HUNTER = 0x3900654C,
		/// 	BS_BRUISER = 0x4514DB61,
		/// 	BS_BULL = 0x4E50C5D2,
		/// 	BS_COUGAR = 0x9DAA7CCB,
		/// 	BS_COW = 0xB0E91295,
		/// 	BS_COYOTE = 0xA448EB69,
		/// 	BS_DEER = 0xA781E6B3,
		/// 	BS_DOG = 0x5A4155C4,
		/// 	BS_ELK = 0x408697F0,
		/// 	BS_FEMALE = 0x6A3BB2C2,
		/// 	BS_FEMALE_STRONG = 0x4DAFDD84,
		/// 	BS_GANGUP = 0xD0CECFF2,
		/// 	BS_GOAT = 0x078E649F,
		/// 	BS_HORSE = 0xF6B775F3,
		/// 	BS_MICAH_FINALE = 0x1F0BB27A,
		/// 	BS_MOOSE = 0x968917AB,
		/// 	BS_MUSKRAT = 0x1EDC33AC,
		/// 	BS_NO_MELEE = 0x25B5F931,
		/// 	BS_PIG = 0x22EAD110,
		/// 	BS_PLAYER = 0x78BAEF07,
		/// 	BS_PLAYER_FINALE = 0xF9E77D2D,
		/// 	BS_PLAYER_MOONSHINER = 0x687BF19F,
		/// 	BS_PLAYER_WINTER1 = 0x3C6A802F,
		/// 	BS_QUICK = 0xC4CABB1B,
		/// 	BS_RACCOON = 0x505F8917,
		/// 	BS_SHEEP = 0x6827CCCF,
		/// 	BS_SNAKE = 0x82BEBC4B,
		/// 	BS_TIMID = 0x431AEF77,
		/// 	BS_WOLF = 0xA8F023D4
		/// };
		/// </summary>
		public static void _SET_PED_BRAWLING_STYLE(int ped, uint brawlingStyle) => Function.Call(0x8BA83CC4288CD56D, ped, brawlingStyle);
		/// <summary>
		/// _RESET_PED_*
		/// </summary>
		public static void _0x9D8DFE2DE9CB4DFC(int ped) => Function.Call(0x9D8DFE2DE9CB4DFC, ped);
		/// <summary>
		/// _SET_PED_M*
		/// </summary>
		public static Any _0xC48AF420371C7407(int ped, uint grapple) => Function.Call<Any>(0xC48AF420371C7407, ped, grapple);
		public static Any _0x5EFA8A3D8A60D662(Any p0, Any p1) => Function.Call<Any>(0x5EFA8A3D8A60D662, p0, p1);
		public static Any _0x242EDF85D4E87B65(Any p0) => Function.Call<Any>(0x242EDF85D4E87B65, p0);
		public static void _SET_PED_COMBAT_BEHAVIOUR(int ped, uint behaviour) => Function.Call(0x9238A3D970BBB0A9, ped, behaviour);
		public static void _0x9A4AC116CC1EEE14(Any p0) => Function.Call(0x9A4AC116CC1EEE14, p0);
		public static void _0xE20027B414BFE6C7(Any p0, Any p1) => Function.Call(0xE20027B414BFE6C7, p0, p1);
		/// <summary>
		/// NET_FETCH_CLIENT_UPDATE_PED_FIGHT_PROFICIENCY: Changing parry multiplier for ped
		/// </summary>
		public static void _SET_PED_BEAT_MULTIPLIER(int ped, float p1) => Function.Call(0x6DBF2D78709AD70B, ped, p1);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/COMBAT_ACTION_DISABLE_FLAGS
		/// </summary>
		public static void _SET_PED_ACTION_DISABLE_FLAG(int ped, int actionDisableFlag) => Function.Call(0xB8DE69D9473B7593, ped, actionDisableFlag);
		public static void _CLEAR_PED_ACTION_DISABLE_FLAG(int ped, int actionDisableFlag) => Function.Call(0x949B2F9ED2917F5D, ped, actionDisableFlag);
		public static bool _IS_PED_ACTION_DISABLE_FLAG_ENABLED(int ped, int actionDisableFlag) => Function.Call<bool>(0xB346C85D49CC998E, ped, actionDisableFlag);
		public static void _SET_PED_TARGET_ACTION_DISABLE_FLAG(int ped, int actionDisableFlag) => Function.Call(0xC163DAC52AC975D3, ped, actionDisableFlag);
		public static void _CLEAR_PED_TARGET_ACTION_DISABLE_FLAG(int ped, int actionDisableFlag) => Function.Call(0xBBF6D1D07C02D00A, ped, actionDisableFlag);
		public static bool _IS_PED_TARGET_ACTION_DISABLE_FLAG_ENABLED(int ped, int actionDisableFlag) => Function.Call<bool>(0x02AA2096FE00F3E1, ped, actionDisableFlag);
		/// <summary>
		/// _SET_PED_M*
		/// </summary>
		public static void _0x57F35552E771BE9D(int ped, int p1) => Function.Call(0x57F35552E771BE9D, ped, p1);
		/// <summary>
		/// _CLEAR_PED_M*
		/// </summary>
		public static void _0x7C10221CE718AA72(int ped, int p1) => Function.Call(0x7C10221CE718AA72, ped, p1);
		/// <summary>
		/// _IS_PED_M*
		/// </summary>
		public static bool _0x0D3B1568917EBDA0(int ped, int p1) => Function.Call<bool>(0x0D3B1568917EBDA0, ped, p1);
		public static void _0x29F3539189D3E277(Any p0, Any p1) => Function.Call(0x29F3539189D3E277, p0, p1);
		public static void _0xE9E06EA514A69061(Any p0, Any p1) => Function.Call(0xE9E06EA514A69061, p0, p1);
		public static void _SET_PED_WRITHING_DURATION(int ped, float writhingDuration1, float writhingDuration2, int p3) => Function.Call(0x4DB9D03AC4E1FA84, ped, writhingDuration1, writhingDuration2, p3);
		/// <summary>
		/// normalized / non normalized
		/// 0.0        / 1000.0         STARTED IN WRITHE STAGE
		/// 1.0        / 0.0            END OF WRITHE, DEAD
		/// -1.0                        DEAD
		/// 
		/// Returns some value from AI task 562 (unknown).
		/// </summary>
		public static float _GET_PED_REMAINING_REVIVAL_TIME(int ped, bool normalized) => Function.Call<float>(0xEBE89623EB861271, ped, normalized);
		public static void SET_PAUSE_PED_WRITHE_BLEEDOUT(int ped, bool toggle) => Function.Call(0x925A160133003AC6, ped, toggle);
		/// <summary>
		/// _GET_IS_PED_(BLEEDING_OUT?)*
		/// </summary>
		public static bool _0x12EB4E31F092C9B3(int ped) => Function.Call<bool>(0x12EB4E31F092C9B3, ped);
		public static bool GET_PED_IS_GRAPPLING(int ped) => Function.Call<bool>(0x0E99E3BF11BB6367, ped);
		public static bool GET_PED_IS_BEING_GRAPPLED(int ped) => Function.Call<bool>(0x3BDFCF25B58B0415, ped);
		public static int _GET_PED_GRAPPLER(int ped) => Function.Call<int>(0xD0B7AEB56229D317, ped);
		public static int GET_PED_GRAPPLE_STATE(int ped) => Function.Call<int>(0x2311F15D971AA680, ped);
		public static uint _GET_PED_GRAPPLE_STYLE(int ped) => Function.Call<uint>(0x753B15AD0FD6F3E3, ped);
		/// <summary>
		/// Hashes: GS_DRAGGING, GS_FACE_TO_BACK, GS_FACE_TO_FACE, GS_FACE_TO_FACE_WALL, GS_MOUNTED
		/// </summary>
		public static Any _SET_PED_GRAPPLE_STYLE(int ped, uint style) => Function.Call<Any>(0x630E7B01F091A197, ped, style);
		public static void _SET_PED_GRAPPLE_SEQUENCE(int ped, string grappleSequence) => Function.Call(0x604190F0CF0DF158, ped, grappleSequence);
		public static void _SET_PED_GRAPPLE_FLAG(int ped, int flag, bool enable) => Function.Call(0x789DABD18E9024DB, ped, flag, enable);
		public static void _CLEAR_PED_GRAPPLE_FLAG(int ped, int flag) => Function.Call(0xEAE3B5B019C8D23F, ped, flag);
		public static int _GET_PED_GRAPPLE_FLAG(int ped) => Function.Call<int>(0xF3C873ED0C595109, ped);
		public static void _SET_PED_GRAPPLE_ACTION(int ped, uint grappleAction) => Function.Call(0x8301D87B1B89E219, ped, grappleAction);
		public static Any _SET_PED_GRAPPLE_EFFECT_MULTIPLIER(int ped, float multiplier) => Function.Call<Any>(0x99A6E246C315BF60, ped, multiplier);
		public static void _SET_PED_GRAPPLE_ANIMATION(int ped, uint grappleAnim) => Function.Call(0x56E9C26CD29D1ED6, ped, grappleAnim);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/FLEE_ATTRIBUTES
		/// 
		/// attributeFlags:
		/// enum eFleeAttribute
		/// {
		/// 	FA_FORCE_EXIT_VEHICLE = (1 << 16),
		/// 	FA_DISABLE_MOUNT_USAGE = (1 << 20),
		/// 	FA_DISABLE_ENTER_VEHICLES = (1 << 22),
		/// };
		/// </summary>
		public static void SET_PED_FLEE_ATTRIBUTES(int ped, int attributeFlags, bool enable) => Function.Call(0x70A2D1137C8ED7C9, ped, attributeFlags, enable);
		public static bool _IS_PED_COWERING(int ped) => Function.Call<bool>(0xB086C8C0F5701D14, ped);
		public static bool IS_ANY_PED_NEAR_POINT(float x, float y, float z, float radius) => Function.Call<bool>(0x083961498679DC9F, x, y, z, radius);
		public static bool IS_ANY_PED_NEAR_POINT(Vector3 vec, float radius) => Function.Call<bool>(0x083961498679DC9F, vec.X, vec.Y, vec.Z, radius);
		public static void FORCE_PED_AI_AND_ANIMATION_UPDATE(int ped, bool p1, bool p2) => Function.Call(0x2208438012482A1A, ped, p1, p2);
		/// <summary>
		/// _FORCE_PED_*
		/// </summary>
		public static void _0xC2722B252C79E641(int ped, Any p1, Any p2, bool p3) => Function.Call(0xC2722B252C79E641, ped, p1, p2, p3);
		public static bool _IS_PED_DOING_SCENARIO_TRANSITION(int ped) => Function.Call<bool>(0xC488B8C0E52560D8, ped);
		/// <summary>
		/// _IS_PED_D*
		/// </summary>
		public static bool _0x2DC0E8DCBD3546E9(int ped) => Function.Call<bool>(0x2DC0E8DCBD3546E9, ped);
		/// <summary>
		/// Forces transition now, called together with 0xD65FDC686A031C83
		/// </summary>
		public static void _ADD_SCENARIO_TRANSITION(int ped) => Function.Call(0x6D07B371E9439019, ped);
		/// <summary>
		/// Ped Command Hash are special commands, that can be activated to change conditional anim variations or trigger transitions between conditional anims.
		/// https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
		/// </summary>
		public static void _GIVE_PED_HASH_COMMAND(int ped, uint commandHash, float activationDuration) => Function.Call(0xD65FDC686A031C83, ped, commandHash, activationDuration);
		public static bool _GET_IS_PED_COMMAND_HASH_PRESENT(int ped, uint commandHash) => Function.Call<bool>(0x68821369A2CEADD5, ped, commandHash);
		public static bool IS_PED_HEADING_TOWARDS_POSITION(int ped, float x, float y, float z, float p4) => Function.Call<bool>(0xFCF37A457CB96DC0, ped, x, y, z, p4);
		public static bool IS_PED_HEADING_TOWARDS_POSITION(int ped, Vector3 vec, float p4) => Function.Call<bool>(0xFCF37A457CB96DC0, ped, vec.X, vec.Y, vec.Z, p4);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void _0x600BBDD29820370C(int ped) => Function.Call(0x600BBDD29820370C, ped);
		public static void REQUEST_PED_VISIBILITY_TRACKING(int ped) => Function.Call(0x7D7A2E43E74E2EB8, ped);
		public static void RELEASE_PED_VISIBILITY_TRACKING(int ped) => Function.Call(0x3088634CF8C819CF, ped);
		public static void REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(int ped, bool p1) => Function.Call(0x2BC338A7B21F4608, ped, p1);
		public static void REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(int ped, bool p1) => Function.Call(0x75BA1CB3B7D40CAF, ped, p1);
		public static int GET_TRACKED_PED_PIXELCOUNT(int ped) => Function.Call<int>(0x511F1A683387C7E2, ped);
		/// <summary>
		/// Returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
		/// Target needs to be tracked first, won't work otherwise.
		/// </summary>
		public static bool IS_TRACKED_PED_VISIBLE(int ped) => Function.Call<bool>(0x91C8E617F64188AC, ped);
		public static bool _IS_TRACKED_PED_VISIBILITY_PERCENTAGE_NOT_LESS_THAN(int ped, float percent) => Function.Call<bool>(0x164CECC59E70DF86, ped, percent);
		public static bool _IS_PED_VISIBILITY_TRACKED(int ped) => Function.Call<bool>(0x5102307CE88798EB, ped);
		public static bool CAN_PED_BE_MOUNTED(int ped) => Function.Call<bool>(0x2D64376CF437363E, ped);
		/// <summary>
		/// Returns true if given ped is a fish.
		/// _IS_ME* - _IS_MO*
		/// </summary>
		public static bool _IS_METAPED_FISH(int ped) => Function.Call<bool>(0x118D476A6F1A13F1, ped);
		public static bool IS_EVENT_IN_QUEUE(int ped, uint eventType) => Function.Call<bool>(0xC8D523BF5BBD3808, ped, eventType);
		/// <summary>
		/// Returns:
		/// 0 - CTR_CANNOT_TARGET
		/// 1 - CTR_CAN_TARGET
		/// 2 - CTR_NOT_SURE_YET
		/// </summary>
		public static int CAN_PED_SEE_ENTITY(int ped, int targetEntity, bool p2, bool p3) => Function.Call<int>(0x7F9B9791D4CB71F6, ped, targetEntity, p2, p3);
		public static int CAN_PED_SEE_PED_CACHED(int ped, int targetPed, bool p2) => Function.Call<int>(0x9D9473CB82D83A30, ped, targetPed, p2);
		/// <summary>
		/// _CAN_PED_B* - _CAN_PED_I*
		/// </summary>
		public static float _0x0EA9EACBA3B01601(int ped1, int ped2, bool p2) => Function.Call<float>(0x0EA9EACBA3B01601, ped1, ped2, p2);
		/// <summary>
		/// no bone = -1
		/// </summary>
		public static int GET_PED_BONE_INDEX(int ped, int boneId) => Function.Call<int>(0x3F428D08BE5AAE31, ped, boneId);
		/// <summary>
		/// Returns boneIndex
		/// _GET_PED_N* - _GET_PED_R*
		/// </summary>
		public static int _0xC5303F460A40D21D(int ped, int p1) => Function.Call<int>(0xC5303F460A40D21D, ped, p1);
		/// <summary>
		/// _SET_PED_R* -_SET_PED_S*
		/// </summary>
		public static void _0xE29D8CD66553DBAA(int horse) => Function.Call(0xE29D8CD66553DBAA, horse);
		public static void _0xB06F5F1DEF417216(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xB06F5F1DEF417216, p0, p1, p2, p3);
		public static void _0xFC23348F0F4E245F(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xFC23348F0F4E245F, p0, p1, p2, p3);
		public static void _0x9184788BFF1EDAD7(Any p0, Any p1) => Function.Call(0x9184788BFF1EDAD7, p0, p1);
		/// <summary>
		/// Params: ped, 0f, -1, true, true in R* MP Scripts
		/// _SET_PED_DE* - _SET_PED_F*
		/// </summary>
		public static void _SET_PED_DIRT_CLEANED(int ped, float p1, int p2, bool p3, bool p4) => Function.Call(0xE3144B932DFDFF65, ped, p1, p2, p3, p4);
		public static Any _0x0105FEE8F9091255(Any p0, Any p1) => Function.Call<Any>(0x0105FEE8F9091255, p0, p1);
		public static void _0xD049920CD29F6CC8(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xD049920CD29F6CC8, p0, p1, p2, p3, p4);
		public static Any _0xBB3E5370EBB6BE28(Any p0, Any p1) => Function.Call<Any>(0xBB3E5370EBB6BE28, p0, p1);
		public static void _0x2FA568BFA725F8D6(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x2FA568BFA725F8D6, p0, p1, p2, p3);
		public static Any _0x56E4BAD93D33453C(Any p0, Any p1) => Function.Call<Any>(0x56E4BAD93D33453C, p0, p1);
		public static void _0x75A082563B4452E5(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x75A082563B4452E5, p0, p1, p2, p3);
		public static void _0x16802C32B2FCA06B(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x16802C32B2FCA06B, p0, p1, p2, p3);
		public static void _0x8BA0C65AC15A7D33(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x8BA0C65AC15A7D33, p0, p1, p2, p3);
		public static void _0x0FFDF937E5C11382(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x0FFDF937E5C11382, p0, p1, p2, p3, p4, p5);
		public static void _0x5FCF25D584065BFD(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x5FCF25D584065BFD, p0, p1, p2, p3);
		/// <summary>
		/// _SET_PED_*
		/// </summary>
		public static void _0xA2116C1E4ED85C24(int ped, bool inverted) => Function.Call(0xA2116C1E4ED85C24, ped, inverted);
		/// <summary>
		/// motionStateHash: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/FORCE_PED_MOTION_STATE
		/// </summary>
		public static bool FORCE_PED_MOTION_STATE(int ped, uint motionStateHash, bool p2, int p3, bool p4) => Function.Call<bool>(0xF28965D04F570DCA, ped, motionStateHash, p2, p3, p4);
		public static void _0x75D3333409CD33CE(Any p0, Any p1, Any p2) => Function.Call(0x75D3333409CD33CE, p0, p1, p2);
		/// <summary>
		/// Old name: _GET_PED_CURRENT_MOVEMENT_SPEED
		/// </summary>
		public static bool GET_PED_CURRENT_MOVE_BLEND_RATIO(int ped, float* speedX, float* speedY) => Function.Call<bool>(0xF60165E1D2C5370B, ped, speedX, speedY);
		public static void SET_PED_MAX_MOVE_BLEND_RATIO(int ped, float value) => Function.Call(0x433083750C5E064A, ped, value);
		public static void SET_PED_MIN_MOVE_BLEND_RATIO(int ped, float value) => Function.Call(0x01A898D26E2333DD, ped, value);
		public static void _0xBC1DC48270468444(Any p0) => Function.Call(0xBC1DC48270468444, p0);
		/// <summary>
		/// Returns vehicle (desired) speed
		/// _COMPUTE_(VEHICLE_SPEED_USING_BLEND_RATIO?)*
		/// </summary>
		public static float _0x46BF2A810679D6E6(int ped, float maxMoveBlendRatio) => Function.Call<float>(0x46BF2A810679D6E6, ped, maxMoveBlendRatio);
		/// <summary>
		/// Returns vehicle speed
		/// _COMPUTE_*
		/// </summary>
		public static float _0xCA95924C893A0C91(int ped, float p1) => Function.Call<float>(0xCA95924C893A0C91, ped, p1);
		/// <summary>
		/// _H* - _I*
		/// </summary>
		public static void _HORSE_AGITATE(int mount, bool kickOffRider) => Function.Call(0xBAE08F00021BFFB2, mount, kickOffRider);
		public static void _0x413697EC260AABBF(Any p0, Any p1, Any p2) => Function.Call(0x413697EC260AABBF, p0, p1, p2);
		public static void _0xCAC43D060099EA72(int ped) => Function.Call(0xCAC43D060099EA72, ped);
		public static void _0xC9151483CC06A414(int ped) => Function.Call(0xC9151483CC06A414, ped);
		public static void _0xAD3330E3C3E98007(Any p0, Any p1) => Function.Call(0xAD3330E3C3E98007, p0, p1);
		public static Any _0xB8E2D655E1D5BD39(Any p0) => Function.Call<Any>(0xB8E2D655E1D5BD39, p0);
		public static Any _0x7BB810E8B343AC7B(Any p0) => Function.Call<Any>(0x7BB810E8B343AC7B, p0);
		/// <summary>
		/// Min: 0.0f
		/// Max: 1.15f
		/// </summary>
		public static void SET_PED_MOVE_RATE_OVERRIDE(int ped, float value) => Function.Call(0x085BF80FA50A39D1, ped, value);
		public static int GET_PED_NEARBY_VEHICLES(int ped, Any* sizeAndVehs) => Function.Call<int>(0xCFF869CBFA210D82, ped, sizeAndVehs);
		public static int GET_PED_NEARBY_PEDS(int ped, Any* sizeAndPeds, int ignoredPedType, int p3) => Function.Call<int>(0x23F8F5FC7E8C4A6B, ped, sizeAndPeds, ignoredPedType, p3);
		public static bool IS_PED_READY_TO_RENDER(int ped) => Function.Call<bool>(0xA0BC8FAED8CFEB3C, ped);
		public static void _0x6A489892E813951A(Any p0) => Function.Call(0x6A489892E813951A, p0);
		public static bool IS_PED_USING_ACTION_MODE(int ped) => Function.Call<bool>(0x00E73468D085F745, ped);
		public static bool _IS_PED_USING_ACTION_MODE_2(int ped) => Function.Call<bool>(0xEBB208D6AE712C03, ped);
		public static void SET_PED_USING_ACTION_MODE(int ped, bool bActionModeEnabled, int p2, string action) => Function.Call(0xD75ACCF5E0FB5367, ped, bActionModeEnabled, p2, action);
		/// <summary>
		/// Overrides the ped's collision capsule radius for the current tick.
		/// Must be called every tick to be effective.
		/// 
		/// Setting this to 0.001 will allow warping through some objects.
		/// </summary>
		public static void SET_PED_CAPSULE(int ped, float value) => Function.Call(0x364DF566EC833DE2, ped, value);
		public static int _GET_RIDER_OF_MOUNT(int mount, bool p1) => Function.Call<int>(0xB676EFDA03DADA52, mount, p1);
		/// <summary>
		/// Params: p4 = 35.f, duration = 5000 in R* Scripts
		/// </summary>
		public static void SPAWNPOINTS_START_SEARCH(float x, float y, float z, float width, float p4, int spawnpointsFlag, float p6, int duration, float p8) => Function.Call(0x2DF9038C90AD5264, x, y, z, width, p4, spawnpointsFlag, p6, duration, p8);
		public static void SPAWNPOINTS_START_SEARCH(Vector3 vec, float width, float p4, int spawnpointsFlag, float p6, int duration, float p8) => Function.Call(0x2DF9038C90AD5264, vec.X, vec.Y, vec.Z, width, p4, spawnpointsFlag, p6, duration, p8);
		/// <summary>
		/// Searching area between coords 1 and 2
		/// </summary>
		public static void SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, int spawnpointsFlag, float p8, int duration, float p10) => Function.Call(0xB2AFF10216DEFA2F, x1, y1, z1, x2, y2, z2, width, spawnpointsFlag, p8, duration, p10);
		public static void SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(Vector3 vec1, Vector3 vec2, float width, int spawnpointsFlag, float p8, int duration, float p10) => Function.Call(0xB2AFF10216DEFA2F, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, width, spawnpointsFlag, p8, duration, p10);
		public static void _SPAWNPOINTS_START_SEARCH_WITH_VOLUME(int volume, int spawnpointsFlag, float p2, int duration, float p4) => Function.Call(0x83ED1FC9DF3411F5, volume, spawnpointsFlag, p2, duration, p4);
		public static void SPAWNPOINTS_CANCEL_SEARCH() => Function.Call(0xFEE4A5459472A9F8);
		public static bool SPAWNPOINTS_IS_SEARCH_ACTIVE() => Function.Call<bool>(0x3C67506996001F5E);
		public static bool SPAWNPOINTS_IS_SEARCH_COMPLETE() => Function.Call<bool>(0xA586FBEB32A53DBB);
		public static bool SPAWNPOINTS_IS_SEARCH_FAILED() => Function.Call<bool>(0xF445DE8DA80A1792);
		public static int SPAWNPOINTS_GET_NUM_SEARCH_RESULTS() => Function.Call<int>(0xA635C11B8C44AFC2);
		public static void SPAWNPOINTS_GET_SEARCH_RESULT(int randomInt, float* x, Any* y, float* z) => Function.Call(0x280C7E3AC7F56E90, randomInt, x, y, z);
		public static void SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(Any p0, Any* p1) => Function.Call(0xB782F8238512BAD5, p0, p1);
		public static void SET_IK_TARGET(int ped, int ikIndex, int entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration) => Function.Call(0xC32779C16FCEECD9, ped, ikIndex, entityLookAt, boneLookAt, offsetX, offsetY, offsetZ, p7, blendInDuration, blendOutDuration);
		public static void SET_IK_TARGET(int ped, int ikIndex, int entityLookAt, int boneLookAt, Vector3 offset, Any p7, int blendInDuration, int blendOutDuration) => Function.Call(0xC32779C16FCEECD9, ped, ikIndex, entityLookAt, boneLookAt, offset.X, offset.Y, offset.Z, p7, blendInDuration, blendOutDuration);
		/// <summary>
		/// For more information, see common:/data/emotional_presets.meta
		/// </summary>
		public static void _REQUEST_PED_EMOTIONAL_PRESET(int ped, string name) => Function.Call(0x5C3C55EAAD19915F, ped, name);
		/// <summary>
		/// See _REQUEST_PED_EMOTIONAL_PRESET
		/// </summary>
		public static bool _HAS_PED_EMOTIONAL_PRESET_LOADED(int ped, string name) => Function.Call<bool>(0xDE3904B22695D9F9, ped, name);
		/// <summary>
		/// See _REQUEST_PED_EMOTIONAL_PRESET
		/// </summary>
		public static void _REMOVE_PED_EMOTIONAL_PRESET(int ped, string name) => Function.Call(0xFC3BAB1801A8255A, ped, name);
		public static void _REQUEST_MOTION_TYPE_ASSET(uint nameHash, int ped) => Function.Call(0xF7EA250B9A919E03, nameHash, ped);
		public static bool HAS_MOTION_TYPE_ASSET_LOADED(uint nameHash, int ped) => Function.Call<bool>(0x854BC9B1A1CCD034, nameHash, ped);
		public static void _REMOVE_MOTION_TYPE_ASSET(uint nameHash, int ped) => Function.Call(0xDE7B2B4144906CDF, nameHash, ped);
		/// <summary>
		/// _IS_PED_L* - _IS_PED_M*
		/// </summary>
		public static bool _0x290B2E6CCDE532E1(int ped) => Function.Call<bool>(0x290B2E6CCDE532E1, ped);
		/// <summary>
		/// _IS_PED_L* - _IS_PED_M*
		/// </summary>
		public static bool _0x0EEF7A81C17679DB(int ped) => Function.Call<bool>(0x0EEF7A81C17679DB, ped);
		public static void SET_PED_LOD_MULTIPLIER(int ped, float multiplier) => Function.Call(0xDC2C5C242AAC342B, ped, multiplier);
		public static float _GET_PED_LOD_MULTIPLIER(int ped) => Function.Call<float>(0x1B710E6F4AB69341, ped);
		public static Any _0xA218D2BBCAA7388C(Any p0, Any p1) => Function.Call<Any>(0xA218D2BBCAA7388C, p0, p1);
		public static bool IS_ANY_HOSTILE_PED_NEAR_POINT(int ped, float x, float y, float z, float radius) => Function.Call<bool>(0x68772DB2B2526F9F, ped, x, y, z, radius);
		public static bool IS_ANY_HOSTILE_PED_NEAR_POINT(int ped, Vector3 vec, float radius) => Function.Call<bool>(0x68772DB2B2526F9F, ped, vec.X, vec.Y, vec.Z, radius);
		public static void _0xCBDE59C48F2B06F5(Any p0, Any p1, Any p2) => Function.Call(0xCBDE59C48F2B06F5, p0, p1, p2);
		public static void _0x6A190B94C2541A99(Any p0) => Function.Call(0x6A190B94C2541A99, p0);
		/// <summary>
		/// Returns true if ped is in perception (focused and looking at target ped)
		/// Most float params are -1.f in R* Scripts
		/// </summary>
		public static bool IS_TARGET_PED_IN_PERCEPTION_AREA(int ped, int targetPed, float p2, float customDistance, float p4, float p5) => Function.Call<bool>(0x06087579E7AA85A9, ped, targetPed, p2, customDistance, p4, p5);
		public static void SET_POP_CONTROL_SPHERE_THIS_FRAME(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xD8C3BE3EE94CAF2D, p0, p1, p2, p3, p4);
		public static bool IS_PED_HOGTIED(int ped) => Function.Call<bool>(0x3AA24CCC0D451379, ped);
		public static bool IS_PED_BEING_HOGTIED(int ped) => Function.Call<bool>(0xD453BB601D4A606E, ped);
		public static int _0x3D9F958834AB9C30(int ped) => Function.Call<int>(0x3D9F958834AB9C30, ped);
		/// <summary>
		/// _IS_PED_S* - _IS_PED_U*
		/// </summary>
		public static bool _0x913D04A5176F84C9(int ped) => Function.Call<bool>(0x913D04A5176F84C9, ped);
		public static bool IS_PED_HOGTYING(int ped) => Function.Call<bool>(0x42429C674B61238B, ped);
		/// <summary>
		/// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/Lasso%20Hogtie%20Flags
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/LASSO_HOGTIE_FLAG
		/// </summary>
		public static bool _GET_PED_LASSO_HOGTIE_FLAG(int ped, int flagId) => Function.Call<bool>(0x2C76FA0E01681F8D, ped, flagId);
		public static void SET_PED_LASSO_HOGTIE_FLAG(int ped, int flagId, bool value) => Function.Call(0xAE6004120C18DF97, ped, flagId, value);
		public static Any _0x4642182A298187D0(int ped, int p1, Any* p2, int p3, int p4) => Function.Call<Any>(0x4642182A298187D0, ped, p1, p2, p3, p4);
		public static void _0x6B67320E0D57856A(int ped, Any* p1, int p2, bool p3) => Function.Call(0x6B67320E0D57856A, ped, p1, p2, p3);
		public static int _GET_FIRST_ENTITY_PED_IS_CARRYING(int ped) => Function.Call<int>(0xD806CD2A4F2C2996, ped);
		public static void _0xAA6C49AE90A32299(int ped, uint p1) => Function.Call(0xAA6C49AE90A32299, ped, p1);
		public static int _GET_CARRIER_AS_PED(int entity) => Function.Call<int>(0x09B83E68DE004CD4, entity);
		public static int _GET_CARRIER_AS_MOUNT(int entity) => Function.Call<int>(0xA033D7E4BBF9844D, entity);
		public static int _GET_CARRIER_AS_HUMAN(int entity) => Function.Call<int>(0x79443D56C8DF45EE, entity);
		public static Any GET_CARRIED_ATTACHED_INFO_FOR_SLOT(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x608BC6A6AACD5036, p0, p1, p2, p3);
		public static void DETACH_CARRIABLE_ENTITY(int entity, bool p1, bool p2) => Function.Call(0xED00D72F81CF7278, entity, p1, p2);
		public static void FIND_ALL_ATTACHED_CARRIABLE_ENTITIES(int ped, int itemset) => Function.Call(0xB5ACE8B23A438EC0, ped, itemset);
		public static bool IS_PED_CARRYING_SOMETHING(int ped) => Function.Call<bool>(0xA911EE21EDF69DAF, ped);
		public static bool _0xB65927F861E7AE39(int ped, int p1) => Function.Call<bool>(0xB65927F861E7AE39, ped, p1);
		public static bool _0xA1FBAC56D38563E2(int volume) => Function.Call<bool>(0xA1FBAC56D38563E2, volume);
		public static Any _0x6F43C351A5D51E2F(int ped, Any* p1) => Function.Call<Any>(0x6F43C351A5D51E2F, ped, p1);
		public static bool IS_PED_LASSOED(int ped) => Function.Call<bool>(0x9682F850056C9ADE, ped);
		/// <summary>
		/// _IS_PED_S* - _IS_PED_U*
		/// </summary>
		public static int _GET_LASSOER_OF_PED(int ped) => Function.Call<int>(0x833F0053340EF413, ped);
		public static int _GET_LASSO_TARGET(int ped) => Function.Call<int>(0xB65A4DAB460A19BD, ped);
		public static int _GET_LASSOED_LASSOER(int ped) => Function.Call<int>(0x0C31C51168E80365, ped);
		/// <summary>
		/// https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CLootingFlags__Flags
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/LOOTING_FLAGS
		/// 
		/// lootFlag:
		/// enum eLootFlag
		/// {
		/// 	LOOT_FLAG_IS_CRITICAL_LOOT_TARGET = 7,
		/// 	LOOT_FLAG_IGNORE_WATER_CHECKS = 8,
		/// 	LOOT_FLAG_ANIMAL_FLAGGED_FOR_TAGGING = 23,
		/// };
		/// </summary>
		public static void SET_LOOTING_FLAG(int ped, int lootFlag, bool enabled) => Function.Call(0x6569F31A01B4C097, ped, lootFlag, enabled);
		/// <summary>
		/// lootFlag: see SET_LOOTING_FLAG
		/// </summary>
		public static bool _GET_LOOTING_FLAG(int ped, int lootFlag) => Function.Call<bool>(0xE4C11F104620DDCE, ped, lootFlag);
		/// <summary>
		/// Returns loot state
		/// enum eLootState
		/// {
		/// 	LAP_NONE,
		/// 	LAP_RESUMING,
		/// 	LAP_GETTING_ON_FOOT,
		/// 	LAP_DISTANT_NAV,
		/// 	LAP_CHOOSING_ACTION,
		/// 	LAP_APPROACHING,
		/// 	LAP_ENTERING,
		/// 	LAP_LOOTING,
		/// 	LAP_EXITING
		/// };
		/// 
		/// _POSSE_* - _REGISTER_HATED*
		/// </summary>
		public static int _REFRESH_LOOT_STATE_FOR_PED(int ped, int p1, int* lootTarget, int p3, int p4) => Function.Call<int>(0x5463C962BC7777C3, ped, p1, lootTarget, p3, p4);
		/// <summary>
		/// enum ePedLootStatus
		/// {
		/// 	PLS_NONE,
		/// 	PLS_PRE_LOOT,
		/// 	PLS_SAMPLING,
		/// 	PLS_SKINNING
		/// };
		/// </summary>
		public static int GET_PED_LOOT_STATUS_MP(int ped) => Function.Call<int>(0xC737697C41628340, ped);
		public static int _0x4B19F171450E0D4F(int ped) => Function.Call<int>(0x4B19F171450E0D4F, ped);
		public static bool _0x758F081DB204DDDE(int ped) => Function.Call<bool>(0x758F081DB204DDDE, ped);
		public static int GET_LOOTING_PICKUP_TARGET_ENTITY(int ped) => Function.Call<int>(0x14169FA823679E41, ped);
		public static Any _0x7B5C293238EE4F20(Any p0) => Function.Call<Any>(0x7B5C293238EE4F20, p0);
		public static void _0xAE6B68A83ABBE7C0(Any p0) => Function.Call(0xAE6B68A83ABBE7C0, p0);
		public static bool _0xA4B6432E3880F2F9(int ped) => Function.Call<bool>(0xA4B6432E3880F2F9, ped);
		public static bool _ADD_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS(int ped) => Function.Call<bool>(0xE37287EE358939C3, ped);
		public static bool _REMOVE_PED_SUBSCRIBE_TO_LEGENDARY_BLIPS(int ped) => Function.Call<bool>(0x011A42FD923D41CA, ped);
		public static bool IS_PED_INCAPACITATED(int ped) => Function.Call<bool>(0xB655DB7582AEC805, ped);
		public static void _SET_PED_INCAPACITATION_MODIFIERS(int ped, bool canBeIncapacitated, int threshold, int bleedoutTime, int p4) => Function.Call(0x39ED303390DDEAC7, ped, canBeIncapacitated, threshold, bleedoutTime, p4);
		public static bool _GET_PED_CAN_BE_INCAPACITATED_THIS_FRAME(int ped) => Function.Call<bool>(0x7A4E00364B5D727B, ped);
		/// <summary>
		/// When set on a player ped, its just like when you die in RDO
		/// </summary>
		public static void SET_PED_CAN_BE_INCAPACITATED(int ped, bool toggle) => Function.Call(0x5240864E847C691C, ped, toggle);
		public static int _GET_PED_INCAPACITATION_HEALTH(int ped) => Function.Call<int>(0x89BFDF6D53145545, ped);
		public static void _SET_PED_INCAPACITATION_TOTAL_BLEED_OUT_DURATION(int ped, float duration) => Function.Call(0x2890418B39BC8FFF, ped, duration);
		public static void _RESET_PED_INCAPACITATION_BLEED_OUT_DURATION(int ped) => Function.Call(0x4B9668DB91DC39B8, ped);
		public static void _SET_PED_INCAPACITATION_FLAGS(int ped, int flags) => Function.Call(0xD67B6F3BCF81BA47, ped, flags);
		public static void _0x92A1B55A59720395(Any p0, Any p1) => Function.Call(0x92A1B55A59720395, p0, p1);
		public static void _INCAPACITATED_REVIVE(int ped, int ped2) => Function.Call(0xF6262491C7704A63, ped, ped2);
		public static int _GET_INCAPACITATION_TIME_REMAINING(int ped) => Function.Call<int>(0x88D9D76D78065487, ped);
		public static void _SET_PED_KNOCKED_BY_ONE_HIT(int ped, float p1) => Function.Call(0x5BCF0B79D4F5DBA3, ped, p1);
		public static void _0x2E5B5D1F1453E08E(int ped, int p1) => Function.Call(0x2E5B5D1F1453E08E, ped, p1);
		/// <summary>
		/// _SET_PED_K* or _SET_PED_L*
		/// </summary>
		public static void _0x29924EB8EE9DB926(int ped, float p1) => Function.Call(0x29924EB8EE9DB926, ped, p1);
		/// <summary>
		/// Params: hash - ARTHUR or JOHN
		/// _SET_PED_(A-D)*
		/// </summary>
		public static void _0xB285AD0EC870B2DF(int ped, uint hash) => Function.Call(0xB285AD0EC870B2DF, ped, hash);
		public static Any _0xCB86D3E3E3708901(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0xCB86D3E3E3708901, p0, p1, p2, p3, p4);
		public static void _0x633F83B301C87994(Any p0, Any p1) => Function.Call(0x633F83B301C87994, p0, p1);
		public static bool _0x5203038FF8BAE577(int ped, int p1, int p2) => Function.Call<bool>(0x5203038FF8BAE577, ped, p1, p2);
		public static bool _0x7F090958AE95B61B(int ped, int p1) => Function.Call<bool>(0x7F090958AE95B61B, ped, p1);
		/// <summary>
		/// [WARDROBE] Player took off their disguise: p1 = 13
		/// [WARDROBE] Player put on a disguise: p1 = 0
		/// </summary>
		public static void _0xC494C76A34266E82(int ped, int p1) => Function.Call(0xC494C76A34266E82, ped, p1);
		/// <summary>
		/// _GET_PED_G* - _GET_PED_I*
		/// </summary>
		public static bool _0xC3995D396F1D97B6(int ped, int p1, int p2) => Function.Call<bool>(0xC3995D396F1D97B6, ped, p1, p2);
		public static void _0x15F4732C357B1D6D(Any p0, Any p1, Any p2) => Function.Call(0x15F4732C357B1D6D, p0, p1, p2);
		/// <summary>
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/0x947E43F544B6AB34
		/// _GET_PED_G* - _GET_PED_I(NTERACTION?)*
		/// </summary>
		public static bool _0x947E43F544B6AB34(int ped, int player, int flag, int ms) => Function.Call<bool>(0x947E43F544B6AB34, ped, player, flag, ms);
		public static Any _0x32417CB860A3BDC4(Any p0, Any p1) => Function.Call<Any>(0x32417CB860A3BDC4, p0, p1);
		/// <summary>
		/// Only used in R* Script nb_animal_attack: p2 = 120000
		/// _SET_PED_SH* - _SET_PED_SP*
		/// </summary>
		public static void _0xE737D5F14304A2EC(int ped, int player, int p2) => Function.Call(0xE737D5F14304A2EC, ped, player, p2);
		public static void _0xEBD49472BCCF7642(Any p0, Any p1) => Function.Call(0xEBD49472BCCF7642, p0, p1);
		public static void _SET_PLAYER_GREET_DISABLED_FOR_PED(int ped, int player, int duration) => Function.Call(0x19173C3F15367B54, ped, player, duration);
		public static void _SET_PLAYER_ANTAGONIZE_DISABLED_FOR_PED(int ped, int player, int duration) => Function.Call(0x5708EDD71B50C008, ped, player, duration);
		public static void _0xB9BDFAE609DFB7C5(Any p0, Any p1, Any p2) => Function.Call(0xB9BDFAE609DFB7C5, p0, p1, p2);
		public static Any _0xF7327ACC7A89AEF1(Any p0, Any p1, Any p2) => Function.Call<Any>(0xF7327ACC7A89AEF1, p0, p1, p2);
		/// <summary>
		/// AI_ATTITUDE_NEUTRAL = 0,
		/// AI_ATTITUDE_FRIENDLY,
		/// AI_ATTITUDE_WARY,
		/// AI_ATTITUDE_COMBATIVE,
		/// AI_ATTITUDE_NEVER_MET
		/// </summary>
		public static int _GET_PED_ATTITUDE(int ped, int player) => Function.Call<int>(0x7CC2186C32D3540A, ped, player);
		public static bool _0x1E017404784AA6A3(int ped, uint p1) => Function.Call<bool>(0x1E017404784AA6A3, ped, p1);
		public static void _0x2B4CE170DE09F346(Any p0, Any p1) => Function.Call(0x2B4CE170DE09F346, p0, p1);
		public static Any _0x7C8AA850617651D9(Any p0, Any p1) => Function.Call<Any>(0x7C8AA850617651D9, p0, p1);
		/// <summary>
		/// If targetPed is set to 0 the ped motivationState affects everyone
		/// </summary>
		public static float _GET_PED_MOTIVATION(int ped, int motivationState, int targetPed) => Function.Call<float>(0x42688E94E96FD9B4, ped, motivationState, targetPed);
		/// <summary>
		/// enum eMotivationState
		/// {
		/// 	TOILET_STATE,
		/// 	FEAR_STATE,
		/// 	ANGRY_STATE,
		/// 	AGITATION_STATE,
		/// 	HUNGRY_STATE,
		/// 	TIRED_STATE,
		/// 	SAD_STATE,
		/// 	BRAVE_STATE,
		/// 	OFFER_ITEM_STATE,
		/// 	SUSPICION,
		/// 	DRUNK_STATE
		/// };
		/// 
		/// If targetPed is set to 0 the ped motivationState affects everyone
		/// </summary>
		public static void _SET_PED_MOTIVATION(int ped, int motivationState, float threshold, int targetPed) => Function.Call(0x06D26A96CA1BCA75, ped, motivationState, threshold, targetPed);
		public static void _0x23BDE06596A22CEC(int ped, int p1, float p2, Any p3) => Function.Call(0x23BDE06596A22CEC, ped, p1, p2, p3);
		public static void _0xCDFB8C04D4C95D9B(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xCDFB8C04D4C95D9B, p0, p1, p2, p3);
		/// <summary>
		/// motivationState: see _SET_PED_MOTIVATION
		/// </summary>
		public static bool _GET_IS_PED_MOTIVATION_STATE_ENABLED(int ped, int motivationState) => Function.Call<bool>(0x33FA048675821DA7, ped, motivationState);
		/// <summary>
		/// motivationState: see _SET_PED_MOTIVATION
		/// </summary>
		public static void _SET_PED_MOTIVATION_STATE_OVERRIDE(int ped, int motivationState, bool enabled) => Function.Call(0x2EB75FB86C41F026, ped, motivationState, enabled);
		/// <summary>
		/// The higher the modifier, the slower the motivationState value will decrease
		/// </summary>
		public static void _SET_PED_MOTIVATION_MODIFIER(int ped, int motivationState, float modifier) => Function.Call(0xA1EB5D029E0191D3, ped, motivationState, modifier);
		public static void _0xFD8E853F0BC2E942(Any p0, Any p1) => Function.Call(0xFD8E853F0BC2E942, p0, p1);
		/// <summary>
		/// 0.0 - 1.0
		/// Modifies the "scent line" on the ped's body when using Eagle Eye.
		/// </summary>
		public static void _SET_PED_SCENT(int ped, float scent) => Function.Call(0x01B21B81865E2A1F, ped, scent);
		public static void _SET_PED_LADDER_MOVEMENT_SPEED_MODIFIER(int ped, float p1) => Function.Call(0x05CE6AF4DF071D23, ped, p1);
		public static void _RESET_PED_LADDER_MOVEMENT_SPEED_MODIFIER(int ped) => Function.Call(0x801917E7D7BCE418, ped);
		public static void _0xC6C4E15CF7D52FEA(Any p0, Any p1) => Function.Call(0xC6C4E15CF7D52FEA, p0, p1);
		/// <summary>
		/// _SET_PED_S* - _SET_PED_T*
		/// </summary>
		public static void _SET_PED_VOICE_VOLUME(int ped, float volume) => Function.Call(0xD05AD61F242C626B, ped, volume);
		public static void _0x0F967019CC853BCC(Any p0, Any p1) => Function.Call(0x0F967019CC853BCC, p0, p1);
		public static bool _IS_PED_DRAGGING(int ped) => Function.Call<bool>(0x226CF9B159E38F42, ped);
		public static bool IS_PED_BEING_DRAGGED(int ped) => Function.Call<bool>(0xEF3A8772F085B4AA, ped);
		public static void _0x070A3841406C43D5(Any p0, Any p1) => Function.Call(0x070A3841406C43D5, p0, p1);
		public static bool _ADD_PED_STAY_OUT_VOLUME(int ped, int volume) => Function.Call<bool>(0xE9B168527B337BF0, ped, volume);
		public static bool _REMOVE_PED_STAY_OUT_VOLUME(int ped, int volume) => Function.Call<bool>(0x0CAB404CD2DB41F5, ped, volume);
		public static void _0x9E66708B2B41F14A(Any p0, Any p1) => Function.Call(0x9E66708B2B41F14A, p0, p1);
		public static void _0xF634E2892220EF34(int ped, Any p1) => Function.Call(0xF634E2892220EF34, ped, p1);
		public static void _0xAAC0EE3B4999ABB5(int ped, int targetPed) => Function.Call(0xAAC0EE3B4999ABB5, ped, targetPed);
		public static int GET_PED_MOTION_FOCUS_ENTITY(int ped) => Function.Call<int>(0x243E1B4607040057, ped);
		/// <summary>
		/// Note: You have to update the ped's variation (using 0xCC8CA3E88256E58F) after calling this native
		/// 
		/// index = Ped expression ID's / face features
		/// List of face features: https://pastebin.com/9jb88FXW
		/// value: -1.0 to 1.0
		/// 
		/// This native also allows you to change a horse's gender.
		/// </summary>
		public static void _SET_PED_FACE_FEATURE(int ped, int index, float value) => Function.Call(0x5653AB26C82938CF, ped, index, value);
		public static float _GET_PED_FACE_FEATURE(int ped, int index) => Function.Call<float>(0xFD1BA1EEF7985BB8, ped, index);
		public static void _0x5BB04BC74A474B47(Any p0, Any p1) => Function.Call(0x5BB04BC74A474B47, p0, p1);
		public static void _0x9078FB0557364099(Any p0) => Function.Call(0x9078FB0557364099, p0);
		public static bool IS_PED_FALLING_OVER(int ped) => Function.Call<bool>(0x3E592D0486DEC0F6, ped);
		public static bool _HAS_PED_BEEN_SHOVED_RECENTLY(int ped, int ms) => Function.Call<bool>(0x29FCE825613FEFCA, ped, ms);
		public static int _GET_PED_TRANQUILIZER(int ped) => Function.Call<int>(0x65C75FDCCAC86464, ped);
		public static void _0x0D497AA69059FE40(Any p0, Any p1) => Function.Call(0x0D497AA69059FE40, p0, p1);
		public static void _0xD7D2F45C56A4F4DF(Any p0, Any p1, Any p2) => Function.Call(0xD7D2F45C56A4F4DF, p0, p1, p2);
		/// <summary>
		/// The higher the multiplier the less the engine renders culls (https://docs.unity3d.com/Manual/OcclusionCulling.html)
		/// </summary>
		public static void _SET_PED_CULL_RANGE(int ped, float p1, float p2) => Function.Call(0x8AC1D721B2097B6E, ped, p1, p2);
		public static void _0x1D23D3F70606D788(Any p0, Any p1) => Function.Call(0x1D23D3F70606D788, p0, p1);
		/// <summary>
		/// enum eMetaPedType
		/// {
		/// 	MPT_MALE,
		/// 	MPT_FEMALE,
		/// 	MPT_TEEN,
		/// 	MPT_ANIMAL,
		/// 	MPT_NONE
		/// };
		/// </summary>
		public static int _GET_META_PED_TYPE(int ped) => Function.Call<int>(0xEC9A1261BF0CE510, ped);
		public static bool _IS_METAPED_USING_COMPONENT(int ped, uint component) => Function.Call<bool>(0xFB4891BD7578CDC1, ped, component);
		/// <summary>
		/// _IS_PED_M* - _IS_PED_O*
		/// </summary>
		public static bool _0xBD0E4F52F6D95242(int ped) => Function.Call<bool>(0xBD0E4F52F6D95242, ped);
		public static bool _IS_PED_CHILD(int ped) => Function.Call<bool>(0x137772000DAF42C5, ped);
		public static void _0xFFA1594703ED27CA(int ped, int p1) => Function.Call(0xFFA1594703ED27CA, ped, p1);
		/// <summary>
		/// Use to apply metaped player components
		/// Replaces asset, alternatively you can remove assets using REMOVE_TAG_FROM_META_PED
		/// </summary>
		public static void _SET_META_PED_TAG(int ped, uint drawable, uint albedo, uint normal, uint material, uint palette, int tint0, int tint1, int tint2) => Function.Call(0xBC6DF00D7A4A6819, ped, drawable, albedo, normal, material, palette, tint0, tint1, tint2);
		public static void REMOVE_TAG_FROM_META_PED(int ped, uint component, int p2) => Function.Call(0xD710A5007C2AC539, ped, component, p2);
		public static void _0xA2B8E47442C76CEC(Any p0, Any p1) => Function.Call(0xA2B8E47442C76CEC, p0, p1);
		/// <summary>
		/// Works similar to 0x90403E8107B60E81 (_GET_NUM_COMPONENTS_IN_PED) but is used to get category hashes instead
		/// </summary>
		public static int _GET_NUM_COMPONENT_CATEGORIES_IN_PED(int ped) => Function.Call<int>(0xA622E66EEE92A08D, ped);
		/// <summary>
		/// Returns category hash that each ped component has. Hash examples: MASKS, HATS, HEADS, HORSE_MANES
		/// </summary>
		public static uint _GET_PED_COMPONENT_CATEGORY_BY_INDEX(int ped, int index) => Function.Call<uint>(0xCCB97B51893C662F, ped, index);
		public static int _GET_NUM_COMPONENTS_IN_PED(int ped) => Function.Call<int>(0x90403E8107B60E81, ped);
		public static Any _0x9B90842304C938A7(Any p0, Any p1, Any p2) => Function.Call<Any>(0x9B90842304C938A7, p0, p1, p2);
		/// <summary>
		/// Update variation on ped, needed after first creation, or when component or texture/overlay is changed
		/// </summary>
		public static void _UPDATE_PED_VARIATION(int ped, bool p1, bool p2, bool p3, bool p4, bool p5) => Function.Call(0xCC8CA3E88256E58F, ped, p1, p2, p3, p4, p5);
		public static void _0xCB1A3864C524F784(Any p0, Any p1) => Function.Call(0xCB1A3864C524F784, p0, p1);
		public static void _0xFA0D206B489A6846(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xFA0D206B489A6846, p0, p1, p2, p3, p4);
		public static Any _0xA4AC05B1A364EBC5(Any p0, Any p1, Any p2) => Function.Call<Any>(0xA4AC05B1A364EBC5, p0, p1, p2);
		public static void _0x1298B3D8E4C2409F(Any p0) => Function.Call(0x1298B3D8E4C2409F, p0);
		public static Any _0xA274F51EF7E34B95(Any p0, Any p1) => Function.Call<Any>(0xA274F51EF7E34B95, p0, p1);
		public static Any _0xC2EF407645BEECDC(Any p0) => Function.Call<Any>(0xC2EF407645BEECDC, p0);
		/// <summary>
		/// Note: you have to update your ped's variation after calling (using 0xCC8CA3E88256E58F)
		/// 
		/// Body Types:
		/// MPCREATOR_NEUTRAL
		/// MPCREATOR_SKINNY
		/// MPCREATOR_SKINNY_MUSCULAR
		/// MPCREATOR_HEAVY
		/// MPCREATOR_HEAVY_MUSCULAR
		/// 
		/// eBodyWeightOutfit (pedattributes.ymt):
		/// -2045421226 (smallest)
		/// -1745814259
		/// -325933489
		/// -1065791927
		/// -844699484
		/// -1273449080
		/// 927185840
		/// 149872391
		/// 399015098
		/// -644349862
		/// 1745919061 (default)
		/// 1004225511
		/// 1278600348
		/// 502499352
		/// -2093198664
		/// -1837436619
		/// 1736416063
		/// 2040610690
		/// -1173634986
		/// -867801909
		/// 1960266524 (biggest)
		/// 
		/// https://github.com/femga/rdr3_discoveries/blob/master/peds_customization/ped_outfits.lua
		/// 
		/// Alt name: _EQUIP_META_PED_OUTFIT_COMPONENT
		/// </summary>
		public static void _EQUIP_META_PED_OUTFIT(int ped, uint hash) => Function.Call(0x1902C4CFCC5BE57C, ped, hash);
		public static void _0xFA742B82D093D848(Any p0, Any p1, Any p2) => Function.Call(0xFA742B82D093D848, p0, p1, p2);
		public static uint _GET_PED_META_OUTFIT_HASH(int ped) => Function.Call<uint>(0x30569F348D126A5A, ped);
		public static void _0xA2F8B3B5FEDFC100(Any p0, Any p1) => Function.Call(0xA2F8B3B5FEDFC100, p0, p1);
		public static void _EQUIP_META_PED_SUBOUTFIT(int ped, uint suboutfit, int p2) => Function.Call(0x66FF395445A88A6E, ped, suboutfit, p2);
		public static bool _DOES_METAPED_OUTFIT_EXIST_FOR_PED_MODEL(uint outfit, uint model) => Function.Call<bool>(0xC0E880B7A441164D, outfit, model);
		public static bool _DOES_METAPED_SUBOUTFIT_EXIST_FOR_PED_MODEL(uint outfit, uint suboutfit, uint model) => Function.Call<bool>(0x4FF3C2B4E6A196C1, outfit, suboutfit, model);
		/// <summary>
		/// Returns p1 value for 0x8E84119A23C16623
		/// </summary>
		public static Any _0x62FDF4E678E40CC6(int entity, Any p1) => Function.Call<Any>(0x62FDF4E678E40CC6, entity, p1);
		public static void _RESET_PED_COMPONENTS(int ped) => Function.Call(0x0BFA1BD465CDFEFD, ped);
		/// <summary>
		/// _RESET_PED_*
		/// </summary>
		public static void _0x370A973252741AC4(int ped, bool p1) => Function.Call(0x370A973252741AC4, ped, p1);
		public static void _SET_RANDOM_OUTFIT_VARIATION(int ped, bool p1) => Function.Call(0x283978A15512B2FE, ped, p1);
		public static int GET_NUM_META_PED_OUTFITS(int ped) => Function.Call<int>(0x10C70A515BC03707, ped);
		/// <summary>
		/// Sets the outfit preset for the ped. The presetId is an index which determines its preset outfit. p2 is always false in the scripts.
		/// If p2 is true as player, then certain components like facial hair and hair will not be removed.
		/// Old name: _SET_PED_OUTFIT_PRESET
		/// </summary>
		public static void _EQUIP_META_PED_OUTFIT_PRESET(int ped, int presetId, bool p2) => Function.Call(0x77FF8D35EEC6BBC4, ped, presetId, p2);
		/// <summary>
		/// Changes Multiplayer ped face and body type components, they can be stacked
		/// Params: p3 = 1
		/// Body shape for mp_male from 124 - 128, 110 - 115 for mp_female
		/// Face shape for mp_male from 110 - 123, 96 - 109 for mp_female
		/// Cloth type for mp_male from 0 - 109, 0 - 95 for mp_female
		/// </summary>
		public static void _EQUIP_META_PED_OUTFIT_EXTRA(int ped, int component, Any p2, Any p3) => Function.Call(0xA5BAE410B03E7371, ped, component, p2, p3);
		/// <summary>
		/// Used in script function HORSE_IS_META_PED_OUTFIT_SADDLE_EQUIPPED
		/// </summary>
		public static bool _IS_META_PED_OUTFIT_EQUIPPED(int ped, uint outfit) => Function.Call<bool>(0x98082246107A6ACF, ped, outfit);
		public static void _0x851966E1E35AF491(Any p0, Any p1) => Function.Call(0x851966E1E35AF491, p0, p1);
		/// <summary>
		/// Used in script function METAPED_CLOTHING__XML__APPLY_OUTFIT_TINTS_TO_PED
		/// </summary>
		public static void _0x4EFC1F8FF1AD94DE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x4EFC1F8FF1AD94DE, p0, p1, p2, p3, p4, p5);
		/// <summary>
		/// Returns requestId
		/// Params: p1 = 1 in R* Scripts (Used in SP only)
		/// </summary>
		public static int _REQUEST_METAPED_PED(uint model, int p1) => Function.Call<int>(0xF97C34C33487D569, model, p1);
		public static bool _HAS_METAPED_PED_REQUEST_LOADED(int requestId) => Function.Call<bool>(0xC0940AC858C1E126, requestId);
		public static bool _IS_METAPED_PED_REQUEST_VALID(int requestId) => Function.Call<bool>(0x43E4DA469541A9C9, requestId);
		/// <summary>
		/// Only used in SP scripts, for example odriscolls1: BOOLS: true, true, true, false, false
		/// </summary>
		public static int _CREATE_METAPED_PED(int requestId, float x, float y, float z, float heading, bool p5, bool p6, bool p7, bool p8, bool p9) => Function.Call<int>(0x0BCD4091C8EABA42, requestId, x, y, z, heading, p5, p6, p7, p8, p9);
		public static int _CREATE_METAPED_PED(int requestId, Vector3 vec, float heading, bool p5, bool p6, bool p7, bool p8, bool p9) => Function.Call<int>(0x0BCD4091C8EABA42, requestId, vec.X, vec.Y, vec.Z, heading, p5, p6, p7, p8, p9);
		public static void _RELEASE_METAPED_PED_REQUEST(int requestId) => Function.Call(0x3972F78A78B5D9DF, requestId);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
		/// Returns requestId, to be used with 0x74F512E29CB717E2
		/// </summary>
		public static int _REQUEST_METAPED_OUTFIT(uint model, uint outfit) => Function.Call<int>(0x13154A76CE0CF9AB, model, outfit);
		public static Any _0x27E8A84C12B0B7D1(Any p0, Any p1, Any p2) => Function.Call<Any>(0x27E8A84C12B0B7D1, p0, p1, p2);
		public static Any _0x273915CE30780986(Any p0, Any p1) => Function.Call<Any>(0x273915CE30780986, p0, p1);
		public static void _RELEASE_METAPED_OUTFIT_REQUEST(int requestId) => Function.Call(0x4592B8B9B0EF5F48, requestId);
		/// <summary>
		/// Used for script function PROCESS_PLAYER_HAT_EVENT
		/// Returns requestId to be used with 0x13E7320C762F0477
		/// </summary>
		public static int _0x3FCBB5FCFD968698(uint drawable, uint albedo, uint normal, uint material, Any p4) => Function.Call<int>(0x3FCBB5FCFD968698, drawable, albedo, normal, material, p4);
		/// <summary>
		/// Returns requestId
		/// Params: p1 = 1 in R* Scripts
		/// </summary>
		public static int _REQUEST_METAPED_ASSET_BUNDLE(uint asset, int p1) => Function.Call<int>(0x91FE941F9FCFB702, asset, p1);
		public static Any _REQUEST_METAPED_COMPONENT(int metaPedType, Any p1, int p2, int p3, int p4) => Function.Call<Any>(0xF6D9E1F3560CBF8E, metaPedType, p1, p2, p3, p4);
		public static void _RELEASE_METAPED_ASSET_REQUEST(int requestId) => Function.Call(0x13E7320C762F0477, requestId);
		public static bool _HAS_METAPED_ASSET_LOADED(int requestId) => Function.Call<bool>(0xB0B2C6D170B0E8E5, requestId);
		public static bool _IS_METAPED_ASSET_VALID(int requestId) => Function.Call<bool>(0x93FFD92F05EC32FD, requestId);
		/// <summary>
		/// Creates prop from metaped asset bundle
		/// https://github.com/femga/rdr3_discoveries/blob/master/objects/metaped_asset_bundles_list.lua
		/// Creates a pickup-able metaped component. asset doesn't seems to be related to component hashes. Hash example : 0xD20354AB (https ://i.imgur.com/dzHkcDb.png)
		/// </summary>
		public static int _CREATE_METAPED_ASSET(uint asset, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, bool p7, bool p8, bool p9) => Function.Call<int>(0x9641A9A20310F6B8, asset, posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9);
		public static int _CREATE_METAPED_ASSET(uint asset, Vector3 vec, Vector3 rotation, bool p7, bool p8, bool p9) => Function.Call<int>(0x9641A9A20310F6B8, asset, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p7, p8, p9);
		public static bool _HAS_METAPED_OUTFIT_LOADED(int requestId) => Function.Call<bool>(0x610438375E5D1801, requestId);
		public static bool _IS_METAPED_OUTFIT_REQUEST_VALID(int requestId) => Function.Call<bool>(0xB25E57FC8E37114D, requestId);
		/// <summary>
		/// Creates metaped from ped outfit requestId. See _REQUEST_METAPED_OUTFIT
		/// </summary>
		public static int _CREATE_METAPED_OUTFIT_PED(int requestId, float x, float y, float z, float heading, bool p5, bool p6, bool p7, bool p8) => Function.Call<int>(0xEAF682A14F8E5F53, requestId, x, y, z, heading, p5, p6, p7, p8);
		public static int _CREATE_METAPED_OUTFIT_PED(int requestId, Vector3 vec, float heading, bool p5, bool p6, bool p7, bool p8) => Function.Call<int>(0xEAF682A14F8E5F53, requestId, vec.X, vec.Y, vec.Z, heading, p5, p6, p7, p8);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/clothes/metaped_outfits.lua
		/// </summary>
		public static bool _APPLY_PED_METAPED_OUTFIT(int requestId, int ped, bool p2, bool p3) => Function.Call<bool>(0x74F512E29CB717E2, requestId, ped, p2, p3);
		/// <summary>
		/// Sets ped eye redness, weariness: 0.f to 1.f
		/// </summary>
		public static void _SET_METAPED_WEARINESS(int ped, float weariness) => Function.Call(0x314C5465195F3B30, ped, weariness);
		/// <summary>
		/// Used in Script Function MOONSHINE_BAND_CLIENT_PATRON_UPDATE
		/// </summary>
		public static void _0xF47D54B986F0A346(int ped, int danceIntensity) => Function.Call(0xF47D54B986F0A346, ped, danceIntensity);
		public static void _0x3EFED081B4834BA1(Any p0) => Function.Call(0x3EFED081B4834BA1, p0);
		public static void _0x0FB1BA7FF73B41E1(Any p0, Any p1, Any p2) => Function.Call(0x0FB1BA7FF73B41E1, p0, p1, p2);
		public static Any _0xB292203008EBBAAC(Any p0) => Function.Call<Any>(0xB292203008EBBAAC, p0);
		public static bool _0xD4D403EA031F351C(int ped) => Function.Call<bool>(0xD4D403EA031F351C, ped);
		/// <summary>
		/// Returns peltId
		/// </summary>
		public static int _GET_PELT_FROM_HORSE(int horse, int index) => Function.Call<int>(0x0CEEB6F4780B1F2F, horse, index);
		public static void _SET_PELT_FOR_HORSE(int horse, int peltId) => Function.Call(0xA73F50E8796150D5, horse, peltId);
		public static void _0xC412AA1C73111FE0(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xC412AA1C73111FE0, p0, p1, p2, p3, p4);
		public static void _CLEAR_PELT_FROM_HORSE(int horse, int peltId) => Function.Call(0x627F7F3A0C4C51FF, horse, peltId);
		public static void _SET_PED_LIGHTS(int ped, bool toggle) => Function.Call(0x13A210949FCBD92B, ped, toggle);
		public static void _0xD049FDAF089FDDB0(Any p0, Any p1, Any p2) => Function.Call(0xD049FDAF089FDDB0, p0, p1, p2);
		public static void _0xDD9540E7B1C9714F(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xDD9540E7B1C9714F, p0, p1, p2, p3, p4);
		public static void _0x55546004A244302A(Any p0, Any p1) => Function.Call(0x55546004A244302A, p0, p1);
		public static void _SET_HEALTH_RECHARGE_MULTIPLIER(int ped, int multiplier) => Function.Call(0xDE1B1907A83A1550, ped, multiplier);
		public static float _GET_HEALTH_RECHARGE_MULTIPLIER(int ped) => Function.Call<float>(0x95B8E397B8F4360F, ped);
		public static void _SET_STAMINA_DEPLETION_MULTIPLIER(int ped, int multiplier) => Function.Call(0xEF5A3D2285D8924B, ped, multiplier);
		public static float _GET_STAMINA_DEPLETION_MULTIPLIER(int ped) => Function.Call<float>(0x825F6DD559A0895B, ped);
		public static void _SET_STAMINA_RECHARGE_MULTIPLIER(int ped, int multiplier) => Function.Call(0x345C9F993A8AB4A4, ped, multiplier);
		public static float _GET_STAMINA_RECHARGE_MULTIPLIER(int ped) => Function.Call<float>(0xE7687EB2F634ABF0, ped);
		/// <summary>
		/// Alters entity's stamina by 'amount'. Can be negative (to drain stamina). float amount: -1000.0 - 1000.0
		/// </summary>
		public static bool _CHANGE_PED_STAMINA(int ped, float amount) => Function.Call<bool>(0xC3D4B754C0E86B9E, ped, amount);
		public static float _GET_PED_STAMINA(int ped) => Function.Call<float>(0x775A1CA7893AA8B5, ped);
		/// <summary>
		/// Returns stamina normalizedValue / normalizedUnlockedMax
		/// </summary>
		public static float _GET_PED_STAMINA_NORMALIZED(int ped) => Function.Call<float>(0x22F2A386D43048A9, ped);
		public static float _GET_PED_MAX_STAMINA(int ped) => Function.Call<float>(0xCB42AFE2B613EE55, ped);
		/// <summary>
		/// _RESET_PED_*
		/// </summary>
		public static void _0x36513AFFC703C60D(Any p0) => Function.Call(0x36513AFFC703C60D, p0);
		/// <summary>
		/// 0.0 <= stamina <= 100.0
		/// </summary>
		public static void _RESTORE_PED_STAMINA(int ped, float stamina) => Function.Call(0x675680D089BFA21F, ped, stamina);
		public static Any _0xFC3B580C4380B5B7(Any p0) => Function.Call<Any>(0xFC3B580C4380B5B7, p0);
		public static void _0xEA8763E505AFD49A(Any p0, Any p1, Any p2) => Function.Call(0xEA8763E505AFD49A, p0, p1, p2);
		public static void _0xE4EF4382E22C780C(Any p0) => Function.Call(0xE4EF4382E22C780C, p0);
		public static void _0xD61FCF9FCFD515B7(Any p0, Any p1, Any p2) => Function.Call(0xD61FCF9FCFD515B7, p0, p1, p2);
		public static void _0x8D9DB115FBA8E23D(Any p0) => Function.Call(0x8D9DB115FBA8E23D, p0);
		public static Any _GET_NUM_RESERVED_HEALTH(int ped) => Function.Call<Any>(0x16F2C8C084AB2092, ped);
		public static Any _0xD97BC27AC039F681(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xD97BC27AC039F681, p0, p1, p2, p3);
		public static Any _0xF6A8C4B4A11AE89C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0xF6A8C4B4A11AE89C, p0, p1, p2, p3, p4, p5);
		public static void _0xE4C95E0AE31C6512(int ped, Any p1) => Function.Call(0xE4C95E0AE31C6512, ped, p1);
		public static int _GET_PED_LAST_DROPPED_HAT(int ped) => Function.Call<int>(0x1F714E7A9DADFC42, ped);
		/// <summary>
		/// Related to ped hat
		/// _SET_PED_LA* - _SET_PED_LE*
		/// </summary>
		public static void _0x5D4CD22A8C82A81A(int ped, bool p1) => Function.Call(0x5D4CD22A8C82A81A, ped, p1);
		public static void _0xBF567DF2BEF211A6(Any p0, Any p1) => Function.Call(0xBF567DF2BEF211A6, p0, p1);
		/// <summary>
		/// Creates a handle to an instance of "CScriptResource_GravityWell", this system forces local ped to target specified position when moving, however player still can interrupt this.
		/// Can be useful to "point" player at some specific position.
		/// Only works while on-foot.
		/// 
		/// _CREATE_[P-Z]
		/// </summary>
		public static int _CREATE_GRAVITY_WELL(float xPos, float yPos, float zPos, float heading, float radius, float p5, float p6, float p7, bool stopAtDestination) => Function.Call<int>(0x4F5EBE70081E5A20, xPos, yPos, zPos, heading, radius, p5, p6, p7, stopAtDestination);
		public static int _CREATE_GRAVITY_WELL(Vector3 vec, float heading, float radius, float p5, float p6, float p7, bool stopAtDestination) => Function.Call<int>(0x4F5EBE70081E5A20, vec.X, vec.Y, vec.Z, heading, radius, p5, p6, p7, stopAtDestination);
		/// <summary>
		/// Removes gravity well by handle returned from 0x4F5EBE70081E5A20
		/// </summary>
		public static void _REMOVE_GRAVITY_WELL(int handle) => Function.Call(0x87247BC60B60BED8, handle);
		public static bool _IS_PED_INTIMIDATED(int ped) => Function.Call<bool>(0x57779B55B83E2BEA, ped);
		/// <summary>
		/// _IS_PED_H* - _IS_PED_I*
		/// </summary>
		public static bool _0x7EE3A8660F38797E(int ped) => Function.Call<bool>(0x7EE3A8660F38797E, ped);
		public static Any _0xA180FBD502A03125(Any p0, Any p1, Any p2) => Function.Call<Any>(0xA180FBD502A03125, p0, p1, p2);
		/// <summary>
		/// Creates a texture override data for ped and returns it's index.
		/// So you can replace any texture of any ped's component.
		/// Also, you can add overlays on it, such as aging, lipstick and more.
		/// Textures can be reused by multiple peds at once.
		/// You can keep only 32 textures at once(including other peds).
		/// 
		/// https://github.com/femga/rdr3_discoveries/blob/master/clothes/change_overlays_script.lua
		/// materialHash: https://github.com/femga/rdr3_discoveries/blob/master/clothes/cloth_drawable_albedo_normal_material_TEMPORARY.lua
		/// </summary>
		public static int _REQUEST_TEXTURE(uint albedoHash, uint normalHash, uint materialHash) => Function.Call<int>(0xC5E7204F322E49EB, albedoHash, normalHash, materialHash);
		public static void _APPLY_TEXTURE_ON_PED(int ped, uint componentHash, int textureId) => Function.Call(0x0B46E25761519058, ped, componentHash, textureId);
		/// <summary>
		/// Removes a texture created by 0xC5E7204F322E49EB.
		/// </summary>
		public static void _RELEASE_TEXTURE(int textureId) => Function.Call(0x6BEFAA907B076859, textureId);
		/// <summary>
		/// Should be called at least once for any new texture override.
		/// Otherwise component textures will be just black.
		/// Also needs to be called for updating any ped overlays to apply the changes.
		/// </summary>
		public static void _UPDATE_PED_TEXTURE(int textureId) => Function.Call(0x92DAABA2C1C10B0E, textureId);
		/// <summary>
		/// Removes every texture layer but the base layer
		/// Clearing texture's data: setting params to default values, but keep overlays.
		/// </summary>
		public static void _RESET_PED_TEXTURE(int textureId) => Function.Call(0x8472A1789478F82F, textureId);
		public static bool _IS_TEXTURE_VALID(int textureId) => Function.Call<bool>(0x31DC8D3F216D8509, textureId);
		/// <summary>
		/// Creates ped overlay in texture override data and returns it's index.
		/// This index are used for further overlay editing.
		/// 
		/// albedoHash: a hash of overlay's albedo texture
		/// colorType: a color type(from 0 to 2). 0 is used for overlays with RGB colors usually.
		/// </summary>
		public static int _ADD_TEXTURE_LAYER(int textureId, uint albedoHash, uint normalHash, uint materialHash, int blendType, float texAlpha, int sheetGridIndex) => Function.Call<int>(0x86BB5FF45F193A02, textureId, albedoHash, normalHash, materialHash, blendType, texAlpha, sheetGridIndex);
		public static void _REMOVE_PED_OVERLAY(int textureId, int overlayId) => Function.Call(0x96C349DE04C49011, textureId, overlayId);
		public static void _SET_TEXTURE_LAYER_SHEET_GRID_INDEX(int textureId, int layerId, int sheetGridIndex) => Function.Call(0x3329AAE2882FC8E4, textureId, layerId, sheetGridIndex);
		public static void _SET_TEXTURE_LAYER_ALPHA(int textureId, int layerId, float texAlpha) => Function.Call(0x6C76BC24F8BB709A, textureId, layerId, texAlpha);
		public static void _SET_TEXTURE_LAYER_ROUGHNESS(int textureId, int layerId, float texRough) => Function.Call(0x057C4F092E2298BE, textureId, layerId, texRough);
		/// <summary>
		/// paletteHash: https://raw.githubusercontent.com/femga/rdr3_discoveries/master/clothes/cloth_color_palletes.lua
		/// </summary>
		public static void _SET_TEXTURE_LAYER_PALLETE(int textureId, int layerId, uint paletteHash) => Function.Call(0x1ED8588524AC9BE1, textureId, layerId, paletteHash);
		/// <summary>
		/// Seem color is not RGB or HSV
		/// </summary>
		public static void _SET_TEXTURE_LAYER_TINT(int textureId, int layerId, int tint0, int tint1, int tint2) => Function.Call(0x2DF59FFE6FFD6044, textureId, layerId, tint0, tint1, tint2);
		public static void _SET_TEXTURE_LAYER_MOD(int textureId, int layerId, uint modTextureHash, float modAlpha, int modChannel) => Function.Call(0xF2EA041F1146D75B, textureId, layerId, modTextureHash, modAlpha, modChannel);
		public static void _SET_TEXTURE_LAYER_TEXTURE_MAP(int textureId, int layerId, uint albedoHash, uint normalHash, uint materialHash) => Function.Call(0x253A63B5BADBC398, textureId, layerId, albedoHash, normalHash, materialHash);
		/// <summary>
		/// Removes every texture layer
		/// Old Name: _RESET_PED_TEXTURE_2
		/// </summary>
		public static void _CLEAR_PED_TEXTURE(int textureId) => Function.Call(0xB63B9178D0F58D82, textureId);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void _0xC991EF46FE323867(int ped, Any p1) => Function.Call(0xC991EF46FE323867, ped, p1);
		public static void _0x1F8215D0E446F593(Any p0, Any p1, Any p2) => Function.Call(0x1F8215D0E446F593, p0, p1, p2);
		public static bool IS_LOCATION_SPAWN_SAFE(int ped, float p1) => Function.Call<bool>(0xFB1E7998B8595825, ped, p1);
		public static void _0x53BA7D96B9A421D9(Any p0, Any p1) => Function.Call(0x53BA7D96B9A421D9, p0, p1);
		public static void _0x96C7B659854DE629(Any p0, Any p1) => Function.Call(0x96C7B659854DE629, p0, p1);
		/// <summary>
		/// -1 - HORSE_ASSIST__NO_CHANGE
		///  0 - HORSE_ASSIST__MANUAL
		///  1 - HORSE_ASSIST__SEMIASSIST
		///  2 - HORSE_ASSIST__FULLASSIST
		/// </summary>
		public static void SET_HORSE_AVOIDANCE_LEVEL(int horse, int avoidanceLevel) => Function.Call(0xDDCF6FEA5D7ACC17, horse, avoidanceLevel);
		public static void RESET_HORSE_AVOIDANCE_LEVEL_TO_DEFAULT(int horse) => Function.Call(0x2A5AFD2B8381A6E1, horse);
		/// <summary>
		/// Doesn't actually return anything.
		/// </summary>
		public static Any _SET_PED_USE_HORSE_MAP_COLLISION(int ped, bool toggle) => Function.Call<Any>(0xEB72453B6F5B45B0, ped, toggle);
		public static void _0x5B73975B4F12F7F3(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x5B73975B4F12F7F3, p0, p1, p2, p3, p4);
		/// <summary>
		/// This is a way to get what drawables a ped has equipped
		/// Example: you are able to tell if the ped has the drawable PLAYER_ZERO_HAT_017 attached
		/// Note: this works with non shop components, direct .ydd files.
		/// </summary>
		public static bool GET_META_PED_ASSET_GUIDS(int ped, int index, uint* drawable, uint* albedo, uint* normal, uint* material) => Function.Call<bool>(0xA9C28516A6DC9D56, ped, index, drawable, albedo, normal, material);
		public static bool GET_META_PED_ASSET_TINT(int ped, int index, uint* pallete, int* tint0, int* tint1, int* tint2) => Function.Call<bool>(0xE7998FEC53A33BBE, ped, index, pallete, tint0, tint1, tint2);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/BLACKBOARDS
		/// Blackboard natives allow you to apply and check certain data to/for peds.
		/// Blackboard bools, floats and strings are subdivided into 6 sections: "all", "animation", "any", "code", "global" and "script"
		/// Most changes are only visible for "script" blackboards, some "script" blackboards change ped motions
		/// "removeTimer" is self-removal timer, can be "-1" so your data will not be removed by the game (forever); 100 = 1 second
		/// </summary>
		public static void _SET_PED_BLACKBOARD_INT(int ped, string variableName, int value, int removeTimer) => Function.Call(0x5F53010C4C3F6BAF, ped, variableName, value, removeTimer);
		public static void _SET_PED_BLACKBOARD_BOOL(int ped, string variableName, bool value, int removeTimer) => Function.Call(0xCB9401F918CB0F75, ped, variableName, value, removeTimer);
		public static void _SET_PED_BLACKBOARD_FLOAT(int ped, string variableName, float value, int removeTimer) => Function.Call(0x437C08DB4FEBE2BD, ped, variableName, value, removeTimer);
		/// <summary>
		/// p1:
		/// BodyPartChained
		/// OverloadMostInjuredBodyPart
		/// 
		/// p2:
		/// LeftLeg
		/// Legs
		/// RightArm
		/// </summary>
		public static void _SET_PED_BLACKBOARD_HASH(int ped, string variableName, string value, int removeTimer) => Function.Call(0xA762C9D6CF165E0D, ped, variableName, value, removeTimer);
		public static void _REMOVE_PED_BLACKBOARD_INT(int ped, string variableName) => Function.Call(0x81B75428A7813E67, ped, variableName);
		public static void _REMOVE_PED_BLACKBOARD_BOOL(int ped, string variableName) => Function.Call(0xA6F67BEC53379A32, ped, variableName);
		public static void _REMOVE_PED_BLACKBOARD_FLOAT(int ped, string variableName) => Function.Call(0x411189E51B8020BA, ped, variableName);
		public static void _REMOVE_PED_BLACKBOARD_HASH(int ped, string variableName) => Function.Call(0x0E17378642156790, ped, variableName);
		/// <summary>
		/// Can be used to get a peds foliage active status: variableName = FoliageActive
		/// </summary>
		public static bool _GET_PED_BLACKBOARD_BOOL(int ped, string variableName) => Function.Call<bool>(0x498F2E77982D6945, ped, variableName);
		/// <summary>
		/// Can be used to get a peds foliage raw height: variableName = FoliageHeight
		/// </summary>
		public static float _GET_PED_BLACKBOARD_FLOAT(int ped, string variableName) => Function.Call<float>(0x56E58D4D118FB45E, ped, variableName);
		public static uint _GET_PED_BLACKBOARD_HASH(int ped, string variableName) => Function.Call<uint>(0xBF5E791BBBF90A3C, ped, variableName);
		public static int GET_PED_BLACKBOARD_SCRIPT_INT(int ped, string variableName) => Function.Call<int>(0xB71B91B398F8F067, ped, variableName);
		public static bool GET_PED_BLACKBOARD_SCRIPT_BOOL(int ped, string variableName) => Function.Call<bool>(0x4912DFE492DB98CD, ped, variableName);
		public static float GET_PED_BLACKBOARD_SCRIPT_FLOAT(int ped, string variableName) => Function.Call<float>(0xA29FD00D45311EB7, ped, variableName);
		/// <summary>
		/// Size will be permanent
		/// </summary>
		public static void _SET_TANK_ATTRIBUTE_SIZE(int ped, int attributeIndex, float size) => Function.Call(0x7FF72DE061DF55E2, ped, attributeIndex, size);
		public static Any _0xA31D350D66FA1855(Any p0) => Function.Call<Any>(0xA31D350D66FA1855, p0);
		/// <summary>
		/// _IS_TRACKED_* - IS_V*
		/// </summary>
		public static bool _IS_USING_SLIPSTREAM(int ped) => Function.Call<bool>(0xAF61B3CD8C3B82C3, ped);
		public static void _0xEEDC9B29314B2733(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0xEEDC9B29314B2733, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _0x5C90E20C25E6D83C(Any p0) => Function.Call(0x5C90E20C25E6D83C, p0);
		/// <summary>
		/// NB_CUSTOM_CLIENT_ON_CREATE_COMPLETE - set legendary to not avoid prey
		/// </summary>
		public static void _0x10F96086123B939F(int legendaryPed, int preyPed, float p2) => Function.Call(0x10F96086123B939F, legendaryPed, preyPed, p2);
		public static void _0x3FDBB99EFD8CE4AF(Any p0, Any p1, Any p2) => Function.Call(0x3FDBB99EFD8CE4AF, p0, p1, p2);
		public static void _0x7E8F9949B7AABBF0(Any p0, Any p1, Any p2) => Function.Call(0x7E8F9949B7AABBF0, p0, p1, p2);
		public static Any _0x5DA36CCCB63C0895(Any p0, Any p1, Any p2) => Function.Call<Any>(0x5DA36CCCB63C0895, p0, p1, p2);
		public static void _0x56076667E7C2DCD6(Any p0, Any p1) => Function.Call(0x56076667E7C2DCD6, p0, p1);
		public static void _APPLY_SHOP_ITEM_TO_PED(int ped, uint componentHash, bool immediately, bool isMp, bool p4) => Function.Call(0xD3A7B003ED343FD9, ped, componentHash, immediately, isMp, p4);
		/// <summary>
		/// Directly removes a shop item component from a ped
		/// Params: p2 and p3 are always 0
		/// </summary>
		public static void _REMOVE_SHOP_ITEM_FROM_PED(int ped, uint componentHash, int p2, bool p3) => Function.Call(0x0D7FFA1B2F69ED82, ped, componentHash, p2, p3);
		/// <summary>
		/// Params: p2, p3 usually 0 in R* Scripts
		/// </summary>
		public static void REMOVE_SHOP_ITEM_FROM_PED_BY_CATEGORY(int ped, uint componentCategory, int p2, bool p3) => Function.Call(0xDF631E4BCE1B1FC4, ped, componentCategory, p2, p3);
		public static void _UPDATE_SHOP_ITEM_WEARABLE_STATE(int ped, uint componentHash, uint wearableState, int p3, bool p4, int p5) => Function.Call(0x66B957AAC2EAAEAB, ped, componentHash, wearableState, p3, p4, p5);
		public static uint _GET_SHOP_PED_COMPONENT_AT_INDEX(int ped, int index, bool p2, Any* argStruct, Any* argStruct2) => Function.Call<uint>(0x77BA37622E22023B, ped, index, p2, argStruct, argStruct2);
		public static Any _0xFFCC2DB2D9953401(Any p0, Any p1, Any p2) => Function.Call<Any>(0xFFCC2DB2D9953401, p0, p1, p2);
		public static Any _0x6243635AF2F1B826(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x6243635AF2F1B826, p0, p1, p2, p3);
		public static uint _GET_SHOP_PED_COMPONENT_CATEGORY(uint componentHash, int metapedType, bool isMP) => Function.Call<uint>(0x5FF9A878C3D115B8, componentHash, metapedType, isMP);
		public static Any _0x31B2E7F2E3C58B89(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x31B2E7F2E3C58B89, p0, p1, p2, p3);
		public static bool _GET_SHOP_PED_BASE_LAYERS(uint shopItem, Any p1, int ped, int metapedType, bool p4, uint* drawable, uint* albedo, uint* normal, uint* material, uint* p9, uint* p10, uint* p11, uint* p12) => Function.Call<bool>(0x63342C50EC115CE8, shopItem, p1, ped, metapedType, p4, drawable, albedo, normal, material, p9, p10, p11, p12);
		/// <summary>
		/// Related to _0x704C908E9C405136 for component loading
		/// _S*
		/// </summary>
		public static Any _0xAAB86462966168CE(int ped, bool isMP) => Function.Call<Any>(0xAAB86462966168CE, ped, isMP);
		public static Any _GET_SHOP_PED_HAT_COMPONENT(int ped, int metapedType, bool p2) => Function.Call<Any>(0x7E02E4218D916B94, ped, metapedType, p2);
		/// <summary>
		/// p1 is always 1
		/// </summary>
		public static void _REFRESH_META_PED_SHOP_ITEMS(int ped, int p1) => Function.Call(0x59BD177A1A48600A, ped, p1);
		/// <summary>
		/// Params: p1 either a 1 or 0, so perhaps BOOL
		/// _SET_PED_A*
		/// </summary>
		public static void _0xD103F6DBB5442BE8(int ped, int p1) => Function.Call(0xD103F6DBB5442BE8, ped, p1);
		public static void _SET_PED_PROMPT_NAME_FROM_GXT_ENTRY(int ped, uint gxtEntryHash) => Function.Call(0xFCA8FB9E15FA80D3, ped, gxtEntryHash);
		public static void _SET_PED_PROMPT_NAME(int ped, string name) => Function.Call(0x4A48B6E03BABB4AC, ped, name);
		public static void _0xC2745D9261664901(Any p0, Any p1) => Function.Call(0xC2745D9261664901, p0, p1);
		public static void _0x19B14E04B009E28B(Any p0, Any p1) => Function.Call(0x19B14E04B009E28B, p0, p1);
		public static void _0xF917F92BF22ECBAB(Any p0) => Function.Call(0xF917F92BF22ECBAB, p0);
		public static void _0x49DADFC4CD808B0A(Any p0, Any p1, Any p2) => Function.Call(0x49DADFC4CD808B0A, p0, p1, p2);
		/// <summary>
		/// limb: 3 = Left Hand, 4 = Left Arm, 6 = Right Hand, 7 = Right Arm, 9 = Left Foot, 10 = Left Leg, 12 = Right Foot, 13 = Right Leg, 37 = Head
		/// </summary>
		public static bool _HAS_PED_TAKEN_GORE_DAMAGE(int ped, int limb) => Function.Call<bool>(0xBA208A8D6399A3AC, ped, limb);
		/// <summary>
		/// _CLEAR*
		/// </summary>
		public static void _0x704C908E9C405136(int ped) => Function.Call(0x704C908E9C405136, ped);
		public static void _0x7406C71F4AC2FFCC(Any p0) => Function.Call(0x7406C71F4AC2FFCC, p0);
		public static void _0x28508173C6A7CC18(Any p0) => Function.Call(0x28508173C6A7CC18, p0);
		public static Any _0x52250B92EA70BE3D(Any p0) => Function.Call<Any>(0x52250B92EA70BE3D, p0);
		/// <summary>
		/// quality: see _GET_PED_QUALITY
		/// </summary>
		public static void _SET_PED_QUALITY(int ped, int quality) => Function.Call(0xCE6B874286D640BB, ped, quality);
		/// <summary>
		/// Returns Ped Quality to be used to calculate Skinning Quality
		/// 
		/// enum ePedQuality
		/// {
		/// 	PQ_INVALID = -1,
		/// 	PQ_LOW,
		/// 	PQ_MEDIUM,
		/// 	PQ_HIGH,
		/// 	PQ_MAX
		/// };
		/// </summary>
		public static int _GET_PED_QUALITY(int ped) => Function.Call<int>(0x7BCC6087D130312A, ped);
		public static void _0xCE7A6C1D5CDE1F9D(int ped, int _object, string propName, string animName) => Function.Call(0xCE7A6C1D5CDE1F9D, ped, _object, propName, animName);
		public static void _0x604E1010E3162E86(Any p0, Any p1, Any p2) => Function.Call(0x604E1010E3162E86, p0, p1, p2);
		public static void _0xE8ABE3B73FC7FE17(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xE8ABE3B73FC7FE17, p0, p1, p2, p3);
		public static void _REMOVE_PED_PROP(int ped, string propName) => Function.Call(0x3A50753042B6891B, ped, propName);
		/// <summary>
		/// _SET_W(EAPON?)*
		/// </summary>
		public static void _SET_TOTAL_PED_DAMAGE_FALLOFF_BONUS(int ped, float bonus) => Function.Call(0x932786CE3C76477C, ped, bonus);
		public static Any _0x095C2277FED731DB(Any p0) => Function.Call<Any>(0x095C2277FED731DB, p0);
		public static void _0x09171A6F8FDE5DC1(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x09171A6F8FDE5DC1, p0, p1, p2, p3, p4);
		public static void _0x09E378C52B1433B5(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x09E378C52B1433B5, p0, p1, p2, p3, p4);
		/// <summary>
		/// _IS_N* - _IS_P*
		/// </summary>
		public static bool _0x6507AC3BD7C99009(float x, float y, float z, float p3) => Function.Call<bool>(0x6507AC3BD7C99009, x, y, z, p3);
		public static bool _0x6507AC3BD7C99009(Vector3 vec, float p3) => Function.Call<bool>(0x6507AC3BD7C99009, vec.X, vec.Y, vec.Z, p3);
		/// <summary>
		/// Returns how deep the water is below the ped (if in water)
		/// -1.0f = Not in water
		/// 10.0f = Max water depth
		/// </summary>
		public static float _GET_PLAYER_PED_WATER_DEPTH(int ped) => Function.Call<float>(0x2942457417A5FD24, ped);
		/// <summary>
		/// duration in seconds
		/// </summary>
		public static void _SET_PED_TRAIL_EFFECT(int ped, bool p1, float duration) => Function.Call(0xA5950E16B8F31052, ped, p1, duration);
		/// <summary>
		/// If returned true: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling UP the bounds due to tracking
		/// If returned false: PROCESS_RESIZING_TRACKING_BOUNDS_VOLUME - Scaling DOWN the bounds due to tracking
		/// _IS_PED_T* - _IS_PED_U*
		/// </summary>
		public static bool _0xEBAAC9A750E7563B(int ped) => Function.Call<bool>(0xEBAAC9A750E7563B, ped);
		public static void _0x992187D975635DF5(Any p0, Any p1) => Function.Call(0x992187D975635DF5, p0, p1);
		public static void _0x0B787A37EEDD226F(Any p0, Any p1) => Function.Call(0x0B787A37EEDD226F, p0, p1);
	}

	public unsafe static class PERSCHAR
	{
		public static void _0x63AA2B8EB087886A(Any p0, Any p1) => Function.Call(0x63AA2B8EB087886A, p0, p1);
		public static uint _GET_PERSCHAR_MODEL_NAME(uint persCharHash) => Function.Call<uint>(0xA00DF706C60173D1, persCharHash);
		public static void _0x8BC555034A5A5E8C(Any p0, Any p1) => Function.Call(0x8BC555034A5A5E8C, p0, p1);
		public static void _0x70605812ABC9FF0F(Any p0, Any p1) => Function.Call(0x70605812ABC9FF0F, p0, p1);
		public static Any _0xDC9655D47DEC0353(Any p0) => Function.Call<Any>(0xDC9655D47DEC0353, p0);
		public static void _0x2DF89CD2ED1D0BDE(Any p0, Any p1) => Function.Call(0x2DF89CD2ED1D0BDE, p0, p1);
		public static void _0x535A66AAD2BF68F9(Any p0, Any p1) => Function.Call(0x535A66AAD2BF68F9, p0, p1);
		public static Any _0xCEB40B678E403759(Any p0) => Function.Call<Any>(0xCEB40B678E403759, p0);
		public static void _SET_PERSCHAR_SCHEDULE(uint persCharHash, string schedule) => Function.Call(0x187D65F3AEC5D679, persCharHash, schedule);
		public static void _0x8B44273A92CD406C(Any p0) => Function.Call(0x8B44273A92CD406C, p0);
		public static void _0xE0E65E0D261F7507(Any p0) => Function.Call(0xE0E65E0D261F7507, p0);
		public static Any _0x112DDF56300BC6E5(Any p0) => Function.Call<Any>(0x112DDF56300BC6E5, p0);
		public static int _CREATE_PERSISTENT_CHARACTER(uint hash) => Function.Call<int>(0x4F76E3676583D951, hash);
		public static bool _IS_PERSISTENT_CHARACTER_VALID(int persChar) => Function.Call<bool>(0x800DF3FC913355F3, persChar);
		public static void _DELETE_PERSCHAR(int persChar) => Function.Call(0xFC77C5B44D5FF7C0, persChar);
		public static Vector3 _0x5EE6FCCC9C832CA2(Any p0) => Function.Call<Vector3>(0x5EE6FCCC9C832CA2, p0);
		public static void _0x59C7AD6FEA2AC449(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x59C7AD6FEA2AC449, p0, p1, p2, p3);
		public static void _0xBB68908CD11AEBDC(Any p0) => Function.Call(0xBB68908CD11AEBDC, p0);
		public static Vector3 _0x94995829ED15A598(Any p0) => Function.Call<Vector3>(0x94995829ED15A598, p0);
		public static int _GET_PERSCHAR_PED_INDEX(int persChar) => Function.Call<int>(0x31C70A716CAE1FEE, persChar);
		public static int _GET_PERSCHAR_INDEX_FROM_PED_INDEX(int ped) => Function.Call<int>(0x32A1E3B83D501096, ped);
		public static Any _0xF8DE7154F7D1458F(Any p0) => Function.Call<Any>(0xF8DE7154F7D1458F, p0);
		public static void _0x669C25840C6F7AE2(Any p0, Any p1) => Function.Call(0x669C25840C6F7AE2, p0, p1);
		public static void _RETASK_PERSISTENT_CHARACTER(int persChar) => Function.Call(0x631CD2D77FDC0316, persChar);
		public static void _0x0B3A99AB6713AA52(Any p0) => Function.Call(0x0B3A99AB6713AA52, p0);
		public static bool _IS_PERSISTENT_CHARACTER_DEAD(int persChar) => Function.Call<bool>(0xEB98B38CA60742D7, persChar);
		public static bool _REVIVE_PERSCHAR(int persChar) => Function.Call<bool>(0x49A8C2CD97815215, persChar);
		public static void _0xD4B614179BCD0654(Any p0) => Function.Call(0xD4B614179BCD0654, p0);
		public static void _0x406808610220405B(Any p0) => Function.Call(0x406808610220405B, p0);
		public static void _0xA2B18FF8D39F6D87(Any p0) => Function.Call(0xA2B18FF8D39F6D87, p0);
		public static Any _0xE4C51A8A3BD1664C(Any p0) => Function.Call<Any>(0xE4C51A8A3BD1664C, p0);
		public static void _0x8AE4EFA464DAE42D(Any p0, Any p1) => Function.Call(0x8AE4EFA464DAE42D, p0, p1);
		public static void _0xA4DCB3F0DD7488BD(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xA4DCB3F0DD7488BD, p0, p1, p2, p3, p4);
		public static void _0xD95D777F828B2BBB(Any p0) => Function.Call(0xD95D777F828B2BBB, p0);
		public static void _0x92690B0822493CE0() => Function.Call(0x92690B0822493CE0);
		public static void _0xEFC5C6670E0B99BA() => Function.Call(0xEFC5C6670E0B99BA);
		public static void _0x2E957AA81F2C61C9() => Function.Call(0x2E957AA81F2C61C9);
		public static void _0xB173599D61FAEB31() => Function.Call(0xB173599D61FAEB31);
		public static int _0x08FC896D2CB31FCC(Any p0, bool p1) => Function.Call<int>(0x08FC896D2CB31FCC, p0, p1);
		public static int _FORCE_SPAWN_PERSCHAR(int persChar, bool p1) => Function.Call<int>(0x0CADC3A977997472, persChar, p1);
		public static void _FORCE_DESPAWN_PERSCHAR(int persChar) => Function.Call(0x7B204F88F6C3D287, persChar);
		public static void _0xFCC6DB8DBE709BC8(Any p0) => Function.Call(0xFCC6DB8DBE709BC8, p0);
		public static void _0xA8C406C2A56EDC16(Any p0) => Function.Call(0xA8C406C2A56EDC16, p0);
		public static void _0x4F81EAD1DE8FA19B(Any p0) => Function.Call(0x4F81EAD1DE8FA19B, p0);
		public static void _0x6759BEE6762E140B(Any p0) => Function.Call(0x6759BEE6762E140B, p0);
		public static void _0xB65E7F733956CF25(Any p0) => Function.Call(0xB65E7F733956CF25, p0);
		public static Any _0x4AFC7288C77238B3(Any p0) => Function.Call<Any>(0x4AFC7288C77238B3, p0);
		public static Any _0xA8120EBEAF290C7A(Any p0) => Function.Call<Any>(0xA8120EBEAF290C7A, p0);
		public static Any _0x69786495C92A3044(Any p0) => Function.Call<Any>(0x69786495C92A3044, p0);
		public static Any _0xEC254C2C9B0F08F1(Any p0, Any p1) => Function.Call<Any>(0xEC254C2C9B0F08F1, p0, p1);
		public static Any _0x9C7F95946E304778(Any p0, Any p1) => Function.Call<Any>(0x9C7F95946E304778, p0, p1);
	}

	public unsafe static class PERSISTENCE
	{
		public static void _0x7A1BD123E5CDB6E5() => Function.Call(0x7A1BD123E5CDB6E5);
		public static void PERSISTENCE_REMOVE_ALL_ENTITIES_IN_AREA(float x, float y, float z, float radius) => Function.Call(0x9D16896F0DBE78A2, x, y, z, radius);
		public static void PERSISTENCE_REMOVE_ALL_ENTITIES_IN_AREA(Vector3 vec, float radius) => Function.Call(0x9D16896F0DBE78A2, vec.X, vec.Y, vec.Z, radius);
		public static void _0x065887B694359799(Any p0) => Function.Call(0x065887B694359799, p0);
		public static void _0xFC9806DA9A460093(float x1, float y1, float z1, float x2, float y2, float z2) => Function.Call(0xFC9806DA9A460093, x1, y1, z1, x2, y2, z2);
		public static void _0xFC9806DA9A460093(Vector3 vec1, Vector3 vec2) => Function.Call(0xFC9806DA9A460093, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xB03140014ACA6C40(Any p0, Any p1) => Function.Call(0xB03140014ACA6C40, p0, p1);
		public static void _0xE225CEF1901F6108(Any p0, Any p1) => Function.Call(0xE225CEF1901F6108, p0, p1);
		public static void _0x8DE104BEC243A73B(Any p0) => Function.Call(0x8DE104BEC243A73B, p0);
		/// <summary>
		/// Only used in R* script long_update.ysc in script function REFRESH_CLOSEST_TOWN
		/// </summary>
		public static void _PERSISTENCE_REFRESH_TOWN_VOLUME(int volume) => Function.Call(0xEFB5F34CC0953B27, volume);
		public static Any _0xBA2C49EA6A8D24FF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0xBA2C49EA6A8D24FF, p0, p1, p2, p3, p4, p5, p6);
		public static Any _0x2E545965DF98D476(Any p0) => Function.Call<Any>(0x2E545965DF98D476, p0);
		public static void _0xF5622FA6ACFCA7DB(Any p0, Any p1) => Function.Call(0xF5622FA6ACFCA7DB, p0, p1);
		public static void _0x3CA5E58C9731A16B(Any p0, Any p1) => Function.Call(0x3CA5E58C9731A16B, p0, p1);
		public static void _0xDC0A1F0ECEC9F0C0(Any p0, Any p1) => Function.Call(0xDC0A1F0ECEC9F0C0, p0, p1);
		public static Any _0x5A79220F6D38D7C3(Any p0) => Function.Call<Any>(0x5A79220F6D38D7C3, p0);
		public static Any _0xCFDA2518F322D836(Any p0) => Function.Call<Any>(0xCFDA2518F322D836, p0);
		public static Any _0x1F56FB3FDB4EAF65(Any p0) => Function.Call<Any>(0x1F56FB3FDB4EAF65, p0);
		public static void _0x291CC21D1FB6790E(Any p0) => Function.Call(0x291CC21D1FB6790E, p0);
		public static void PERSISTENCE_ADD_SCENARIO_LOOTED(int scenario) => Function.Call(0x8245C1F3262F4AC2, scenario);
		public static bool _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED(int scenario) => Function.Call<bool>(0xFB7CF1DE938A3E22, scenario);
		public static bool _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS(float x, float y, float z) => Function.Call<bool>(0xB6E1A185C2B9319A, x, y, z);
		public static bool _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS(Vector3 vec) => Function.Call<bool>(0xB6E1A185C2B9319A, vec.X, vec.Y, vec.Z);
		public static bool _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS_WITH_MODEL(float x, float y, float z, uint model) => Function.Call<bool>(0x188313616D184213, x, y, z, model);
		public static bool _PERSISTENCE_IS_SCENARIO_MARKED_AS_LOOTED_AT_COORDS_WITH_MODEL(Vector3 vec, uint model) => Function.Call<bool>(0x188313616D184213, vec.X, vec.Y, vec.Z, model);
		/// <summary>
		/// _PERSISTENCE_*
		/// </summary>
		public static void _0x66DAA3A9274E8E82() => Function.Call(0x66DAA3A9274E8E82);
	}

	public unsafe static class PHYSICS
	{
		/// <summary>
		/// There are 19 types of rope, from type = 0 to type = 18
		/// Rope definitions are stored in ropedata.xml
		/// Rope types 0, 15 and 18 have proper physics for hanging objects (taut, do not sag, small to medium diameter, good aspect for a rope)
		/// </summary>
		public static int ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float p10, bool p11, bool p12, bool rigid, float p14, bool breakWhenShot, Any* unkPtr, bool p17) => Function.Call<int>(0xE832D760399EB220, x, y, z, rotX, rotY, rotZ, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr, p17);
		public static int ADD_ROPE(Vector3 vec, Vector3 rotation, float length, int ropeType, float maxLength, float minLength, float p10, bool p11, bool p12, bool rigid, float p14, bool breakWhenShot, Any* unkPtr, bool p17) => Function.Call<int>(0xE832D760399EB220, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, length, ropeType, maxLength, minLength, p10, p11, p12, rigid, p14, breakWhenShot, unkPtr, p17);
		public static int _ADD_ROPE_2(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, bool isNetworked, int p9, float p10) => Function.Call<int>(0xE9C59F6809373A99, x, y, z, rotX, rotY, rotZ, length, ropeType, isNetworked, p9, p10);
		public static int _ADD_ROPE_2(Vector3 vec, Vector3 rotation, float length, int ropeType, bool isNetworked, int p9, float p10) => Function.Call<int>(0xE9C59F6809373A99, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, length, ropeType, isNetworked, p9, p10);
		public static void DELETE_ROPE(int* ropeId) => Function.Call(0x52B4829281364649, ropeId);
		public static void _RELEASE_ROPE(int ropeId) => Function.Call(0x6076213101A47B3B, ropeId);
		public static void DELETE_CHILD_ROPE(int ropeId) => Function.Call(0xAA5D6B1888E4DB20, ropeId);
		/// <summary>
		/// ropeTop returns top half of rope, ropeBottom returns bottom half of rope
		/// </summary>
		public static void _BREAK_ROPE(int* ropeId, int* ropeTop, int* ropeBottom, float offsetX, float offsetY, float offsetZ, int p6) => Function.Call(0x4CFA2B7FAE115ECB, ropeId, ropeTop, ropeBottom, offsetX, offsetY, offsetZ, p6);
		public static void _BREAK_ROPE(int* ropeId, int* ropeTop, int* ropeBottom, Vector3 offset, int p6) => Function.Call(0x4CFA2B7FAE115ECB, ropeId, ropeTop, ropeBottom, offset.X, offset.Y, offset.Z, p6);
		public static bool DOES_ROPE_EXIST(int ropeId) => Function.Call<bool>(0xFD5448BE3111ED96, ropeId);
		public static bool _IS_ROPE_BROKEN(int ropeId) => Function.Call<bool>(0x79C2BEC82CFD7F7F, ropeId);
		public static void _0x7A54D82227A139DB(int* ropeId, Any p1) => Function.Call(0x7A54D82227A139DB, ropeId, p1);
		public static void ROPE_DRAW_SHADOW_ENABLED(int* ropeId, bool toggle) => Function.Call(0xF159A63806BB5BA8, ropeId, toggle);
		public static int GET_ROPE_VERTEX_COUNT(int ropeId) => Function.Call<int>(0x3655F544CD30F0B5, ropeId);
		public static void _0xE54BF2CE6C7D23A9(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xE54BF2CE6C7D23A9, p0, p1, p2, p3, p4);
		public static void _0x9C24846D0A4A2776(Any p0) => Function.Call(0x9C24846D0A4A2776, p0);
		public static void _0x0CB16D05E03FB525(Any p0) => Function.Call(0x0CB16D05E03FB525, p0);
		public static void _0xF27F1A8DE4F50A1B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xF27F1A8DE4F50A1B, p0, p1, p2, p3, p4, p5, p6);
		public static void _0x21D0890D88DFB0B0(int ropeId, bool p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, int p10) => Function.Call(0x21D0890D88DFB0B0, ropeId, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		/// <summary>
		/// Attaches entity 1 to entity 2.
		/// If you use a boneName (p12/p13) make sure boneId (p15/p16) is set to -1.
		/// </summary>
		public static void ATTACH_ENTITIES_TO_ROPE(int ropeId, int entity1, int entity2, float ent1X, float ent1Y, float ent1Z, float ent2X, float ent2Y, float ent2Z, float length, int alwaysZero1, int alwaysZero2, string boneName1, string boneName2, bool p14, int boneId1, int boneId2, int alwaysZero3, int alwaysZero4, bool p19, bool p20) => Function.Call(0x3D95EC8B6D940AC3, ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, length, alwaysZero1, alwaysZero2, boneName1, boneName2, p14, boneId1, boneId2, alwaysZero3, alwaysZero4, p19, p20);
		/// <summary>
		/// Attaches a rope to two entities: binds two bones from two entities; one entity can be an object, i.e. a suspension point, the other an NPC bone
		/// </summary>
		public static void _ATTACH_ENTITIES_TO_ROPE_2(int ropeId, int entity1, int entity2, float ent1X, float ent1Y, float ent1Z, float ent2X, float ent2Y, float ent2Z, string boneName1, string boneName2) => Function.Call(0x462FF2A432733A44, ropeId, entity1, entity2, ent1X, ent1Y, ent1Z, ent2X, ent2Y, ent2Z, boneName1, boneName2);
		public static void _ATTACH_ENTITES_TO_ROPE_3(int ropeId, int entity1, int entity2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, Any p10) => Function.Call(0xE9CD9A67834985A7, ropeId, entity1, entity2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void _0x69C810B72291D831(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x69C810B72291D831, p0, p1, p2, p3, p4, p5, p6);
		public static void _0xB7469CB9AC3C0FD4(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xB7469CB9AC3C0FD4, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _0xC64E7A62632AD2FE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xC64E7A62632AD2FE, p0, p1, p2, p3, p4, p5, p6, p7);
		public static bool _IS_ROPE_ATTACHED_TO_ENTITY(int ropeId, int entity) => Function.Call<bool>(0x9B4F7E3E4F9C77B3, ropeId, entity);
		public static void DETACH_ROPE_FROM_ENTITY(int ropeId, int entity) => Function.Call(0xBCF3026912A8647D, ropeId, entity);
		public static void _HITCH_HORSE(int horse, float x, float y, float z) => Function.Call(0x06AADE17334F7A40, horse, x, y, z);
		public static void _HITCH_HORSE(int horse, Vector3 vec) => Function.Call(0x06AADE17334F7A40, horse, vec.X, vec.Y, vec.Z);
		public static void _UNHITCH_HORSE(int horse) => Function.Call(0x0348469DAA17576C, horse);
		public static void _0x6EA0E93CFFA472CC(Any p0) => Function.Call(0x6EA0E93CFFA472CC, p0);
		public static void _0xBDDA142759307528(Any p0) => Function.Call(0xBDDA142759307528, p0);
		public static void _0x32F4DBFDFCCCC735(Any p0, Any p1, Any p2) => Function.Call(0x32F4DBFDFCCCC735, p0, p1, p2);
		public static void _0xF8CA39D5C0D1D9A1(Any p0, Any p1) => Function.Call(0xF8CA39D5C0D1D9A1, p0, p1);
		public static void _0xEAF529446488EB18(Any p0) => Function.Call(0xEAF529446488EB18, p0);
		public static void _0x31160EC47E7C9549(Any p0, Any p1) => Function.Call(0x31160EC47E7C9549, p0, p1);
		public static void _0x5E981C764DF33117(Any p0, Any p1) => Function.Call(0x5E981C764DF33117, p0, p1);
		public static void ROPE_SET_UPDATE_ORDER(int ropeId, Any p1) => Function.Call(0xDC57A637A20006ED, ropeId, p1);
		public static void _0xFB9153A54AC713E8(int ropeId, bool p1) => Function.Call(0xFB9153A54AC713E8, ropeId, p1);
		public static void _0xD699E688B49C0FD2(int ropeId, float p1, float p2, float p3, bool p4) => Function.Call(0xD699E688B49C0FD2, ropeId, p1, p2, p3, p4);
		public static void _0xBB3E9B073E66C3C9(int ropeId, bool p1, bool p2, bool p3, bool p4) => Function.Call(0xBB3E9B073E66C3C9, ropeId, p1, p2, p3, p4);
		public static void _0x522FA3F490E2F7AC(int ropeId, Any p1, Any p2) => Function.Call(0x522FA3F490E2F7AC, ropeId, p1, p2);
		public static void _0x3900491C0D61ED4B(Any p0, Any p1) => Function.Call(0x3900491C0D61ED4B, p0, p1);
		public static void _0xC89E7410A93AC19A(int ropeId, float p1) => Function.Call(0xC89E7410A93AC19A, ropeId, p1);
		public static void _0x1D97DA8ACB5D2582(int ropeId, int p1) => Function.Call(0x1D97DA8ACB5D2582, ropeId, p1);
		/// <summary>
		/// Combining this with ADD_ROPE enables winding
		/// p1: mostly empty (0)
		/// ropeModelType: RB_L_Wrist02, RB_R_Wrist02, ropeAttach, noose01x_Rope_03, SKEL_Neck0, SKEL_L_FOOT, SKEL_Neck1, Root_s_meatbit_Chunck_Xlarge01x
		/// _CREATE_*
		/// </summary>
		public static void _CREATE_ROPE_WINDING_ABILITY(int ropeId, string p1, string ropeModelType, float length, bool p4) => Function.Call(0x3C6490D940FF5D0B, ropeId, p1, ropeModelType, length, p4);
		public static Vector3 GET_ROPE_LAST_VERTEX_COORD(int ropeId) => Function.Call<Vector3>(0x21BB0FBD3E217C2D, ropeId);
		public static Vector3 GET_ROPE_VERTEX_COORD(int ropeId, int vertex) => Function.Call<Vector3>(0xEA61CA8E80F09E4D, ropeId, vertex);
		public static void START_ROPE_WINDING(int ropeId) => Function.Call(0x1461C72C889E343E, ropeId);
		public static void STOP_ROPE_WINDING(int ropeId) => Function.Call(0xCB2D4AB84A19AA7C, ropeId);
		public static void START_ROPE_UNWINDING_FRONT(int ropeId) => Function.Call(0x538D1179EC1AA9A9, ropeId);
		public static void STOP_ROPE_UNWINDING_FRONT(int ropeId) => Function.Call(0xFFF3A50779EFBBB3, ropeId);
		public static void _START_ROPE_UNWINDING_BACK(int ropeId) => Function.Call(0x00F611A794A3C36E, ropeId);
		public static void _STOP_ROPE_UNWINDING_BACK(int ropeId) => Function.Call(0x10DAA76CB8A201A1, ropeId);
		public static void _0x461FCBDEB4D06717(int ropeId, bool p1) => Function.Call(0x461FCBDEB4D06717, ropeId, p1);
		public static void _0x423C6B1F3786D28B(Any p0, Any p1) => Function.Call(0x423C6B1F3786D28B, p0, p1);
		public static void _0x76BAD9D538BCA1AA(int ropeId, float p1) => Function.Call(0x76BAD9D538BCA1AA, ropeId, p1);
		public static void _0xB40EA9E0D2E2F7F3(int ropeId, float p1) => Function.Call(0xB40EA9E0D2E2F7F3, ropeId, p1);
		public static Any _0x3D69537039F8D824(Any p0) => Function.Call<Any>(0x3D69537039F8D824, p0);
		public static void _0x751DF00EEFF122E3(Any p0) => Function.Call(0x751DF00EEFF122E3, p0);
		/// <summary>
		/// Forces a rope to a certain length.
		/// </summary>
		public static void ROPE_FORCE_LENGTH(int ropeId, float length) => Function.Call(0xD009F759A723DB1B, ropeId, length);
		/// <summary>
		/// _ROPE_SET_*
		/// </summary>
		public static void _0x8D59079C37C21D78(int ropeId, float p1) => Function.Call(0x8D59079C37C21D78, ropeId, p1);
		public static void _0x814D453FCFDF119F(Any p0, Any p1, Any p2) => Function.Call(0x814D453FCFDF119F, p0, p1, p2);
		public static void _0x1FC92BDBA1106BD2(Any p0, Any p1) => Function.Call(0x1FC92BDBA1106BD2, p0, p1);
		public static void _0xDEDE679ED29DD4E7(int ropeId, bool p1) => Function.Call(0xDEDE679ED29DD4E7, ropeId, p1);
		public static void _0xF1EA2A881EB7F2CD(int ropeId, bool p1) => Function.Call(0xF1EA2A881EB7F2CD, ropeId, p1);
		public static void _0x5A989B7EE3672A56(Any p0, Any p1) => Function.Call(0x5A989B7EE3672A56, p0, p1);
		public static void _0x483D4E917B0D35A9(Any p0, Any p1) => Function.Call(0x483D4E917B0D35A9, p0, p1);
		public static int _ROPE_GET_BREAKER_OF_ROPE(int ropeId) => Function.Call<int>(0xEE360CFC80C8B2BC, ropeId);
		public static void SET_DAMPING(int entity, int vertex, float value) => Function.Call(0xEEA3B200A6FEB65B, entity, vertex, value);
		public static void ACTIVATE_PHYSICS(int entity) => Function.Call(0x710311ADF0E20730, entity);
		public static void BREAK_ENTITY_GLASS(int entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, bool p10) => Function.Call(0x2E648D16F6E308F3, entity, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void _0x8EEDFD8921389928(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x8EEDFD8921389928, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void SET_DISABLE_BREAKING(int _object, bool toggle) => Function.Call(0x5CEC1A84620E7D5B, _object, toggle);
		public static void SET_DISABLE_FRAG_DAMAGE(int _object, bool toggle) => Function.Call(0x01BA3AED21C16CFB, _object, toggle);
		public static void _0x5BD7457221CC5FF4(Any p0, Any p1) => Function.Call(0x5BD7457221CC5FF4, p0, p1);
	}

	public unsafe static class PLAYER
	{
		public static int GET_PLAYER_PED(int player) => Function.Call<int>(0x275F255ED201B937, player);
		public static int _GET_PLAYER_PED_2(int player) => Function.Call<int>(0x5EBE38A20BC51C27, player);
		/// <summary>
		/// Only used in script function UPDATE_PLAYER_JUST_DIED_STATE
		/// </summary>
		public static void _0x325434C68358D282(bool toggle) => Function.Call(0x325434C68358D282, toggle);
		/// <summary>
		/// Does the same like PLAYER::GET_PLAYER_PED
		/// </summary>
		public static int GET_PLAYER_PED_SCRIPT_INDEX(int player) => Function.Call<int>(0x5C880F9056D784C8, player);
		/// <summary>
		/// Make sure to request the model first and wait until it has loaded.
		/// </summary>
		public static void SET_PLAYER_MODEL(int player, uint modelHash, bool p2) => Function.Call(0xED40380076A31506, player, modelHash, p2);
		/// <summary>
		/// Returns true if the given player has a valid ped.
		/// </summary>
		public static bool _NETWORK_HAS_PLAYER_VALID_PED(int player) => Function.Call<bool>(0x0760D6F70EBCC05C, player);
		/// <summary>
		/// Gets the player's team.
		/// Returns -1 in singleplayer.
		/// </summary>
		public static int GET_PLAYER_TEAM(int player) => Function.Call<int>(0xB464EB6A40C7975B, player);
		/// <summary>
		/// Sets the player's team.
		/// </summary>
		public static void SET_PLAYER_TEAM(int player, int team, bool bRestrictToThisScript) => Function.Call(0xE8DD8536F01DE600, player, team, bRestrictToThisScript);
		public static string GET_PLAYER_NAME(int player) => Function.Call<string>(0x7124FD9AC0E01BA0, player);
		public static string _FORMAT_PLAYER_NAME_STRING(string _string) => Function.Call<string>(0x5B6193813E03E4E9, _string);
		public static float GET_WANTED_LEVEL_RADIUS(int p0) => Function.Call<float>(0x80B00EB26D9521C7, p0);
		public static int GET_WANTED_LEVEL_THRESHOLD(int wantedLevel) => Function.Call<int>(0x1B1A3B358F7D8F07, wantedLevel);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_PLAYER_WANTED_LEVEL(int player, int wantedLevel, bool disableNoMission) => Function.Call(0x384D4765395E006C, player, wantedLevel, disableNoMission);
		public static bool IS_PLAYER_WANTED_LEVEL_GREATER(int player, int wantedLevel) => Function.Call<bool>(0xE1C0AD4C24324C36, player, wantedLevel);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void CLEAR_PLAYER_WANTED_LEVEL(int player) => Function.Call(0x4E4B996C928C7AA6, player);
		public static bool IS_PLAYER_DEAD(int player) => Function.Call<bool>(0x2E9C3FCB6798F397, player);
		/// <summary>
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eSetPlayerControlFlags
		/// </summary>
		public static void SET_PLAYER_CONTROL(int player, bool toggle, int flags, bool bPreventHeadingChange) => Function.Call(0x4D51E59243281D80, player, toggle, flags, bPreventHeadingChange);
		public static int GET_PLAYER_WANTED_LEVEL(int player) => Function.Call<int>(0xABC532F9098BFD9D, player);
		public static void SET_MAX_WANTED_LEVEL(int maxWantedLevel) => Function.Call(0x28A4BD2CEE236E19, maxWantedLevel);
		public static void _SET_MAX_WANTED_LEVEL_2(int maxWantedLevel) => Function.Call(0xEA6DE0CD15AECBE2, maxWantedLevel);
		/// <summary>
		/// If toggle is set to false:
		///  The police won't be shown on the (mini)map
		/// 
		/// If toggle is set to true:
		///  The police will be shown on the (mini)map
		/// </summary>
		public static void SET_POLICE_RADAR_BLIPS(bool toggle) => Function.Call(0x6FD7DD6B63F2820E, toggle);
		/// <summary>
		/// Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
		/// </summary>
		public static bool IS_PLAYER_PLAYING(int player) => Function.Call<bool>(0xBFFB35986CAAE58C, player);
		public static void SET_EVERYONE_IGNORE_PLAYER(int player, bool toggle) => Function.Call(0x34630A768925B852, player, toggle);
		public static bool GET_IS_PLAYER_UI_PROMPT_ACTIVE(int player, int p1) => Function.Call<bool>(0x51BEA356B1C60225, player, p1);
		/// <summary>
		/// Params: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/ePromptType
		/// promptType is mostly 34 (PP_TRACK_ANIMAL), promptMode = 0 (PP_MODE_BLOCK) in R* Scripts
		/// </summary>
		public static void _MODIFY_PLAYER_UI_PROMPT(int player, int promptType, int promptMode, bool disabled) => Function.Call(0x0751D461F06E41CE, player, promptType, promptMode, disabled);
		/// <summary>
		/// Returns false if PromptType is enabled
		/// Params: See 0x0751D461F06E41CE
		/// </summary>
		public static bool _GET_PLAYER_UI_PROMPT_IS_DISABLED(int player, int promptType, int promptMode) => Function.Call<bool>(0x6614F9039BD31931, player, promptType, promptMode);
		/// <summary>
		/// Params: See 0x0751D461F06E41CE
		/// </summary>
		public static void _MODIFY_PLAYER_UI_PROMPT_FOR_PED(int player, int ped, int promptType, int promptMode, bool enabled) => Function.Call(0xA3DB37EDF9A74635, player, ped, promptType, promptMode, enabled);
		/// <summary>
		/// Returns true if PromptType is enabled for ped (mount)
		/// Params: See 0x0751D461F06E41CE
		/// </summary>
		public static bool _GET_PLAYER_UI_PROMPT_FOR_PED_IS_ENABLED(int player, int ped, int promptType, int promptMode) => Function.Call<bool>(0xEA8F168A76A0B9BC, player, ped, promptType, promptMode);
		public static void _0x93624B36E8851B42(int player) => Function.Call(0x93624B36E8851B42, player);
		public static void _0x9073EC5456651A90(Any p0, Any p1) => Function.Call(0x9073EC5456651A90, p0, p1);
		public static void _0x2E67707BEC52CA4B(Any p0) => Function.Call(0x2E67707BEC52CA4B, p0);
		/// <summary>
		/// Sets whether all random peds will run away from player if they are agitated (threatened) (bool=true), or some peds can stand up for themselves (bool=false).
		/// </summary>
		public static void SET_ALL_RANDOM_PEDS_FLEE(int player, bool toggle) => Function.Call(0xE705309B8C6445A4, player, toggle);
		public static void SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(int player) => Function.Call(0xD5C198A62F1DEB0A, player);
		public static void SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(int player) => Function.Call(0x16752DAA7E6D3F72, player);
		public static void _0x1D256EED194F5B58(Any p0) => Function.Call(0x1D256EED194F5B58, p0);
		public static Any _0x5B7B97E99F84138B(Any p0) => Function.Call<Any>(0x5B7B97E99F84138B, p0);
		/// <summary>
		/// Disables the players ability to be wanted by lawmen
		/// </summary>
		public static void _SET_DISABLE_PLAYER_WANTED_LEVEL(int player, bool disable) => Function.Call(0x8674D138391FFB1B, player, disable);
		public static Any _0xA82964B9D8D6A983() => Function.Call<Any>(0xA82964B9D8D6A983);
		public static void SET_WANTED_LEVEL_MULTIPLIER(float multiplier) => Function.Call(0xD7FA719CB54866C2, multiplier);
		public static void RESET_WANTED_LEVEL_DIFFICULTY(int player) => Function.Call(0x062D14F18E8B0CAE, player);
		public static void UPDATE_WANTED_POSITION_THIS_FRAME(int player) => Function.Call(0xD0B0B044112BF424, player);
		public static void SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(int player) => Function.Call(0x96722257E5381E00, player);
		public static void REPORT_POLICE_SPOTTED_PLAYER(int player) => Function.Call(0xCBCCF73FFA69CC6B, player);
		public static void SET_LAW_RESPONSE_DELAY_OVERRIDE(float p0) => Function.Call(0xD2DFC9CCA5596A11, p0);
		public static void RESET_LAW_RESPONSE_DELAY_OVERRIDE() => Function.Call(0x5CE5CACC01D0F985);
		public static bool CAN_PLAYER_START_MISSION(int player) => Function.Call<bool>(0x2DF170B1185AF777, player);
		public static bool IS_PLAYER_READY_FOR_CUTSCENE(int player) => Function.Call<bool>(0xAA67BCB0097F2FA3, player);
		public static bool IS_PLAYER_TARGETTING_ENTITY(int player, int entity, bool p2) => Function.Call<bool>(0x27F89FDC16688A7A, player, entity, p2);
		public static bool GET_PLAYER_TARGET_ENTITY(int player, int* entity) => Function.Call<bool>(0xAE663DDD99C8A670, player, entity);
		/// <summary>
		/// _GET_A* - _GET_C*
		/// </summary>
		public static bool _0x927861B2C08DBEA5(int player) => Function.Call<bool>(0x927861B2C08DBEA5, player);
		/// <summary>
		/// Checks if player is focused on any entity
		/// </summary>
		public static bool _IS_PLAYER_FREE_FOCUSING(int player) => Function.Call<bool>(0x1A51BFE60708E482, player);
		public static bool GET_PLAYER_INTERACTION_TARGET_ENTITY(int player, int* outEntity, bool p2, bool p3) => Function.Call<bool>(0x3EE1F7A8C32F24E1, player, outEntity, p2, p3);
		/// <summary>
		/// _GET_PLAYER_I*
		/// </summary>
		public static Any _0xBEA3A6E5F5F79A6F(Any p0, Any p1) => Function.Call<Any>(0xBEA3A6E5F5F79A6F, p0, p1);
		public static bool _IS_PLAYER_IN_SCOPE(int player) => Function.Call<bool>(0x04D7F33640662FA2, player);
		/// <summary>
		/// Gets a value indicating whether the specified player is currently aiming freely.
		/// </summary>
		public static bool IS_PLAYER_FREE_AIMING(int player) => Function.Call<bool>(0x936F967D4BE1CE9D, player);
		/// <summary>
		/// Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
		/// </summary>
		public static bool IS_PLAYER_FREE_AIMING_AT_ENTITY(int player, int entity) => Function.Call<bool>(0x8C67C11C68713D25, player, entity);
		public static bool GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(int player, int* entity) => Function.Call<bool>(0xA6817C110B830EAD, player, entity);
		public static void _0x3DAABE78A23694BC(Any p0, Any p1) => Function.Call(0x3DAABE78A23694BC, p0, p1);
		/// <summary>
		/// Only used in script function PROCESS_PED_INTERRUPT_DIALOGUE
		/// _GET_PLAYER_*
		/// </summary>
		public static bool _0x7AE93C45EC14A166(int player, int* ped) => Function.Call<bool>(0x7AE93C45EC14A166, player, ped);
		/// <summary>
		/// Affects the range of auto aim target.
		/// </summary>
		public static void SET_PLAYER_LOCKON_RANGE_OVERRIDE(int player, float range) => Function.Call(0x3A3CD06597388322, player, range);
		/// <summary>
		/// Sets whether this player can be hassled by gangs.
		/// </summary>
		public static void SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(int player, bool toggle) => Function.Call(0xC7FE774412046825, player, toggle);
		/// <summary>
		/// Sets whether this player can take cover.
		/// </summary>
		public static void SET_PLAYER_CAN_USE_COVER(int player, bool toggle) => Function.Call(0x5EDA520F7A3BAF4E, player, toggle);
		public static void _0xD1A70C1E8D1031FE(Any p0, Any p1) => Function.Call(0xD1A70C1E8D1031FE, p0, p1);
		/// <summary>
		/// _SET_PLAYER_CAN_BE_* - _SET_PLAYER_CAN_USE_*
		/// </summary>
		public static void _0xACA45DDCEF6071C4(int player, bool p1) => Function.Call(0xACA45DDCEF6071C4, player, p1);
		/// <summary>
		/// Params: p1 is mostly 15, sometimes 1 in R* Scripts (Function: PLAYER_TOGGLE_PICK_UP_HATS)
		/// _SET_PLAYER_*
		/// </summary>
		public static void _0xA0C683284DF027C7(int player, int p1, bool enable) => Function.Call(0xA0C683284DF027C7, player, p1, enable);
		public static void _SET_PLAYER_CAN_MERCY_KILL(int player, bool toggle) => Function.Call(0x39363DFD04E91496, player, toggle);
		public static void _0x4EC8BE63B8A5D4EF(int player, int p1) => Function.Call(0x4EC8BE63B8A5D4EF, player, p1);
		/// <summary>
		/// Gets the maximum wanted level the player can get.
		/// Ranges from 0 to 5.
		/// </summary>
		public static int GET_MAX_WANTED_LEVEL() => Function.Call<int>(0xD04CFAD1E2B7984A);
		public static bool IS_PLAYER_TARGETTING_ANYTHING(int player) => Function.Call<bool>(0x4605C66E0F935F83, player);
		public static void RESTORE_PLAYER_STAMINA(int player, float p1) => Function.Call(0xC41F4B6E23FE6A4A, player, p1);
		/// <summary>
		/// SET_PLAYER_S/T*
		/// </summary>
		public static void _0x8591EE69CC3ED257(int player, bool toggle) => Function.Call(0x8591EE69CC3ED257, player, toggle);
		/// <summary>
		/// Returns the group ID the player is member of.
		/// </summary>
		public static int GET_PLAYER_GROUP(int player) => Function.Call<int>(0x9BAB31815159ABCF, player);
		public static void _0x3D9DA5C9EFD20D88(Any p0, Any p1) => Function.Call(0x3D9DA5C9EFD20D88, p0, p1);
		public static void _0x2BEED53B912537D0(Any p0, Any p1, Any p2) => Function.Call(0x2BEED53B912537D0, p0, p1, p2);
		public static void _0x908D4B72854C8F62(Any p0) => Function.Call(0x908D4B72854C8F62, p0);
		public static Any _0xD1F6B912785BFD35(Any p0) => Function.Call<Any>(0xD1F6B912785BFD35, p0);
		public static void _0xC4873B053054C04B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xC4873B053054C04B, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _0xCA59808E51FD67C4(Any p0, Any p1) => Function.Call(0xCA59808E51FD67C4, p0, p1);
		public static void _0xBA5CA1FEB5DE0DF6(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xBA5CA1FEB5DE0DF6, p0, p1, p2, p3, p4, p5);
		public static void _0x0869D499A7848309(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x0869D499A7848309, p0, p1, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// _IS_PLAYER_I* - _IS_PLAYER_P*
		/// </summary>
		public static bool _0xB331D8A73F9D2BDF(int player, Any* p1) => Function.Call<bool>(0xB331D8A73F9D2BDF, player, p1);
		/// <summary>
		/// Used in script function: NET_AUTO_FOLLOW_UPDATE_LEADER_VALUES
		/// </summary>
		public static void _ADD_PLAYER_AS_FOLLOW_TARGET(int player, int ped, float p2, float p3, int followMode, int followPriority, bool p6) => Function.Call(0xAC22AA6DF4D1C1DE, player, ped, p2, p3, followMode, followPriority, p6);
		public static void _REMOVE_PLAYER_AS_FOLLOW_TARGET(int player, int ped) => Function.Call(0x0C6B89876262A99D, player, ped);
		public static void _0x12E09E278C6C29B7(Any p0) => Function.Call(0x12E09E278C6C29B7, p0);
		public static void _0xDD33A82352C4652F(int player, int ped, int p2) => Function.Call(0xDD33A82352C4652F, player, ped, p2);
		public static void _0x1FDA57E8908F2609(int player, int ped, bool useSteerassist) => Function.Call(0x1FDA57E8908F2609, player, ped, useSteerassist);
		public static void _0x84481018E668E1B8(int player, int ped, Any p2) => Function.Call(0x84481018E668E1B8, player, ped, p2);
		/// <summary>
		/// _IS_PLAYER_F*
		/// </summary>
		public static bool _0x2009F8AB7A5E9D6D(int player) => Function.Call<bool>(0x2009F8AB7A5E9D6D, player);
		public static bool _IS_PLAYER_FOLLOWING_TARGET(int player, int ped) => Function.Call<bool>(0xE24C64D9ADED2EF5, player, ped);
		/// <summary>
		/// _IS_PLAYER_A* - _IS_PLAYER_BE*
		/// </summary>
		public static bool _0xE7F8707269544B29(int player, int ped) => Function.Call<bool>(0xE7F8707269544B29, player, ped);
		public static Any _0xE631EAF35828FA67(Any p0) => Function.Call<Any>(0xE631EAF35828FA67, p0);
		public static void _0x086549F3B0381CB1(Any p0, Any p1) => Function.Call(0x086549F3B0381CB1, p0, p1);
		/// <summary>
		/// Returns whether the player can control himself.
		/// </summary>
		public static bool IS_PLAYER_CONTROL_ON(int player) => Function.Call<bool>(0x7964097FCE4C244B, player);
		public static bool IS_PLAYER_SCRIPT_CONTROL_ON(int player) => Function.Call<bool>(0xB78350754157C00F, player);
		/// <summary>
		/// Returns TRUE if the player ('s ped) is climbing at the moment.
		/// </summary>
		public static bool IS_PLAYER_CLIMBING(int player) => Function.Call<bool>(0xB8A70C22FD48197A, player);
		public static void _0xEBB6E27AC2FF32DA(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xEBB6E27AC2FF32DA, p0, p1, p2, p3, p4);
		public static Any _0xB15CD2F9932C9AB5(Any p0) => Function.Call<Any>(0xB15CD2F9932C9AB5, p0);
		/// <summary>
		/// _IS_PLAYER_S* - _IS_PLAYER_T*
		/// </summary>
		public static bool _0x621D1B289CAF5978(int player) => Function.Call<bool>(0x621D1B289CAF5978, player);
		/// <summary>
		/// Return true while player is being arrested / busted.
		/// 
		/// If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
		/// 
		/// If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
		/// </summary>
		public static bool IS_PLAYER_BEING_ARRESTED(int player, bool atArresting) => Function.Call<bool>(0xC8183AE963C58374, player, atArresting);
		public static void RESET_PLAYER_ARREST_STATE(int player) => Function.Call(0x12917931C31F1750, player);
		public static void _0xCBB54CC7FFFFAB86(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xCBB54CC7FFFFAB86, p0, p1, p2, p3);
		public static void _0xBED386157F65942C(Any p0, Any p1) => Function.Call(0xBED386157F65942C, p0, p1);
		public static Any _0xDAB6A2FC56B7DE65(Any p0) => Function.Call<Any>(0xDAB6A2FC56B7DE65, p0);
		public static Any _0x0F4EAF69DA41AF43(Any p0) => Function.Call<Any>(0x0F4EAF69DA41AF43, p0);
		public static void _SET_BOUNTY_TARGET(int player, int target) => Function.Call(0x6ADF821FBF21920E, player, target);
		public static void _CLEAR_BOUNTY_TARGET(int player) => Function.Call(0x8F2A81C09DA9124A, player);
		public static int GET_PLAYERS_LAST_VEHICLE() => Function.Call<int>(0x2F96E7720B0B19EA);
		/// <summary>
		/// Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
		/// </summary>
		public static int GET_PLAYER_INDEX() => Function.Call<int>(0x47E385B0D957C8D4);
		/// <summary>
		/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		/// </summary>
		public static int INT_TO_PLAYERINDEX(int value) => Function.Call<int>(0x748B3A65C2604C33, value);
		/// <summary>
		/// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		/// </summary>
		public static int INT_TO_PARTICIPANTINDEX(int value) => Function.Call<int>(0x58FF971FC8F2702C, value);
		/// <summary>
		/// This returns YOUR 'identity' as a Player type.
		/// 
		/// Always returns 0 in story mode.
		/// </summary>
		public static int PLAYER_ID() => Function.Call<int>(0x217E9DC48139933D);
		/// <summary>
		/// Returns current player ped
		/// </summary>
		public static int PLAYER_PED_ID() => Function.Call<int>(0x096275889B8E0EE0);
		/// <summary>
		/// Does exactly the same thing as PLAYER_ID()
		/// </summary>
		public static int NETWORK_PLAYER_ID_TO_INT() => Function.Call<int>(0x8A9386F0749A17FA);
		public static bool HAS_FORCE_CLEANUP_OCCURRED(int cleanupFlags) => Function.Call<bool>(0xC11469DCA6FC3BB5, cleanupFlags);
		public static void FORCE_CLEANUP(int cleanupFlags) => Function.Call(0x768C017FB878E4F4, cleanupFlags);
		public static void FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(string name, int cleanupFlags) => Function.Call(0xDAACAF8B687F2353, name, cleanupFlags);
		public static void FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(int id, int cleanupFlags) => Function.Call(0xF4C9512A2F0A3031, id, cleanupFlags);
		public static int GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP() => Function.Call<int>(0x84E8E29EBD4A46D2);
		public static void _0x39BED552DB46FFA9(Any p0, Any p1) => Function.Call(0x39BED552DB46FFA9, p0, p1);
		public static int _0x054473164C012699(int player) => Function.Call<int>(0x054473164C012699, player);
		public static void SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(int player, int vehicle) => Function.Call(0xDA35A134038557EC, player, vehicle);
		public static void _0xC71D07C96946E263(Any p0, Any p1) => Function.Call(0xC71D07C96946E263, p0, p1);
		public static void SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(int player) => Function.Call(0xBEC463B3A11C909E, player);
		public static bool IS_SYSTEM_UI_BEING_DISPLAYED() => Function.Call<bool>(0x908258B6209E71F7);
		public static void _0xD48227263E3D06AE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0xD48227263E3D06AE, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _0x3946FC742AC305CD(int player, int ped, string p2, float x, float y, float z, int targetEntity, string p7) => Function.Call(0x3946FC742AC305CD, player, ped, p2, x, y, z, targetEntity, p7);
		public static void _0x3946FC742AC305CD(int player, int ped, string p2, Vector3 vec, int targetEntity, string p7) => Function.Call(0x3946FC742AC305CD, player, ped, p2, vec.X, vec.Y, vec.Z, targetEntity, p7);
		public static void _0xA28056CD1B04B250(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0xA28056CD1B04B250, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		/// <summary>
		/// _DISABLE_*(PLAYER_FORCED_INTERACTION_LOCKON?)
		/// </summary>
		public static void _0xC67A4910425F11F1(int player, string name) => Function.Call(0xC67A4910425F11F1, player, name);
		/// <summary>
		/// Simply sets you as invincible (Health will not deplete).
		/// </summary>
		public static void SET_PLAYER_INVINCIBLE(int player, bool toggle) => Function.Call(0xFEBEEBC9CBDF4B12, player, toggle);
		/// <summary>
		/// Returns the player's invincibility status.
		/// </summary>
		public static bool GET_PLAYER_INVINCIBLE(int player) => Function.Call<bool>(0x0CBBCB2CCFA7DC4E, player);
		public static void SET_PLAYER_LOCKON(int player, bool toggle) => Function.Call(0x462AA1973CBBA75E, player, toggle);
		public static void SET_LOCKON_TO_FRIENDLY_PLAYERS(int player, bool toggle) => Function.Call(0x4A056257802DD3E5, player, toggle);
		/// <summary>
		/// Sets your targeting mode for when you're on foot.
		/// enum eTargetingMode
		/// {
		/// 	TARGETING_MODE_INVALID = -1,
		/// 	TARGETING_MODE_CAUSAL, (Wide)
		/// 	TARGETING_MODE_NORMAL,
		/// 	TARGETING_MODE_HARD, (Narrow)
		/// 	TARGETING_MODE_EXPERT (Free Aim)
		/// };
		/// </summary>
		public static void SET_PLAYER_TARGETING_MODE(int targetMode) => Function.Call(0xD66A941F401E7302, targetMode);
		/// <summary>
		/// Sets your targeting mode for when you're in a vehicle (perhaps a mount/horse).
		/// see SET_PLAYER_TARGETING_MODE for eTargetingMode
		/// </summary>
		public static void _SET_PLAYER_IN_VEHICLE_TARGETING_MODE(int targetMode) => Function.Call(0x19B4F71703902238, targetMode);
		public static Any _0x747257807B8721CE(Any p0, Any p1) => Function.Call<Any>(0x747257807B8721CE, p0, p1);
		public static Any _0x8702D9150D9FBB3D(Any p0, Any p1) => Function.Call<Any>(0x8702D9150D9FBB3D, p0, p1);
		public static void _0xCB0B9506BC91E441(Any p0, Any p1) => Function.Call(0xCB0B9506BC91E441, p0, p1);
		public static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(int player) => Function.Call(0x270B63A641BE32F2, player);
		public static bool HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(int player) => Function.Call<bool>(0xDA4A4B9B96E20092, player);
		public static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(int player) => Function.Call(0x0361096D6CE4372C, player);
		public static bool HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(int player) => Function.Call<bool>(0x16C8D205DD5A2E90, player);
		public static void _0xEACEBAAE0A33FB3F(Any p0) => Function.Call(0xEACEBAAE0A33FB3F, p0);
		/// <summary>
		/// _HAS_PLAYER_D*
		/// </summary>
		public static bool _0x72AD59F7B7FB6E24(int player, int p1) => Function.Call<bool>(0x72AD59F7B7FB6E24, player, p1);
		public static bool _0x1A6E84F13C952094(int player, int p1, Any* p2) => Function.Call<bool>(0x1A6E84F13C952094, player, p1, p2);
		/// <summary>
		/// damageInfo: STANDARD_PED_DAMAGE, STANDARD_FEMALE_PED_DAMAGE, STANDARD_PLAYER_PED_DAMAGE_MP, STANDARD_FEMALE_PLAYER_PED_DAMAGE_MP
		/// </summary>
		public static void _SET_PLAYER_DAMAGE_INFO_OVERRIDE(int player, string damageInfo) => Function.Call(0x78B3D19AF6391A55, player, damageInfo);
		/// <summary>
		/// _RESET_PLAYER_A* - _RESET_PLAYER_I*
		/// </summary>
		public static void _0x1F488807BC8E0630(int player) => Function.Call(0x1F488807BC8E0630, player);
		/// <summary>
		/// This can be between 1.0f - 50.0f
		/// </summary>
		public static void SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(int player, float multiplier) => Function.Call(0x5DA6500FE849DA16, player, multiplier);
		/// <summary>
		/// Swim speed multiplier.
		/// Multiplier goes up to 1.49f
		/// </summary>
		public static void SET_SWIM_MULTIPLIER_FOR_PLAYER(int player, float multiplier) => Function.Call(0xBFCEABDE34DA5085, player, multiplier);
		public static bool _0x73EB2EF2E92D23BF() => Function.Call<bool>(0x73EB2EF2E92D23BF);
		public static void SET_PLAYER_FORCED_AIM(int player, bool toggle, int ped, int p3, bool p4) => Function.Call(0xD5FCC166AEB2FD0F, player, toggle, ped, p3, p4);
		public static void _0x310CE349E0C0EC4B(int player, int ped, int p2) => Function.Call(0x310CE349E0C0EC4B, player, ped, p2);
		/// <summary>
		/// Inhibits the player from using any method of combat including melee and firearms.
		/// 
		/// NOTE: Only disables the firing for one frame
		/// </summary>
		public static void DISABLE_PLAYER_FIRING(int player, bool toggle) => Function.Call(0x2970929FD5F9FC89, player, toggle);
		public static void _0xEBFF94328FF7A18A(Any p0, Any p1) => Function.Call(0xEBFF94328FF7A18A, p0, p1);
		public static void _0xF993373285053D77(Any p0, Any p1, Any p2) => Function.Call(0xF993373285053D77, p0, p1, p2);
		public static Any _0xE956C2340A76272E(Any p0) => Function.Call<Any>(0xE956C2340A76272E, p0);
		public static void _ENABLE_CUSTOM_DEADEYE_ABILITY(int player, bool enable) => Function.Call(0x95EE1DEE1DCD9070, player, enable);
		public static Any _0xDE6C85975F9D4894(Any p0) => Function.Call<Any>(0xDE6C85975F9D4894, p0);
		/// <summary>
		/// Used in script function INIT_DEADEYE_SLOWDOWN
		/// _SPECIAL_ABILITY*
		/// </summary>
		public static void _0xBBA140062B15A8AC(int player) => Function.Call(0xBBA140062B15A8AC, player);
		public static void _SPECIAL_ABILITY_SET_DISABLED(int player, bool disabled) => Function.Call(0xAE637BB8EF017875, player, disabled);
		public static bool _IS_SPECIAL_ABILITY_ACTIVE(int player) => Function.Call<bool>(0xB16223CB7DA965F0, player);
		/// <summary>
		/// Toggle handles wether Deadeye and Eagleeye are infinite or not.
		/// </summary>
		public static void _MODIFY_INFINITE_TRAIL_VISION(int player, bool toggle) => Function.Call(0x28A13BF6B05C3D83, player, toggle);
		public static void _SPECIAL_ABILITY_SET_EAGLE_EYE_DISABLED(int player) => Function.Call(0xC0B21F235C02139C, player);
		/// <summary>
		/// Restores Deadeye by given amount.
		/// Params: p2, p3, p4 = 0, 0, 1 in R* Scripts
		/// </summary>
		public static void _SPECIAL_ABILITY_RESTORE_BY_AMOUNT(int player, float amount, int p2, int p3, int p4) => Function.Call(0x51345AE20F22C261, player, amount, p2, p3, p4);
		/// <summary>
		/// Params: p1, p2, p3, p4 = 1.f, 0, 0, 0 in R* Scripts
		/// _SPECIAL_ABILITY*
		/// </summary>
		public static void _0xFA437FA0738C370C(int player, float p1, int p2, int p3, int p4) => Function.Call(0xFA437FA0738C370C, player, p1, p2, p3, p4);
		/// <summary>
		/// Only used in R* SP Script short_update
		/// Restores Deadeye Outer Ring
		/// </summary>
		public static void _SPECIAL_ABILITY_RESTORE_OUTER_RING(int player, float amount) => Function.Call(0x2498035289B5688F, player, amount);
		/// <summary>
		/// If player has less Dead Eye than required, Dead Eye cant be triggered.
		/// </summary>
		public static float _GET_PLAYER_REQUIRED_DEAD_EYE_AMOUNT(int player) => Function.Call<float>(0x811A748B1BE231BA, player);
		/// <summary>
		/// Returns Deadeye value from player
		/// </summary>
		public static float _SPECIAL_ABILITY_GET_AMOUNT_CACHED(int player) => Function.Call<float>(0x029884FB65821B07, player);
		/// <summary>
		/// Drains Deadeye by given amount.
		/// </summary>
		public static void _SPECIAL_ABILITY_DRAIN_BY_AMOUNT(int player, float amount, Any p2) => Function.Call(0x200114E99552462B, player, amount, p2);
		/// <summary>
		/// Params: p1 = -1 in R* Scripts
		/// </summary>
		public static void _SPECIAL_ABILITY_START_RESTORE(int player, int p1, bool p2) => Function.Call(0x1D77B47AFA584E90, player, p1, p2);
		public static void _SET_SPECIAL_ABILITY_MULTIPLIER(int player, float multiplier) => Function.Call(0x5A498FCA232F71E1, player, multiplier);
		public static float _GET_PLAYER_SPECIAL_ABILITY_MULTIPLIER(int player) => Function.Call<float>(0xAB3773E7AA1E9DCC, player);
		public static void _0x00BA333DA05ADC23(Any p0, Any p1) => Function.Call(0x00BA333DA05ADC23, p0, p1);
		public static void _0x22B3CABEDDB538B2(int player, float p1) => Function.Call(0x22B3CABEDDB538B2, player, p1);
		/// <summary>
		/// durationCost: per second
		/// </summary>
		public static void _SET_SPECIAL_ABILITY_DURATION_COST(int player, float durationCost) => Function.Call(0xB783F75940B23014, player, durationCost);
		/// <summary>
		/// Only used in R* SP Script short_update
		/// </summary>
		public static void _SET_SPECIAL_ABILITY_DISABLE_TIMER(int player, float timer) => Function.Call(0xC0B1C05B313693D1, player, timer);
		public static Any _0x57D9991DC1334151(Any p0) => Function.Call<Any>(0x57D9991DC1334151, p0);
		public static Any _0x21091B4BEB6376EE(Any p0) => Function.Call<Any>(0x21091B4BEB6376EE, p0);
		public static void _SET_SPECIAL_ABILITY_ACTIVATION_COST(int player, float activationCost, int p2) => Function.Call(0xAE4BCC79C587EBBF, player, activationCost, p2);
		/// <summary>
		/// _SET_SPECIAL_ABILITY_*
		/// </summary>
		public static void _0x4D1699543B1C023C(int player, float p1) => Function.Call(0x4D1699543B1C023C, player, p1);
		public static float _GET_PLAYER_DEAD_EYE_METER_LEVEL(int player, bool p1) => Function.Call<float>(0x3A6AE4EEE30370FE, player, p1);
		public static float _GET_PLAYER_DEAD_EYE(int player) => Function.Call<float>(0xA81D24AE0AF99A5E, player);
		public static float _GET_PLAYER_CACHED_DEAD_EYE_AMOUNT(int player) => Function.Call<float>(0xDF66A37936D5F3D9, player);
		public static float _GET_PLAYER_MAX_DEAD_EYE(int player, Any p1) => Function.Call<float>(0x592F58BC4D2A2CF3, player, p1);
		public static float _GET_PLAYER_HEALTH(int player) => Function.Call<float>(0x0317C947D062854E, player);
		public static float _GET_PLAYER_STAMINA(int player) => Function.Call<float>(0x0FF421E467373FCF, player);
		/// <summary>
		/// _N*, _O* or _PE*
		/// </summary>
		public static void _SET_PLAYER_STAT_FLAG_HASH(int player, uint p1) => Function.Call(0x768E81AE285A4B67, player, p1);
		public static void _0x0E1DB1F8F5B561DC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x0E1DB1F8F5B561DC, p0, p1, p2, p3, p4, p5);
		public static void _0x08E22898A6AF4905(Any p0, Any p1) => Function.Call(0x08E22898A6AF4905, p0, p1);
		public static Any _0xBEFED69CE8317F91(Any p0) => Function.Call<Any>(0xBEFED69CE8317F91, p0);
		/// <summary>
		/// (Un)lock Eagle Eye functionality
		/// </summary>
		public static void _ENABLE_EAGLEEYE(int player, bool enable) => Function.Call(0xA63FCAD3A6FEC6D2, player, enable);
		public static Any _0xE022CC1B545F1D9F(Any p0) => Function.Call<Any>(0xE022CC1B545F1D9F, p0);
		/// <summary>
		/// Activates EagleEye, called together with 0x28A13BF6B05C3D83
		/// </summary>
		public static void _SECONDARY_SPECIAL_ABILITY_SET_ACTIVE(int player) => Function.Call(0x1710BC33CFB83634, player);
		/// <summary>
		/// Deactivates EagleEye, called together with 0xC0B21F235C02139C
		/// </summary>
		public static void _SECONDARY_SPECIAL_ABILITY_SET_DISABLED(int player, bool disabled) => Function.Call(0x64FF4BF9AF59E139, player, disabled);
		public static bool _IS_SECONDARY_SPECIAL_ABILITY_ACTIVE(int player) => Function.Call<bool>(0x45AB66D02B601FA7, player);
		public static void _0x107F2A66E1C4C83A(Any p0) => Function.Call(0x107F2A66E1C4C83A, p0);
		public static void START_PLAYER_TELEPORT(int player, float x, float y, float z, float heading, bool p5, bool p6, bool p7, bool p8) => Function.Call(0xDF8822C55EDDA65B, player, x, y, z, heading, p5, p6, p7, p8);
		public static void START_PLAYER_TELEPORT(int player, Vector3 vec, float heading, bool p5, bool p6, bool p7, bool p8) => Function.Call(0xDF8822C55EDDA65B, player, vec.X, vec.Y, vec.Z, heading, p5, p6, p7, p8);
		public static void _0x2C2D287748E8E9B7(bool p0) => Function.Call(0x2C2D287748E8E9B7, p0);
		public static bool UPDATE_PLAYER_TELEPORT(int player) => Function.Call<bool>(0xC39DCE4672CBFBC1, player);
		/// <summary>
		/// Disables the player's teleportation
		/// </summary>
		public static void STOP_PLAYER_TELEPORT() => Function.Call(0x0858B86146601BE8);
		public static bool IS_PLAYER_TELEPORT_ACTIVE() => Function.Call<bool>(0x085EEAEB8783FEB5);
		public static float GET_PLAYER_CURRENT_STEALTH_NOISE(int player) => Function.Call<float>(0xD7ECC25E176ECBA5, player);
		public static void SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(int player, float regenRate) => Function.Call(0x8899C244EBCF70DE, player, regenRate);
		public static float _GET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(int player) => Function.Call<float>(0x22CD23BB0C45E0CD, player);
		/// <summary>
		/// Setting player's Health recharge time to zero forces immediate health regen
		/// </summary>
		public static void _SET_PLAYER_HEALTH_RECHARGE_TIME_MODIFIER(int player, float modifier) => Function.Call(0x535ED4605F89AB6E, player, modifier);
		public static void SET_PLAYER_STAMINA_RECHARGE_MULTIPLIER(int player, float multiplier) => Function.Call(0xFECA17CF3343694B, player, multiplier);
		public static float _GET_PLAYER_STAMINA_RECHARGE_MULTIPLIER(int player) => Function.Call<float>(0x617D3494AD58200F, player);
		public static void _SET_PLAYER_STAMINA_SPRINT_DEPLETION_MULTIPLIER(int player, float multiplier) => Function.Call(0xBBADFB5E5E5766FB, player, multiplier);
		public static float _GET_PLAYER_STAMINA_DEPLETION_MULTIPLIER(int player) => Function.Call<float>(0x68A0389E0718AC8F, player);
		/// <summary>
		/// Seems to work similar to 0xD2CB0FB0FDCB473D
		/// </summary>
		public static void _SET_PED_ACTIVE_PLAYER_HORSE(int player, int horse) => Function.Call(0x8FBF9EDB378CCB8C, player, horse);
		public static int _GET_ACTIVE_HORSE_FOR_PLAYER(int player) => Function.Call<int>(0x46FA0AE18F4C7FA9, player);
		public static void _SET_PED_AS_SADDLE_HORSE_FOR_PLAYER(int player, int mount) => Function.Call(0xD2CB0FB0FDCB473D, player, mount);
		public static int _GET_SADDLE_HORSE_FOR_PLAYER(int player) => Function.Call<int>(0xB48050D326E9A2F3, player);
		public static bool SET_PED_AS_TEMP_PLAYER_HORSE(int player, int horse) => Function.Call<bool>(0x227B06324234FB09, player, horse);
		public static int _GET_TEMP_PLAYER_HORSE(int player) => Function.Call<int>(0xD3F7445CEA2E5035, player);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x77B0B6D17A3AC9AA(Any p0, Any p1) => Function.Call(0x77B0B6D17A3AC9AA, p0, p1);
		/// <summary>
		/// _SET_PLAYER_*
		/// </summary>
		public static void _0xDF93973251FB2CA5(int player, bool p1) => Function.Call(0xDF93973251FB2CA5, player, p1);
		public static void _0x694FFA4308060CD1(Any p0, Any p1) => Function.Call(0x694FFA4308060CD1, p0, p1);
		public static void BOOST_PLAYER_HORSE_SPEED_FOR_TIME(int player, float speedBoost, int duration) => Function.Call(0x09C28F828EE674FA, player, speedBoost, duration);
		/// <summary>
		/// This modifies the damage value of your weapon. Whether it is a multiplier or base damage is unknown.
		/// </summary>
		public static void SET_PLAYER_WEAPON_DAMAGE_MODIFIER(int player, float modifier) => Function.Call(0x94D529F7B73D7A85, player, modifier);
		public static void SET_PLAYER_WEAPON_DEFENSE_MODIFIER(int player, float modifier) => Function.Call(0xD15CC2D493160BE3, player, modifier);
		/// <summary>
		/// _SET_PLAYER_DAMAGE_* - _SET_PLAYER_DEFENSE_*
		/// </summary>
		public static void _0x818241B3EDA84191(int player, bool p1) => Function.Call(0x818241B3EDA84191, player, p1);
		public static void SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(int player, float modifier) => Function.Call(0xE4CB5A3F18170381, player, modifier);
		public static void _SET_PLAYER_EXPLOSIVE_WEAPON_DAMAGE_MODIFIER(int player, float modifier) => Function.Call(0x2D3ACE3DE0A2B622, player, modifier);
		public static void _0x83C989D5B5B5B466(Any p0, Any p1) => Function.Call(0x83C989D5B5B5B466, p0, p1);
		public static Any _0x03B4B759A8990505(Any p0) => Function.Call<Any>(0x03B4B759A8990505, p0);
		public static void _0x67659A8F248E0141(Any p0, Any p1) => Function.Call(0x67659A8F248E0141, p0, p1);
		/// <summary>
		/// Decreases the damage the player receives while on horseback
		/// </summary>
		public static void _SET_RECEIVED_HORSEBACK_DAMAGE_DECREASE(int player, float damageDecrease) => Function.Call(0xB427911EA6DFFEF3, player, damageDecrease);
		/// <summary>
		/// Sets Player's Defense against AI modifier
		/// </summary>
		public static void _SET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI(int player, float modifier) => Function.Call(0x914071FF93AF2692, player, modifier);
		public static float _GET_AI_PLAYER_DEFENSE_MODIFIER_AGAINST_AI(int player) => Function.Call<float>(0x2E78D822208E740A, player);
		public static Any _0x19B2C7A6C34FAD54(Any p0, Any p1) => Function.Call<Any>(0x19B2C7A6C34FAD54, p0, p1);
		public static Any _0x9422743A5BA50E10(Any p0) => Function.Call<Any>(0x9422743A5BA50E10, p0);
		/// <summary>
		/// Sets stamina core drains peed using ranged damage scale and melee damage scale
		/// </summary>
		public static void _SET_PLAYER_DEFENSE_MODIFIER(int player, float weaponDefenseMod, float meleeDefenseMod) => Function.Call(0x497A6539BB0E8787, player, weaponDefenseMod, meleeDefenseMod);
		/// <summary>
		/// bullet damage modifier: type = 4
		/// explosive damage Defense mod: type = 7
		/// fire damage Defense mod: type = 8, 15
		/// </summary>
		public static void _SET_PLAYER_DEFENSE_TYPE_MODIFIER(int player, int type, float defenseModifier) => Function.Call(0x93F499CAE53FCD05, player, type, defenseModifier);
		public static void SET_PLAYER_WEAPON_TYPE_DAMAGE_MODIFIER(int player, uint weaponHash, float damageModifier) => Function.Call(0xD04AD186CE8BB129, player, weaponHash, damageModifier);
		public static float _GET_PLAYER_WEAPON_DAMAGE(int player, uint weaponHash) => Function.Call<float>(0xFE0304050261442C, player, weaponHash);
		public static void _0x5C2E5E3CAEEB1F58(Any p0, Any p1, Any p2) => Function.Call(0x5C2E5E3CAEEB1F58, p0, p1, p2);
		public static void _SET_PLAYER_WEAPON_GROUP_DAMAGE_MODIFIER(int player, uint weaponGroup, float modifier) => Function.Call(0xFC79DCC94D0A5897, player, weaponGroup, modifier);
		public static void _SET_PLAYER_WEAPON_GROUP_AS_INSTANT_KILL(int player, uint weaponGroup, bool toggle) => Function.Call(0x59F0AFF3E0A1B019, player, weaponGroup, toggle);
		public static void _SET_PLAYER_TRAMPLE_DAMAGE_MODIFIER(int player, float modifier) => Function.Call(0xAF341032E97FB061, player, modifier);
		/// <summary>
		/// _SET_PLAYER_A* - _SET_PLAYER_C*
		/// </summary>
		public static void _SET_PLAYER_LASSO_DAMAGE_PER_SECOND(int player, float damage) => Function.Call(0x43F50A7CD2482156, player, damage);
		public static void _SET_PLAYER_TOTAL_ACCURACY_MODIFIER(int player, float accuracy) => Function.Call(0x967FF5BC0CFE6D26, player, accuracy);
		public static void _SET_PLAYER_LOCAL_ACCURACY_FLOOR_MODIFIER(int player, float accuracy) => Function.Call(0x4EA69188FBCE6A7D, player, accuracy);
		public static void _SET_PLAYER_REMOTE_ACCURACY_FLOOR_MODIFIER(int player, float accuracy) => Function.Call(0xDEE80FEDFDD43C9B, player, accuracy);
		public static void _0x3AD212429E095EFB(Any p0, Any p1) => Function.Call(0x3AD212429E095EFB, p0, p1);
		public static void SET_PLAYER_NOISE_MULTIPLIER(int player, float multiplier) => Function.Call(0xB5EC6BDAEBCA454C, player, multiplier);
		public static void _0x113EF458AB6CDA67(Any p0, Any p1) => Function.Call(0x113EF458AB6CDA67, p0, p1);
		public static void SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(int player, float multiplier) => Function.Call(0x4DE44FA389DCA565, player, multiplier);
		public static void SIMULATE_PLAYER_INPUT_GAIT(int player, float amount, int gaitType, float speed, bool p4, bool p5) => Function.Call(0xFA0C063C422C4355, player, amount, gaitType, speed, p4, p5);
		public static void RESET_PLAYER_INPUT_GAIT(int player) => Function.Call(0x61A2EECAB274829B, player);
		public static void SET_PLAYER_SIMULATE_AIMING(int player, bool toggle) => Function.Call(0xE0447DEF81CCDFD2, player, toggle);
		public static void SET_PLAYER_CLOTH_PIN_FRAMES(int ped, int p1) => Function.Call(0xD0D9317DFEEF9A66, ped, p1);
		public static bool HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(int player) => Function.Call<bool>(0xC932F57F31EA9152, player);
		public static bool GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(int player, int p1, bool p2) => Function.Call<bool>(0xFB6EB8785F808551, player, p1, p2);
		public static void _SET_MOUNT_PROMPT_DISABLED(bool disabled) => Function.Call(0x5B9813ECF7633FE8, disabled);
		/// <summary>
		/// Returns true if the player is riding a train.
		/// </summary>
		public static bool IS_PLAYER_RIDING_TRAIN(int player) => Function.Call<bool>(0x2FB0ACADA6A238DD, player);
		public static void _0x9AFCF9FE1884BF62(Any p0, Any p1) => Function.Call(0x9AFCF9FE1884BF62, p0, p1);
		public static Any _0x1E8099F449ABB0BA(Any p0) => Function.Call<Any>(0x1E8099F449ABB0BA, p0);
		public static int _GET_DEADEYE_ABILITY_LEVEL(int player) => Function.Call<int>(0xCCE7C695C164C35F, player);
		/// <summary>
		/// Max level is 5.
		/// </summary>
		public static void _SET_DEADEYE_ABILITY_LEVEL(int player, int level) => Function.Call(0xF0FE8E790BFEB5BB, player, level);
		public static bool _IS_DEADEYE_ABILITY_LOCKED(int player, int abilityType) => Function.Call<bool>(0x8A0643B0B4CA276B, player, abilityType);
		public static void _SET_DEADEYE_ABILITY_LOCKED(int player, int abilityType, bool toggle) => Function.Call(0x2797B8D66DD0EBB8, player, abilityType, toggle);
		public static void _SET_DEADEYE_TAGGING_ENABLED(int player, bool toggle) => Function.Call(0x6B5DDFB967E5073D, player, toggle);
		public static bool _GET_IS_DEADEYE_TAGGING_ENABLED(int player) => Function.Call<bool>(0x32348719DCED2969, player);
		public static void _0x3C4AE8506638C7E2(Any p0, Any p1) => Function.Call(0x3C4AE8506638C7E2, p0, p1);
		public static Any _0x51139D8C17B16FBC(Any p0) => Function.Call<Any>(0x51139D8C17B16FBC, p0);
		public static void _0x8F44EBB3BA8F6D44(Any p0, Any p1) => Function.Call(0x8F44EBB3BA8F6D44, p0, p1);
		public static void _SET_DEADEYE_TAGGING_CONFIG(int player, int filter) => Function.Call(0x83FCD6921FC8FD05, player, filter);
		public static Any _0xE92261BD28C0878F(Any p0) => Function.Call<Any>(0xE92261BD28C0878F, p0);
		/// <summary>
		/// Only used in R* SP Script short_update
		/// </summary>
		public static void _SET_DEADEYE_ABILITY_DEPLETION_DELAY(int player, float delay) => Function.Call(0x870634493CB4372C, player, delay);
		public static Any _0xA54000D4BFD90BDE(Any p0) => Function.Call<Any>(0xA54000D4BFD90BDE, p0);
		public static void _0x6EDB5D08CB03E763(Any p0, Any p1) => Function.Call(0x6EDB5D08CB03E763, p0, p1);
		public static Any _0x27AD7162D3FED01E(Any p0, Any p1) => Function.Call<Any>(0x27AD7162D3FED01E, p0, p1);
		public static int _GET_NUM_MARKED_DEADEYE_TARGETS(int player) => Function.Call<int>(0xCCD9B77F70D31C9D, player);
		public static Any _0xC93A9A45430D484E(Any p0) => Function.Call<Any>(0xC93A9A45430D484E, p0);
		/// <summary>
		/// Used in script function INIT_DEADEYE_SLOWDOWN
		/// </summary>
		public static void _0x570A13A4CA2799BB(int player, bool p1) => Function.Call(0x570A13A4CA2799BB, player, p1);
		/// <summary>
		/// Used in script function INIT_DEADEYE_SLOWDOWN
		/// </summary>
		public static void _0x3ACAC8832E77BC93(int player, bool p1) => Function.Call(0x3ACAC8832E77BC93, player, p1);
		public static void _0x2B12B6FC8B8772AB(int player, int p1) => Function.Call(0x2B12B6FC8B8772AB, player, p1);
		public static void _0xE910932F4B30BE23(int player) => Function.Call(0xE910932F4B30BE23, player);
		public static void _0x131E294EF60160DF(int player, float p1, float p2, float p3, float p4, Any p5) => Function.Call(0x131E294EF60160DF, player, p1, p2, p3, p4, p5);
		public static void _0x0E9057A9DA78D0F8(int player, int bitflag) => Function.Call(0x0E9057A9DA78D0F8, player, bitflag);
		public static void _0x263D69767F76059C(int player, int p1) => Function.Call(0x263D69767F76059C, player, p1);
		/// <summary>
		/// Used for setting up eagle eye for entity
		/// Params: p2 = re-register or not?
		/// </summary>
		public static void _REGISTER_EAGLE_EYE_FOR_ENTITY(int player, int entity, bool p2) => Function.Call(0x543DFE14BE720027, player, entity, p2);
		public static void _REGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY(int player, int entity, Any p2) => Function.Call(0xAC67098A1E54ABB0, player, entity, p2);
		public static void _UNREGISTER_EAGLE_EYE_FOR_ENTITY(int player, int entity) => Function.Call(0x9DAE1380CC5C6451, player, entity);
		public static void _UNREGISTER_EAGLE_EYE_TRAILS_FOR_ENTITY(int player, int entity, Any p2) => Function.Call(0x9A957912CE2EABD1, player, entity, p2);
		/// <summary>
		/// _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
		/// </summary>
		public static void _0xE5D3EB37ABC1EB03(int player) => Function.Call(0xE5D3EB37ABC1EB03, player);
		public static bool _IS_EAGLE_EYE_REGISTERED_FOR_ENTITY(int player, int entity) => Function.Call<bool>(0x0E6846476906C9DD, player, entity);
		public static Any _0x6852288340B43239(Any p0, Any p1) => Function.Call<Any>(0x6852288340B43239, p0, p1);
		public static Any _0xE50A67C33514A390(Any p0, Any p1) => Function.Call<Any>(0xE50A67C33514A390, p0, p1);
		public static void _0xD288E02E364972D2(Any p0, Any p1, Any p2) => Function.Call(0xD288E02E364972D2, p0, p1, p2);
		public static void _EAGLE_EYE_DISABLE_TRACKING_TRAIL(int entity, string trail, Any p2, Any p3) => Function.Call(0x40AB73092C95B5F5, entity, trail, p2, p3);
		public static void _0x6ECFC621A168424C(int entity1, int entity2, Any p2, float p3) => Function.Call(0x6ECFC621A168424C, entity1, entity2, p2, p3);
		public static void _0xDC5E09D012D759C4(int entity1, int entity2, Any p2) => Function.Call(0xDC5E09D012D759C4, entity1, entity2, p2);
		public static void _0x00B156AFEBCC5AE0(Any p0) => Function.Call(0x00B156AFEBCC5AE0, p0);
		public static void _0xC58CE6824E604DEC(Any p0) => Function.Call(0xC58CE6824E604DEC, p0);
		public static void _0x330CA55A3647FA1C(Any p0, Any p1) => Function.Call(0x330CA55A3647FA1C, p0, p1);
		public static Any _0xA62BBAAE67A05BB0(Any p0) => Function.Call<Any>(0xA62BBAAE67A05BB0, p0);
		/// <summary>
		/// false: default eagleeye color
		/// true: green eagleeye color
		/// </summary>
		public static void _EAGLE_EYE_SET_COLOR(int player, bool p1, Any* p2) => Function.Call(0x2C41D93F550D5E37, player, p1, p2);
		public static void _0x22C8B10802301381(Any p0, Any p1) => Function.Call(0x22C8B10802301381, p0, p1);
		public static void _EAGLE_EYE_SET_DRAIN_RATE_MODIFIER(int player, float modifier) => Function.Call(0xE0D6C2A146A5C993, player, modifier);
		public static void _0x06E1FB78B1E59CA5(int ped, bool p1) => Function.Call(0x06E1FB78B1E59CA5, ped, p1);
		public static void _EAGLE_EYE_SET_PLUS_FLAG_DISABLED(int ped, bool disabled) => Function.Call(0xCE285A4413B00B7F, ped, disabled);
		public static Any _0x3813E11A378958A5(Any p0) => Function.Call<Any>(0x3813E11A378958A5, p0);
		public static void _EAGLE_EYE_SET_FOCUS_ON_ASSOCIATED_CLUE_TRAIL(int player, int linkedWaypointPed) => Function.Call(0x2AF423D6ECB2C485, player, linkedWaypointPed);
		public static void _0x0F9CF06986300875(Any p0) => Function.Call(0x0F9CF06986300875, p0);
		public static void _EAGLE_EYE_SET_TRACKING_UPGRADE(int player, float p1) => Function.Call(0xDFC85C5199045026, player, p1);
		public static void _EAGLE_EYE_SET_TRACKING_UPGRADE_2(int player, float p1) => Function.Call(0x6FA957D1B55941C1, player, p1);
		public static Any _0x1DA5C5B0923E1B85(Any p0) => Function.Call<Any>(0x1DA5C5B0923E1B85, p0);
		public static Any _0xAAED694CE814817F(Any p0) => Function.Call<Any>(0xAAED694CE814817F, p0);
		public static void EAGLE_EYE_SET_CUSTOM_ENTITY_TINT(int entity, int red, int green, int blue) => Function.Call(0x62ED71E133B6C9F1, entity, red, green, blue);
		public static void _0xBC02B3D151D3859F(int entity, Any p1) => Function.Call(0xBC02B3D151D3859F, entity, p1);
		public static void _EAGLE_EYE_SET_CUSTOM_DISTANCE(int entity, float distance) => Function.Call(0x907B16B3834C69E2, entity, distance);
		/// <summary>
		/// _CLEAR_FACIAL_* - _CLEAR_PED_BLOOD*
		/// </summary>
		public static void _0xF21C7A3F3FFBA629(int player) => Function.Call(0xF21C7A3F3FFBA629, player);
		public static void _SET_PLAYER_MANAGE_BUFF_SUPER_JUMP(int player, float p1) => Function.Call(0x292F0B6EDC82E3A4, player, p1);
		/// <summary>
		/// see personaabilities.meta
		/// enum ePersonaAbilityFlag
		/// {
		/// 	PERSONA_CAN_AUTOESCAPE_FROM_LASSO,
		/// 	PERSONA_HAT_BLOCKS_FIRST_HEADSHOT,
		/// 	PERSONA_FULL_AUTO_FOR_ALL_WEAPONS,
		/// 	PERSONA_MIGHT_LIVE_AFTER_DEADLY_DAMAGE,
		/// 	PERSONA_IGNORE_AIM_BEFORE_FIRING_RESTRICTIONS,
		/// 	PERSONA_DEADEYE_INSTANT_RELOAD,
		/// 	PERSONA_USE_PHOSPHOROUS_ROUNDS,
		/// 	PERSONA_CONT_DEADEYE_ON_TAKING_COVER,
		/// 	PERSONA_CONT_DEADEYE_ON_RELOAD,
		/// 	PERSONA_CONT_DEADEYE_ON_SHOOTING,
		/// 	PERSONA_CONT_DEADEYE_ON_EXITING_AIM,
		/// 	PERSONA_DISABLE_PLAYER_CANCELLING_DEADEYE,
		/// 	PERSONA_CONT_DEADEYE_ON_RAGDOLL,
		/// 	PERSONA_USE_EXPLOSIVE_ROUNDS,
		/// 	PERSONA_EXIT_DEADEYE_ON_TAKING_DAMAGE,
		/// 	PERSONA_CARRY_TWO_MONEYBAGS,
		/// 	PERSONA_ABILITY_LONG_PICK_HERBS,
		/// 	PERSONA_ABILITY_UNBREAKABLE_LASSO,
		/// 	PERSONA_CONT_DEADEYE_ON_SPRINTING,
		/// 	PERSONA_CANT_DEAL_HEADSHOTS,
		/// 	PERSONA_HANGMAN,
		/// 	PERSONA_ALLOW_DEADEYE_WITH_MELEE_WEAPONS,
		/// 	PERSONA_ALLOW_DEADEYE_WHILE_UNARMED,
		/// 	PERSONA_DISABLE_DEADEYE_PERFECT_ACCURACY,
		/// 	PERSONA_CANT_DEAL_HEADSHOTS_TO_PLAYERS,
		/// 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE,
		/// 	PERSONA_CANT_DEAL_CRITICAL_DAMAGE_TO_PLAYERS,
		/// 	PERSONA_ALLOW_EAGLEEYE_IN_COMBAT,
		/// 	PERSONA_CONT_EAGLEEYE_ON_SPRINT,
		/// 	PERSONA_SUPPRESS_LENGENDARY_EAGLEEYE_TRAIL_COLOR
		/// };
		/// </summary>
		public static void _SET_LOCAL_PLAYER_PERSONA_ABILITY_FLAG(int flagId, bool toggle) => Function.Call(0x7146CF430965927C, flagId, toggle);
		public static void _SET_PLAYER_MAX_AMMO_OVERRIDE_FOR_AMMO_TYPE(int player, uint ammoType, int amount) => Function.Call(0xE133C1EC5300F740, player, ammoType, amount);
		public static void _0xC900A465364A85D6(int player) => Function.Call(0xC900A465364A85D6, player);
		public static void _0xCFB2EED4FCB7BD77(Any p0, Any p1, Any p2) => Function.Call(0xCFB2EED4FCB7BD77, p0, p1, p2);
		public static void _0x2BB8D58E88777499(Any p0) => Function.Call(0x2BB8D58E88777499, p0);
		public static void _0x00EB5A760638DB55(Any p0, Any p1, Any p2) => Function.Call(0x00EB5A760638DB55, p0, p1, p2);
		public static void _0x65887EAC535A0B0C(Any p0) => Function.Call(0x65887EAC535A0B0C, p0);
		public static void _SET_WEAPON_DEGRADATION_MODIFIER(int player, float modifier) => Function.Call(0x11A7FF918EF6BC66, player, modifier);
		public static void _SET_BOW_DRAW_REDUCTION_TIME_IN_DEADEYE(int player, float drawReductionTime) => Function.Call(0xBE0C524970892D41, player, drawReductionTime);
		/// <summary>
		/// Decreases Stamina bar drain speed by % when drawing a bow.
		/// </summary>
		public static void _SET_BOW_STAMINA_DRAIN_SPEED(int player, float staminaDrain) => Function.Call(0xFE7C9CF376D23342, player, staminaDrain);
		public static void _SET_DAMAGE_CLOSE_DISTANCE_BONUS(int player, float closeRangeLowerBound, float closeRangeUpperBound) => Function.Call(0x7761A30432C91297, player, closeRangeLowerBound, closeRangeUpperBound);
		public static void _SET_DAMAGE_CLOSE_DISTANCE_BONUS_TOTAL(int player, float closeDamageBonus) => Function.Call(0x5006C36652D6EC56, player, closeDamageBonus);
		public static void _SET_DAMAGE_FAR_DISTANCE_BONUS(int player, float farRangeLowerBound, float farRangeUpperBound) => Function.Call(0xED591CB17C8BA216, player, farRangeLowerBound, farRangeUpperBound);
		public static void _SET_DAMAGE_FAR_DISTANCE_BONUS_TOTAL(int player, float farDamageBonus) => Function.Call(0x1F0E3A4434565F8F, player, farDamageBonus);
		public static Any _0x6C54E69516CC56BD(Any p0) => Function.Call<Any>(0x6C54E69516CC56BD, p0);
		public static void _0x3A8611BD7BDE84F7(Any p0, Any p1) => Function.Call(0x3A8611BD7BDE84F7, p0, p1);
		public static void _0xC177C827CEFC0AA4(Any p0, Any p1) => Function.Call(0xC177C827CEFC0AA4, p0, p1);
		public static void _0xBD96185264DDAAEA(Any p0, Any p1) => Function.Call(0xBD96185264DDAAEA, p0, p1);
		public static void _0x628E742FE1F79C4A(Any p0, Any p1) => Function.Call(0x628E742FE1F79C4A, p0, p1);
		public static void _0xC6366A585659D15C(Any p0, Any p1) => Function.Call(0xC6366A585659D15C, p0, p1);
		public static void _0x98CD760DE43B612E(Any p0, Any p1) => Function.Call(0x98CD760DE43B612E, p0, p1);
		public static void _0x216BC0D3D2E413D2(int player, Any p1) => Function.Call(0x216BC0D3D2E413D2, player, p1);
		public static void _0x45EF176B532CA851(Any p0, Any p1) => Function.Call(0x45EF176B532CA851, p0, p1);
		public static void _0xA342495F93B7B838(Any p0, Any p1) => Function.Call(0xA342495F93B7B838, p0, p1);
		public static void _0x3BB84F812E052C90(Any p0) => Function.Call(0x3BB84F812E052C90, p0);
		public static void _0x9FC5A003FB76EDBD(Any p0, Any p1) => Function.Call(0x9FC5A003FB76EDBD, p0, p1);
		public static void _0x0FAF95D71ED67ADE(int player, string p1) => Function.Call(0x0FAF95D71ED67ADE, player, p1);
		public static void _0x988C9045531B9FCE(int player, string p1) => Function.Call(0x988C9045531B9FCE, player, p1);
		public static void _0x06C3DB00B69D5435(int player, string p1) => Function.Call(0x06C3DB00B69D5435, player, p1);
		/// <summary>
		/// NPEW__ENUM__EMOTE_CATEGORY_INVALID = -1
		/// NPEW__ENUM__EMOTE_CATEGORY_ACTIONS
		/// NPEW__ENUM__EMOTE_CATEGORY_ANTAGONIZE
		/// NPEW__ENUM__EMOTE_CATEGORY_REACTIONS
		/// NPEW__ENUM__EMOTE_CATEGORY_GREET
		/// NPEW__ENUM__NUM_EMOTE_CATEGORIES
		/// NPEW__ENUM__NUM_DISPLAY_TEXTURES
		/// </summary>
		public static void _0xBB6EA5D59E926095(int category, uint emote) => Function.Call(0xBB6EA5D59E926095, category, emote);
		public static bool _0xE1D356F5A66D0FFA(uint emote) => Function.Call<bool>(0xE1D356F5A66D0FFA, emote);
		public static void _0x929DDD5538F3DF1F(Any p0, Any p1) => Function.Call(0x929DDD5538F3DF1F, p0, p1);
		public static void _0xFA7DAAE3959E6C7B(Any p0, Any p1) => Function.Call(0xFA7DAAE3959E6C7B, p0, p1);
		public static void _0x9461A8FAB0378E5B(Any p0, Any p1) => Function.Call(0x9461A8FAB0378E5B, p0, p1);
		public static void _0xCB61A63AA53D7D22(Any p0, Any p1) => Function.Call(0xCB61A63AA53D7D22, p0, p1);
		public static void _0xCFFC3ECCD7A5CCEB(int player, uint weapon, bool p2) => Function.Call(0xCFFC3ECCD7A5CCEB, player, weapon, p2);
		public static void _0x76F7E1BCD623A429(Any p0) => Function.Call(0x76F7E1BCD623A429, p0);
		public static void _0x585CE159DB46FADB(Any p0, Any p1) => Function.Call(0x585CE159DB46FADB, p0, p1);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/PLAYER_RESET_FLAGS
		/// </summary>
		public static void _SET_PLAYER_RESET_FLAG(int player, int playerResetFlag, bool p2) => Function.Call(0x9F9A829C6751F3C7, player, playerResetFlag, p2);
		/// <summary>
		/// playerResetFlag: See 0x9F9A829C6751F3C7
		/// </summary>
		public static bool _GET_PLAYER_RESET_FLAG(int player, int playerResetFlag) => Function.Call<bool>(0xFE691E89C08937B6, player, playerResetFlag);
		public static int GET_MOUNT_OWNED_BY_PLAYER(int player) => Function.Call<int>(0xF49F14462F0AE27C, player);
		public static int _GET_PLAYER_OWNER_OF_MOUNT(int mount) => Function.Call<int>(0xAD03B03737CE6810, mount);
		/// <summary>
		/// Seems to enable active horse equipment prompt when being near it and enables the control that opens the inventory as well
		/// </summary>
		public static void _SET_PLAYER_OWNS_MOUNT(int player, int mount) => Function.Call(0xE6D4E435B56D5BD0, player, mount);
		public static int _GET_VEHICLE_OWNED_BY_PLAYER(int player) => Function.Call<int>(0xB9050A97594C8832, player);
		public static int _GET_PLAYER_OWNER_OF_VEHICLE(int vehicle) => Function.Call<int>(0x7C803BDC8343228D, vehicle);
		public static void _SET_PLAYER_OWNS_VEHICLE(int player, int vehicle) => Function.Call(0xD0E02AA618020D17, player, vehicle);
		public static int _GET_PLAYER_HUNTING_WAGON(int player) => Function.Call<int>(0x5CA6BBD4A7D8145E, player);
		/// <summary>
		/// Only applies to HUNTERCART01
		/// </summary>
		public static void _SET_PLAYER_HUNTING_WAGON(int player, int wagon) => Function.Call(0x6A4404BDFA62CE2C, player, wagon);
		public static void _0x9044835BE9D9DBFE(Any p0, Any p1) => Function.Call(0x9044835BE9D9DBFE, p0, p1);
		/// <summary>
		/// Returns name hash (name) and outHash includes the type.
		/// </summary>
		public static uint GET_DISCOVERABLE_NAME_HASH_AND_TYPE_FOR_ENTITY(int entity, uint* type) => Function.Call<uint>(0x0139637A3BFF8B6D, entity, type);
		/// <summary>
		/// p0: mostly Ped Hashes
		/// </summary>
		public static uint _GET_CONSTRUCTED_DISCOVERED_CHARACTER_NAME(uint p0, bool model, bool outfit) => Function.Call<uint>(0x8E84119A23C16623, p0, model, outfit);
		public static uint GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_HASH(int ped) => Function.Call<uint>(0x0335106F3ACABBED, ped);
		public static string GET_TARGET_CHARACTER_NAME_SCRIPT_OVERRIDE_RAW_STRING(int ped) => Function.Call<string>(0x755E08680F21EF30, ped);
		public static uint GET_TARGET_CHARACTER_NAME_FOR_LOCAL_PLAYER(int ped) => Function.Call<uint>(0x36E3D8B5A6552FE8, ped);
		public static Any _0xDA9D7BE231FE865F(Any p0, Any p1, Any p2) => Function.Call<Any>(0xDA9D7BE231FE865F, p0, p1, p2);
		public static void _SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_SP(int player, int p1, uint discoveryHash) => Function.Call(0x946D46CD6DFB9742, player, p1, discoveryHash);
		public static bool _GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_SP(int player, int p1, uint discoveryHash) => Function.Call<bool>(0x0772F87D7B07719A, player, p1, discoveryHash);
		public static void _0xCDDD4B74660E2335(Any p0, Any p1, Any p2) => Function.Call(0xCDDD4B74660E2335, p0, p1, p2);
		public static void _0x77E83C315A3B31CA(Any p0) => Function.Call(0x77E83C315A3B31CA, p0);
		public static void _SET_PLAYER_HAS_DISCOVERED_CHARACTER_NAME_MP(uint discoveryHash) => Function.Call(0x7C32191D9FB2BDEA, discoveryHash);
		public static bool GET_HAS_PLAYER_DISCOVERED_CHARACTER_NAME_MP(uint discoveryHash) => Function.Call<bool>(0x354F689C4FFAAB37, discoveryHash);
		public static void _MODIFY_PLAYER_DISCOVERED_CHARACTER_NAME_MP_SET_UNDISCOVERED(uint discoveryHash) => Function.Call(0xFB0E622B401884D3, discoveryHash);
		public static void _0xDC68829BB3F37023(int player, bool showingInfoCard) => Function.Call(0xDC68829BB3F37023, player, showingInfoCard);
		public static void _0x4DBC4873707E8FD6(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x4DBC4873707E8FD6, p0, p1, p2, p3);
		public static void _0xCEDC16930526F728(Any p0) => Function.Call(0xCEDC16930526F728, p0);
		public static void _0x14E57F88BA0A07FC(uint location) => Function.Call(0x14E57F88BA0A07FC, location);
		public static Any _0x2E1ABE627C95ED9B() => Function.Call<Any>(0x2E1ABE627C95ED9B);
		public static void _0x497A18F8F88AA9D8() => Function.Call(0x497A18F8F88AA9D8);
		public static void _0x4F0D2256AAE94EDA(int p0) => Function.Call(0x4F0D2256AAE94EDA, p0);
		/// <summary>
		/// Focus Fire VFX start for player: p1 = focusfire
		/// </summary>
		public static void _SET_LOCKON_FOCUS_FIRE_VFX(int player, string p1) => Function.Call(0x5F8E0303C229C84B, player, p1);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _0x0B7803F6F7BB43E0() => Function.Call<Any>(0x0B7803F6F7BB43E0);
		/// <summary>
		/// Hardcoded to return zero/false.
		/// </summary>
		public static Any _0xC74EB3F2EC169F6B(Any p0) => Function.Call<Any>(0xC74EB3F2EC169F6B, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x3B296934DB026873(Any p0, Any p1) => Function.Call(0x3B296934DB026873, p0, p1);
		public static void SET_MIN_TIME_BEFORE_HORSE_BUCKING(int mount, int iMinBuckTime) => Function.Call(0x506CE71FB6E8CF5E, mount, iMinBuckTime);
		public static Any _0xF4CB347D7B5EB0FD() => Function.Call<Any>(0xF4CB347D7B5EB0FD);
		public static void _0xCD7CA3013FD12749(Any p0, Any p1) => Function.Call(0xCD7CA3013FD12749, p0, p1);
		public static void _FORCE_REST_SCENARIO(bool toggle) => Function.Call(0xE5A3DD2FF84E1A4B, toggle);
		/// <summary>
		/// _IS_PLAYER_D* - _IS_PLAYER_F*
		/// </summary>
		public static bool _0x57028FD99886F6F9() => Function.Call<bool>(0x57028FD99886F6F9);
		public static void _0x35A33783EC3C3448(Any p0) => Function.Call(0x35A33783EC3C3448, p0);
		public static void _0x39D8D7082BC34B72(Any p0) => Function.Call(0x39D8D7082BC34B72, p0);
		public static void _0x1AD8AD999C27F44A(Any p0) => Function.Call(0x1AD8AD999C27F44A, p0);
	}

	public unsafe static class POPULATION
	{
		public static int GET_NUM_MODELS_IN_POPULATION_SET(uint popSetHash) => Function.Call<int>(0xA1E3171ED0E47564, popSetHash);
		public static uint GET_PED_MODEL_NAME_IN_POPULATION_SET(uint popSetHash, int index) => Function.Call<uint>(0x3EAFA1C533B7139E, popSetHash, index);
		public static uint GET_RANDOM_MODEL_FROM_POPULATION_SET(uint popSetHash, int flags, uint p2, bool p3, bool p4, float x, float y, float z) => Function.Call<uint>(0x6B12ED8C77E8567B, popSetHash, flags, p2, p3, p4, x, y, z);
		public static uint GET_RANDOM_MODEL_FROM_POPULATION_SET(uint popSetHash, int flags, uint p2, bool p3, bool p4, Vector3 vec) => Function.Call<uint>(0x6B12ED8C77E8567B, popSetHash, flags, p2, p3, p4, vec.X, vec.Y, vec.Z);
		public static int _CREATE_POPZONE_FROM_VOLUME(int volume) => Function.Call<int>(0x9AC1C64FE46B6D09, volume);
		public static void _DELETE_SCRIPT_POPZONE(int popZone) => Function.Call(0xA6E6A66FC4CA4224, popZone);
		public static bool _IS_POPZONE_VALID(int popZone) => Function.Call<bool>(0xA5BD585005EFCAD4, popZone);
		public static void SET_POPZONE_POPULATION_SET(int popZone, uint populationSetHash) => Function.Call(0x3E6A49D9B519E85C, popZone, populationSetHash);
		public static void _0x7E6BC0B94F5928F0(int popZone, int p1, int p2) => Function.Call(0x7E6BC0B94F5928F0, popZone, p1, p2);
		public static void _0x578E2FA64E847C60(int popZone, int p1) => Function.Call(0x578E2FA64E847C60, popZone, p1);
		public static void _0x08892122769770D5(int popZone, bool p1) => Function.Call(0x08892122769770D5, popZone, p1);
		public static void _0x0F1861101C9A9944(int popZone, bool p1) => Function.Call(0x0F1861101C9A9944, popZone, p1);
		public static void SET_SPAWNER_INFO_PRIORITY(uint p0, uint p1, int priority) => Function.Call(0x60CDE717A6D47769, p0, p1, priority);
		public static void CLEAR_SPAWNER_INFO_PRIORITY(uint p0, uint p1) => Function.Call(0x217A54DE2D200305, p0, p1);
		public static void _0x638FCFC6042A9473(Any p0, Any p1) => Function.Call(0x638FCFC6042A9473, p0, p1);
		/// <summary>
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/PedFilterFlags
		/// </summary>
		public static void _ADD_AMBIENT_AVOIDANCE_RESTRICTION(int volume, int includeFlags, int excludeFlags, uint p3, uint p4, uint p5, int p6) => Function.Call(0xB56D41A694E42E86, volume, includeFlags, excludeFlags, p3, p4, p5, p6);
		/// <summary>
		/// flags: see 0xB56D41A694E42E86
		/// </summary>
		public static void _REMOVE_AMBIENT_AVOIDANCE_RESTRICTION(int volume) => Function.Call(0x74C2B3DC0B294102, volume);
		/// <summary>
		/// flags: see 0xB56D41A694E42E86
		/// </summary>
		public static void _ADD_AMBIENT_SPAWN_RESTRICTION(int volume, int includeFlags, int excludeFlags, uint p3, uint p4, uint p5, int p6) => Function.Call(0x18262CAFEBB5FBE1, volume, includeFlags, excludeFlags, p3, p4, p5, p6);
		public static void _REMOVE_AMBIENT_SPAWN_RESTRICTION(int volume) => Function.Call(0xA1CFB35069D23C23, volume);
		public static void _0x2161278C6322F740(int includeFlags, int excludeFlags, int p2, uint p3, int p4, int volume) => Function.Call(0x2161278C6322F740, includeFlags, excludeFlags, p2, p3, p4, volume);
		public static void _0xF45E46DEECF7DF6E(int bitFlag, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xF45E46DEECF7DF6E, bitFlag, p1, p2, p3, p4);
		public static void _0x8EC7CD701F872F87(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x8EC7CD701F872F87, p0, p1, p2, p3, p4, p5);
		public static void _0xC4533E3E87125C9E(Any p0) => Function.Call(0xC4533E3E87125C9E, p0);
		/// <summary>
		/// Params: p1 = 1 & 2 in R* Scripts, 0 = Disable avoidance, 1 = Enabled avoidance, 2 = Enabled avoidance (?)
		/// </summary>
		public static void _SET_PED_SHOULD_IGNORE_AVOIDANCE_VOLUMES(int ped, int p1) => Function.Call(0xF74E134F40192884, ped, p1);
		public static void _0xDBBF12EA7C1029B2(Any p0, Any p1) => Function.Call(0xDBBF12EA7C1029B2, p0, p1);
		public static void _0x247F86595D396344(Any p0) => Function.Call(0x247F86595D396344, p0);
		public static void _0x324AB2A68AD8AEE5() => Function.Call(0x324AB2A68AD8AEE5);
		public static void DISABLE_AMBIENT_ROAD_POPULATION(bool unk) => Function.Call(0xC6DCC2A3A8825C85, unk);
		public static void ENABLE_AMBIENT_ROAD_POPULATION() => Function.Call(0xBC90BDF4E5228EA1);
		public static void _0x2660E7720EDC4BD0(Any p0, Any p1, Any p2) => Function.Call(0x2660E7720EDC4BD0, p0, p1, p2);
		/// <summary>
		/// Returns model hash of the closest fish
		/// </summary>
		public static uint _GET_RANDOM_FISH_TYPE_FOR_LOCATION() => Function.Call<uint>(0x595478B3BBC3076D);
		/// <summary>
		/// Only used for Special Event (XMAS).
		/// _SET_P*
		/// </summary>
		public static void _0xEC116EDB683AD479(bool p0) => Function.Call(0xEC116EDB683AD479, p0);
	}

	public unsafe static class POSSE
	{
		public static Any _0xC086FF658B2E51DB() => Function.Call<Any>(0xC086FF658B2E51DB);
		public static Any _0xC086FF658B2E51DA(Any p0) => Function.Call<Any>(0xC086FF658B2E51DA, p0);
		public static Any _0xC087FF658B2E51DA(Any p0, Any p1) => Function.Call<Any>(0xC087FF658B2E51DA, p0, p1);
		public static int POSSE_GET_POSSE_MEMBERSHIP_COUNT() => Function.Call<int>(0xC088FF658B2E51DA);
		public static Any _0xC089FF658B2E51DA(Any p0, Any p1) => Function.Call<Any>(0xC089FF658B2E51DA, p0, p1);
		public static void _0xC08AFF658B2E51DA(Any p0) => Function.Call(0xC08AFF658B2E51DA, p0);
		public static Any _0xC08BFF658B2E51DA(Any p0) => Function.Call<Any>(0xC08BFF658B2E51DA, p0);
		public static void _0xC08AFF658B2E51DB(Any p0) => Function.Call(0xC08AFF658B2E51DB, p0);
		public static Any _0xC08CFF658B2E51DA(Any p0, Any p1) => Function.Call<Any>(0xC08CFF658B2E51DA, p0, p1);
		public static Any _0xC09CFF658B2E51DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0xC09CFF658B2E51DA, p0, p1, p2);
		public static Any _0xC08DEF658B2E51DA(Any p0) => Function.Call<Any>(0xC08DEF658B2E51DA, p0);
		public static Any _0xC08DFF658B2E51DA() => Function.Call<Any>(0xC08DFF658B2E51DA);
		public static Any _0xC08DFF658B2E51DB(Any p0) => Function.Call<Any>(0xC08DFF658B2E51DB, p0);
		public static Any _0xC08EFF658B2E51DB(Any p0, Any p1) => Function.Call<Any>(0xC08EFF658B2E51DB, p0, p1);
		public static Any _0xC08FFF658B2E51DA() => Function.Call<Any>(0xC08FFF658B2E51DA);
		public static Any _0xC08FFF658B2E51DB(Any p0) => Function.Call<Any>(0xC08FFF658B2E51DB, p0);
		public static Any _0xC084FF658B2E61DA(Any p0) => Function.Call<Any>(0xC084FF658B2E61DA, p0);
		public static Any _0xC084FF658B2E71DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0xC084FF658B2E71DA, p0, p1, p2);
		public static Any _0xC084FF658B2E81DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0xC084FF658B2E81DA, p0, p1, p2);
		public static Any _0xC084FF658B2E52DA(Any p0) => Function.Call<Any>(0xC084FF658B2E52DA, p0);
		public static Any _0xC084FF658B2E53DA() => Function.Call<Any>(0xC084FF658B2E53DA);
		public static Any _0xC084FF658B2E54DA(Any p0) => Function.Call<Any>(0xC084FF658B2E54DA, p0);
		public static Any _0xC084FF658B2E55DA(Any p0, Any p1) => Function.Call<Any>(0xC084FF658B2E55DA, p0, p1);
		public static void _0xC484FF658B2E55DA(Any p0) => Function.Call(0xC484FF658B2E55DA, p0);
		public static void _0xC584FF658B2E55DA(Any p0) => Function.Call(0xC584FF658B2E55DA, p0);
		public static void _0xC684FF658B2E55DA(Any p0) => Function.Call(0xC684FF658B2E55DA, p0);
		public static Any _0xC184FF658B2E55DA(Any p0, Any p1) => Function.Call<Any>(0xC184FF658B2E55DA, p0, p1);
		public static Any _0xC284FF658B2E55DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0xC284FF658B2E55DA, p0, p1, p2);
		public static Any _0xC394FF658B2E55DA(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xC394FF658B2E55DA, p0, p1, p2, p3);
		public static Any _0xC07CFF658B2E51DA(Any p0, Any p1) => Function.Call<Any>(0xC07CFF658B2E51DA, p0, p1);
		public static Any _0xC06CFF658B2E51DA(Any p0, Any p1, Any p2) => Function.Call<Any>(0xC06CFF658B2E51DA, p0, p1, p2);
	}

	public unsafe static class PROPSET
	{
		public static bool _REQUEST_PROP_SET(uint hash) => Function.Call<bool>(0xF3DE57A46D5585E9, hash);
		/// <summary>
		/// Same as _REQUEST_PROP_SET
		/// </summary>
		public static bool _REQUEST_PROP_SET_2(uint hash) => Function.Call<bool>(0xE72F591958F3ACAB, hash);
		public static bool _HAS_PROP_SET_LOADED(uint hash) => Function.Call<bool>(0x48A88FC684C55FDC, hash);
		/// <summary>
		/// Same as _HAS_PROP_SET_LOADED
		/// </summary>
		public static bool _HAS_PROP_SET_LOADED_2(uint hash) => Function.Call<bool>(0xD090ABEF4D6A7D96, hash);
		public static void _SET_PROP_SET_AS_NO_LONGER_NEEDED(int propSet) => Function.Call(0x909E3C7FAE539FB1, propSet);
		public static void _DELETE_PROP_SET(int propSet, bool p1, bool p2) => Function.Call(0x58AC173A55D9D7B4, propSet, p1, p2);
		public static bool _RELEASE_PROP_SET(uint hash) => Function.Call<bool>(0xB1964A83B345B4AB, hash);
		public static int _CREATE_PROP_SET(uint hash, float x, float y, float z, int p4, float heading, float p6, bool p7, bool p8) => Function.Call<int>(0xE65C5CBA95F0E510, hash, x, y, z, p4, heading, p6, p7, p8);
		public static int _CREATE_PROP_SET(uint hash, Vector3 vec, int p4, float heading, float p6, bool p7, bool p8) => Function.Call<int>(0xE65C5CBA95F0E510, hash, vec.X, vec.Y, vec.Z, p4, heading, p6, p7, p8);
		/// <summary>
		/// Same as _CREATE_PROP_SET
		/// https://github.com/femga/rdr3_discoveries/blob/master/objects/propsets_list.lua
		/// </summary>
		public static int _CREATE_PROP_SET_2(uint hash, float x, float y, float z, int p4, float p5, float p6, bool p7, bool p8) => Function.Call<int>(0x899C97A1CCE7D483, hash, x, y, z, p4, p5, p6, p7, p8);
		public static int _CREATE_PROP_SET_2(uint hash, Vector3 vec, int p4, float p5, float p6, bool p7, bool p8) => Function.Call<int>(0x899C97A1CCE7D483, hash, vec.X, vec.Y, vec.Z, p4, p5, p6, p7, p8);
		public static int CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY(uint hash, float x, float y, float z, int entity, float p5, bool p6, int p7, bool p8) => Function.Call<int>(0x9609DBDDE18FAD8C, hash, x, y, z, entity, p5, p6, p7, p8);
		public static int CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY(uint hash, Vector3 vec, int entity, float p5, bool p6, int p7, bool p8) => Function.Call<int>(0x9609DBDDE18FAD8C, hash, vec.X, vec.Y, vec.Z, entity, p5, p6, p7, p8);
		/// <summary>
		/// Same as CREATE_PROP_SET_INSTANCE_ATTACHED_TO_ENTITY
		/// </summary>
		public static int _CREATE_PROP_SET_4(uint hash, float x, float y, float z, int entity, float p5, bool p6, int p7, bool p8) => Function.Call<int>(0xACA7FB30269096D4, hash, x, y, z, entity, p5, p6, p7, p8);
		public static int _CREATE_PROP_SET_4(uint hash, Vector3 vec, int entity, float p5, bool p6, int p7, bool p8) => Function.Call<int>(0xACA7FB30269096D4, hash, vec.X, vec.Y, vec.Z, entity, p5, p6, p7, p8);
		public static bool DOES_PROP_SET_EXIST(int propSet) => Function.Call<bool>(0x7DDDCF815E650FF5, propSet);
		public static bool _DOES_PROP_SET_OF_TYPE_EXIST_NEAR_COORDS(uint propsetHash, float x, float y, float z) => Function.Call<bool>(0x72068021F498E6E3, propsetHash, x, y, z);
		public static bool _DOES_PROP_SET_OF_TYPE_EXIST_NEAR_COORDS(uint propsetHash, Vector3 vec) => Function.Call<bool>(0x72068021F498E6E3, propsetHash, vec.X, vec.Y, vec.Z);
		public static bool IS_PROP_SET_FULLY_LOADED(int propSet) => Function.Call<bool>(0xF42DB680A8B2A4D9, propSet);
		public static void _SET_PROP_SET_VISIBLE(int propSet, bool toggle) => Function.Call(0x9D096A5BD02F953E, propSet, toggle);
		public static bool _IS_PROP_SET_VISIBLE(int propSet) => Function.Call<bool>(0x0CE8AAFE9E433A23, propSet);
		public static uint _GET_PROP_SET_MODEL(int propSet) => Function.Call<uint>(0xA6A9712955F53D9C, propSet);
		public static uint _GET_VEHICLE_PROP_SET_HASH(int vehicle) => Function.Call<uint>(0x36F69E7A22655653, vehicle);
		public static int _GET_ENTITIES_FROM_PROP_SET(int propSet, int itemSet, uint model, bool p3, bool p4) => Function.Call<int>(0x738271B660FE0695, propSet, itemSet, model, p3, p4);
		public static void _0xC4B67EF3FD65622D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xC4B67EF3FD65622D, p0, p1, p2, p3, p4, p5);
		public static void _0x58E0B01D45CA7357(Any p0) => Function.Call(0x58E0B01D45CA7357, p0);
		public static void _SET_PROP_SET_FLAG(int propSet, int flag) => Function.Call(0xC1AB7EEFD3E6EE49, propSet, flag);
		public static int _GET_VEHICLE_PROP_SET(int vehicle) => Function.Call<int>(0xCE2ACD6F602803E5, vehicle);
		public static bool _DOES_VEHICLE_HAVE_ANY_PROP_SET(int vehicle) => Function.Call<bool>(0x53784CEA0159439B, vehicle);
		/// <summary>
		/// List of vehicle propsets (wagons & trains): https://pastebin.com/1CsnvGLu / https://pastebin.com/v7TtqTgE
		/// </summary>
		public static void _ADD_PROP_SET_FOR_VEHICLE(int vehicle, uint propset) => Function.Call(0xD80FAF919A2E56EA, vehicle, propset);
		public static void _REMOVE_VEHICLE_PROP_SETS(int vehicle) => Function.Call(0x3BCF32FF37EA9F1D, vehicle);
		public static bool _IS_VEHICLE_PROP_SET_LOADED(int vehicle) => Function.Call<bool>(0x155B2FBE72D7D1D0, vehicle);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_propsets.lua
		/// </summary>
		public static void _ADD_ADDITIONAL_PROP_SET_FOR_VEHICLE(int vehicle, uint propset) => Function.Call(0x75F90E4051CC084C, vehicle, propset);
		public static bool _IS_VEHICLE_PROP_SET_LOADED_ADDITIONAL(int vehicle) => Function.Call<bool>(0x7264F9CA87A9830B, vehicle);
		/// <summary>
		/// Returns PropSet handle to be used with _GET_PROP_SET_MODEL
		/// </summary>
		public static int _GET_VEHICLE_LIGHT_PROP_SET(int vehicle) => Function.Call<int>(0xA079300AF757FB1A, vehicle);
		public static bool _DOES_VEHICLE_HAVE_ANY_LIGHT_PROP_SET(int vehicle) => Function.Call<bool>(0xC9B4B3A36F81FD75, vehicle);
		/// <summary>
		/// To remove propsets either parse a zero as hash or call 0xE31C0CB1C3186D40
		/// 0xA6A9712955F53D9C returns lightPropset Hashes
		/// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_lantern_propsets.lua
		/// </summary>
		public static void _ADD_LIGHT_PROP_SET_TO_VEHICLE(int vehicle, uint lightPropset) => Function.Call(0xC0F0417A90402742, vehicle, lightPropset);
		public static void _REMOVE_VEHICLE_LIGHT_PROP_SETS(int vehicle) => Function.Call(0xE31C0CB1C3186D40, vehicle);
		public static bool _IS_VEHICLE_LIGHT_PROP_SET_LOADED(int vehicle) => Function.Call<bool>(0x0790473EEE1977D3, vehicle);
		/// <summary>
		/// Example before/after deleting a train carriage's propset: https://imgur.com/a/qRNrIrK
		/// </summary>
		public static int _GET_TRAIN_CARRIAGE_PROP_SET(int trainCarriage) => Function.Call<int>(0xCFC0BD09BB1B73FF, trainCarriage);
		public static bool _HAS_VEHICLE_TRAILER_PROP_SET_LOADED(int vehicle, int wagonIndex) => Function.Call<bool>(0x8F3333F0A6900B3C, vehicle, wagonIndex);
		public static int _GET_PROP_SET_AT_COORDS(uint propsetHash, float x, float y, float z) => Function.Call<int>(0xC061E50F8D299F95, propsetHash, x, y, z);
		public static int _GET_PROP_SET_AT_COORDS(uint propsetHash, Vector3 vec) => Function.Call<int>(0xC061E50F8D299F95, propsetHash, vec.X, vec.Y, vec.Z);
	}

	public unsafe static class QUEUE
	{
		public static bool _EVENT_QUEUE_IS_EMPTY(uint hash) => Function.Call<bool>(0x402B5D7D269FF796, hash);
		public static void _EVENT_QUEUE_POP(uint hash) => Function.Call(0xD87DF294B049211D, hash);
	}

	public unsafe static class RECORDING
	{
		/// <summary>
		/// nullsub, doesn't do anything
		/// 
		/// Old name: _STOP_RECORDING_THIS_FRAME
		/// </summary>
		public static void REPLAY_PREVENT_RECORDING_THIS_FRAME() => Function.Call(0xA8C44C13419634F2);
	}

	public unsafe static class REPLAY
	{
		/// <summary>
		/// Hardcoded to return false.
		/// 
		/// Old name: _IS_INTERIOR_RENDERING_DISABLED
		/// </summary>
		public static bool REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP() => Function.Call<bool>(0x0F838D47DE58EDB2);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM() => Function.Call(0x57C6525034E76EB0);
		/// <summary>
		/// Hardcoded to return true.
		/// </summary>
		public static bool OPEN_VIDEO_EDITOR() => Function.Call<bool>(0xB3F2829907403C13);
		/// <summary>
		/// Hardcoded to return true.
		/// </summary>
		public static bool CLOSE_VIDEO_EDITOR(Any p0) => Function.Call<bool>(0xCEEC64BD27A59312, p0);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool IS_VIDEO_EDITOR_RUNNING() => Function.Call<bool>(0x9EEB007317FA3B9C);
	}

	public unsafe static class SCRIPTS
	{
		public static void _SET_PLAYER_BIT_AT_INDEX(Any* value, int bitIndex) => Function.Call(0x31010318BA9897AC, value, bitIndex);
		public static void _CLEAR_PLAYER_BIT_AT_INDEX(Any* value, int bitIndex) => Function.Call(0xD426E2E3288469D6, value, bitIndex);
		public static void _0xE4ABE20DCE7C7CFE(Any p0, Any p1, Any p2) => Function.Call(0xE4ABE20DCE7C7CFE, p0, p1, p2);
		public static void _0xFFDDF802279BE128(Any p0, Any p1, Any p2) => Function.Call(0xFFDDF802279BE128, p0, p1, p2);
		public static void _0x64F765D9A1F8F02C(Any* p0, Any* p1, Any* p2) => Function.Call(0x64F765D9A1F8F02C, p0, p1, p2);
		public static void _SET_ALL_PLAYER_BITS(Any* value) => Function.Call(0x20F4CB76689ACDBC, value);
		public static void _CLEAR_ALL_PLAYER_BITS(Any* value) => Function.Call(0xDE544B7EC0C187CC, value);
		public static Any _0x72B2E00C9BAC6789(Any p0, Any p1) => Function.Call<Any>(0x72B2E00C9BAC6789, p0, p1);
		public static bool _IS_ANY_PLAYER_BIT_SET(int* playerBits) => Function.Call<bool>(0x179A6F0EE2E79026, playerBits);
		public static int GET_BLOCK_OF_PLAYER_BITS(Any* value, int p1) => Function.Call<int>(0xFA3B530A5CC693D5, value, p1);
		public static void SET_BLOCK_OF_PLAYER_BITS(Any* value, int p1, int p2) => Function.Call(0xC6DFB8C04C86D5A5, value, p1, p2);
		public static int COUNT_PLAYER_BITS(Any* value) => Function.Call<int>(0x462C687BEA254BD9, value);
		public static void _0x1BDB5A07307F6929(Any p0, Any p1) => Function.Call(0x1BDB5A07307F6929, p0, p1);
		public static void _0x1C5EB3C27F7508CB(Any p0, Any p1) => Function.Call(0x1C5EB3C27F7508CB, p0, p1);
		public static void _0x42A429CDFED6D99D(Any p0, Any p1, Any p2) => Function.Call(0x42A429CDFED6D99D, p0, p1, p2);
		public static void _0x5827BE85A87B073D(Any p0) => Function.Call(0x5827BE85A87B073D, p0);
		public static Any _0x0A79C81C418F5D38(Any p0, Any p1) => Function.Call<Any>(0x0A79C81C418F5D38, p0, p1);
		public static Any _0xA88E1D7FA1E20080(Any p0) => Function.Call<Any>(0xA88E1D7FA1E20080, p0);
		public static int COUNT_PARTICIPANT_BITS(Any* value) => Function.Call<int>(0x2F050A3FF8738245, value);
		public static void REQUEST_SCRIPT(string scriptName) => Function.Call(0x46ED607DDD40D7FE, scriptName);
		public static void SET_SCRIPT_AS_NO_LONGER_NEEDED(string scriptName) => Function.Call(0x0086D3067E1CFD1C, scriptName);
		/// <summary>
		/// Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
		/// </summary>
		public static bool HAS_SCRIPT_LOADED(string scriptName) => Function.Call<bool>(0xE97BD36574F8B0A6, scriptName);
		public static bool DOES_SCRIPT_EXIST(string scriptName) => Function.Call<bool>(0x552B171E3F69E5AE, scriptName);
		public static void REQUEST_SCRIPT_WITH_NAME_HASH(uint scriptHash) => Function.Call(0xF6B9CE3F8D5B9B74, scriptHash);
		public static void SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(uint scriptHash) => Function.Call(0x50723A1567C8361E, scriptHash);
		public static bool HAS_SCRIPT_WITH_NAME_HASH_LOADED(uint scriptHash) => Function.Call<bool>(0xA5D8E0C2F3C7EEBC, scriptHash);
		public static bool DOES_SCRIPT_WITH_NAME_HASH_EXIST(uint scriptHash) => Function.Call<bool>(0xA34E89749F628284, scriptHash);
		public static void TERMINATE_THREAD(int threadId) => Function.Call(0x87ED52AE40EA1A52, threadId);
		public static bool IS_THREAD_ACTIVE(int threadId, bool ignoreKilledState) => Function.Call<bool>(0x46E9AE36D8FA6417, threadId, ignoreKilledState);
		public static bool DOES_THREAD_EXIST(int threadId) => Function.Call<bool>(0xFF975BC4435A0FA3, threadId);
		public static void GET_THREAD_EXISTENCE_DETAILS(int threadId, bool* threadExists, bool* hasScriptHandler) => Function.Call(0xD92FA81B64920E85, threadId, threadExists, hasScriptHandler);
		public static uint _GET_HASH_OF_THREAD(int threadId) => Function.Call<uint>(0x724CB89D35B283D0, threadId);
		/// <summary>
		/// Starts a new iteration of the current threads.
		/// Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
		/// </summary>
		public static void SCRIPT_THREAD_ITERATOR_RESET() => Function.Call(0x39382EB8DCD8684D);
		/// <summary>
		/// If the function returns 0, the end of the iteration has been reached.
		/// </summary>
		public static int SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID() => Function.Call<int>(0x3CE3FB167E837D7C);
		public static bool _IS_BACKGROUND_SCRIPT(int threadId) => Function.Call<bool>(0x20B7F69B40C6B755, threadId);
		public static int GET_ID_OF_THIS_THREAD() => Function.Call<int>(0x55525C346BEF6960);
		public static void TERMINATE_THIS_THREAD() => Function.Call(0x5E8B6D17FF91CD59);
		/// <summary>
		/// Gets the number of instances of the specified script is currently running.
		/// 
		/// Actually returns numRefs - 1.
		/// if (program)
		/// 	v3 = rage::scrProgram::GetNumRefs(program) - 1;
		/// return v3;
		/// 
		/// Old name: _GET_NUMBER_OF_REFERENCES_OF_SCRIPT_WITH_NAME_HASH
		/// </summary>
		public static int GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(uint scriptHash) => Function.Call<int>(0x8E34C953364A76DD, scriptHash);
		public static void _REQUEST_THREAD_EXIT(int threadId) => Function.Call(0x7DE4643157AD646C, threadId);
		public static void _REQUEST_THREAD_EXIT_FOR_ALL_THREADS_WITH_THIS_NAME(uint nameHash) => Function.Call(0x7423F7835770F619, nameHash);
		public static bool IS_THREAD_EXIT_REQUESTED() => Function.Call<bool>(0x9E4EF615E307FBBE);
		public static bool _IS_THREAD_EXIT_REQUESTED_FOR_THREAD_WITH_THIS_ID(int threadId) => Function.Call<bool>(0x30BED53646C86D11, threadId);
		/// <summary>
		/// enum eThreadExitReason
		/// {
		/// 	THREAD_EXIT_REASON_NONE,
		/// 	THREAD_EXIT_REASON_BACKGROUND_THREAD_STOPPED,
		/// 	THREAD_EXIT_REASON_SESSION_MERGE,
		/// 	THREAD_EXIT_REASON_SCENARIO_OUT_OF_SCOPE,
		/// 	THREAD_EXIT_REASON_REQUESTED_BY_SCRIPT
		/// };
		/// </summary>
		public static int _GET_THREAD_EXIT_REASON() => Function.Call<int>(0x54AE4FDEEFEAB77E);
		public static uint GET_HASH_OF_THIS_SCRIPT_NAME() => Function.Call<uint>(0xBC2C927F5C264960);
		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_ERRORS (CEventGroupScriptErrors)
		/// </summary>
		public static int GET_NUMBER_OF_EVENTS(int eventGroup) => Function.Call<int>(0x5CE8DE5909565748, eventGroup);
		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		/// </summary>
		public static bool GET_EVENT_EXISTS(int eventGroup, int eventIndex) => Function.Call<bool>(0xC9F59C0A710ECD34, eventGroup, eventIndex);
		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		/// 
		/// Returns event name hash: https://alloc8or.re/rdr3/doc/enums/eEventType.txt
		/// </summary>
		public static uint GET_EVENT_AT_INDEX(int eventGroup, int eventIndex) => Function.Call<uint>(0xA85E614430EFF816, eventGroup, eventIndex);
		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		/// 
		/// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		/// 
		/// https://github.com/femga/rdr3_discoveries/tree/master/AI/EVENTS
		/// </summary>
		public static bool GET_EVENT_DATA(int eventGroup, int eventIndex, Any* eventData, int eventDataSize) => Function.Call<bool>(0x57EC5FA4D4D6AFCA, eventGroup, eventIndex, eventData, eventDataSize);
		public static void SET_EVENT_FLAG_FOR_DELETION(int eventGroup, int eventIndex, bool p2) => Function.Call(0x4768D5252EAEB76F, eventGroup, eventIndex, p2);
		/// <summary>
		/// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork), 2 = unk, 3 = unk, 4 = SCRIPT_EVENT_QUEUE_SCRIPT_ERRORS (CEventGroupScriptErrors)
		/// 
		/// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		/// 
		/// playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this event should be sent to. In order to send the event to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
		/// </summary>
		public static void TRIGGER_SCRIPT_EVENT(int eventGroup, Any* eventData, int eventDataSize, int scriptMetadataIndex, int* playerBits) => Function.Call(0x5AE99C571D5BBE5D, eventGroup, eventData, eventDataSize, scriptMetadataIndex, playerBits);
		public static void _TRIGGER_SCRIPT_EVENT_2(Any* eventData, int eventDataSize, int scriptMetadataIndex, int threadId) => Function.Call(0x8B61C950A148FFA2, eventData, eventDataSize, scriptMetadataIndex, threadId);
		public static Any _0xE7282390542F570D(Any p0) => Function.Call<Any>(0xE7282390542F570D, p0);
		/// <summary>
		/// Used in Script Function DISABLE_REGISTERED_WORLD_BRAINS
		/// </summary>
		public static void _0x11B0A0B282FA9B10(bool p0) => Function.Call(0x11B0A0B282FA9B10, p0);
		public static void _0x6F700A4BF7C3331B(bool p0) => Function.Call(0x6F700A4BF7C3331B, p0);
		public static void _0xF9E951A1E5517C06() => Function.Call(0xF9E951A1E5517C06);
		public static void _0x76CBCD9EADC00955() => Function.Call(0x76CBCD9EADC00955);
		public static void SHUTDOWN_LOADING_SCREEN() => Function.Call(0xFC179D7E8886DADF);
		public static void SET_NO_LOADING_SCREEN(bool toggle) => Function.Call(0x5CB83156AA038F95, toggle);
		public static bool GET_NO_LOADING_SCREEN() => Function.Call<bool>(0x323DAF00687E0F28);
		public static void _DISPLAY_LOADING_SCREENS(uint p0, uint p1, uint p2, string gamemodeName, string title, string subtitle) => Function.Call(0x1E5B70E53DB661E5, p0, p1, p2, gamemodeName, title, subtitle);
		public static void _0x29FB4CE89472C3CB(Any p0, Any p1, float p2, float p3, string p4, string p5, string p6, int p7) => Function.Call(0x29FB4CE89472C3CB, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void STOP_DISPLAYING_MP_TRANSITION_LOADING_SCREENS(Any p0) => Function.Call(0x778D4733E0F2F265, p0);
		/// <summary>
		/// Same as GET_IS_LOADING_SCREEN_ACTIVE
		/// </summary>
		public static bool IS_LOADING_SCREEN_VISIBLE() => Function.Call<bool>(0xB54ADBE65D528FCB);
		public static void BAIL_TO_LANDING_PAGE(int bailCode) => Function.Call(0xBC2C927F5C264243, bailCode);
		public static void BAIL_WITH_PASS_THROUGH_PARAMS(string _params) => Function.Call(0xE98204D3C25AE14C, _params);
		/// <summary>
		/// Returns true if GtaThread+0x77C is equal to 1.
		/// 
		/// Old name: _BG_EXITED_BECAUSE_BACKGROUND_THREAD_STOPPED
		/// </summary>
		public static bool BG_IS_EXITFLAG_SET() => Function.Call<bool>(0x2238EC3EC631AB1F);
		/// <summary>
		/// Sets bit 0 in GtaThread+0x784
		/// </summary>
		public static void BG_SET_EXITFLAG_RESPONSE() => Function.Call(0x4858148E3B8A75D0);
		/// <summary>
		/// Hashed version of BG_START_CONTEXT
		/// </summary>
		public static void BG_START_CONTEXT_HASH(uint contextHash) => Function.Call(0x2EB67D564DCC09D5, contextHash);
		/// <summary>
		/// Hashed version of BG_END_CONTEXT
		/// </summary>
		public static void BG_END_CONTEXT_HASH(uint contextHash) => Function.Call(0x6D1431744182CDE8, contextHash);
		/// <summary>
		/// Inserts the given context into the background scripts context map.
		/// </summary>
		public static void BG_START_CONTEXT(string contextName) => Function.Call(0x49BA5678BA040CA7, contextName);
		/// <summary>
		/// Deletes the given context from the background scripts context map.
		/// </summary>
		public static void BG_END_CONTEXT(string contextName) => Function.Call(0x3ABF7BA1C3E2C8CF, contextName);
		public static bool BG_DOES_LAUNCH_PARAM_EXIST(int scriptIndex, string p1) => Function.Call<bool>(0x4AE1DFF337A86FDE, scriptIndex, p1);
		public static int BG_GET_LAUNCH_PARAM_VALUE(int scriptIndex, string p1) => Function.Call<int>(0x55C40B7592BAD213, scriptIndex, p1);
		public static int BG_GET_SCRIPT_ID_FROM_NAME_HASH(uint p0) => Function.Call<int>(0x829CD22E043A2577, p0);
		public static void _BG_RELOAD_ALL_BACKGROUND_SCRIPTS() => Function.Call(0xBE7D814CFA181B56);
		/// <summary>
		/// goalContext: see <availableContexts> in common/data/stats_and_challenges/goals_*.meta
		/// </summary>
		public static void _ACTIVATE_GOAL_CONTEXT(uint goalContext) => Function.Call(0x7D654266025E921B, goalContext);
		/// <summary>
		/// goalContext: see _ACTIVATE_GOAL_CONTEXT
		/// </summary>
		public static void _DEACTIVATE_GOAL_CONTEXT(uint goalContext) => Function.Call(0x50B72A754EE64A71, goalContext);
		/// <summary>
		/// goalContext: see _ACTIVATE_GOAL_CONTEXT
		/// </summary>
		public static bool _IS_GOAL_CONTEXT_ACTIVE(uint goalContext) => Function.Call<bool>(0x7409669C5ED50144, goalContext);
		/// <summary>
		/// Returns "INVALID_NET_RPC_GUID" if netRpcGuid is invalid.
		/// </summary>
		public static string _NET_RPC_GUID_TO_STRING(Any* netRpcGuid) => Function.Call<string>(0xAC9FF854BD4BA9B5, netRpcGuid);
		public static bool AWARDS_GET_RESULT_ITEM(Any* rpcGuid, uint awardHash, int itemIndex, Any* outResultItem) => Function.Call<bool>(0xAC8FAB22A914AE34, rpcGuid, awardHash, itemIndex, outResultItem);
		public static bool _AWARDS_GET_UNLOCK_CLAIM_DATA(Any* rpcGuid, uint awardHash, int dataIndex, Any* outUnlockData) => Function.Call<bool>(0xB9467E41DAB1CF2C, rpcGuid, awardHash, dataIndex, outUnlockData);
		public static bool _LOOT_GET_RESULT_ITEM(Any* rpcGuid, int itemIndex, Any* outResultItem) => Function.Call<bool>(0x4293B44A855F82CC, rpcGuid, itemIndex, outResultItem);
		public static bool _LOOT_GET_LOOT_CLAIM_DATA(Any* rpcGuid, int dataIndex, Any* outLootData) => Function.Call<bool>(0xF1E9045F5AA9E428, rpcGuid, dataIndex, outLootData);
		public static bool _STORE_GLOBAL_BLOCK(int index) => Function.Call<bool>(0xB952A3AC41D58F2F, index);
		public static bool _RESTORE_GLOBAL_BLOCK(int index) => Function.Call<bool>(0xDC3914A99B4A5FDF, index);
		public static bool _DOES_COMPRESSED_GLOBAL_BLOCK_BUFFER_EXIST(int index) => Function.Call<bool>(0x66EE5B93C308F734, index);
		public static void _SET_GLOBAL_BLOCK_CAN_BE_ACCESSED(int index, bool toggle) => Function.Call(0xE66F392BFCE734AF, index, toggle);
		public static bool _GET_GLOBAL_BLOCK_CAN_BE_ACCESSED(int index) => Function.Call<bool>(0x42A7EB5C814C2DE0, index);
		public static void _SET_ALL_GLOBAL_BLOCKS_HAVE_BEEN_LOADED(bool toggle) => Function.Call(0x11986B05885564D2, toggle);
		/// <summary>
		/// Waiting for child scripts to terminate / waiting for collapse of child scripts
		/// </summary>
		public static bool HAVE_ALL_CHILD_SCRIPTS_TERMINATED(int p0) => Function.Call<bool>(0x380FFA15B72408FB, p0);
		public static int START_NEW_SCRIPT(string scriptName, int stackSize) => Function.Call<int>(0xE81651AD79516E48, scriptName, stackSize);
		/// <summary>
		/// return : script thread id, 0 if failed
		/// Pass pointer to struct of args in p1, size of struct goes into p2
		/// </summary>
		public static int START_NEW_SCRIPT_WITH_ARGS(string scriptName, Any* args, int argCount, int stackSize) => Function.Call<int>(0xB8BA7F44DF1575E1, scriptName, args, argCount, stackSize);
		public static int START_NEW_SCRIPT_WITH_NAME_HASH(uint scriptHash, int stackSize) => Function.Call<int>(0xEB1C67C3A5333A92, scriptHash, stackSize);
		public static int START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(uint scriptHash, Any* args, int argCount, int stackSize) => Function.Call<int>(0xC4BB298BD441BE78, scriptHash, args, argCount, stackSize);
	}

	public unsafe static class SAVE
	{
		public static void _0x4FB5869E2B37FC00() => Function.Call(0x4FB5869E2B37FC00);
		/// <summary>
		/// enum eSavegameType : Hash
		/// {
		/// 	SAVEGAMETYPE_AMBIENT = 0x3CA4E1F8,
		/// 	SAVEGAMETYPE_DEFAULT = 0xCB6ED080,
		/// 	SAVEGAMETYPE_DELETE_CHAR = 0xCD35F947,
		/// 	SAVEGAMETYPE_END_CREATE_NEWCHAR = 0x4C50A3CE,
		/// 	SAVEGAMETYPE_END_MATCH = 0xE470ED50,
		/// 	SAVEGAMETYPE_END_MISSION = 0x9A444E54,
		/// 	SAVEGAMETYPE_END_SESSION = 0x6D23956C,
		/// 	SAVEGAMETYPE_END_SHOPPING = 0xA311A6C4,
		/// 	SAVEGAMETYPE_RANKUP = 0xE25F8017,
		/// 	SAVEGAMETYPE_SCRIPT_MP_GLOBALS = 0xAFF30AD4,
		/// 	SAVEGAMETYPE_SP_AUTOSAVE = 0xF4AE69EC,
		/// 	SAVEGAMETYPE_SP_DEBUG = 0x6A8122FD,
		/// 	SAVEGAMETYPE_SP_PROPERTY = 0xAE0AB38E
		/// };
		/// </summary>
		public static bool SAVEGAME_SAVE_SP(uint savegameType) => Function.Call<bool>(0x62C9EB51656D68CE, savegameType);
		/// <summary>
		/// See SAVEGAME_SAVE_SP
		/// </summary>
		public static bool SAVEGAME_SAVE_MP(uint savegameType) => Function.Call<bool>(0x1840F3B30ED0105F, savegameType);
		public static bool SAVEGAME_IS_SAVE_PENDING() => Function.Call<bool>(0x3CF46F55C6585590);
		public static Any _0x1431540BCA1A1BD2() => Function.Call<Any>(0x1431540BCA1A1BD2);
		public static Any _0xA7ECEBAFBAF997A5(uint savegameType) => Function.Call<Any>(0xA7ECEBAFBAF997A5, savegameType);
		public static void _0xED4B0C1057892B2E(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xED4B0C1057892B2E, p0, p1, p2, p3);
		public static void _0x9BB83C4DD7BE0802(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x9BB83C4DD7BE0802, p0, p1, p2, p3, p4);
		public static void _0xE8346E62FD7FB962() => Function.Call(0xE8346E62FD7FB962);
		public static void _0xC0ABF784590798A9(Any p0) => Function.Call(0xC0ABF784590798A9, p0);
		public static Any _0xB00CE33465B5406D(Any p0, Any p1) => Function.Call<Any>(0xB00CE33465B5406D, p0, p1);
		/// <summary>
		/// Does the exact same as 0x529B9CCD0972AF4E
		/// Commonly used with time/timestamps
		/// </summary>
		public static void _SAVEGAME_GET_INT_2(Any* p0, string variableName) => Function.Call(0x529B9CCD0972AF4D, p0, variableName);
		public static void _SAVEGAME_GET_INT(Any* p0, string variableName) => Function.Call(0x529B9CCD0972AF4E, p0, variableName);
		/// <summary>
		/// Does the exact same as 0x529B9CCD0972AF4E
		/// Commonly used with enums and flags
		/// </summary>
		public static void _SAVEGAME_GET_INT_3(Any* p0, string variableName) => Function.Call(0xB25B5A375BE5BE26, p0, variableName);
		public static void _SAVEGAME_GET_FLOAT(Any* p0, string variableName) => Function.Call(0x35DEFECAE36D4FAE, p0, variableName);
		/// <summary>
		/// Does the exact same as 0x529B9CCD0972AF4E
		/// </summary>
		public static void _SAVEGAME_GET_BOOL(Any* p0, string variableName) => Function.Call(0xBB7F4273C186BC4B, p0, variableName);
		public static void _SAVEGAME_GET_TEXT_LABEL_23(Any* p0, string variableName) => Function.Call(0x5A10D6506B2F2C63, p0, variableName);
		public static void _SAVEGAME_GET_TEXT_LABEL_31(Any* p0, string variableName) => Function.Call(0x4845E7E7643A908C, p0, variableName);
		public static void _SAVEGAME_GET_TEXT_LABEL_63(Any* p0, string variableName) => Function.Call(0x186608A2AC6F9E88, p0, variableName);
		public static void _0x443174C20B8B9E7F(Any p0, Any p1, Any p2) => Function.Call(0x443174C20B8B9E7F, p0, p1, p2);
		public static void _0x8E8FFB9E4AD051D2(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x8E8FFB9E4AD051D2, p0, p1, p2, p3);
		public static void _0xE0B45E983BFC0768() => Function.Call(0xE0B45E983BFC0768);
		public static void _0x81F4E92BE3958364(Any p0, Any p1, Any p2) => Function.Call(0x81F4E92BE3958364, p0, p1, p2);
		public static void _0xA844FEB5C22C2C74() => Function.Call(0xA844FEB5C22C2C74);
	}

	public unsafe static class SHAPETEST
	{
		/// <summary>
		/// Asynchronously starts a line-of-sight (raycast) world probe shape test.
		/// 
		/// Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
		/// 
		/// p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
		/// </summary>
		public static int START_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, int entity, int p8) => Function.Call<int>(0x7EE9F5D83DD4F90E, x1, y1, z1, x2, y2, z2, flags, entity, p8);
		public static int START_SHAPE_TEST_LOS_PROBE(Vector3 vec1, Vector3 vec2, int flags, int entity, int p8) => Function.Call<int>(0x7EE9F5D83DD4F90E, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, flags, entity, p8);
		public static Any _0x04AA59CA40571C2E(Any p0, Any p1) => Function.Call<Any>(0x04AA59CA40571C2E, p0, p1);
		/// <summary>
		/// Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
		/// </summary>
		public static int START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, int entityToIgnore, int p8) => Function.Call<int>(0x377906D8A31E5586, x1, y1, z1, x2, y2, z2, flags, entityToIgnore, p8);
		public static int START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(Vector3 vec1, Vector3 vec2, int flags, int entityToIgnore, int p8) => Function.Call<int>(0x377906D8A31E5586, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, flags, entityToIgnore, p8);
		public static int START_SHAPE_TEST_BOX(float x, float y, float z, float x1, float y2, float z2, float rotX, float rotY, float rotZ, Any p9, Any p10, Any entity, Any p12) => Function.Call<int>(0xFE466162C4401D18, x, y, z, x1, y2, z2, rotX, rotY, rotZ, p9, p10, entity, p12);
		public static int START_SHAPE_TEST_BOX(Vector3 vec, float x1, float y2, float z2, Vector3 rotation, Any p9, Any p10, Any entity, Any p12) => Function.Call<int>(0xFE466162C4401D18, vec.X, vec.Y, vec.Z, x1, y2, z2, rotation.X, rotation.Y, rotation.Z, p9, p10, entity, p12);
		public static int START_SHAPE_TEST_CAPSULE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, int entityToIgnore, int p9) => Function.Call<int>(0x28579D1B8F8AAC80, x1, y1, z1, x2, y2, z2, radius, flags, entityToIgnore, p9);
		public static int START_SHAPE_TEST_CAPSULE(Vector3 vec1, Vector3 vec2, float radius, int flags, int entityToIgnore, int p9) => Function.Call<int>(0x28579D1B8F8AAC80, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, radius, flags, entityToIgnore, p9);
		public static int START_SHAPE_TEST_SWEPT_SPHERE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, int entity, Any p9) => Function.Call<int>(0xAA5B7C8309F73230, x1, y1, z1, x2, y2, z2, radius, flags, entity, p9);
		public static int START_SHAPE_TEST_SWEPT_SPHERE(Vector3 vec1, Vector3 vec2, float radius, int flags, int entity, Any p9) => Function.Call<int>(0xAA5B7C8309F73230, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, radius, flags, entity, p9);
		/// <summary>
		/// Old name: _START_SHAPE_TEST_SURROUNDING_COORDS
		/// </summary>
		public static int START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(Vector3* pVec1, Vector3* pVec2, int flag, int entity, int flag2) => Function.Call<int>(0x9839013D8B6014F1, pVec1, pVec2, flag, entity, flag2);
		/// <summary>
		/// Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
		/// 
		/// When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
		/// 
		/// enum eShapeTestStatus
		/// {
		/// 	SHAPETEST_STATUS_NONEXISTENT,
		/// 	SHAPETEST_STATUS_RESULTS_NOTREADY,
		/// 	SHAPETEST_STATUS_RESULTS_READY
		/// };
		/// </summary>
		public static int GET_SHAPE_TEST_RESULT(int shapeTestHandle, bool* hit, Vector3* endCoords, Vector3* surfaceNormal, int* entityHit) => Function.Call<int>(0xEDE8AC7C5108FB1D, shapeTestHandle, hit, endCoords, surfaceNormal, entityHit);
	}

	public unsafe static class SOCIALCLUB
	{
		public static int SC_INBOX_GET_TOTAL_NUM_MESSAGES() => Function.Call<int>(0x8EF0F633280C0663);
		public static uint SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(int msgIndex) => Function.Call<uint>(0xFF92537C4DDC1241, msgIndex);
		public static bool SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(int msgIndex) => Function.Call<bool>(0x74CF39E030A382C4, msgIndex);
		public static bool SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(int msgIndex) => Function.Call<bool>(0x63CAC501FFF66DC4, msgIndex);
		public static bool SC_INBOX_MESSAGE_GET_DATA_INT(int p0, string context, int* _out) => Function.Call<bool>(0x95BB39C4DA99F348, p0, context, _out);
		public static bool SC_INBOX_MESSAGE_GET_DATA_STRING(int p0, string context, string _out) => Function.Call<bool>(0x66F77FD58506FF6B, p0, context, _out);
		public static string SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(int p0) => Function.Call<string>(0x176D077685CD83E4, p0);
		public static bool SC_PRESENCE_ATTR_SET_FLOAT(uint attrHash, float value) => Function.Call<bool>(0xA31DAFCDC33775E9, attrHash, value);
		public static bool SC_PRESENCE_ATTR_SET_INT_EX(string attrName, int value, bool p2) => Function.Call<bool>(0x0000000085488C49, attrName, value, p2);
		public static bool SC_PRESENCE_ATTR_SET_FLOAT_EX(string attrName, float value, bool p2) => Function.Call<bool>(0x00000000467F4CAA, attrName, value, p2);
		public static bool SC_PRESENCE_ATTR_SET_STRING_EX(string attrName, string value, bool p2) => Function.Call<bool>(0x00000000EB2D93B3, attrName, value, p2);
		/// <summary>
		/// Starts a task to check an entered string for profanity on the ROS/Social Club services.
		/// </summary>
		public static bool SC_PROFANITY_CHECK_STRING(string _string, int* token) => Function.Call<bool>(0x9C74AC9D87B3FFF4, _string, token);
		public static bool SC_PROFANITY_GET_CHECK_IS_VALID(int token) => Function.Call<bool>(0x08C8052AF40C4247, token);
		public static bool SC_PROFANITY_GET_CHECK_IS_PENDING(int token) => Function.Call<bool>(0x3A10BCD0C8AA0B82, token);
		public static bool SC_PROFANITY_GET_STRING_PASSED(int token) => Function.Call<bool>(0xF302973BB8BE70E6, token);
		public static int SC_PROFANITY_GET_STRING_STATUS(int token) => Function.Call<int>(0x0CF3BFB99EBBE5B1, token);
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE() => Function.Call<bool>(0xCBF743C984695CF3);
		public static int SC_COMMUNITY_EVENT_GET_EVENT_ID() => Function.Call<int>(0xD635DF6BAA5A6017);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(string p0, int* p1) => Function.Call<bool>(0xB4411D4D6B81438E, p0, p1);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(string p0, float* p1) => Function.Call<bool>(0x060BBAD634C2B44B, p0, p1);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(string p0, string p1) => Function.Call<bool>(0x9F6DCD0C939C71E9, p0, p1);
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(string p0) => Function.Call<bool>(0x89D9BDE7334B110F, p0);
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(string p0) => Function.Call<bool>(0x09937EB0CEBC2F9F, p0);
		public static int SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(string p0) => Function.Call<int>(0x03C03ABBABBEF752, p0);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(string p0, int* p1, string p2) => Function.Call<bool>(0x3519CC3525319A96, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(string p0, float* p1, string p2) => Function.Call<bool>(0x1BDB56DB258F052D, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(string p0, string p1, string p2) => Function.Call<bool>(0xC8FC3B2432E8229D, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(string p0, string p1) => Function.Call<bool>(0x85EA0BEC7B1F7622, p0, p1);
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(int p0) => Function.Call<bool>(0x62B384FEFDE06817, p0);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(int p0, string p1, int* p2) => Function.Call<bool>(0x7C981DE05A7403A0, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(int p0, string p1, float* p2) => Function.Call<bool>(0x91C9E2A0F9DD6DD4, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(int p0, string p1, string p2) => Function.Call<bool>(0x049D2196D9D11184, p0, p1, p2);
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(int p0, string p1) => Function.Call<bool>(0x11EA52CAD1B55910, p0, p1);
	}

	public unsafe static class SOCIALCLUBFEED
	{
		public static int _SC_FEED_SUBMIT_PRESET_MESSAGE(int type, int subType) => Function.Call<int>(0xEFB64240F6B17817, type, subType);
		public static bool SC_FEED_HUB_HAS_NEW_DATA() => Function.Call<bool>(0x068332D20CB6F897);
	}

	public unsafe static class SPACTIONPROXY
	{
		public static bool _SPACTIONPROXY_START_MANAGER() => Function.Call<bool>(0x1F471B79ACC91BEE);
		public static bool _SPACTIONPROXY_MANAGER_IS_READY() => Function.Call<bool>(0x1F471B79ACC91BED);
		public static bool _SPACTIONPROXY_MANAGER_IS_FAILED() => Function.Call<bool>(0x1F471B79ACC91BEC);
		public static bool _SPACTIONPROXY_GET_NEXT_PENDING_CRAFTING_ACTION(Any* data) => Function.Call<bool>(0x1F471B79ACC97BEF, data);
		public static bool _SPACTIONPROXY_GET_NEXT_PENDING_BUY_ACTION(Any* data) => Function.Call<bool>(0x1F471B79ACC98BEF, data);
		public static bool _SPACTIONPROXY_PROCESS_ACTION(Any p0, bool p1) => Function.Call<bool>(0x1F471B79ACC94BEF, p0, p1);
	}

	public unsafe static class STATS
	{
		/// <summary>
		/// struct StatId
		/// {
		/// 	alignas(8) Hash BaseId;
		/// 	alignas(8) Hash PermutationId;
		/// }
		/// </summary>
		public static bool STAT_ID_IS_VALID(Any* statId) => Function.Call<bool>(0xC48FE1971C9743FF, statId);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_SET_INT(Any* statId, int value, bool p2) => Function.Call<bool>(0xA4DDF5DF95E65EEE, statId, value, p2);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_SET_FLOAT(Any* statId, float value, bool p2) => Function.Call<bool>(0x481BDF6A10C5EF68, statId, value, p2);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_SET_BOOL(Any* statId, bool value, bool p2) => Function.Call<bool>(0x3B5107353267D7A1, statId, value, p2);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_SET_GXT_LABEL(Any* statId, string label, bool p2) => Function.Call<bool>(0x05060A54834F2382, statId, label, p2);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_SET_DATE(Any* statId, Any* date, bool p2) => Function.Call<bool>(0x1FAE9B2FAA2DFE06, statId, date, p2);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_GET_INT(Any* statId, int* p1) => Function.Call<bool>(0x767FBC2AC802EF3E, statId, p1);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_GET_FLOAT(Any* statId, float* value) => Function.Call<bool>(0xD7AE6C9C9C6AC54D, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_GET_BOOL(Any* statId, bool* value) => Function.Call<bool>(0x11B5E6D2AE73F48F, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool STAT_ID_GET_DATE(Any* statId, Any* date) => Function.Call<bool>(0x8B0FACEFC36C824C, statId, date);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void _0x0FEE2561120F3333(Any* statId) => Function.Call(0x0FEE2561120F3333, statId);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void _STAT_ID_INCREMENT_INT(Any* statId, int value) => Function.Call(0x6A0184E904CDF25E, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void _STAT_ID_INCREMENT_FLOAT(Any* statId, float value) => Function.Call(0x4A47E38EA3D60939, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void _STAT_ID_DECREMENT_INT(Any* statId, int value) => Function.Call(0xBD861AE8A5181ED7, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void _0x91A4F58E01ED5E4C(Any* statId, int value) => Function.Call(0x91A4F58E01ED5E4C, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// Only used in R* SP Scripts
		/// _STAT_ID_SET_*
		/// </summary>
		public static void _0xE141F6B40B1E3683(Any* statId, float value) => Function.Call(0xE141F6B40B1E3683, statId, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static void STAT_ID_SET_TO_POSSE_ID(Any* statId) => Function.Call(0x34B22DE38477EDB4, statId);
		/// <summary>
		/// Calculation: (value / 1000) / 60 % 60
		/// </summary>
		public static int _STAT_CALCULATE_COOLDOWN(int value) => Function.Call<int>(0x1E7384AB5D4F4581, value);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool _STAT_PHEROMONE_COOLDOWN_LEGENDARY_ANIMAL(int entity, Any* statId) => Function.Call<bool>(0x5420D398A42917FC, entity, statId);
		public static void _STAT_ITEM_FISH_CAUGHT(int fish, float weight, uint category, uint subcategory) => Function.Call(0xDA26263C87CCE9C1, fish, weight, category, subcategory);
		public static void _STAT_CARRIED_SATCHEL_ITEM_FROM_PED(int ped) => Function.Call(0x831BF01C56149A8A, ped);
		public static void _STAT_DONATE_INCREMENT_ITEM(int item, int slot, Any p2, Any p3) => Function.Call(0x7C2ABF6E556B21FC, item, slot, p2, p3);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0x8312F09C56149A8A(uint animalType) => Function.Call(0x8312F09C56149A8A, animalType);
		public static void _0x378D3B1B11D9385B(int p0) => Function.Call(0x378D3B1B11D9385B, p0);
		public static void _0xDA26263C07CCE9C2(int p0) => Function.Call(0xDA26263C07CCE9C2, p0);
		public static void _0xD64DBC8B0424135F(int ped, uint animalType) => Function.Call(0xD64DBC8B0424135F, ped, animalType);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static void _0xA59590050F80FF2E(Any p0, bool p1, bool p2, bool p3) => Function.Call(0xA59590050F80FF2E, p0, p1, p2, p3);
		public static void _0x90E9A5DADBABC918(uint animalType) => Function.Call(0x90E9A5DADBABC918, animalType);
		public static void _0xF8181B5EF156862C(int ped) => Function.Call(0xF8181B5EF156862C, ped);
		public static void STAT_ADD_BOUNTY_TARGET(uint unlockHash, int ped) => Function.Call(0x6B1044FDC2B09101, unlockHash, ped);
		public static void _0x8C889E4CBB4B2356(Any p0, int ped) => Function.Call(0x8C889E4CBB4B2356, p0, ped);
		public static void STAT_BOUNTY_CAPTURED(int entity) => Function.Call(0x262EF7CF49CF1EB9, entity);
		public static void _0xA596890CF55B5095(int ped, bool p1) => Function.Call(0xA596890CF55B5095, ped, p1);
		public static void STAT_BOUNTY_ESCAPED(int ped) => Function.Call(0xB22F05732F72F70C, ped);
		public static void _0xF21A5D66874FCEDD(Any p0, uint p1, uint p2) => Function.Call(0xF21A5D66874FCEDD, p0, p1, p2);
		public static void _0x3EB2791A1FBC8A42(uint statItem, int p1) => Function.Call(0x3EB2791A1FBC8A42, statItem, p1);
		public static void _0xDF95DF488A645CE7() => Function.Call(0xDF95DF488A645CE7);
		public static void STAT_PHOTOGRAPH_TAKEN(int itemset) => Function.Call(0x4D31051A4CA83787, itemset);
		public static void _0xBE66B26B6529E943(uint unlockHash, int ped, uint animalType) => Function.Call(0xBE66B26B6529E943, unlockHash, ped, animalType);
		public static void _0xF2B5ABDE09958689(uint unlockHash, int ped1, int ped2) => Function.Call(0xF2B5ABDE09958689, unlockHash, ped1, ped2);
		public static void STAT_REGISTER_LEGENDARY_ANIMAL_DEED(uint deedHash) => Function.Call(0xCD0D69C65BB0E8B9, deedHash);
		/// <summary>
		/// statId: see STAT_ID_IS_VALID
		/// </summary>
		public static bool _0x302E71C1D9EE75B9(Any* statId, uint p1, int* p2) => Function.Call<bool>(0x302E71C1D9EE75B9, statId, p1, p2);
		public static bool STATSTRACKER_IS_INITIALIZED(uint p0) => Function.Call<bool>(0x01F4D242765C6B24, p0);
		public static void _0x6123E2832C34243D(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x6123E2832C34243D, p0, p1, p2, p3, p4);
		public static void _0xCA41E86545413B5B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xCA41E86545413B5B, p0, p1, p2, p3, p4, p5, p6);
		public static void STATSTRACKER_DEED_STARTED(uint p0, Any p1) => Function.Call(0xB2A38826E5886E83, p0, p1);
		public static void _0xD5910ECF81A2278C(int deedType, uint deedHash, int missionStatus, Any* p3) => Function.Call(0xD5910ECF81A2278C, deedType, deedHash, missionStatus, p3);
		public static void _0x99230691875FC218(Any p0, uint p1, float x, float y, float z) => Function.Call(0x99230691875FC218, p0, p1, x, y, z);
		public static void _0x99230691875FC218(Any p0, uint p1, Vector3 vec) => Function.Call(0x99230691875FC218, p0, p1, vec.X, vec.Y, vec.Z);
		public static void _0x025E98E317652CDD(int p0) => Function.Call(0x025E98E317652CDD, p0);
		public static void _0xE5A680A5D8B1F687(int p0) => Function.Call(0xE5A680A5D8B1F687, p0);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static bool _0x4DAC398297981B87(int p0) => Function.Call<bool>(0x4DAC398297981B87, p0);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/challenge_goals.lua
		/// </summary>
		public static bool CHAL_IS_GOAL_ACTIVE(uint chalHash, uint goalHash) => Function.Call<bool>(0x04DAC3929796EB87, chalHash, goalHash);
		public static void CHAL_SET_GOAL_DISABLED(uint chalHash, uint goalHash, bool disabled) => Function.Call(0xF63DF9EE16393343, chalHash, goalHash, disabled);
		public static int CHAL_GET_NUM_RANKS_COMPLETED(uint chalHash) => Function.Call<int>(0x58CB53DB63F84DE9, chalHash);
		public static int CHAL_GET_MAX_RANKS(uint chalHash) => Function.Call<int>(0x58CB53DB63F84DEA, chalHash);
		public static void CHAL_ADD_GOAL_PROGRESS_INT(uint chalHash, uint goalHash, int value) => Function.Call(0xDDBD560745B1EE9A, chalHash, goalHash, value);
		public static void CHAL_ADD_GOAL_PROGRESS_FLOAT(uint chalHash, uint goalHash, float value) => Function.Call(0x86922D8C02FB7703, chalHash, goalHash, value);
		public static void CHAL_SET_GOAL_PROGRESS_INT(uint chalHash, uint goalHash, int value) => Function.Call(0xDDBD560745B1EE9B, chalHash, goalHash, value);
		public static void CHAL_ADD_GOAL_PROGRESS_INT_BY_SCORE_ID(uint p0, int value) => Function.Call(0xDDBD560745B1EE9C, p0, value);
		public static void CHAL_ADD_GOAL_PROGRESS_FLOAT_BY_SCORE_ID(uint p0, float value) => Function.Call(0x86922D8C02FB7705, p0, value);
		public static bool CHAL_ACHIEVEMENT_IS_COMPLETE(uint p0, uint p1) => Function.Call<bool>(0x77B97A827739D434, p0, p1);
		public static int CHAL_ACHIEVEMENT_GET_PROGRESS_INT(uint p0, uint p1) => Function.Call<int>(0x808712E428F697B8, p0, p1);
		public static void CHAL_NET_START_CHAL(uint chalHash) => Function.Call(0x4ABF7E4DB6279E8F, chalHash);
		public static void CHAL_NET_STOP_CHAL(uint chalHash) => Function.Call(0x43B0163154A50C86, chalHash);
		public static void CHAL_NET_START_GOAL(uint chalHash, uint goalHash) => Function.Call(0xC3FCB47344DCB638, chalHash, goalHash);
		public static void CHAL_NET_STOP_GOAL(uint chalHash, uint goalHash) => Function.Call(0x00CE6A93324A590B, chalHash, goalHash);
		public static int _0xDDBD560745B1EE98(uint chalHash, uint goalHash, int player) => Function.Call<int>(0xDDBD560745B1EE98, chalHash, goalHash, player);
		public static string _0xB112B9262EC29C20(uint p0, int p1) => Function.Call<string>(0xB112B9262EC29C20, p0, p1);
		public static void _0x4FCBCC0584CD08E9(uint p0) => Function.Call(0x4FCBCC0584CD08E9, p0);
		public static bool _0xCA1F0B5103936891(uint p0) => Function.Call<bool>(0xCA1F0B5103936891, p0);
		public static uint _0x8BA3D7B1E83EF803(uint p0) => Function.Call<uint>(0x8BA3D7B1E83EF803, p0);
		public static int CHAL_MISSION_GET_NUM_GOALS(uint missionHash) => Function.Call<int>(0x0B0576DD3A75E58D, missionHash);
		public static int CHAL_MISSION_GET_NUM_GOALS_COMPLETE(uint missionHash) => Function.Call<int>(0xA785A52B59B7E7B2, missionHash);
		public static bool CHAL_MISSION_IS_GOAL_COMPLETE(uint missionHash, uint goalHash) => Function.Call<bool>(0xC0BB774787BBF301, missionHash, goalHash);
		public static void CHAL_MISSION_ADD_GOAL_PROGRESS_INT(uint missionHash, uint goalHash, int value) => Function.Call(0x97E18E7C098626DE, missionHash, goalHash, value);
		public static float _0x9D0F5D2E1951CD84() => Function.Call<float>(0x9D0F5D2E1951CD84);
		public static void _0x218F7710A139D012() => Function.Call(0x218F7710A139D012);
		public static bool _0x3AEABAE3F3C7600C() => Function.Call<bool>(0x3AEABAE3F3C7600C);
		public static string _0x3F6FD87D2030ADC6() => Function.Call<string>(0x3F6FD87D2030ADC6);
		public static Any _0xA2E2BEA4E83F6270(uint p0) => Function.Call<Any>(0xA2E2BEA4E83F6270, p0);
		public static bool _0xB5E2EDA2135E0FA1(uint p0, int p1, uint* scheduleLocation) => Function.Call<bool>(0xB5E2EDA2135E0FA1, p0, p1, scheduleLocation);
		public static int WEEKLY_COLLECTIBLE_GET_NUM_SETS(uint chalHash) => Function.Call<int>(0x8F5317729F791D10, chalHash);
		public static uint WEEKLY_COLLECTIBLE_GET_ITEM_SET_BUY_AWARD(uint chalHash, int index) => Function.Call<uint>(0x610783F646894D25, chalHash, index);
		public static uint WEEKLY_COLLECTIBLE_GET_ITEM_SET_LABEL(uint chalHash, int index) => Function.Call<uint>(0xBFFA88522FF0F730, chalHash, index);
		public static int WEEKLY_COLLECTIBLE_GET_NUM_ITEMS_IN_SET(uint chalHash, int index) => Function.Call<int>(0x7D675C9DDDB365BE, chalHash, index);
		public static bool WEEKLY_COLLECTIBLE_GET_ITEM_IN_SET(uint chalHash, int setIndex, int itemIndex, uint* p3, int* p4) => Function.Call<bool>(0xBA61BA6205A3F5A8, chalHash, setIndex, itemIndex, p3, p4);
		/// <summary>
		/// Only used in R* Script net_char_creator
		/// </summary>
		public static void _0x4F2D5FA23DB992DE() => Function.Call(0x4F2D5FA23DB992DE);
		/// <summary>
		/// Only used in R* Script net_char_creator
		/// </summary>
		public static void _0x4E463A3CDEFFFE96() => Function.Call(0x4E463A3CDEFFFE96);
	}

	public unsafe static class STREAMING
	{
		/// <summary>
		/// Request a model to be loaded into memory.
		/// </summary>
		public static void REQUEST_MODEL(uint model, bool p1) => Function.Call(0xFA28FE3A6246FC30, model, p1);
		/// <summary>
		/// Checks if the specified model has loaded into memory.
		/// </summary>
		public static bool HAS_MODEL_LOADED(uint model) => Function.Call<bool>(0x1283B8B89DD5D1B6, model);
		/// <summary>
		/// Marks the model as no longer needed.
		/// </summary>
		public static void SET_MODEL_AS_NO_LONGER_NEEDED(uint model) => Function.Call(0x4AD96EF928BD4F9A, model);
		/// <summary>
		/// Returns whether the specified model exists in the game.
		/// </summary>
		public static bool IS_MODEL_IN_CDIMAGE(uint model) => Function.Call<bool>(0xD6F3B6D7716CFF8E, model);
		/// <summary>
		/// Returns whether the specified model is valid
		/// </summary>
		public static bool IS_MODEL_VALID(uint model) => Function.Call<bool>(0x392C8D8E07B70EFC, model);
		public static bool IS_MODEL_A_PED(uint model) => Function.Call<bool>(0xC3F09DE9D6D17DDA, model);
		/// <summary>
		/// Returns whether the specified model represents a vehicle.
		/// </summary>
		public static bool IS_MODEL_A_VEHICLE(uint model) => Function.Call<bool>(0x354F62672DE7DB0A, model);
		public static bool _IS_MODEL_AN_OBJECT(uint model) => Function.Call<bool>(0x274EE1B90CFA669E, model);
		public static bool _HAS_COLLISION_LOADED_AT_COORD(float x, float y, float z) => Function.Call<bool>(0xDA8B2EAF29E872E2, x, y, z);
		public static bool _HAS_COLLISION_LOADED_AT_COORD(Vector3 vec) => Function.Call<bool>(0xDA8B2EAF29E872E2, vec.X, vec.Y, vec.Z);
		public static void _0x80B3E0597366ADF1() => Function.Call(0x80B3E0597366ADF1);
		public static void REQUEST_COLLISION_AT_COORD(float x, float y, float z) => Function.Call(0x0A3720F162A033C9, x, y, z);
		public static void REQUEST_COLLISION_AT_COORD(Vector3 vec) => Function.Call(0x0A3720F162A033C9, vec.X, vec.Y, vec.Z);
		public static void _REQUEST_METADATA_AT_COORD(float x, float y, float z) => Function.Call(0xA8432A14D4DC2101, x, y, z);
		public static void _REQUEST_METADATA_AT_COORD(Vector3 vec) => Function.Call(0xA8432A14D4DC2101, vec.X, vec.Y, vec.Z);
		public static void REQUEST_COLLISION_FOR_MODEL(uint model) => Function.Call(0xF1767BE37F661551, model);
		public static bool HAS_COLLISION_FOR_MODEL_LOADED(uint model) => Function.Call<bool>(0x210A79C9EC89778F, model);
		public static void REQUEST_ADDITIONAL_COLLISION_AT_COORD(float x, float y, float z) => Function.Call(0x83A8D71650D1894F, x, y, z);
		public static void REQUEST_ADDITIONAL_COLLISION_AT_COORD(Vector3 vec) => Function.Call(0x83A8D71650D1894F, vec.X, vec.Y, vec.Z);
		public static bool DOES_ANIM_DICT_EXIST(string animDict) => Function.Call<bool>(0x537F44CB0D7F150D, animDict);
		public static void REQUEST_ANIM_DICT(string animDict) => Function.Call(0xA862A2AD321F94B4, animDict);
		public static bool HAS_ANIM_DICT_LOADED(string animDict) => Function.Call<bool>(0x27FF6FE8009B40CA, animDict);
		public static void REMOVE_ANIM_DICT(string animDict) => Function.Call(0x4763145053A33D46, animDict);
		public static void REQUEST_MOVE_NETWORK_DEF(string name) => Function.Call(0x2B6529C54D29037A, name);
		public static bool HAS_MOVE_NETWORK_DEF_LOADED(string name) => Function.Call<bool>(0x2C04D89A0FB4E244, name);
		public static void REMOVE_MOVE_NETWORK_DEF(string name) => Function.Call(0x57A197AD83F66BBF, name);
		public static void REQUEST_CLIP_SET(string clipSet) => Function.Call(0xEF7611B57A820126, clipSet);
		/// <summary>
		/// Alias for HAS_ANIM_SET_LOADED.
		/// </summary>
		public static bool HAS_CLIP_SET_LOADED(string clipSet) => Function.Call<bool>(0x1F23D6B6DA1CC3B2, clipSet);
		/// <summary>
		/// Alias for REMOVE_ANIM_SET.
		/// </summary>
		public static void REMOVE_CLIP_SET(string clipSet) => Function.Call(0x817FA1B1EE7CD6F0, clipSet);
		public static void _REQUEST_CLIP_SET_BY_HASH(uint clipSetHash) => Function.Call(0xAC37644A538F7524, clipSetHash);
		public static void _0x03DDBF2D73799F9E(Any p0) => Function.Call(0x03DDBF2D73799F9E, p0);
		public static Any _0x85B8F04555AB49B8(Any p0) => Function.Call<Any>(0x85B8F04555AB49B8, p0);
		public static void _0x9F348DE670423460(Any p0) => Function.Call(0x9F348DE670423460, p0);
		public static Any _0x5288B7F0690F7C1F(Any p0) => Function.Call<Any>(0x5288B7F0690F7C1F, p0);
		public static int _REQUEST_SCENARIO_TYPE(uint scenarioType, int p1, Any p2, Any p3) => Function.Call<int>(0x19A6BE7D9C6884D3, scenarioType, p1, p2, p3);
		public static bool _HAS_SCENARIO_TYPE_LOADED(uint scenarioType, bool p1) => Function.Call<bool>(0x9427C94D2E4094A4, scenarioType, p1);
		public static Any _REMOVE_SCENARIO_ASSET(uint scenarioType) => Function.Call<Any>(0x4EDDD9E9CA5AF985, scenarioType);
		public static Any _0xB223249B7798EEED(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xB223249B7798EEED, p0, p1, p2, p3);
		public static Any _0xA0AE7653E8181725(Any p0) => Function.Call<Any>(0xA0AE7653E8181725, p0);
		public static Any _0x66BC28E50E85270E(Any p0) => Function.Call<Any>(0x66BC28E50E85270E, p0);
		/// <summary>
		/// Outputs IPL position and radius (previously wrongly named heading)
		/// https://github.com/femga/rdr3_discoveries/blob/master/imaps/imaps_with_coords_and_heading.lua
		/// </summary>
		public static bool _GET_IPL_BOUNDING_SPHERE(uint iplHash, Vector3* position, float* radius) => Function.Call<bool>(0x9C77964B0E07B633, iplHash, position, radius);
		/// <summary>
		/// Old name: _REQUEST_IMAP
		/// </summary>
		public static void REQUEST_IPL_HASH(uint iplHash) => Function.Call(0x59767C5A7A9AE6DA, iplHash);
		/// <summary>
		/// Old name: _REQUEST_IMAP_2
		/// </summary>
		public static void REQUEST_IPL_BY_HASH(uint iplHash) => Function.Call(0x9E211A378F95C97C, iplHash);
		/// <summary>
		/// Old name: _REMOVE_IMAP
		/// </summary>
		public static void REMOVE_IPL_HASH(uint iplHash) => Function.Call(0x5A3E5CF7B4014B96, iplHash);
		/// <summary>
		/// Old name: _REMOVE_IMAP_2
		/// </summary>
		public static void REMOVE_IPL_BY_HASH(uint iplHash) => Function.Call(0x431E3AB760629B34, iplHash);
		/// <summary>
		/// Old name: _IS_IMAP_ACTIVE
		/// </summary>
		public static bool IS_IPL_ACTIVE_HASH(uint iplHash) => Function.Call<bool>(0xD779B9B910BD3B7C, iplHash);
		/// <summary>
		/// Old name: _IS_IMAP_ACTIVE_2
		/// </summary>
		public static bool IS_IPL_ACTIVE_BY_HASH(uint iplHash) => Function.Call<bool>(0x93AC1B91CB6D9913, iplHash);
		/// <summary>
		/// Returns true if IPL is streamed in (?)
		/// </summary>
		public static bool _IS_POSITION_INSIDE_IPL_STREAMING_EXTENTS(uint iplHash, float x, float y, float z) => Function.Call<bool>(0x73B40D97D7BAAD77, iplHash, x, y, z);
		public static bool _IS_POSITION_INSIDE_IPL_STREAMING_EXTENTS(uint iplHash, Vector3 vec) => Function.Call<bool>(0x73B40D97D7BAAD77, iplHash, vec.X, vec.Y, vec.Z);
		public static void _0xDEEE1F265B7ECEF5() => Function.Call(0xDEEE1F265B7ECEF5);
		public static void SET_GAME_PAUSES_FOR_STREAMING(bool toggle) => Function.Call(0xB3BC8250F4FE8B63, toggle);
		public static int GET_NUMBER_OF_STREAMING_REQUESTS() => Function.Call<int>(0x30CCCC4D88E654CA);
		public static void REQUEST_PTFX_ASSET() => Function.Call(0x001FF43843028E0C);
		public static bool HAS_PTFX_ASSET_LOADED() => Function.Call<bool>(0x13A3F30A9ED0BC31);
		public static void REMOVE_PTFX_ASSET() => Function.Call(0x042F9049EA419E86);
		public static void REQUEST_NAMED_PTFX_ASSET(uint fxNameHash) => Function.Call(0xF2B2353BBC0D4E8F, fxNameHash);
		public static bool HAS_NAMED_PTFX_ASSET_LOADED(uint fxNameHash) => Function.Call<bool>(0x65BB72F29138F5D6, fxNameHash);
		public static void REMOVE_NAMED_PTFX_ASSET(uint fxNameHash) => Function.Call(0xF20866829E1C81A2, fxNameHash);
		public static void SET_POPULATION_BUDGET_MULTIPLIER(float fBudgetMultiplier) => Function.Call(0x2F9AC754FE179D58, fBudgetMultiplier);
		public static float GET_POPULATION_BUDGET_MULTIPLIER() => Function.Call<float>(0x8A3945405B31048F);
		public static Any _0x071769BCB24379E5() => Function.Call<Any>(0x071769BCB24379E5);
		public static void CLEAR_FOCUS() => Function.Call(0x86CCAF7CE493EFBE);
		public static void SET_FOCUS_POS_AND_VEL(float x, float y, float z, float offsetX, float offsetY, float offsetZ) => Function.Call(0x25F6EF88664540E2, x, y, z, offsetX, offsetY, offsetZ);
		public static void SET_FOCUS_POS_AND_VEL(Vector3 vec, Vector3 offset) => Function.Call(0x25F6EF88664540E2, vec.X, vec.Y, vec.Z, offset.X, offset.Y, offset.Z);
		/// <summary>
		/// It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
		/// </summary>
		public static void SET_FOCUS_ENTITY(int entity) => Function.Call(0x955AEDD58F4BD309, entity);
		public static bool IS_ENTITY_FOCUS(int entity) => Function.Call<bool>(0xF87DE697E9A06EC6, entity);
		public static void SET_MAPDATACULLBOX_ENABLED(string name, bool toggle) => Function.Call(0x3CACC83F6FED837C, name, toggle);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_ALL_MAPDATA_CULLED(Any p0) => Function.Call(0x19ABCC581D28E6F9, p0);
		public static void _0xF01D21DF39554115(Any p0) => Function.Call(0xF01D21DF39554115, p0);
		public static bool LOAD_SCENE_START(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7) => Function.Call<bool>(0x387AD749E3B69B70, posX, posY, posZ, offsetX, offsetY, offsetZ, radius, p7);
		public static bool LOAD_SCENE_START(Vector3 vec, Vector3 offset, float radius, int p7) => Function.Call<bool>(0x387AD749E3B69B70, vec.X, vec.Y, vec.Z, offset.X, offset.Y, offset.Z, radius, p7);
		public static bool LOAD_SCENE_START_SPHERE(float x, float y, float z, float radius, Any p4) => Function.Call<bool>(0x513F8AA5BF2F17CF, x, y, z, radius, p4);
		public static bool LOAD_SCENE_START_SPHERE(Vector3 vec, float radius, Any p4) => Function.Call<bool>(0x513F8AA5BF2F17CF, vec.X, vec.Y, vec.Z, radius, p4);
		public static void LOAD_SCENE_STOP() => Function.Call(0x5A8B01199C3E79C3);
		public static bool IS_LOAD_SCENE_ACTIVE() => Function.Call<bool>(0xCF45DF50C7775F2A);
		public static bool IS_LOAD_SCENE_LOADED() => Function.Call<bool>(0x0909F71B5C070797);
		public static bool IS_RENDERED_SCENE_LOADED() => Function.Call<bool>(0x45BF3A6239A576B7);
		public static bool IS_PLAYER_SWITCH_IN_PROGRESS() => Function.Call<bool>(0xED20CB1F5297791D);
		public static void SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME() => Function.Call(0xA03A6812529AD9C8);
		public static void IPL_GROUP_SWAP_START(string iplName1, string iplName2) => Function.Call(0x20D504994FDC4412, iplName1, iplName2);
		public static void IPL_GROUP_SWAP_CANCEL() => Function.Call(0x31108BB5715D035F);
		public static bool IPL_GROUP_SWAP_IS_READY() => Function.Call<bool>(0xC2C05DEFE85A0B64);
		public static void IPL_GROUP_SWAP_FINISH() => Function.Call(0x040EE319EFD1D3B5);
		public static bool IPL_GROUP_SWAP_IS_ACTIVE() => Function.Call<bool>(0xFC464598F6EE97B0);
		public static void PREFETCH_SRL(string srl) => Function.Call(0x354837E5A5BAA5AF, srl);
		public static void _0xAE00387E53B1E9FC() => Function.Call(0xAE00387E53B1E9FC);
		public static void _0xEF1A8A484118735E() => Function.Call(0xEF1A8A484118735E);
		public static void _0xD9F2FF4AF394D926() => Function.Call(0xD9F2FF4AF394D926);
		public static bool IS_SRL_LOADED() => Function.Call<bool>(0x5C2C88512CF6DAFB);
		public static void BEGIN_SRL() => Function.Call(0x0360710033BE60D9);
		public static void END_SRL() => Function.Call(0x1CE71FB33CA079FE);
		public static void SET_SRL_TIME(float p0) => Function.Call(0x18231AEF458BCFF2, p0);
		public static void SET_SRL_READAHEAD_TIMES(int p0, int p1, int p2, int p3) => Function.Call(0xD346248C1DCE0D76, p0, p1, p2, p3);
		public static void SET_SRL_LONG_JUMP_MODE(bool p0) => Function.Call(0x7C907E8A725E5FD2, p0);
		public static void SET_HD_AREA(float x, float y, float z, float radius) => Function.Call(0xB88B905AFA35CB4D, x, y, z, radius);
		public static void SET_HD_AREA(Vector3 vec, float radius) => Function.Call(0xB88B905AFA35CB4D, vec.X, vec.Y, vec.Z, radius);
		public static void CLEAR_HD_AREA() => Function.Call(0xD83B22434E52728D);
		public static void _0x09FBF15D73EFC900() => Function.Call(0x09FBF15D73EFC900);
		public static void _0xF11D7CB962FCD747(Any p0) => Function.Call(0xF11D7CB962FCD747, p0);
		/// <summary>
		/// Sorts some unknown data.
		/// 
		/// Likely SORT_*
		/// </summary>
		public static void _0xB9B9E47EDB9D63DB() => Function.Call(0xB9B9E47EDB9D63DB);
		public static void _0xBE8DAA9D8D01DA6A(Any p0, Any p1, Any p2) => Function.Call(0xBE8DAA9D8D01DA6A, p0, p1, p2);
		public static Any _0x53764309C4618087(Any p0) => Function.Call<Any>(0x53764309C4618087, p0);
		/// <summary>
		/// _SET_E* or _SET_F*
		/// </summary>
		public static void _0x032A14D082A9B269(uint p0) => Function.Call(0x032A14D082A9B269, p0);
		public static void _0xAFA87A7D41EE346A(Any p0) => Function.Call(0xAFA87A7D41EE346A, p0);
		public static void _0x6A6E79FBE8678C98() => Function.Call(0x6A6E79FBE8678C98);
		public static void _0xCC61D8D6C19D9F14(Any p0) => Function.Call(0xCC61D8D6C19D9F14, p0);
		public static Any _0xDA7FDEFF4DE86839() => Function.Call<Any>(0xDA7FDEFF4DE86839);
		public static Any _0x5D5E2102B174B8D2() => Function.Call<Any>(0x5D5E2102B174B8D2);
		public static Any _0x7B8C2B846C05E5AD() => Function.Call<Any>(0x7B8C2B846C05E5AD);
		public static void _0x62D5F0588915B277() => Function.Call(0x62D5F0588915B277);
		public static Any _0x2F4D53023F826FF0() => Function.Call<Any>(0x2F4D53023F826FF0);
		public static Any _0xDABFE48BA0D457AA() => Function.Call<Any>(0xDABFE48BA0D457AA);
		public static Any _0xE5B76E5B56CD77DD() => Function.Call<Any>(0xE5B76E5B56CD77DD);
		public static Any _0x27AF48C62B281341() => Function.Call<Any>(0x27AF48C62B281341);
		public static Any _0x99F92061EFE908BA() => Function.Call<Any>(0x99F92061EFE908BA);
		public static Any _0x05DD384F39DE1C8C(Any p0, Any p1) => Function.Call<Any>(0x05DD384F39DE1C8C, p0, p1);
		public static Any _0x198B85CC3C7A4593(Any p0, Any p1) => Function.Call<Any>(0x198B85CC3C7A4593, p0, p1);
		public static Any _0x2A6D1DAAB9EBB262(Any p0) => Function.Call<Any>(0x2A6D1DAAB9EBB262, p0);
		public static void _0x07559B29950301FF(Any p0, Any p1) => Function.Call(0x07559B29950301FF, p0, p1);
		public static Any _0xD6E39DC5D46DF4AB(Any p0) => Function.Call<Any>(0xD6E39DC5D46DF4AB, p0);
		public static Any _0x8D56BDA343D9519F(Any p0) => Function.Call<Any>(0x8D56BDA343D9519F, p0);
		public static void _0xD840C130D7AACFA5(Any p0, Any p1, Any p2) => Function.Call(0xD840C130D7AACFA5, p0, p1, p2);
		public static void _0x2E24C27B112B5B12(Any p0) => Function.Call(0x2E24C27B112B5B12, p0);
		public static void _SET_GUARMA_WORLDHORIZON_ACTIVE(bool toggle) => Function.Call(0x74E2261D2A66849A, toggle);
	}

	public unsafe static class TASK
	{
		/// <summary>
		/// This tasks the ped to do nothing for the specified amount of milliseconds.
		/// This is useful if you want to add a delay between tasks when using a sequence task.
		/// </summary>
		public static void TASK_PAUSE(int ped, int ms) => Function.Call(0xE73A266DB0CA9042, ped, ms);
		/// <summary>
		/// Makes the specified ped stand still for (time) milliseconds.
		/// </summary>
		public static void TASK_STAND_STILL(int ped, int time) => Function.Call(0x919BE13EED931959, ped, time);
		public static void TASK_JUMP(int ped, bool unused) => Function.Call(0x0AE4086104E067B1, ped, unused);
		public static void _TASK_JUMP_2(int ped, float x, float y, float z, int entity) => Function.Call(0x91083103137D7254, ped, x, y, z, entity);
		public static void _TASK_JUMP_2(int ped, Vector3 vec, int entity) => Function.Call(0x91083103137D7254, ped, vec.X, vec.Y, vec.Z, entity);
		public static void TASK_COWER(int ped, int duration, int pedToCowerFrom, string p3) => Function.Call(0x3EB1FE9E8E908E15, ped, duration, pedToCowerFrom, p3);
		public static void TASK_HANDS_UP(int ped, int duration, int facingPed, int p3, bool p4) => Function.Call(0xF2EAB31979A7F910, ped, duration, facingPed, p3, p4);
		public static void TASK_KNOCKED_OUT(int ped, float p1, bool permanently) => Function.Call(0xF90427F00A495A28, ped, p1, permanently);
		public static void TASK_KNOCKED_OUT_AND_HOGTIED(int ped, float p1, int p2) => Function.Call(0x42AC6401ABB8C7E5, ped, p1, p2);
		public static void _0xFFB520A3E16F7B7B(int ped, float p1) => Function.Call(0xFFB520A3E16F7B7B, ped, p1);
		public static void _0x8B1FDF63C3193EDA(int ped, float p1) => Function.Call(0x8B1FDF63C3193EDA, ped, p1);
		public static void UPDATE_TASK_HANDS_UP_DURATION(int ped, int duration) => Function.Call(0xA98FCAFD7893C834, ped, duration);
		public static void _0x28EF780BDEA8A639(int ped, int p1) => Function.Call(0x28EF780BDEA8A639, ped, p1);
		public static void TASK_DUCK(int ped, int p1) => Function.Call(0xA14B5FBF986BAC23, ped, p1);
		public static void _TASK_BOARD_VEHICLE(int ped, int vehicle, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xE53D17AD837CBF7C, ped, vehicle, p2, p3, p4, p5);
		public static void _TASK_DISEMBARK_VEHICLE(Any p0, int vehicle, int p2, Any p3, float p4, Any p5) => Function.Call(0xA7C6854BB5A4192A, p0, vehicle, p2, p3, p4, p5);
		public static void _TASK_BOARD_VEHICLE_2(int ped, Any p1, Any p2, float p3, int flags) => Function.Call(0xE41A09C8DDFF7AA4, ped, p1, p2, p3, flags);
		/// <summary>
		/// flags: See TASK_ENTER_VEHICLE
		/// </summary>
		public static void TASK_DISEMBARK_NEAREST_TRAIN_CARRIAGE(int ped, float p1, int flags) => Function.Call(0x0A11F3BDEC03ED5F, ped, p1, flags);
		/// <summary>
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eEnterExitVehicleFlags
		/// </summary>
		public static void TASK_ENTER_VEHICLE(int ped, int vehicle, int timeout, int seat, float speed, int flag, Any p6) => Function.Call(0xC20E50AA46D09CA8, ped, vehicle, timeout, seat, speed, flag, p6);
		/// <summary>
		/// flags: See TASK_ENTER_VEHICLE
		/// </summary>
		public static void TASK_LEAVE_VEHICLE(int ped, int vehicle, int flags, int unkPed) => Function.Call(0xD3DBCE61A490BE02, ped, vehicle, flags, unkPed);
		/// <summary>
		/// timer: in ms, if it reaches 0 it will auto warp the ped on the horse
		/// mountStyle: See TASK_ENTER_VEHICLE
		/// Flags will still apply to mountStyle
		/// </summary>
		public static void TASK_MOUNT_ANIMAL(int ped, int mount, int timer, int seatIndex, float pedSpeed, int mountStyle, Any p6, Any p7) => Function.Call(0x92DB0739813C5186, ped, mount, timer, seatIndex, pedSpeed, mountStyle, p6, p7);
		/// <summary>
		/// Dismounts the ped from the animal it's mounted on. taskFlag affects what side the rider gets off. p2-p5 are almost always 0.
		/// flags: See TASK_ENTER_VEHICLE
		/// </summary>
		public static void TASK_DISMOUNT_ANIMAL(int rider, int taskFlag, Any p2, Any p3, Any p4, int targetPed) => Function.Call(0x48E92D3DDE23C23A, rider, taskFlag, p2, p3, p4, targetPed);
		public static void TASK_HITCH_ANIMAL(int ped, int scenarioPoint, int flag) => Function.Call(0x9030AD4B6207BFE8, ped, scenarioPoint, flag);
		public static void _0xE05A5D39BE6E93AF(Any p0) => Function.Call(0xE05A5D39BE6E93AF, p0);
		public static void TASK_VEHICLE_DRIVE_TO_COORD(int ped, int vehicle, float x, float y, float z, float speed, Any p6, uint vehicleModel, int drivingMode, float stopRange, float p10) => Function.Call(0xE2A2AA2F659D77A7, ped, vehicle, x, y, z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
		public static void TASK_VEHICLE_DRIVE_TO_COORD(int ped, int vehicle, Vector3 vec, float speed, Any p6, uint vehicleModel, int drivingMode, float stopRange, float p10) => Function.Call(0xE2A2AA2F659D77A7, ped, vehicle, vec.X, vec.Y, vec.Z, speed, p6, vehicleModel, drivingMode, stopRange, p10);
		public static void _TASK_VEHICLE_DRIVE_TO_COORD_2(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xF0108F01FB105DA2, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_VEHICLE_DRIVE_WANDER(int ped, int vehicle, float speed, int drivingStyle) => Function.Call(0x480142959D337D00, ped, vehicle, speed, drivingStyle);
		public static void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(int ped, int entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing, bool p9, bool walkOnly, bool p11, bool p12, bool p13) => Function.Call(0x304AE42E357B8C7E, ped, entity, offsetX, offsetY, offsetZ, movementSpeed, timeout, stoppingRange, persistFollowing, p9, walkOnly, p11, p12, p13);
		public static void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(int ped, int entity, Vector3 offset, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing, bool p9, bool walkOnly, bool p11, bool p12, bool p13) => Function.Call(0x304AE42E357B8C7E, ped, entity, offset.X, offset.Y, offset.Z, movementSpeed, timeout, stoppingRange, persistFollowing, p9, walkOnly, p11, p12, p13);
		public static void TASK_FOLLOW_TO_OFFSET_OF_COORD(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14) => Function.Call(0x2E3676282C18A692, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		public static void _0x3FFCD7BBA074CC80(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0x3FFCD7BBA074CC80, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_GO_STRAIGHT_TO_COORD(int ped, float x, float y, float z, float moveBlendSpeedY, int p5, float p6, float p7, int p8) => Function.Call(0xD76B57B44F1E6F8B, ped, x, y, z, moveBlendSpeedY, p5, p6, p7, p8);
		public static void TASK_GO_STRAIGHT_TO_COORD(int ped, Vector3 vec, float moveBlendSpeedY, int p5, float p6, float p7, int p8) => Function.Call(0xD76B57B44F1E6F8B, ped, vec.X, vec.Y, vec.Z, moveBlendSpeedY, p5, p6, p7, p8);
		public static void TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x61E360B7E040D12E, ped, p1, p2, p3, p4, p5, p6, p7);
		public static void TASK_MOVE_IN_TRAFFIC(int ped, Any p1, Any p2, Any p3) => Function.Call(0x8AA1593AEC087A29, ped, p1, p2, p3);
		public static void TASK_MOVE_IN_TRAFFIC_TO_DESTINATION(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0xDCA3A13F7A45338B, ped, p1, p2, p3, p4, p5, p6, p7);
		public static void TASK_MOVE_IN_TRAFFIC_AWAY_FROM_ENTITY(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x13DED0BC45600FE1, ped, p1, p2, p3, p4);
		public static void _0xBAAB791AA72C2821(Any p0, Any p1) => Function.Call(0xBAAB791AA72C2821, p0, p1);
		/// <summary>
		/// Params: moveBlendRatio commonly 1.25f, p5 is always 0 in R* Scripts
		/// </summary>
		public static void TASK_MOVE_FOLLOW_ROAD_USING_NAVMESH(int ped, float moveBlendRatio, float x, float y, float z, Any p5) => Function.Call(0x79482C12482A860D, ped, moveBlendRatio, x, y, z, p5);
		public static void TASK_MOVE_FOLLOW_ROAD_USING_NAVMESH(int ped, float moveBlendRatio, Vector3 vec, Any p5) => Function.Call(0x79482C12482A860D, ped, moveBlendRatio, vec.X, vec.Y, vec.Z, p5);
		/// <summary>
		/// Makes the specified ped achieve the specified heading.
		/// 
		/// pedHandle: The handle of the ped to assign the task to.
		/// heading: The desired heading.
		/// timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is canceled, and the ped will stay at the heading it managed to reach in the time.
		/// </summary>
		public static void TASK_ACHIEVE_HEADING(int ped, float heading, int timeout) => Function.Call(0x93B93A37987F1F3D, ped, heading, timeout);
		/// <summary>
		/// Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
		/// </summary>
		public static void TASK_FLUSH_ROUTE() => Function.Call(0x841142A1376E9006);
		/// <summary>
		/// Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
		/// 
		/// A maximum of 8 points can be added.
		/// </summary>
		public static void TASK_EXTEND_ROUTE(float x, float y, float z) => Function.Call(0x1E7889778264843A, x, y, z);
		public static void TASK_EXTEND_ROUTE(Vector3 vec) => Function.Call(0x1E7889778264843A, vec.X, vec.Y, vec.Z);
		public static void TASK_FOLLOW_POINT_ROUTE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x0E14C5550DC3CD1D, ped, p1, p2, p3, p4, p5);
		/// <summary>
		/// flags:
		/// MOVE_WHILST_WAITING_FOR_PATH = (1 << 0),
		/// DO_NOT_STAND_STILL_AT_END_OF_PATH = (1 << 1),
		/// SKIP_NAVIGATION = (1 << 2),
		/// TEASF_AUTO_START_ANIM_SCENE = (1 << 3),
		/// FORCE_STAND_STILL_AT_END_OF_PATH = (1 << 6),
		/// ENTER_ANIM_SCENE_DONT_FOLLOW_NAVMESH = (1 << 7)
		/// </summary>
		public static void TASK_ENTER_ANIM_SCENE(int ped, int animScene, string entityName, string playbackListName, float enterSpeed, bool bAutoStart, int flag, int p7, float p8) => Function.Call(0xC2329B0206426644, ped, animScene, entityName, playbackListName, enterSpeed, bAutoStart, flag, p7, p8);
		public static void TASK_MOVE_BE_IN_FORMATION(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x4AA5AA97C65E4A2F, ped, p1, p2, p3, p4, p5, p6);
		public static void TASK_GO_TO_ENTITY(int ped, int target, int duration, float distance, float speed, float p5, int p6) => Function.Call(0x6A071245EB0D1882, ped, target, duration, distance, speed, p5, p6);
		public static void TASK_FOLLOW_AND_CONVERSE_WITH_PED(int ped, int targetPed, Any p2, Any p3, float p4, float p5, int p6, Any p7, Any p8, float p9, float p10) => Function.Call(0x489FFCCCE7392B55, ped, targetPed, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void _0xA052608A12559BBB(Any p0, Any p1) => Function.Call(0xA052608A12559BBB, p0, p1);
		public static void TASK_WANDER_AND_CONVERSE_WITH_PED(int ped, Any p1, Any p2, Any p3) => Function.Call(0x8AC76D1408731732, ped, p1, p2, p3);
		public static void TASK_LEAD_AND_CONVERSE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xAA19711D33C6708C, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void _0xDE0C8B145EA466FF(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xDE0C8B145EA466FF, p0, p1, p2, p3, p4, p5);
		public static void TASK_SEEK_CLEAR_LOS_TO_ENTITY(int ped, int entity, float p2, float p3, float p4) => Function.Call(0x8D7F2A63688C20A4, ped, entity, p2, p3, p4);
		/// <summary>
		/// enum eWhistleType
		/// {
		/// 	WHISTLE_MAIN,
		/// 	WHISTLE_SECONDARY,
		/// 	WHISTLE_DOUBLE,
		/// 	WHISTLE_URGENT,
		/// 	WHISTLE_LONG
		/// };
		/// </summary>
		public static void TASK_GO_TO_WHISTLE(int ped, int p1, int whistleType) => Function.Call(0xBAD6545608CECA6E, ped, p1, whistleType);
		public static Any _0xEB67D4E056C85A81(Any p0) => Function.Call<Any>(0xEB67D4E056C85A81, p0);
		public static Any _0x78D8C1D4EB80C588(Any p0) => Function.Call<Any>(0x78D8C1D4EB80C588, p0);
		public static void TASK_LEAD_HORSE(int ped, int horse) => Function.Call(0x9A7A4A54596FE09D, ped, horse);
		public static void TASK_STOP_LEADING_HORSE(int ped) => Function.Call(0xED27560703F37258, ped);
		/// <summary>
		/// fleeType: see TASK_FLEE_COORD
		/// </summary>
		public static void _TASK_FLEE_FROM_COORD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11) => Function.Call(0x6879FF208ED87F2A, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		/// <summary>
		/// fleeType: see TASK_FLEE_COORD
		/// </summary>
		public static void _TASK_FLEE_FROM_PED(int ped, int fleeFromTarget, float x, float y, float z, float distance, int p6, int p7, float p8, int targetPed) => Function.Call(0x7B74D8EEDE9B5727, ped, fleeFromTarget, x, y, z, distance, p6, p7, p8, targetPed);
		public static void _TASK_FLEE_FROM_PED(int ped, int fleeFromTarget, Vector3 vec, float distance, int p6, int p7, float p8, int targetPed) => Function.Call(0x7B74D8EEDE9B5727, ped, fleeFromTarget, vec.X, vec.Y, vec.Z, distance, p6, p7, p8, targetPed);
		/// <summary>
		/// Makes the specified ped flee the specified distance from the specified position.
		/// fleeType: see TASK_FLEE_COORD
		/// </summary>
		public static void TASK_SMART_FLEE_COORD(int ped, float x, float y, float z, float distance, int time, int fleeType, float fleeSpeed) => Function.Call(0x94587F17E9C365D5, ped, x, y, z, distance, time, fleeType, fleeSpeed);
		public static void TASK_SMART_FLEE_COORD(int ped, Vector3 vec, float distance, int time, int fleeType, float fleeSpeed) => Function.Call(0x94587F17E9C365D5, ped, vec.X, vec.Y, vec.Z, distance, time, fleeType, fleeSpeed);
		/// <summary>
		/// Makes a ped run away from another ped (fleeFromTarget)
		/// 
		/// fleeDistance = ped will flee this distance
		/// fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
		/// fleeType = see TASK_FLEE_COORD, can be 0, R* Scripts: fm_mission/race_controller: 66048; fme_escaped_convicts: 2260992, 2523136, 2359296; la_alligator/fox: 2097152; net_fetch: 17301536; net_stable_mount: 540928
		/// fleeSpeed = mostly 3f, rarely 1f in R* Scripts
		/// </summary>
		public static void TASK_SMART_FLEE_PED(int ped, int fleeFromTarget, float fleeDistance, int fleeTime, int fleeType, float fleeSpeed, int targetPed) => Function.Call(0x22B0D0E37CCB840D, ped, fleeFromTarget, fleeDistance, fleeTime, fleeType, fleeSpeed, targetPed);
		public static void _0x673A8779D229BA5A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x673A8779D229BA5A, p0, p1, p2, p3, p4, p5);
		public static void _0x2E1D6D87346BB7D2(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x2E1D6D87346BB7D2, p0, p1, p2, p3);
		/// <summary>
		/// Params: p5 = some flag?, p6 = -1.0f, p8 = 0 in R* Scripts
		/// fleeStyle: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eFleeStyle
		/// </summary>
		public static void TASK_FLEE_COORD(int ped, float x, float y, float z, int fleeStyle, int p5, float p6, int duration, int p8) => Function.Call(0x58428248BF4B64E4, ped, x, y, z, fleeStyle, p5, p6, duration, p8);
		public static void TASK_FLEE_COORD(int ped, Vector3 vec, int fleeStyle, int p5, float p6, int duration, int p8) => Function.Call(0x58428248BF4B64E4, ped, vec.X, vec.Y, vec.Z, fleeStyle, p5, p6, duration, p8);
		/// <summary>
		/// Params: p4 = -1.0f, p5 = -1, p6 = 0 in R* Scripts
		/// fleeStyle: see TASK_FLEE_COORD
		/// </summary>
		public static void TASK_FLEE_PED(int ped, int fleeFromTarget, int fleeStyle, int flag, float p4, int p5, int p6) => Function.Call(0xFD45175A6DFD7CE9, ped, fleeFromTarget, fleeStyle, flag, p4, p5, p6);
		public static void TASK_FLEE_COORD_VIA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11) => Function.Call(0x390E0B697D25EAF5, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
		public static void TASK_FLEE_PED_VIA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x5802E0F910E4CF1D, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _ADD_FLEE_TARGET_COORDS(int ped, float x, float y, float z, float p4) => Function.Call(0xE8F1A5B4CED3725A, ped, x, y, z, p4);
		public static void _ADD_FLEE_TARGET_COORDS(int ped, Vector3 vec, float p4) => Function.Call(0xE8F1A5B4CED3725A, ped, vec.X, vec.Y, vec.Z, p4);
		/// <summary>
		/// Params: p2 is always -1.f in R* Scripts
		/// </summary>
		public static void ADD_FLEE_TARGET_PED(int ped, int targetPed, float p2) => Function.Call(0x3923EC958249657D, ped, targetPed, p2);
		public static void _0xA42DC7919159CCCF(Any p0) => Function.Call(0xA42DC7919159CCCF, p0);
		public static void TASK_FLY_AWAY(int ped, int fleeFromTarget) => Function.Call(0xE86A537B5A3C297C, ped, fleeFromTarget);
		public static void TASK_FLY_TO_COORD(int ped, float travelMbr, float x, float y, float z, bool p5, bool p6) => Function.Call(0xD6CFC2D59DA72042, ped, travelMbr, x, y, z, p5, p6);
		public static void TASK_FLY_TO_COORD(int ped, float travelMbr, Vector3 vec, bool p5, bool p6) => Function.Call(0xD6CFC2D59DA72042, ped, travelMbr, vec.X, vec.Y, vec.Z, p5, p6);
		public static void TASK_FLYING_CIRCLE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x72997893BFB8ECCC, ped, p1, p2, p3, p4, p5, p6);
		public static void TASK_WALK_AWAY(int ped, int entity) => Function.Call(0x04ACFAC71E6858F9, ped, entity);
		public static void TASK_SHOCKING_EVENT_REACT(int ped, Any p1, Any p2) => Function.Call(0x452419CBD838065B, ped, p1, p2);
		/// <summary>
		/// Makes a ped react to an entity.
		/// Params: reactingTo Entity can be 0, p8 is always 4
		/// </summary>
		public static void TASK_REACT(int ped, int reactingTo, float x, float y, float z, string reactionName, float p6, float p7, int p8) => Function.Call(0xC4C32C31920E1B70, ped, reactingTo, x, y, z, reactionName, p6, p7, p8);
		public static void TASK_REACT(int ped, int reactingTo, Vector3 vec, string reactionName, float p6, float p7, int p8) => Function.Call(0xC4C32C31920E1B70, ped, reactingTo, vec.X, vec.Y, vec.Z, reactionName, p6, p7, p8);
		public static void TASK_WANDER_IN_AREA(int ped, float x, float y, float z, float radius, float p5, float p6, int p7) => Function.Call(0xE054346CA3A0F315, ped, x, y, z, radius, p5, p6, p7);
		public static void TASK_WANDER_IN_AREA(int ped, Vector3 vec, float radius, float p5, float p6, int p7) => Function.Call(0xE054346CA3A0F315, ped, vec.X, vec.Y, vec.Z, radius, p5, p6, p7);
		public static void TASK_WANDER_IN_VOLUME(int ped, int volume, float p2, float p3, int p4) => Function.Call(0x9FDA168777B28424, ped, volume, p2, p3, p4);
		/// <summary>
		/// Makes ped walk around the area.
		/// 
		/// set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
		/// </summary>
		public static void TASK_WANDER_STANDARD(int ped, float p1, int p2) => Function.Call(0xBB9CE077274F6A1B, ped, p1, p2);
		public static void TASK_WANDER_SWIM(int ped, Any p1) => Function.Call(0x527EA3DB8BC7F03B, ped, p1);
		public static void TASK_PLANT_BOMB(int ped, float x, float y, float z, float heading) => Function.Call(0x965FEC691D55E9BF, ped, x, y, z, heading);
		public static void TASK_PLANT_BOMB(int ped, Vector3 vec, float heading) => Function.Call(0x965FEC691D55E9BF, ped, vec.X, vec.Y, vec.Z, heading);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_HORSE_ACTION
		/// Params: p2, p3 are set to 0 in R* Scripts
		/// </summary>
		public static void TASK_HORSE_ACTION(int ped, int action, int targetPed, Any p3) => Function.Call(0xA09CFD29100F06C3, ped, action, targetPed, p3);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ANIMAL_INTERACTION
		/// </summary>
		public static void TASK_ANIMAL_INTERACTION(int ped, int targetPed, uint interactionType, uint interactionModel, bool skipIdleAnimationClip) => Function.Call(0xCD181A959CFDD7F4, ped, targetPed, interactionType, interactionModel, skipIdleAnimationClip);
		public static void TASK_COMBAT_ANIMAL_WARN(int ped, Any p1, Any p2) => Function.Call(0xF960F3D57B660E96, ped, p1, p2);
		public static void TASK_COMBAT_ANIMAL_CHARGE_PED(int ped, int targetPed, bool p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xEE3AA414CF99F368, ped, targetPed, p2, p3, p4, p5, p6);
		public static Any _0x76610D12A838EBDE(Any p0) => Function.Call<Any>(0x76610D12A838EBDE, p0);
		public static void TASK_AMBIENT_ANIMAL_STALK(int ped, Any p1, Any p2) => Function.Call(0x37C13863ABA1B4A3, ped, p1, p2);
		public static void TASK_AMBIENT_ANIMAL_HUNT(int ped, Any p1, Any p2) => Function.Call(0x4B39D8F9D0FE7749, ped, p1, p2);
		public static void TASK_ANIMAL_UNALERTED(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x21FDF9A25CFE1CE5, ped, p1, p2, p3, p4);
		public static void TASK_ANIMAL_ALERTED(int ped, Any p1, Any p2) => Function.Call(0x979D93372FC8C565, ped, p1, p2);
		public static void TASK_ANIMAL_FLEE(int ped, int targetPed, Any p2) => Function.Call(0xA899B61C66F09134, ped, targetPed, p2);
		public static Any _0x244430C13BA5258E(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0x244430C13BA5258E, p0, p1, p2, p3);
		public static void TASK_EAT(int ped, Any p1, Any p2) => Function.Call(0xBD7949BD07299672, ped, p1, p2);
		public static void TASK_BARK(int ped, int barkAtTarget, uint mood) => Function.Call(0x83BFC1F836B2F3F2, ped, barkAtTarget, mood);
		public static void TASK_FOLLOW_PAVEMENT_TO_COORD(int ped, Any* args) => Function.Call(0x1B1475414E70DD8E, ped, args);
		/// <summary>
		/// If no timeout, set timeout to -1.
		/// </summary>
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD(int ped, float x, float y, float z, float speedMultiplier, int timeout, float stoppingRange, int flags, float heading) => Function.Call(0x15D3A79D4E44B913, ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, heading);
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD(int ped, Vector3 vec, float speedMultiplier, int timeout, float stoppingRange, int flags, float heading) => Function.Call(0x15D3A79D4E44B913, ped, vec.X, vec.Y, vec.Z, speedMultiplier, timeout, stoppingRange, flags, heading);
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(int ped, float x, float y, float z, float speedMultiplier, int timeout, float stoppingRange, int flags, float p8, float p9, float p10, int entity, float unk) => Function.Call(0x17F58B88D085DBAC, ped, x, y, z, speedMultiplier, timeout, stoppingRange, flags, p8, p9, p10, entity, unk);
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(int ped, Vector3 vec, float speedMultiplier, int timeout, float stoppingRange, int flags, float p8, float p9, float p10, int entity, float unk) => Function.Call(0x17F58B88D085DBAC, ped, vec.X, vec.Y, vec.Z, speedMultiplier, timeout, stoppingRange, flags, p8, p9, p10, entity, unk);
		public static void SET_PED_PATH_CAN_USE_CLIMBOVERS(int ped, bool toggle) => Function.Call(0x8E06A6FE76C9EFF4, ped, toggle);
		public static void SET_PED_PATH_CAN_USE_LADDERS(int ped, bool toggle) => Function.Call(0x77A5B103C87F476E, ped, toggle);
		public static void SET_PED_PATH_CAN_DROP_FROM_HEIGHT(int ped, bool toggle) => Function.Call(0xE361C5C71C431A4F, ped, toggle);
		public static Any _0xE6A151364C600B24(Any p0) => Function.Call<Any>(0xE6A151364C600B24, p0);
		public static void _0x1632EB9386CDBE64(Any p0, Any p1) => Function.Call(0x1632EB9386CDBE64, p0, p1);
		public static void SET_PED_PATH_CLIMB_COST_MODIFIER(int ped, float modifier) => Function.Call(0x88E32DB8C1A4AA4B, ped, modifier);
		public static void SET_PED_PATH_DEEP_SNOW_COST_MODIFIER(int ped, float modifier) => Function.Call(0xE8C296B75EACC357, ped, modifier);
		public static void SET_PED_PATH_FOLIAGE_COST_MODIFIER(int ped, float modifier) => Function.Call(0x3AD8EFF9703BE657, ped, modifier);
		public static void _0x8798CF6815B8FE0F(Any p0, Any p1) => Function.Call(0x8798CF6815B8FE0F, p0, p1);
		public static void _0x5B68D0007D9C92EB(Any p0, Any p1) => Function.Call(0x5B68D0007D9C92EB, p0, p1);
		public static void _0x82ED59F095056550(Any p0, Any p1) => Function.Call(0x82ED59F095056550, p0, p1);
		public static void _0xE01C8DC8EDD28D31(Any p0, Any p1) => Function.Call(0xE01C8DC8EDD28D31, p0, p1);
		public static void _0x098CAA6DBE7D8D82(Any p0, Any p1) => Function.Call(0x098CAA6DBE7D8D82, p0, p1);
		public static bool _GET_PED_IS_IGNORING_DEAD_BODIES(int ped) => Function.Call<bool>(0x1948BBE561A2375A, ped);
		public static void _SET_PED_IGNORE_DEAD_BODIES(int ped, bool toggle) => Function.Call(0x013A7BA5015C1372, ped, toggle);
		/// <summary>
		/// _SET_PED_PATH_P*
		/// </summary>
		public static void _SET_PED_PATH_LADDER_COST_MODIFIER(int ped, float modifier) => Function.Call(0x70F7A1EAB1AE3AA8, ped, modifier);
		public static void SET_PED_PATH_MAY_ENTER_WATER(int ped, bool mayEnterWater) => Function.Call(0xF35425A4204367EC, ped, mayEnterWater);
		public static void _SET_PED_PATH_MAY_ENTER_DEEP_WATER(int ped, bool mayEnterDeepWater) => Function.Call(0x9DE63896B176EA94, ped, mayEnterDeepWater);
		public static void _0xC6170856E54557B2(Any p0, Any p1, Any p2) => Function.Call(0xC6170856E54557B2, p0, p1, p2);
		public static void _0xF948F4356F010F11(Any p0, Any p1, Any p2) => Function.Call(0xF948F4356F010F11, p0, p1, p2);
		public static void SET_PED_PATH_PREFER_TO_AVOID_WATER(int ped, bool avoidWater, float p2) => Function.Call(0x38FE1EC73743793C, ped, avoidWater, p2);
		public static void _0x8BB283A7888AD1AD(Any p0, Any p1, Any p2) => Function.Call(0x8BB283A7888AD1AD, p0, p1, p2);
		public static void _0x12990818C1D35886(Any p0, Any p1, Any p2) => Function.Call(0x12990818C1D35886, p0, p1, p2);
		public static void _0x7C015D8BCEC72CF4(Any p0, Any p1) => Function.Call(0x7C015D8BCEC72CF4, p0, p1);
		public static void SET_PED_PATH_AVOID_FIRE(int ped, bool avoidFire) => Function.Call(0x4455517B28441E60, ped, avoidFire);
		public static void _0x42CFD8FD8CC8DC69(Any p0, Any p1) => Function.Call(0x42CFD8FD8CC8DC69, p0, p1);
		public static void _0x216343750545A486(Any p0, Any p1, Any p2) => Function.Call(0x216343750545A486, p0, p1, p2);
		public static void _0x06ECF3925BC2ABAE(Any p0, Any p1) => Function.Call(0x06ECF3925BC2ABAE, p0, p1);
		public static void _0xFA30E2254461ADEB(Any p0, Any p1) => Function.Call(0xFA30E2254461ADEB, p0, p1);
		public static void TASK_GO_TO_COORD_ANY_MEANS(int ped, float x, float y, float z, float speed, int entity, bool p6, int walkingStyle, float p8) => Function.Call(0x5BC448CB78FA3E88, ped, x, y, z, speed, entity, p6, walkingStyle, p8);
		public static void TASK_GO_TO_COORD_ANY_MEANS(int ped, Vector3 vec, float speed, int entity, bool p6, int walkingStyle, float p8) => Function.Call(0x5BC448CB78FA3E88, ped, vec.X, vec.Y, vec.Z, speed, entity, p6, walkingStyle, p8);
		public static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(int ped, float x, float y, float z, float speed, Any p5, bool p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12) => Function.Call(0x1DD45F9ECFDB1BC9, ped, x, y, z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);
		public static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(int ped, Vector3 vec, float speed, Any p5, bool p6, int walkingStyle, float p8, Any p9, Any p10, Any p11, Any p12) => Function.Call(0x1DD45F9ECFDB1BC9, ped, vec.X, vec.Y, vec.Z, speed, p5, p6, walkingStyle, p8, p9, p10, p11, p12);
		public static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14) => Function.Call(0xB8ECD61F531A7B02, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/animations
		/// flags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eScriptedAnimFlags
		/// ikFlags: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eIkControlFlags 
		/// </summary>
		public static void TASK_PLAY_ANIM(int ped, string animDict, string animName, float speed, float speedMultiplier, int duration, int flags, float playbackRate, bool p8, int ikFlags, bool p10, string taskFilter, bool p12) => Function.Call(0xEA47FE3719165B94, ped, animDict, animName, speed, speedMultiplier, duration, flags, playbackRate, p8, ikFlags, p10, taskFilter, p12);
		/// <summary>
		/// flags: see TASK_PLAY_ANIM
		/// ikFlags: see TASK_PLAY_ANIM
		/// </summary>
		public static void TASK_PLAY_ANIM_ADVANCED(int ped, string animDict, string animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float speed, float speedMultiplier, int duration, int flags, float p13, int p14, int p15, int p16) => Function.Call(0x83CDB10EA29B370B, ped, animDict, animName, posX, posY, posZ, rotX, rotY, rotZ, speed, speedMultiplier, duration, flags, p13, p14, p15, p16);
		public static void TASK_PLAY_ANIM_ADVANCED(int ped, string animDict, string animName, Vector3 vec, Vector3 rotation, float speed, float speedMultiplier, int duration, int flags, float p13, int p14, int p15, int p16) => Function.Call(0x83CDB10EA29B370B, ped, animDict, animName, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, speed, speedMultiplier, duration, flags, p13, p14, p15, p16);
		public static void TASK_PLAY_UPPER_ANIM_FACING_ENTITY(int ped, string animDict, string animName, int entity, int p4, float p5, float p6, int p7, float p8, bool p9, bool p10, float p11, string p12, int p13, float p14) => Function.Call(0xAD67214236AB1CFE, ped, animDict, animName, entity, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		public static void STOP_ANIM_TASK(int ped, string animDictionary, string animationName, float p3) => Function.Call(0x97FF36A1D40EA00A, ped, animDictionary, animationName, p3);
		public static void TASK_SCRIPTED_ANIMATION(int ped, Any* args) => Function.Call(0x126EF75F1E17ABE5, ped, args);
		public static void PLAY_ENTITY_SCRIPTED_ANIM(int entity, Any* args) => Function.Call(0x77A1EEC547E7FCF1, entity, args);
		public static void STOP_ANIM_PLAYBACK(int ped, int p1, bool p2) => Function.Call(0xEE08C992D238C5D1, ped, p1, p2);
		public static void SET_ANIM_FILTER(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x87B66D77D545DB66, p0, p1, p2, p3);
		public static void SET_ANIM_RATE(Any p0, float p1, Any p2, bool p3) => Function.Call(0x032D49C5E359C847, p0, p1, p2, p3);
		public static bool CAN_START_ITEM_INTERACTION(int ped, uint itemHash, uint interactionAnimHash, int p3) => Function.Call<bool>(0x2D19BC4DF626CBE7, ped, itemHash, interactionAnimHash, p3);
		/// <summary>
		/// Params: p3 = 0, 1; p5 = 0.0f, -1.0f
		/// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
		/// </summary>
		public static void START_TASK_ITEM_INTERACTION(int ped, uint itemHash, uint interactionAnimHash, int p3, int flag, float p5) => Function.Call(0xAE72E7DF013AAA61, ped, itemHash, interactionAnimHash, p3, flag, p5);
		public static void _TASK_ITEM_INTERACTION_2(int ped, uint propNameGxt, int prop, uint propId, uint itemInteractionState, int p5, Any p6, float p7) => Function.Call(0x72F52AA2D2B172CC, ped, propNameGxt, prop, propId, itemInteractionState, p5, p6, p7);
		/// <summary>
		/// Params: p3, p4, p5, p6: 0, 0, 0, -1.0f in R* Scripts
		/// </summary>
		public static void _TASK_ITEM_INTERACTION_3(int ped, uint item, Any* guid, Any p3, Any p4, Any p5, float p6) => Function.Call(0xD61D5E1AD9876DEB, ped, item, guid, p3, p4, p5, p6);
		public static void _0xB35370D5353995CB(int ped, uint item, float p2) => Function.Call(0xB35370D5353995CB, ped, item, p2);
		public static uint GET_ITEM_INTERACTION_STATE(int ped) => Function.Call<uint>(0x6AA3DCA2C6F5EB6D, ped);
		public static uint GET_ITEM_INTERACTION_ITEM_ID(int ped) => Function.Call<uint>(0x804425C4BBD00883, ped);
		public static bool IS_PED_RUNNING_INSPECTION_TASK(int ped) => Function.Call<bool>(0x038B1F1674F0E242, ped);
		public static bool IS_PED_RUNNING_TASK_ITEM_INTERACTION(int ped) => Function.Call<bool>(0xEC7E480FF8BD0BED, ped);
		/// <summary>
		/// item hashes: PRIMARYITEM, P_MUGCOFFEE01X_PH_R_HAND, P_BOTTLEBEER01X_PH_R_HAND
		/// http://prntscr.com/1qtp3bz
		/// https://github.com/femga/rdr3_discoveries/tree/master/tasks/TASK_ITEM_INTERACTION
		/// </summary>
		public static int _GET_ITEM_INTERACTION_ENTITY_FROM_PED(int ped, uint item) => Function.Call<int>(0x05A0100EA714DB68, ped, item);
		public static float GET_ITEM_INTERACTION_PROMPT_PROGRESS(int ped, uint inputContext) => Function.Call<float>(0xBC864A70AD55E0C1, ped, inputContext);
		/// <summary>
		/// Only used in R* SP Script beat_washed_ashore
		/// Returns Object prop for TASK::_TASK_ITEM_INTERACTION_2
		/// </summary>
		public static int _0x678D3226CF70B9C8(int ped, bool p1) => Function.Call<int>(0x678D3226CF70B9C8, ped, p1);
		/// <summary>
		/// Params: p2 is returned by BUILTIN::SHIFT_LEFT
		/// </summary>
		public static void TASK_EVASIVE_ANIM(int ped1, int ped2, int p2) => Function.Call(0x5F22926E1BCE9B08, ped1, ped2, p2);
		public static void TASK_LOOK_AT_COORD(int ped, float x, float y, float z, int duration, Any p5, Any p6, Any p7) => Function.Call(0x6FA46612594F7973, ped, x, y, z, duration, p5, p6, p7);
		public static void TASK_LOOK_AT_COORD(int ped, Vector3 vec, int duration, Any p5, Any p6, Any p7) => Function.Call(0x6FA46612594F7973, ped, vec.X, vec.Y, vec.Z, duration, p5, p6, p7);
		/// <summary>
		/// param3: duration in ms, use -1 to look forever
		/// param4: using 2048 is fine
		/// param5: using 3 is fine
		/// </summary>
		public static void TASK_LOOK_AT_ENTITY(int ped, int lookAtTarget, int duration, int p3, int p4, int p5) => Function.Call(0x69F4BE8C8CC4796C, ped, lookAtTarget, duration, p3, p4, p5);
		public static void TASK_CLEAR_LOOK_AT(int ped) => Function.Call(0x0F804F1DB19B9689, ped);
		/// <summary>
		/// Only used in R* SP Scripts
		/// Params: p4 = 1.0f - 30.0f
		/// </summary>
		public static bool _0x508F5053E3F6F0C4(int ped, float x, float y, float z, float p4) => Function.Call<bool>(0x508F5053E3F6F0C4, ped, x, y, z, p4);
		public static bool _0x508F5053E3F6F0C4(int ped, Vector3 vec, float p4) => Function.Call<bool>(0x508F5053E3F6F0C4, ped, vec.X, vec.Y, vec.Z, p4);
		public static void _0x23767D80C7EED7C6(Any p0, Any p1) => Function.Call(0x23767D80C7EED7C6, p0, p1);
		public static void OPEN_SEQUENCE_TASK(int* taskSequenceId) => Function.Call(0xE8854A4326B9E12B, taskSequenceId);
		public static void CLOSE_SEQUENCE_TASK(int taskSequenceId) => Function.Call(0x39E72BC99E6360CB, taskSequenceId);
		public static void TASK_PERFORM_SEQUENCE(int ped, int taskSequenceId) => Function.Call(0x5ABA3986D90D8A3B, ped, taskSequenceId);
		public static void _TASK_PERFORM_SEQUENCE_2(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x4FC0AF869D6E309D, p0, p1, p2, p3);
		public static void CLEAR_SEQUENCE_TASK(int* taskSequenceId) => Function.Call(0x3841422E9C488D8C, taskSequenceId);
		public static void SET_SEQUENCE_TO_REPEAT(int taskSequenceId, bool repeat) => Function.Call(0x58C70CF3A41E4AE7, taskSequenceId, repeat);
		/// <summary>
		/// returned values:
		/// 0 to 7 = task that's currently in progress, 0 meaning the first one.
		/// -1 no task sequence in progress.
		/// </summary>
		public static int GET_SEQUENCE_PROGRESS(int ped) => Function.Call<int>(0x00A9010CFE1E3533, ped);
		public static bool GET_IS_TASK_ACTIVE(int ped, int taskIndex) => Function.Call<bool>(0xB0760331C7AA4155, ped, taskIndex);
		/// <summary>
		/// Gets the status of a script-assigned task, and returns an int between 0-8
		/// taskHash: https://alloc8or.re/rdr3/doc/enums/eScriptTaskHash.txt 
		/// 
		/// WAITING_TO_START_TASK = 0,
		/// PERFORMING_TASK
		/// DORMANT_TASKduration
		/// VACANT_STAGE
		/// GROUP_TASK_STAGE
		/// ATTRACTOR_SCRIPT_TASK_STAGE
		/// SECONDARY_TASK_STAGE
		/// TASK_NOT_FOUND
		/// FINISHED_TASK
		/// </summary>
		public static int GET_SCRIPT_TASK_STATUS(int ped, uint taskHash, bool p2) => Function.Call<int>(0x77F1BEB8863288D5, ped, taskHash, p2);
		public static Any _0x9FF5F9B24E870748(Any p0) => Function.Call<Any>(0x9FF5F9B24E870748, p0);
		public static float _GET_SCRIPT_TASK_ACTION_TIME(int ped, uint task) => Function.Call<float>(0xA710DC5D25F8B942, ped, task);
		/// <summary>
		/// lookIntensity: see SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT
		/// 
		/// exitAnimation: LOOK_RETURN_GENERIC = 1,
		/// LOOK_RETURN_DISMISSIVE = 2,
		/// LOOK_RETURN_RELIEVED = 3
		/// </summary>
		public static void REACT_LOOK_AT(int ped, int targetPed, int lookIntensity, int exitAnimation, float duration, int p5, int targetPed2, Any p7, Any p8) => Function.Call(0xE7FA07624574B79A, ped, targetPed, lookIntensity, exitAnimation, duration, p5, targetPed2, p7, p8);
		public static void REACT_LOOK_AT_END(int ped, int exitAnimation, bool p2) => Function.Call(0x541E5B41DCA45828, ped, exitAnimation, p2);
		public static bool IS_PED_SCENARIO_REACT_LOOKING(int ped, bool p1) => Function.Call<bool>(0x916B8E075ABC8B4E, ped, p1);
		public static int GET_ACTIVE_VEHICLE_MISSION_TYPE(int vehicle) => Function.Call<int>(0x534AEBA6E5ED4CAB, vehicle);
		/// <summary>
		/// flags: See TASK_ENTER_VEHICLE
		/// </summary>
		public static void TASK_LEAVE_ANY_VEHICLE(int ped, int p1, int taskFlag) => Function.Call(0x504D54DF3F6F2247, ped, p1, taskFlag);
		public static Any _0xBD70108D01875299(Any p0) => Function.Call<Any>(0xBD70108D01875299, p0);
		public static void TASK_USE_RANDOM_SCENARIO_IN_GROUP(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x14747F4A5971DE4E, ped, p1, p2, p3, p4);
		/// <summary>
		/// duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		/// </summary>
		public static void TASK_AIM_GUN_AT_ENTITY(int ped, int targetEntity, int duration, bool p3, int p4) => Function.Call(0x9B53BB6E8943AF53, ped, targetEntity, duration, p3, p4);
		/// <summary>
		/// duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		/// </summary>
		public static void TASK_TURN_PED_TO_FACE_ENTITY(int ped, int targetEntity, int duration, float p3, float p4, float p5) => Function.Call(0x5AD23D40115353AC, ped, targetEntity, duration, p3, p4, p5);
		public static void TASK_AIM_GUN_AT_COORD(int ped, float x, float y, float z, int time, bool p5, bool p6) => Function.Call(0x6671F3EEC681BDA1, ped, x, y, z, time, p5, p6);
		public static void TASK_AIM_GUN_AT_COORD(int ped, Vector3 vec, int time, bool p5, bool p6) => Function.Call(0x6671F3EEC681BDA1, ped, vec.X, vec.Y, vec.Z, time, p5, p6);
		public static void TASK_AIM_AT_COORD(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x4AF1D73861212F52, ped, p1, p2, p3, p4, p5, p6);
		public static void TASK_AIM_AT_ENTITY(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xCF7569BD0FB480A0, ped, p1, p2, p3, p4);
		public static void TASK_SHOOT_AT_COORD(int ped, float x, float y, float z, int duration, uint firingPattern, Any p6) => Function.Call(0x46A6CC01E0826106, ped, x, y, z, duration, firingPattern, p6);
		public static void TASK_SHOOT_AT_COORD(int ped, Vector3 vec, int duration, uint firingPattern, Any p6) => Function.Call(0x46A6CC01E0826106, ped, vec.X, vec.Y, vec.Z, duration, firingPattern, p6);
		/// <summary>
		/// Makes the specified ped shuffle to the next vehicle seat.
		/// The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
		/// </summary>
		public static void TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(int ped, int vehicle) => Function.Call(0x7AA80209BDA643EB, ped, vehicle);
		public static void CLEAR_PED_TASKS(int ped, bool p1, bool p2) => Function.Call(0xE1EF3C1216AFF2CD, ped, p1, p2);
		public static void _0x1A7D63CB1B0BB223(Any p0) => Function.Call(0x1A7D63CB1B0BB223, p0);
		public static void _0xB2D15D3551FE4FAE(Any p0) => Function.Call(0xB2D15D3551FE4FAE, p0);
		public static void _0xDF94844D474F31E5(int ped) => Function.Call(0xDF94844D474F31E5, ped);
		public static void _0xEBA2081E0A5F4D17(Any p0) => Function.Call(0xEBA2081E0A5F4D17, p0);
		public static void _0x141BC64C8D7C5529(int vehicle) => Function.Call(0x141BC64C8D7C5529, vehicle);
		public static void CLEAR_PED_SECONDARY_TASK(int ped) => Function.Call(0x176CECF6F920D707, ped);
		public static void TASK_EVERYONE_LEAVE_VEHICLE_IN_ORDER(int vehicle, bool p1) => Function.Call(0x6F1C49F275BD25B3, vehicle, p1);
		public static void TASK_INVESTIGATE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x5C8514540D27FBFB, ped, p1, p2, p3, p4, p5);
		public static void TASK_GOTO_ENTITY_OFFSET(int ped, int entity, Any p2, float x, float y, float z, int duration) => Function.Call(0xE39B4FF4FDEBDE27, ped, entity, p2, x, y, z, duration);
		public static void TASK_GOTO_ENTITY_OFFSET(int ped, int entity, Any p2, Vector3 vec, int duration) => Function.Call(0xE39B4FF4FDEBDE27, ped, entity, p2, vec.X, vec.Y, vec.Z, duration);
		public static void TASK_GOTO_ENTITY_OFFSET_XY(int ped, int entity, int duration, float p3, float p4, float p5, float p6, bool p7) => Function.Call(0x338E7EF52B6095A9, ped, entity, duration, p3, p4, p5, p6, p7);
		public static void TASK_GOTO_ENTITY_OFFSET_XYZ(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xFA6DA9D151769392, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_GOTO_ENTITY_OFFSET_XY_AIMING(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0x901BD69984400F62, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_GOTO_ENTITY_OFFSET_XYZ_AIMING(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x41B0832CA96B5351, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void TASK_FOLLOW_ENTITY_WHILE_AIMING_AT_ENTITY(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x2D532EAA142CF83F, ped, p1, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// duration in milliseconds
		/// </summary>
		public static void TASK_TURN_PED_TO_FACE_COORD(int ped, float x, float y, float z, int duration) => Function.Call(0x1DDA930A0AC38571, ped, x, y, z, duration);
		public static void TASK_TURN_PED_TO_FACE_COORD(int ped, Vector3 vec, int duration) => Function.Call(0x1DDA930A0AC38571, ped, vec.X, vec.Y, vec.Z, duration);
		/// <summary>
		/// Documentation from GTA V, might be the same in RDR:
		/// 
		/// '1 - brake
		/// '3 - brake + reverse
		/// '4 - turn left 90 + braking
		/// '5 - turn right 90 + braking
		/// '6 - brake strong (handbrake?) until time ends
		/// '7 - turn left + accelerate
		/// '7 - turn right + accelerate
		/// '9 - weak acceleration
		/// '10 - turn left + restore wheel pos to center in the end
		/// '11 - turn right + restore wheel pos to center in the end
		/// '13 - turn left + go reverse
		/// '14 - turn left + go reverse
		/// '16 - crash the game after like 2 seconds :)
		/// '17 - keep actual state, game crashed after few tries
		/// '18 - game crash
		/// '19 - strong brake + turn left/right
		/// '20 - weak brake + turn left then turn right
		/// '21 - weak brake + turn right then turn left
		/// '22 - brake + reverse
		/// '23 - accelerate fast
		/// '24 - brake
		/// '25 - brake turning left then when almost stopping it turns left more
		/// '26 - brake turning right then when almost stopping it turns right more
		/// '27 - brake until car stop or until time ends
		/// '28 - brake + strong reverse acceleration
		/// '30 - performs a burnout (brake until stop + brake and accelerate)
		/// '31 - accelerate + handbrake
		/// '32 - accelerate very strong
		/// 
		/// Seems to be this:
		/// Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
		/// </summary>
		public static void TASK_VEHICLE_TEMP_ACTION(int driver, int vehicle, int action, int time) => Function.Call(0xC429DCEEB339E129, driver, vehicle, action, time);
		public static void TASK_VEHICLE_MISSION(int driver, int vehicle, int vehicleTarget, int missionType, float p4, Any p5, float p6, float p7, bool DriveAgainstTraffic) => Function.Call(0x659427E0EF36BCDE, driver, vehicle, vehicleTarget, missionType, p4, p5, p6, p7, DriveAgainstTraffic);
		/// <summary>
		/// flags: 67108864, 2097152, 524564, 524675 (eDrivingFlags)
		/// p7 = 6 or 3
		/// p8 = x coordinate
		/// p9 - 8.f
		/// p10 = false
		/// </summary>
		public static void TASK_VEHICLE_DRIVE_TO_DESTINATION(int driver, int vehicle, float x, float y, float z, float speed, int drivingFlags, int p7, float stoppingRange1, float stoppingRange2, bool p10) => Function.Call(0x7F241A0D14354583, driver, vehicle, x, y, z, speed, drivingFlags, p7, stoppingRange1, stoppingRange2, p10);
		public static void TASK_VEHICLE_DRIVE_TO_DESTINATION(int driver, int vehicle, Vector3 vec, float speed, int drivingFlags, int p7, float stoppingRange1, float stoppingRange2, bool p10) => Function.Call(0x7F241A0D14354583, driver, vehicle, vec.X, vec.Y, vec.Z, speed, drivingFlags, p7, stoppingRange1, stoppingRange2, p10);
		/// <summary>
		/// Tasks vehicle towards owner
		/// </summary>
		public static void _TASK_VEHICLE_DRIVE_TO_DESTINATION_2(int vehicle, float x, float y, float z, float speed, int p5, int p6, float p7, float p8) => Function.Call(0x391073B9D3CCE2BA, vehicle, x, y, z, speed, p5, p6, p7, p8);
		public static void _TASK_VEHICLE_DRIVE_TO_DESTINATION_2(int vehicle, Vector3 vec, float speed, int p5, int p6, float p7, float p8) => Function.Call(0x391073B9D3CCE2BA, vehicle, vec.X, vec.Y, vec.Z, speed, p5, p6, p7, p8);
		/// <summary>
		/// Vehicle Auto Drive (?)
		/// p1/p2/p3: usually 1f, 1f, 0f or 0f, 0f, 0f
		/// Speed: usually 8f
		/// Types: 1148979456 (task with flee), 1148979587 (dismissing the vehicle)
		/// </summary>
		public static void _TASK_VEHICLE_FLEE_ON_CLEANUP(int vehicle, float p1, float p2, float p3, float speed, uint type) => Function.Call(0x55CD5FDDD4335C1E, vehicle, p1, p2, p3, speed, type);
		/// <summary>
		/// Old name: _TASK_VEHICLE_DRIVE_TO_POINT
		/// flag: 524419 and 0 in shop_horse_shop R* Script
		/// </summary>
		public static void TASK_VEHICLE_DRIVE_STRAIGHT_TO_POINT(int driver, int vehicle, float x, float y, float z, float p5, float p6, int flag) => Function.Call(0x089FF2FB965F0A29, driver, vehicle, x, y, z, p5, p6, flag);
		public static void TASK_VEHICLE_DRIVE_STRAIGHT_TO_POINT(int driver, int vehicle, Vector3 vec, float p5, float p6, int flag) => Function.Call(0x089FF2FB965F0A29, driver, vehicle, vec.X, vec.Y, vec.Z, p5, p6, flag);
		/// <summary>
		/// Params: p4 = 3.f or 8.f, p5 = 0.25f, p6 = 0 in R* Scripts
		/// </summary>
		public static void _TASK_VEHICLE_DRIVE_TO_POINT_2(int vehicle, float x, float y, float z, float p4, float p5, Any p6) => Function.Call(0x6524A8981E8BE7C9, vehicle, x, y, z, p4, p5, p6);
		public static void _TASK_VEHICLE_DRIVE_TO_POINT_2(int vehicle, Vector3 vec, float p4, float p5, Any p6) => Function.Call(0x6524A8981E8BE7C9, vehicle, vec.X, vec.Y, vec.Z, p4, p5, p6);
		public static void _0x1D125814EBC517EB(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x1D125814EBC517EB, p0, p1, p2, p3);
		public static bool _0x583AE9AF9CEE0958(int vehicle, float x, float y, float z) => Function.Call<bool>(0x583AE9AF9CEE0958, vehicle, x, y, z);
		public static bool _0x583AE9AF9CEE0958(int vehicle, Vector3 vec) => Function.Call<bool>(0x583AE9AF9CEE0958, vehicle, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// See TASK_VEHICLE_MISSION
		/// </summary>
		public static void TASK_VEHICLE_MISSION_PED_TARGET(int ped, int vehicle, int pedTarget, int mode, float maxSpeed, int drivingStyle, float minDistance, float p7, bool DriveAgainstTraffic) => Function.Call(0x9454528DF15D657A, ped, vehicle, pedTarget, mode, maxSpeed, drivingStyle, minDistance, p7, DriveAgainstTraffic);
		public static void _0xA263ADBBC8056214(Any p0, Any p1) => Function.Call(0xA263ADBBC8056214, p0, p1);
		public static void TASK_VEHICLE_ESCORT(int ped, int vehicle, int targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int p7, float noRoadsDistance) => Function.Call(0x0FA6E4B75F302400, ped, vehicle, targetVehicle, mode, speed, drivingStyle, minDistance, p7, noRoadsDistance);
		public static void TASK_BOAT_MISSION(int pedDriver, int boat, Any p2, Any p3, float x, float y, float z, Any p7, float maxSpeed, int drivingStyle, float p10, Any p11) => Function.Call(0x15C86013127CE63F, pedDriver, boat, p2, p3, x, y, z, p7, maxSpeed, drivingStyle, p10, p11);
		public static void TASK_BOAT_MISSION(int pedDriver, int boat, Any p2, Any p3, Vector3 vec, Any p7, float maxSpeed, int drivingStyle, float p10, Any p11) => Function.Call(0x15C86013127CE63F, pedDriver, boat, p2, p3, vec.X, vec.Y, vec.Z, p7, maxSpeed, drivingStyle, p10, p11);
		public static void TASK_WEAPON(int ped) => Function.Call(0x7157B82D60E4BC46, ped);
		public static void TASK_DRIVE_BY(int driverPed, int targetPed, int targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, bool p8, uint firingPattern) => Function.Call(0x2F8AF0E82773A171, driverPed, targetPed, targetVehicle, targetX, targetY, targetZ, distanceToShoot, pedAccuracy, p8, firingPattern);
		public static void SET_DRIVEBY_TASK_TARGET(int shootingPed, int targetPed, int targetVehicle, float x, float y, float z) => Function.Call(0xE5B302114D8162EE, shootingPed, targetPed, targetVehicle, x, y, z);
		public static void SET_DRIVEBY_TASK_TARGET(int shootingPed, int targetPed, int targetVehicle, Vector3 vec) => Function.Call(0xE5B302114D8162EE, shootingPed, targetPed, targetVehicle, vec.X, vec.Y, vec.Z);
		public static void CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(int ped) => Function.Call(0xC35B5CDB2824CF69, ped);
		public static bool IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(int ped) => Function.Call<bool>(0x8785E6E40C7A8818, ped);
		public static bool GET_IS_PED_AIMING_IN_THE_AIR(int ped) => Function.Call<bool>(0x8785E6E40C7A8819, ped);
		public static void _SET_PED_CLEAR_AIMING_IN_THE_AIR(int ped, Any p1) => Function.Call(0x34C0010188D7C54A, ped, p1);
		public static bool IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(int ped) => Function.Call<bool>(0xA320EF046186FA3B, ped);
		public static void TASK_WARP_PED_INTO_VEHICLE(int ped, int vehicle, int seat) => Function.Call(0x9A7D091411C5F684, ped, vehicle, seat);
		public static void TASK_SHOOT_AT_ENTITY(int entity, int targetEntity, int duration, uint firingPattern, bool affectCockedState) => Function.Call(0x08DA95E8298AE772, entity, targetEntity, duration, firingPattern, affectCockedState);
		public static void TASK_SHOOT_WITH_WEAPON(int ped, Any* args) => Function.Call(0x08AA95E8298AE772, ped, args);
		public static void _0x2416EC2F31F75266(int entity, int targetEntity, int duration, Any p3, Any p4) => Function.Call(0x2416EC2F31F75266, entity, targetEntity, duration, p3, p4);
		public static void _0x41323F4E0C4AE94B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x41323F4E0C4AE94B, p0, p1, p2, p3, p4, p5, p6);
		public static Any _0x5EA655F01D93667A(Any p0) => Function.Call<Any>(0x5EA655F01D93667A, p0);
		/// <summary>
		/// Climbs or vaults the nearest thing.
		/// </summary>
		public static void TASK_CLIMB(int ped, bool unused) => Function.Call(0x89D9FCC2435112F1, ped, unused);
		public static void _TASK_CLIMB_2(int ped, float heading) => Function.Call(0xDF1D85BCAF60D537, ped, heading);
		public static void TASK_CLIMB_LADDER(int ped, float p1, Any p2, Any p3) => Function.Call(0xB6C987F9285A3814, ped, p1, p2, p3);
		/// <summary>
		/// Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
		/// 
		/// resetCrouch TRUE = ped will stand up if crouching, FALSE = ped will remain crouching if crouched
		/// </summary>
		public static void CLEAR_PED_TASKS_IMMEDIATELY(int ped, bool p1, bool resetCrouch) => Function.Call(0xAAA34F8A7CB32098, ped, p1, resetCrouch);
		public static void TASK_PERFORM_SEQUENCE_FROM_PROGRESS(int ped, Any p1, Any p2, Any p3) => Function.Call(0x89221B16730234F0, ped, p1, p2, p3);
		public static void SET_PED_DESIRED_MOVE_BLEND_RATIO(int ped, float p1) => Function.Call(0x1E982AC8716912C5, ped, p1);
		public static float GET_PED_DESIRED_MOVE_BLEND_RATIO(int ped) => Function.Call<float>(0x8517D4A6CA8513ED, ped);
		/// <summary>
		/// ped = Ped you want to perform this task.
		/// target = the Entity they should aim at.
		/// distanceToStopAt = distance from the target, where the ped should stop to aim.
		/// StartAimingDist = distance where the ped should start to aim.
		/// </summary>
		public static void TASK_GOTO_ENTITY_AIMING(int ped, int target, float distanceToStopAt, float StartAimingDist) => Function.Call(0xA9DA48FAB8A76C12, ped, target, distanceToStopAt, StartAimingDist);
		public static void TASK_SET_SPHERE_DEFENSIVE_AREA(int ped, float p1, float p2, float p3, float p4) => Function.Call(0x933C06518B52A9A4, ped, p1, p2, p3, p4);
		public static void TASK_CLEAR_DEFENSIVE_AREA(int ped) => Function.Call(0x95A6C46A31D1917D, ped);
		public static void TASK_PED_SLIDE_TO_COORD(int ped, float x, float y, float z, float heading, float p5) => Function.Call(0xD04FE6765D990A06, ped, x, y, z, heading, p5);
		public static void TASK_PED_SLIDE_TO_COORD(int ped, Vector3 vec, float heading, float p5) => Function.Call(0xD04FE6765D990A06, ped, vec.X, vec.Y, vec.Z, heading, p5);
		public static Any _0x9420FB11B8D77948(Any p0) => Function.Call<Any>(0x9420FB11B8D77948, p0);
		public static Any _0x6BA606AB3A83BC4D(Any p0) => Function.Call<Any>(0x6BA606AB3A83BC4D, p0);
		public static int ADD_COVER_POINT(float p0, float p1, float p2, float p3, Any p4, Any p5, Any p6, bool p7) => Function.Call<int>(0xD5C12A75C7B9497F, p0, p1, p2, p3, p4, p5, p6, p7);
		public static Any _0x59872EA4CBD11C56(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call<Any>(0x59872EA4CBD11C56, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void REMOVE_COVER_POINT(int coverpoint) => Function.Call(0xAE287C923D891715, coverpoint);
		/// <summary>
		/// Checks if there is a cover point at position
		/// </summary>
		public static bool DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(Any p0, Any p1, Any p2, Any p3) => Function.Call<bool>(0xA98B8E3C088E5A31, p0, p1, p2, p3);
		public static Vector3 GET_SCRIPTED_COVER_POINT_COORDS(int coverpoint) => Function.Call<Vector3>(0x594A1028FC2A3E85, coverpoint);
		public static Vector3 _0xE116F6F2DA2D777E(Any p0) => Function.Call<Vector3>(0xE116F6F2DA2D777E, p0);
		public static void _0x50AA09A0DA64E73C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x50AA09A0DA64E73C, p0, p1, p2, p3, p4, p5, p6);
		public static void _0xE5831AA1E2FD147C(Any p0) => Function.Call(0xE5831AA1E2FD147C, p0);
		public static void TASK_COMBAT_PED(int ped, int targetPed, int p2, int p3) => Function.Call(0xF166E48407BAC484, ped, targetPed, p2, p3);
		public static void TASK_COMBAT_PED_TIMED(int ped, int targetPed, int p2, Any p3) => Function.Call(0x944F30DCB7096BDE, ped, targetPed, p2, p3);
		public static void _TASK_COMBAT_PED_3(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xC624414FA748B9BA, p0, p1, p2, p3, p4, p5);
		public static void TASK_SEEK_COVER_FROM_POS(int ped, float x, float y, float z, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x75AC2B60386D89F2, ped, x, y, z, p4, p5, p6, p7);
		public static void TASK_SEEK_COVER_FROM_POS(int ped, Vector3 vec, int p4, Any p5, Any p6, Any p7) => Function.Call(0x75AC2B60386D89F2, ped, vec.X, vec.Y, vec.Z, p4, p5, p6, p7);
		public static void TASK_SEEK_COVER_FROM_PED(int ped, int p1, int p2, Any p3, Any p4, Any p5) => Function.Call(0x84D32B3BEC531324, ped, p1, p2, p3, p4, p5);
		public static void TASK_SEEK_COVER_TO_COVER_POINT(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xD43D95C7A869447F, ped, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_SEEK_COVER_TO_COORDS(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0x39246A6958EF072C, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void TASK_PUT_PED_DIRECTLY_INTO_COVER(int ped, float x, float y, float z, int timeout, bool p5, float p6, Any p7, Any p8, int coverpoint, bool p10, bool p11, Any p12) => Function.Call(0x4172393E6BE1FECE, ped, x, y, z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12);
		public static void TASK_PUT_PED_DIRECTLY_INTO_COVER(int ped, Vector3 vec, int timeout, bool p5, float p6, Any p7, Any p8, int coverpoint, bool p10, bool p11, Any p12) => Function.Call(0x4172393E6BE1FECE, ped, vec.X, vec.Y, vec.Z, timeout, p5, p6, p7, p8, coverpoint, p10, p11, p12);
		public static void _TASK_PUT_PED_DIRECTLY_INTO_COVER_FROM_COORDS(int ped, float x, float y, float z, float fromX, float fromY, float fromZ, int timeout, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17) => Function.Call(0xDF8A5855B9F9A97B, ped, x, y, z, fromX, fromY, fromZ, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		public static void _TASK_PUT_PED_DIRECTLY_INTO_COVER_FROM_COORDS(int ped, Vector3 vec, float fromX, float fromY, float fromZ, int timeout, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17) => Function.Call(0xDF8A5855B9F9A97B, ped, vec.X, vec.Y, vec.Z, fromX, fromY, fromZ, timeout, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		/// <summary>
		/// meleeStyles: AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_MOUNT_FACEDOWN_FROM_FRONT, AR_ALLIGATOR_LEAPKILL, AR_ALLIGATOR_WAIST_AUTOKILL_FRONT
		/// </summary>
		public static void TASK_PUT_PED_DIRECTLY_INTO_MELEE(int ped, int meleeTarget, uint meleeStyle, float p3, float animBlendRatio, bool p5, int p6) => Function.Call(0x1C6CD14A876FFE39, ped, meleeTarget, meleeStyle, p3, animBlendRatio, p5, p6);
		/// <summary>
		/// grappleStyle: AR_GRAPPLE_STRUGGLE, AR_ALLIGATOR_LEG_GRAB_CHALLENGE_FAIL, AR_GRAPPLE_BACK_FROM_BACK, AR_GRAPPLE_BACK_DEFEND, AR_GRAPPLE_FRONT_FROM_FRONT
		/// </summary>
		public static void TASK_PUT_PED_DIRECTLY_INTO_GRAPPLE(int ped, int grappleTarget, uint grappleStyle, float p3, float p4, bool p5, int p6) => Function.Call(0xA05F3F20889D7A5B, ped, grappleTarget, grappleStyle, p3, p4, p5, p6);
		public static void TASK_COMPANION_AMBIENT(int ped, Any p1) => Function.Call(0xE017CF6E2527FE4F, ped, p1);
		public static void _0x098036CAB8373D36(Any p0) => Function.Call(0x098036CAB8373D36, p0);
		public static void _0x10C44F633E2D6D9E(Any p0) => Function.Call(0x10C44F633E2D6D9E, p0);
		public static void _0x7FB78B2199C10E92(Any p0) => Function.Call(0x7FB78B2199C10E92, p0);
		public static void TASK_GUARD(int ped, Any p1, Any p2) => Function.Call(0xB9FB242EACCAF30F, ped, p1, p2);
		public static void TASK_GUARD_CURRENT_POSITION(int ped, float p1, float p2, bool p3) => Function.Call(0x4A58A47A72E3FCB4, ped, p1, p2, p3);
		public static void _TASK_GUARD_ASSIGNED_DEFENSIVE_AREA_2(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x1FC9B33976BACD6C, ped, p1, p2, p3, p4, p5, p6, p7);
		public static void TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(int ped, float p1, float p2, float p3, float p4, float p5, Any p6) => Function.Call(0xD2A207EEBDF9889B, ped, p1, p2, p3, p4, p5, p6);
		public static void TASK_STAND_GUARD(int ped, float x, float y, float z, float heading, string scenarioName) => Function.Call(0xAE032F8BBA959E90, ped, x, y, z, heading, scenarioName);
		public static void TASK_STAND_GUARD(int ped, Vector3 vec, float heading, string scenarioName) => Function.Call(0xAE032F8BBA959E90, ped, vec.X, vec.Y, vec.Z, heading, scenarioName);
		public static void SET_DRIVE_TASK_CRUISE_SPEED(int driver, float cruiseSpeed) => Function.Call(0x5C9B84BD7D31D908, driver, cruiseSpeed);
		/// <summary>
		/// Not implemented.
		/// </summary>
		public static void SET_DRIVE_TASK_MAX_CRUISE_SPEED(int ped, float maxCruiseSpeed) => Function.Call(0x404A5AA9B9F0B746, ped, maxCruiseSpeed);
		public static void ADD_COVER_BLOCKING_AREA(float playerX, float playerY, float playerZ, float radiusX, float radiusY, float radiusZ, bool p6, bool p7, bool p8, bool p9) => Function.Call(0x45C597097DD7CB81, playerX, playerY, playerZ, radiusX, radiusY, radiusZ, p6, p7, p8, p9);
		public static void _ADD_COVER_BLOCKING_VOLUME(int volume, bool p1, bool p2, bool p3, bool p4) => Function.Call(0xEB2ED1DC3AEC0654, volume, p1, p2, p3, p4);
		public static void REMOVE_ALL_COVER_BLOCKING_AREAS() => Function.Call(0xDB6708C0B46F56D8);
		public static void _0x2A10538D0A005E81(Any p0, Any p1) => Function.Call(0x2A10538D0A005E81, p0, p1);
		public static void _0x4F57397388E1DFF8() => Function.Call(0x4F57397388E1DFF8);
		public static void TASK_ROB_PED(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x7BB967F85D8CCBDB, ped, p1, p2, p3, p4);
		public static bool _0xBEDBE39B5FD98FD6(int ped) => Function.Call<bool>(0xBEDBE39B5FD98FD6, ped);
		/// <summary>
		/// Returns scenario
		/// </summary>
		public static int CREATE_SCENARIO_POINT_HASH(uint scenarioHash, float x, float y, float z, float heading, Any p5, Any p6, bool p7) => Function.Call<int>(0x94B745CE41DB58A1, scenarioHash, x, y, z, heading, p5, p6, p7);
		public static int CREATE_SCENARIO_POINT_HASH(uint scenarioHash, Vector3 vec, float heading, Any p5, Any p6, bool p7) => Function.Call<int>(0x94B745CE41DB58A1, scenarioHash, vec.X, vec.Y, vec.Z, heading, p5, p6, p7);
		/// <summary>
		/// Returns scenario
		/// </summary>
		public static int CREATE_SCENARIO_POINT_HASH_ATTACHED_TO_ENTITY(int entity, uint scenarioHash, float x, float y, float z, float heading, Any p6, Any p7, bool p8) => Function.Call<int>(0x794AB1379A74064D, entity, scenarioHash, x, y, z, heading, p6, p7, p8);
		public static int CREATE_SCENARIO_POINT_HASH_ATTACHED_TO_ENTITY(int entity, uint scenarioHash, Vector3 vec, float heading, Any p6, Any p7, bool p8) => Function.Call<int>(0x794AB1379A74064D, entity, scenarioHash, vec.X, vec.Y, vec.Z, heading, p6, p7, p8);
		public static bool _DOES_SCENARIO_POINT_HAVE_PROPS(int scenario) => Function.Call<bool>(0xEA31F199A73801D3, scenario);
		/// <summary>
		/// Old name: _GET_SCENARIO_POINT_ENTITY
		/// </summary>
		public static int GET_PROP_FOR_SCENARIO_POINT(int scenarioPoint, string name) => Function.Call<int>(0x295514F198EFD0CA, scenarioPoint, name);
		public static bool _ASSOCIATE_PROP_WITH_SCENARIO(int scenario, int entity, string propName, bool p3) => Function.Call<bool>(0x8360C47380B6F351, scenario, entity, propName, p3);
		/// <summary>
		/// flag: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/CScenarioPointFlags__Flags
		/// </summary>
		public static void _SET_SCENARIO_POINT_FLAG(int scenario, int flag, bool value) => Function.Call(0x5AF19B6CC2115D34, scenario, flag, value);
		public static bool _IS_SCENARIO_POINT_FLAG_SET(int scenario, int flag) => Function.Call<bool>(0x8569C38D2FB80650, scenario, flag);
		/// <summary>
		/// _SET_SCENARIO_POINT_*
		/// </summary>
		public static void _0xADC45010BC17AF0E(Any p0, Any p1) => Function.Call(0xADC45010BC17AF0E, p0, p1);
		public static Any _0x974DA3408DEC4E79(Any p0) => Function.Call<Any>(0x974DA3408DEC4E79, p0);
		public static bool _DISASSOCIATE_PROP_FROM_SCENARIO(int scenario, string propName) => Function.Call<bool>(0x6EF4E31B4D5D2DA0, scenario, propName);
		public static bool DOES_SCENARIO_POINT_EXIST(int scenario) => Function.Call<bool>(0x841475AC96E794D1, scenario);
		public static Any _0x22CD2C33ED4467A1(Any p0) => Function.Call<Any>(0x22CD2C33ED4467A1, p0);
		/// <summary>
		/// Note: The current name for this native is the old name of 0x295514F198EFD0CA
		/// Old name for this native: _GET_ENTITY_SCENARIO_POINT_IS_ATTACHED_TO
		/// </summary>
		public static int _GET_SCENARIO_POINT_ENTITY(int scenario) => Function.Call<int>(0x7467165EE97D3C68, scenario);
		public static int _GET_PED_USING_SCENARIO_POINT(int scenario) => Function.Call<int>(0x5BA659955369B0E2, scenario);
		/// <summary>
		/// Params: p1 is always true in R* Scripts
		/// </summary>
		public static Vector3 _GET_SCENARIO_POINT_COORDS(int scenario, bool p1) => Function.Call<Vector3>(0xA8452DD321607029, scenario, p1);
		public static Vector3 _0x91CB5E431F579BA1(Any p0) => Function.Call<Vector3>(0x91CB5E431F579BA1, p0);
		public static Any _0x370F57C47F68EBCA(Any p0) => Function.Call<Any>(0x370F57C47F68EBCA, p0);
		/// <summary>
		/// Params: p1 is always true in R* Scripts
		/// </summary>
		public static float _GET_SCENARIO_POINT_HEADING(int scenario, bool p1) => Function.Call<float>(0xB93EA7184BAA85C3, scenario, p1);
		public static float _GET_SCENARIO_POINT_RADIUS(int scenario) => Function.Call<float>(0x6718F40313A2B5A6, scenario);
		public static void _SET_SCENARIO_POINT_COORDS(int scenario, float xPos, float yPos, float zPos, bool p4) => Function.Call(0x2056AB38DF06825C, scenario, xPos, yPos, zPos, p4);
		public static void _SET_SCENARIO_POINT_COORDS(int scenario, Vector3 vec, bool p4) => Function.Call(0x2056AB38DF06825C, scenario, vec.X, vec.Y, vec.Z, p4);
		public static void _SET_SCENARIO_POINT_HEADING(int scenario, float heading, bool p2) => Function.Call(0xD3A0DA8F91612C6E, scenario, heading, p2);
		public static void _SET_SCENARIO_POINT_RADIUS(int scenario, float radius) => Function.Call(0xC47D9080A9A8856A, scenario, radius);
		/// <summary>
		/// _SET_SCENARIO_*
		/// </summary>
		public static void _0xA7479FB665361EDB(Any p0, Any p1) => Function.Call(0xA7479FB665361EDB, p0, p1);
		public static void _0xE69FDA40AAC3EFC0(Any p0, Any p1) => Function.Call(0xE69FDA40AAC3EFC0, p0, p1);
		/// <summary>
		/// Note: scenariosInRadius is an array, and its size and values should be aligned to 8 bytes.
		/// </summary>
		public static int GET_SCENARIO_POINTS_IN_AREA(float posX, float posY, float posZ, float radius, Any* scenariosInRadius, int size) => Function.Call<int>(0x345EC3B7EBDE1CB5, posX, posY, posZ, radius, scenariosInRadius, size);
		public static int GET_SCENARIO_POINTS_IN_AREA(Vector3 vec, float radius, Any* scenariosInRadius, int size) => Function.Call<int>(0x345EC3B7EBDE1CB5, vec.X, vec.Y, vec.Z, radius, scenariosInRadius, size);
		public static Any _0xEFD875C2791EBEFD(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xEFD875C2791EBEFD, p0, p1, p2, p3);
		public static Any _0x152664AA3188B193(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0x152664AA3188B193, p0, p1, p2, p3, p4, p5);
		public static Any _0xE7BBC4E56B989449(Any p0, Any p1, Any p2) => Function.Call<Any>(0xE7BBC4E56B989449, p0, p1, p2);
		public static int _GET_SCENARIO_POINT_PED_IS_USING(int ped, bool p1) => Function.Call<int>(0xDF7993356F52359A, ped, p1);
		public static Any GET_RANSACK_SCENARIO_POINT_PED_IS_USING(int ped) => Function.Call<Any>(0xD04241BBF6D03A5E, ped);
		/// <summary>
		/// Opens/closes containers: ChestDugUp
		/// </summary>
		public static void _SET_SCENARIO_CONTAINER_OPENING_STATE(int entity, bool open) => Function.Call(0x188F8071F244B9B8, entity, open);
		public static Any _0xA9E7672F8C6C6F74(Any p0) => Function.Call<Any>(0xA9E7672F8C6C6F74, p0);
		public static Any _0x0A98A362C5A19A43(Any p0) => Function.Call<Any>(0x0A98A362C5A19A43, p0);
		public static Any _0x849791EBBDBA0362(Any p0) => Function.Call<Any>(0x849791EBBDBA0362, p0);
		public static Any _0x640A602946A8C972(Any p0) => Function.Call<Any>(0x640A602946A8C972, p0);
		public static Any _0x01AF8A3729231A43(Any p0) => Function.Call<Any>(0x01AF8A3729231A43, p0);
		/// <summary>
		/// Returns m_eContainerState
		/// </summary>
		public static bool _GET_SCENARIO_CONTAINER_OPENING_STATE(int entity) => Function.Call<bool>(0xB219612B5568E9EC, entity);
		public static void _RESET_SCENARIO_FOR_ENTITY(int scenario, int entity) => Function.Call(0x2E20878FD208A68E, scenario, entity);
		public static void _0x4161648394262FDF(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x4161648394262FDF, p0, p1, p2, p3);
		public static void _0x9C8F42A5D1859DC1(Any p0) => Function.Call(0x9C8F42A5D1859DC1, p0);
		public static void _DELETE_SCENARIO_POINT(int scenario) => Function.Call(0x81948DFE4F5A0283, scenario);
		public static void TASK_USE_SCENARIO_POINT(int ped, int scenario, string conditionalAnim, int p3, bool p4, bool p5, uint p6, bool p7, float p8, bool p9) => Function.Call(0xCCDAE6324B6A821C, ped, scenario, conditionalAnim, p3, p4, p5, p6, p7, p8, p9);
		public static void _TASK_USE_SCENARIO_POINT_2(int ped, int ped2, Any p2, string p3, int p4, uint p5, float p6, bool p7) => Function.Call(0x0F6641449DD86FBE, ped, ped2, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/animations/scenarios
		/// Params: duration in milliseconds
		/// 
		/// conditionalHash (optionally):
		/// 0 = play random conditional anim.
		/// Every conditional anim has requirements to play it.
		/// If requirements are not met, ped plays random allowed conditional anim or can be stuck.
		/// For example, this scenario type has possible conditional anim WORLD_HUMAN_LEAN_BACK_WALL_SMOKING_MALE_D, but it can not be played by player, because condition is set to NOT be CAIConditionIsPlayer (check file amb_rest.meta and amb_rest_CA.meta with OPENIV to clarify requirements).
		/// </summary>
		public static void TASK_START_SCENARIO_IN_PLACE_HASH(int ped, uint scenarioHash, int duration, bool playEnterAnim, uint conditionalHash, float heading, bool p6) => Function.Call(0x524B54361229154F, ped, scenarioHash, duration, playEnterAnim, conditionalHash, heading, p6);
		/// <summary>
		/// Takes scenario point handle instead of hash
		/// </summary>
		public static void _TASK_START_SCENARIO_IN_PLACE_2(int ped, Any p1, string p2, int p3, bool p4, float p5, bool p6) => Function.Call(0xA917E39F2CEFD215, ped, p1, p2, p3, p4, p5, p6);
		public static void TASK_START_SCENARIO_AT_POSITION(int ped, uint scenarioHash, float x, float y, float z, float heading, int duration, bool sittingScenario, bool teleport, string p9, float p10, bool p11) => Function.Call(0x4D1F61FC34AF3CD1, ped, scenarioHash, x, y, z, heading, duration, sittingScenario, teleport, p9, p10, p11);
		public static void TASK_START_SCENARIO_AT_POSITION(int ped, uint scenarioHash, Vector3 vec, float heading, int duration, bool sittingScenario, bool teleport, string p9, float p10, bool p11) => Function.Call(0x4D1F61FC34AF3CD1, ped, scenarioHash, vec.X, vec.Y, vec.Z, heading, duration, sittingScenario, teleport, p9, p10, p11);
		public static Any _0xF97F462779B31786(Any p0) => Function.Call<Any>(0xF97F462779B31786, p0);
		public static Any _0x6C269F673C47031E(Any p0) => Function.Call<Any>(0x6C269F673C47031E, p0);
		public static void _0x9667CCE29BFA0780(Any p0) => Function.Call(0x9667CCE29BFA0780, p0);
		public static Any _0x00FFE0F85253C572(Any p0) => Function.Call<Any>(0x00FFE0F85253C572, p0);
		public static void _TASK_USE_NEAREST_SCENARIO_TO_COORD(int ped, float x, float y, float z, float distance, int duration, bool p6, bool p7, bool p8, bool p9) => Function.Call(0x322BFDEA666E2B0E, ped, x, y, z, distance, duration, p6, p7, p8, p9);
		public static void _TASK_USE_NEAREST_SCENARIO_TO_COORD(int ped, Vector3 vec, float distance, int duration, bool p6, bool p7, bool p8, bool p9) => Function.Call(0x322BFDEA666E2B0E, ped, vec.X, vec.Y, vec.Z, distance, duration, p6, p7, p8, p9);
		public static void TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(int ped, float x, float y, float z, float distance, int duration, bool p6, bool p7, bool p8, bool p9) => Function.Call(0x58E2E0F23F6B76C3, ped, x, y, z, distance, duration, p6, p7, p8, p9);
		public static void TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(int ped, Vector3 vec, float distance, int duration, bool p6, bool p7, bool p8, bool p9) => Function.Call(0x58E2E0F23F6B76C3, ped, vec.X, vec.Y, vec.Z, distance, duration, p6, p7, p8, p9);
		public static void TASK_USE_NEAREST_TRAIN_SCENARIO_TO_COORD_WARP(int ped, float x, float y, float z, float distance) => Function.Call(0x3774B03456DD6106, ped, x, y, z, distance);
		public static void TASK_USE_NEAREST_TRAIN_SCENARIO_TO_COORD_WARP(int ped, Vector3 vec, float distance) => Function.Call(0x3774B03456DD6106, ped, vec.X, vec.Y, vec.Z, distance);
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(int ped, float x, float y, float z, float distance, bool p5, bool p6, bool p7, bool p8) => Function.Call(0x9FDA1B3D7E7028B3, ped, x, y, z, distance, p5, p6, p7, p8);
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(int ped, Vector3 vec, float distance, bool p5, bool p6, bool p7, bool p8) => Function.Call(0x9FDA1B3D7E7028B3, ped, vec.X, vec.Y, vec.Z, distance, p5, p6, p7, p8);
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(int ped, float x, float y, float z, float distance, bool p5, bool p6, bool p7, bool p8) => Function.Call(0x97A28E63F0BA5631, ped, x, y, z, distance, p5, p6, p7, p8);
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(int ped, Vector3 vec, float distance, bool p5, bool p6, bool p7, bool p8) => Function.Call(0x97A28E63F0BA5631, ped, vec.X, vec.Y, vec.Z, distance, p5, p6, p7, p8);
		public static Any _0xFDECCA06E8B81346(Any p0) => Function.Call<Any>(0xFDECCA06E8B81346, p0);
		public static Any _0x2D657B10F211C572(int ped, float p1) => Function.Call<Any>(0x2D657B10F211C572, ped, p1);
		public static void TASK_RIDE_TRAIN(int ped, int train, int scenarioPoint, uint scenarioHash) => Function.Call(0x37FB1C870E2EC2C6, ped, train, scenarioPoint, scenarioHash);
		public static Any _0x79197F7D2BB5E73A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0x79197F7D2BB5E73A, p0, p1, p2, p3, p4, p5);
		public static bool DOES_SCENARIO_EXIST_IN_AREA(float x, float y, float z, float radius, bool p4, Any p5, bool p6) => Function.Call<bool>(0x5A59271FFADD33C1, x, y, z, radius, p4, p5, p6);
		public static bool DOES_SCENARIO_EXIST_IN_AREA(Vector3 vec, float radius, bool p4, Any p5, bool p6) => Function.Call<bool>(0x5A59271FFADD33C1, vec.X, vec.Y, vec.Z, radius, p4, p5, p6);
		public static bool DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA_HASH(float x, float y, float z, uint typeHash, float radius, bool p5) => Function.Call<bool>(0x6EEAD6AF637DA752, x, y, z, typeHash, radius, p5);
		public static bool DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA_HASH(Vector3 vec, uint typeHash, float radius, bool p5) => Function.Call<bool>(0x6EEAD6AF637DA752, vec.X, vec.Y, vec.Z, typeHash, radius, p5);
		public static int FIND_SCENARIO_OF_TYPE_HASH(float xPos, float yPos, float zPos, uint scenarioType, float distance, Any p5, bool p6) => Function.Call<int>(0xF533D68FF970D190, xPos, yPos, zPos, scenarioType, distance, p5, p6);
		public static int FIND_SCENARIO_OF_TYPE_HASH(Vector3 vec, uint scenarioType, float distance, Any p5, bool p6) => Function.Call<int>(0xF533D68FF970D190, vec.X, vec.Y, vec.Z, scenarioType, distance, p5, p6);
		public static void _0x0D322AEF8878B8FE(Any p0, Any p1) => Function.Call(0x0D322AEF8878B8FE, p0, p1);
		public static Any _0xD508FA229F1C4900(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0xD508FA229F1C4900, p0, p1, p2, p3, p4, p5);
		public static void _0xB8E213D02F37947D(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xB8E213D02F37947D, p0, p1, p2, p3, p4, p5, p6);
		public static bool IS_SCENARIO_OCCUPIED(float p0, float p1, float p2, float p3, bool p4) => Function.Call<bool>(0x788756D73AC2E07C, p0, p1, p2, p3, p4);
		public static Any _0x1ACBC313966C21F3(int scenario) => Function.Call<Any>(0x1ACBC313966C21F3, scenario);
		public static bool PED_HAS_USE_SCENARIO_TASK(int ped) => Function.Call<bool>(0x295E3CCEC879CCD7, ped);
		public static bool _PED_IS_IN_SCENARIO_BASE(int ped) => Function.Call<bool>(0x02EBBB3989B7E695, ped);
		public static Any _0x90703A8F75EE4ABD(Any p0, Any p1) => Function.Call<Any>(0x90703A8F75EE4ABD, p0, p1);
		public static void _0xD999E379265A4501(Any p0, Any p1, Any p2) => Function.Call(0xD999E379265A4501, p0, p1, p2);
		public static void PLAY_ANIM_ON_RUNNING_SCENARIO(int ped, string animDict, string animName) => Function.Call(0x748040460F8DF5DC, ped, animDict, animName);
		public static Any _0x74F0209674864CBD() => Function.Call<Any>(0x74F0209674864CBD);
		public static Any _0xE1C105E6BBA48270() => Function.Call<Any>(0xE1C105E6BBA48270);
		public static Any _0x1AC5A8AB50CFAA33(Any p0) => Function.Call<Any>(0x1AC5A8AB50CFAA33, p0);
		public static void _0xBEEFBB608D2AA68A(Any p0) => Function.Call(0xBEEFBB608D2AA68A, p0);
		public static void _0x19BC99C678FBA139(Any p0, Any p1, Any p2) => Function.Call(0x19BC99C678FBA139, p0, p1, p2);
		public static void _0x5D9B0BAAF04CF65B(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x5D9B0BAAF04CF65B, p0, p1, p2, p3);
		public static void _0x9B6A58FDB0024F12(Any p0, Any p1) => Function.Call(0x9B6A58FDB0024F12, p0, p1);
		public static void _0xBC3F847AE2C3DC65(Any p0, Any p1) => Function.Call(0xBC3F847AE2C3DC65, p0, p1);
		public static void _0x450080DDEDB91258(Any p0, Any p1) => Function.Call(0x450080DDEDB91258, p0, p1);
		public static void _0x954451EA2D2120FB(Any p0, Any p1) => Function.Call(0x954451EA2D2120FB, p0, p1);
		public static void _0x0F4F6C4CE471259D(Any p0, Any p1) => Function.Call(0x0F4F6C4CE471259D, p0, p1);
		public static void _0xB8E3486D107F4194(Any p0, Any p1) => Function.Call(0xB8E3486D107F4194, p0, p1);
		public static void _0x827A58CED9D4D5B4(Any p0, Any p1) => Function.Call(0x827A58CED9D4D5B4, p0, p1);
		public static void _0x4A7D73989F52EB37(Any p0, Any p1) => Function.Call(0x4A7D73989F52EB37, p0, p1);
		public static void _0xB79817DB31FF72B9(Any p0, Any p1) => Function.Call(0xB79817DB31FF72B9, p0, p1);
		public static void _0x65D281985F2BDFC2(Any p0, Any p1) => Function.Call(0x65D281985F2BDFC2, p0, p1);
		public static void _0x885D19AC2B6FBFF4(Any p0, Any p1) => Function.Call(0x885D19AC2B6FBFF4, p0, p1);
		public static void _0x2064B33F6E6B92D4(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x2064B33F6E6B92D4, p0, p1, p2, p3);
		public static void _0xCE4E669400E5F8AA(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xCE4E669400E5F8AA, p0, p1, p2, p3);
		public static void _0x2EB977293923C723(Any p0, Any p1) => Function.Call(0x2EB977293923C723, p0, p1);
		public static void _0xE9225354FB7437A7(Any p0, Any p1) => Function.Call(0xE9225354FB7437A7, p0, p1);
		public static void _0x764DB5A48390FBAD(Any p0, Any p1) => Function.Call(0x764DB5A48390FBAD, p0, p1);
		public static void _0x8F8C84363810691A(Any p0, Any p1) => Function.Call(0x8F8C84363810691A, p0, p1);
		public static void _0xFF8AFCA532B500D4(Any p0, Any p1) => Function.Call(0xFF8AFCA532B500D4, p0, p1);
		public static Any _0xFE5D28B9B7837CC1(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xFE5D28B9B7837CC1, p0, p1, p2, p3);
		public static void _0x2B8AF29A78024BD3(Any p0) => Function.Call(0x2B8AF29A78024BD3, p0);
		public static Any _0x0365000D8BF86531(Any p0) => Function.Call<Any>(0x0365000D8BF86531, p0);
		public static Vector3 _0x865732725536EE39(Any p0) => Function.Call<Vector3>(0x865732725536EE39, p0);
		public static void _0x0E184495B27BB57D() => Function.Call(0x0E184495B27BB57D);
		public static bool DOES_SCENARIO_GROUP_EXIST(string scenarioGroup) => Function.Call<bool>(0xF9034C136C9E00D3, scenarioGroup);
		public static bool _DOES_SCENARIO_GROUP_EXIST_HASH(uint scenarioGroup) => Function.Call<bool>(0x76E98B52369A289C, scenarioGroup);
		public static bool IS_SCENARIO_GROUP_ENABLED(string scenarioGroup) => Function.Call<bool>(0x367A09DED4E05B99, scenarioGroup);
		public static bool _IS_SCENARIO_GROUP_ENABLED_HASH(uint scenarioGroup) => Function.Call<bool>(0xDCC374913DE6AAA6, scenarioGroup);
		public static void SET_SCENARIO_GROUP_ENABLED(string scenarioGroup, bool toggle) => Function.Call(0x02C8E5B49848664E, scenarioGroup, toggle);
		public static void _SET_SCENARIO_GROUP_ENABLED_HASH(uint scenarioGroup, bool toggle) => Function.Call(0x9925EDDB6EAB88CD, scenarioGroup, toggle);
		public static void RESET_SCENARIO_GROUPS_ENABLED() => Function.Call(0xDD902D0349AFAD3A);
		public static void _0x358A1A751B335A11(Any p0) => Function.Call(0x358A1A751B335A11, p0);
		public static void FORCE_SCENARIO_GROUP_PRIORITY(Any p0, Any p1) => Function.Call(0x444C910A5058E568, p0, p1);
		public static Any _0xE55478C5EDF70AC2(Any p0) => Function.Call<Any>(0xE55478C5EDF70AC2, p0);
		public static bool _IS_SCENARIO_POINT_ACTIVE(int scenario) => Function.Call<bool>(0x0CC36D4156006509, scenario);
		public static void _SET_SCENARIO_POINT_ACTIVE(int scenario, bool active) => Function.Call(0xEEE4829304F93EEE, scenario, active);
		public static void _RESET_SCENARIO_SCRIPT(int scenario) => Function.Call(0x5A40040BB5AE3EA2, scenario);
		public static bool IS_SCENARIO_TYPE_ENABLED(string scenarioType) => Function.Call<bool>(0x3A815DB3EA088722, scenarioType);
		public static void SET_SCENARIO_TYPE_ENABLED(string scenarioType, bool toggle) => Function.Call(0xEB47EC4E34FB7EE1, scenarioType, toggle);
		public static void _SET_SCENARIO_TYPE_ENABLED_HASH(uint scenarioType, bool toggle) => Function.Call(0xD00E50E673802D71, scenarioType, toggle);
		public static void RESET_SCENARIO_TYPES_ENABLED() => Function.Call(0x0D40EE2A7F2B2D6D);
		public static int _GET_SCENARIO_POINT_TYPE_PED_IS_USING(int ped) => Function.Call<int>(0x2D0571BB55879DA2, ped);
		public static uint _GET_SCENARIO_POINT_TYPE(int scenario) => Function.Call<uint>(0xA92450B5AE687AAF, scenario);
		public static bool IS_PED_ACTIVE_IN_SCENARIO(int ped, int scenario) => Function.Call<bool>(0xAA135F9482C82CC3, ped, scenario);
		public static bool IS_PED_EXITING_SCENARIO(int ped, bool p1) => Function.Call<bool>(0x0C3CB2E600C8977D, ped, p1);
		public static Any _0x2C497BDEF897C6DF(Any p0) => Function.Call<Any>(0x2C497BDEF897C6DF, p0);
		/// <summary>
		/// Despite its name, it only attacks ONE hated target. The one closest to the specified position.
		/// </summary>
		public static void TASK_COMBAT_HATED_TARGETS_IN_AREA(int ped, float x, float y, float z, float radius, int flags, Any p6) => Function.Call(0x4CF5F55DAC3280A0, ped, x, y, z, radius, flags, p6);
		public static void TASK_COMBAT_HATED_TARGETS_IN_AREA(int ped, Vector3 vec, float radius, int flags, Any p6) => Function.Call(0x4CF5F55DAC3280A0, ped, vec.X, vec.Y, vec.Z, radius, flags, p6);
		public static void TASK_COMBAT_HATED_TARGETS_NO_LOS_TEST(int ped, float radius) => Function.Call(0xB5BC69D9C4060BC3, ped, radius);
		/// <summary>
		/// Despite its name, it only attacks ONE hated target. The one closest hated target.
		/// </summary>
		public static void TASK_COMBAT_HATED_TARGETS_AROUND_PED(int ped, float radius, int flags, Any p3) => Function.Call(0x7BF835BB9E2698C8, ped, radius, flags, p3);
		public static void TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(int ped, float radius, float p2, Any p3) => Function.Call(0x2BBA30B854534A0C, ped, radius, p2, p3);
		public static void TASK_COMBAT_HATED_TARGETS(int ped, float radius) => Function.Call(0x8182B561A29BD597, ped, radius);
		public static void _0x30B391915538EBE2(Any p0) => Function.Call(0x30B391915538EBE2, p0);
		public static void TASK_THROW_PROJECTILE(int ped, Any p1, Any p2, Any p3) => Function.Call(0x7285951DBF6B5A51, ped, p1, p2, p3);
		public static void _TASK_THROW_PROJECTILE_2(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x7282356DFF6B5A51, p0, p1, p2, p3);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/AI/EVENTS/aud_ped_whistle_types.lua
		/// p2: UNSPECIFIED
		/// </summary>
		public static void TASK_WHISTLE_ANIM(int ped, uint audPedWhistleType, uint p2) => Function.Call(0xD6401A1B2F63BED6, ped, audPedWhistleType, p2);
		public static void TASK_SWAP_WEAPON(int ped, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xA21C51255B205245, ped, p1, p2, p3, p4);
		public static void _0x0000A8ACDC2E1B6A(Any p0, Any p1) => Function.Call(0x0000A8ACDC2E1B6A, p0, p1);
		public static void TASK_RELOAD_WEAPON(int ped, bool unused) => Function.Call(0x62D2916F56B9CD2D, ped, unused);
		public static void TASK_PICK_UP_WEAPON(int ped, Any p1) => Function.Call(0x55B0ECFD98596624, ped, p1);
		public static bool IS_PED_GETTING_UP(int ped) => Function.Call<bool>(0x2A74E1D5F2F00EEC, ped);
		public static void TASK_ANIMAL_WRITHE(int ped, Any p1, Any p2) => Function.Call(0x8C038A39C4A4B6D6, ped, p1, p2);
		public static void _TASK_ANIMAL_BLEED_OUT(int ped, int killer, bool p2, uint weaponHash, int p4, int p5) => Function.Call(0x30A768C30D385EC5, ped, killer, p2, weaponHash, p4, p5);
		/// <summary>
		/// This native checks if a ped is on the ground, in pain from a (gunshot) wound.
		/// </summary>
		public static bool IS_PED_IN_WRITHE(int ped) => Function.Call<bool>(0xDEB6D52126E7D640, ped);
		public static Any _0x3F8387DB1B9F31B7(Any p0, Any p1) => Function.Call<Any>(0x3F8387DB1B9F31B7, p0, p1);
		public static Any _0x756C7B4C43DF0422(Any p0) => Function.Call<Any>(0x756C7B4C43DF0422, p0);
		public static Any _0x351F74ED6177EBE7() => Function.Call<Any>(0x351F74ED6177EBE7);
		public static Any _0x6C50B9DCCCA70023(Any p0) => Function.Call<Any>(0x6C50B9DCCCA70023, p0);
		public static void TASK_REVIVE_TARGET(int ped, int reviver, uint tool) => Function.Call(0x356088527D9EBAAD, ped, reviver, tool);
		public static void OPEN_PATROL_ROUTE(string patrolRoute) => Function.Call(0xA36BFB5EE89F3D82, patrolRoute);
		public static void CLOSE_PATROL_ROUTE() => Function.Call(0xB043ECA801B8CBC1);
		public static void ADD_PATROL_ROUTE_NODE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x8EDF950167586B7C, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void ADD_PATROL_ROUTE_LINK(Any p0, Any p1) => Function.Call(0x23083260DEC3A551, p0, p1);
		public static void CREATE_PATROL_ROUTE() => Function.Call(0xAF8A443CCC8018DC);
		public static void DELETE_PATROL_ROUTE(string patrolRoute) => Function.Call(0x7767DD9D65E91319, patrolRoute);
		public static Any _0x643FD1556F621772(Any p0, Any p1, Any p2) => Function.Call<Any>(0x643FD1556F621772, p0, p1, p2);
		public static void TASK_PATROL(int ped, string patrolRoute, Any p2, bool p3, bool p4) => Function.Call(0xBDA5DF49D080FE4E, ped, patrolRoute, p2, p3, p4);
		public static void _TASK_PATROL_2(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x964B06C88E4C86DB, p0, p1, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// Makes the ped run to take cover
		/// </summary>
		public static void TASK_STAY_IN_COVER(int ped) => Function.Call(0xE5DA8615A6180789, ped);
		public static void TASK_VEHICLE_SHOOT_AT_PED(int ped, int target, float p2) => Function.Call(0x10AB107B887214D8, ped, target, p2);
		public static void TASK_VEHICLE_AIM_AT_PED(int ped, int target) => Function.Call(0xE41885592B08B097, ped, target);
		public static void TASK_VEHICLE_SHOOT_AT_COORD(int ped, float x, float y, float z, float p4) => Function.Call(0x5190796ED39C9B6D, ped, x, y, z, p4);
		public static void TASK_VEHICLE_SHOOT_AT_COORD(int ped, Vector3 vec, float p4) => Function.Call(0x5190796ED39C9B6D, ped, vec.X, vec.Y, vec.Z, p4);
		public static void _0xAF2EF28CE3084505(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xAF2EF28CE3084505, p0, p1, p2, p3);
		public static void TASK_VEHICLE_AIM_AT_COORD(int ped, float x, float y, float z) => Function.Call(0x447C1E9EF844BC0F, ped, x, y, z);
		public static void TASK_VEHICLE_AIM_AT_COORD(int ped, Vector3 vec) => Function.Call(0x447C1E9EF844BC0F, ped, vec.X, vec.Y, vec.Z);
		public static void TASK_VEHICLE_GOTO_NAVMESH(int ped, int vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange) => Function.Call(0x195AEEB13CEFE2EE, ped, vehicle, x, y, z, speed, behaviorFlag, stoppingRange);
		public static void TASK_VEHICLE_GOTO_NAVMESH(int ped, int vehicle, Vector3 vec, float speed, int behaviorFlag, float stoppingRange) => Function.Call(0x195AEEB13CEFE2EE, ped, vehicle, vec.X, vec.Y, vec.Z, speed, behaviorFlag, stoppingRange);
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15) => Function.Call(0x11315AB3385B8AC0, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD_USING_COMBAT_STYLE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15) => Function.Call(0x639C0425A0B4E77E, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(int ped1, float x, float y, float z, int ped2, float p5, Any p6, float p7, float p8, Any p9, Any p10, Any p11, uint firingPattern, int p13, Any p14) => Function.Call(0xB2A16444EAD9AE47, ped1, x, y, z, ped2, p5, p6, p7, p8, p9, p10, p11, firingPattern, p13, p14);
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(int ped1, Vector3 vec, int ped2, float p5, Any p6, float p7, float p8, Any p9, Any p10, Any p11, uint firingPattern, int p13, Any p14) => Function.Call(0xB2A16444EAD9AE47, ped1, vec.X, vec.Y, vec.Z, ped2, p5, p6, p7, p8, p9, p10, p11, firingPattern, p13, p14);
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14) => Function.Call(0x78426D0982D083C9, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		/// <summary>
		/// shootatEntity:
		/// If true, peds will shoot at Entity till it is dead.
		/// If false, peds will just walk till they reach the entity and will cease shooting.
		/// </summary>
		public static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0x97465886D35210E9, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY_USING_COMBAT_STYLE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0xCEF0117C233026AD, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(int ped, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, bool shootAtEnemies, float distanceToStopAt, float noRoadsDistance, bool unkTrue, int unkFlag, int aimingFlag, uint firingPattern) => Function.Call(0xA55547801EB331FC, ped, goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed, shootAtEnemies, distanceToStopAt, noRoadsDistance, unkTrue, unkFlag, aimingFlag, firingPattern);
		public static void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD_USING_COMBAT_STYLE(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14) => Function.Call(0x87BD711FC31EA273, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		/// <summary>
		/// Makes the ped ragdoll like when falling from a great height
		/// </summary>
		public static void SET_HIGH_FALL_TASK(int ped, int p1, int p2, int p3) => Function.Call(0x8C825BDC7741D37C, ped, p1, p2, p3);
		public static void _0x5217B7B6DB78E1F3(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x5217B7B6DB78E1F3, p0, p1, p2, p3, p4);
		public static void REQUEST_WAYPOINT_RECORDING(string waypointRecording) => Function.Call(0x9EEFB62EB27B5792, waypointRecording);
		public static bool GET_IS_WAYPOINT_RECORDING_LOADED(string waypointRecording) => Function.Call<bool>(0xCB4E8BE8A0063C5D, waypointRecording);
		public static void REMOVE_WAYPOINT_RECORDING(string waypointRecording) => Function.Call(0xFF1B8B4AA1C25DC8, waypointRecording);
		public static void _0xF718931A82EEB898() => Function.Call(0xF718931A82EEB898);
		public static bool WAYPOINT_RECORDING_GET_NUM_POINTS(string waypointRecording, int* points) => Function.Call<bool>(0x5343532C01A07234, waypointRecording, points);
		public static bool WAYPOINT_RECORDING_GET_COORD(string waypointRecording, int point, Vector3* coord) => Function.Call<bool>(0x2FB897405C90B361, waypointRecording, point, coord);
		public static float WAYPOINT_RECORDING_GET_SPEED_AT_POINT(string waypointRecording, int point) => Function.Call<float>(0x005622AEBC33ACA9, waypointRecording, point);
		public static bool WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(string waypointRecording, float x, float y, float z, int* point) => Function.Call<bool>(0xB629A298081F876F, waypointRecording, x, y, z, point);
		public static bool WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(string waypointRecording, Vector3 vec, int* point) => Function.Call<bool>(0xB629A298081F876F, waypointRecording, vec.X, vec.Y, vec.Z, point);
		public static void TASK_FOLLOW_WAYPOINT_RECORDING_ADVANCED(int ped, Any p1) => Function.Call(0x0CFC13EBC19BCA52, ped, p1);
		public static void TASK_FOLLOW_WAYPOINT_RECORDING(int ped, string waypointRecording, int p2, int flag, int p4, bool p5, Any p6, int p7) => Function.Call(0x0759591819534F7B, ped, waypointRecording, p2, flag, p4, p5, p6, p7);
		public static void TASK_FOLLOW_WAYPOINT_RECORDING_AT_OFFSET(int ped, string waypointRecording, float p2, int p3, int p4, int p5, bool p6) => Function.Call(0xBE9B0520BD7C445B, ped, waypointRecording, p2, p3, p4, p5, p6);
		public static void TASK_FOLLOW_ENTITY_ALONG_WAYPOINT_RECORDING_AT_OFFSET(int ped0, int ped1, string waypointRecording, float p3, float p4, int p5, int p6, int p7, bool p8) => Function.Call(0x4D2B787BAE9AB760, ped0, ped1, waypointRecording, p3, p4, p5, p6, p7, p8);
		public static bool IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(int ped, string waypointRecording) => Function.Call<bool>(0xE03B3F2D3DC59B64, ped, waypointRecording);
		public static int GET_PED_WAYPOINT_PROGRESS(int ped) => Function.Call<int>(0x2720AAA75001E094, ped);
		public static float GET_PED_WAYPOINT_DISTANCE(int ped) => Function.Call<float>(0xE6A877C64CAF1BC5, ped);
		public static Any SET_PED_WAYPOINT_ROUTE_OFFSET(int ped, float p1, float p2, float p3) => Function.Call<Any>(0xED98E10B0AFCE4B4, ped, p1, p2, p3);
		public static float GET_WAYPOINT_DISTANCE_ALONG_ROUTE(string waypointRecording, int p1) => Function.Call<float>(0xA5B769058763E497, waypointRecording, p1);
		public static float _0x3ACC128510142B9D(string waypointRecording, float x, float y, float z) => Function.Call<float>(0x3ACC128510142B9D, waypointRecording, x, y, z);
		public static float _0x3ACC128510142B9D(string waypointRecording, Vector3 vec) => Function.Call<float>(0x3ACC128510142B9D, waypointRecording, vec.X, vec.Y, vec.Z);
		public static bool WAYPOINT_PLAYBACK_GET_IS_PAUSED(int ped) => Function.Call<bool>(0x701375A7D43F01CB, ped);
		public static bool WAYPOINT_PLAYBACK_GET_IS_AIMING(int ped) => Function.Call<bool>(0xD73A5D1F0325C71C, ped);
		public static bool WAYPOINT_PLAYBACK_GET_IS_SHOOTING(int ped) => Function.Call<bool>(0xA5B94DF8AF058F46, ped);
		public static void WAYPOINT_PLAYBACK_PAUSE(int ped, Any p1, Any p2, Any p3) => Function.Call(0x0F342546AA06FED5, ped, p1, p2, p3);
		public static void WAYPOINT_PLAYBACK_RESUME(int ped, bool p1, int p2, int p3) => Function.Call(0x244F70C84C547D2D, ped, p1, p2, p3);
		public static void WAYPOINT_PLAYBACK_OVERRIDE_SPEED(int ped, float speed, Any p2, Any p3, Any p4) => Function.Call(0x7D7D2B47FA788E85, ped, speed, p2, p3, p4);
		public static void WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(int ped) => Function.Call(0x6599D834B12D0800, ped);
		public static float GET_PED_WAYPOINT_OVERRIDE_SPEED(int ped) => Function.Call<float>(0xD39A2F3E7FCAFF08, ped);
		public static void USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(string waypointRecording, bool p1, float p2, float p3, bool p4) => Function.Call(0x5A353B8E6B1095B5, waypointRecording, p1, p2, p3, p4);
		public static void WAYPOINT_PLAYBACK_START_AIMING_AT_PED(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x20E330937C399D29, p0, p1, p2, p3);
		public static void WAYPOINT_PLAYBACK_START_AIMING_AT_ENTITY(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x4F158205E0C74385, p0, p1, p2, p3);
		public static void WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x8968400D900ED8B3, p0, p1, p2, p3, p4, p5);
		public static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xE70BA7B90F8390DC, p0, p1, p2, p3, p4);
		public static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_ENTITY(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x4AF458F71C1196D2, p0, p1, p2, p3, p4);
		public static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x057A25CFCC9DB671, p0, p1, p2, p3, p4, p5, p6);
		public static void WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(Any p0) => Function.Call(0x47EFA040EBB8E2EA, p0);
		public static void ASSISTED_MOVEMENT_REMOVE_ROUTE(string route) => Function.Call(0x3548536485DD792B, route);
		public static bool _CREATE_WAYPOINT_PATH(string pathName, Any* p1, int nodes, int p3) => Function.Call<bool>(0x5C885E0978B6AD60, pathName, p1, nodes, p3);
		public static bool ASSISTED_MOVEMENT_IS_ROUTE_LOADED(string route) => Function.Call<bool>(0x60F9A4393A21F741, route);
		public static void ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(string route, int props) => Function.Call(0xD5002D78B7162E1B, route, props);
		public static void SET_ENABLE_SPEED_RESTRAIN_FOR_WAYPOINT_RECORDING_LEADER(Any p0, Any p1) => Function.Call(0x295F03DC97BEEBC1, p0, p1);
		public static void SET_UP_SPEED_RESTRAIN_INFORMATION_FOR_PLAYER_FOLLOWER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xB5C51DD544F14F58, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(int ped, int vehicle, string waypointRecording, int drivingMode, Any p4, int eWaypoint, int flag, float p7, bool p8, float stoppingDist, Any p10) => Function.Call(0x3123FAA6DB1CF7ED, ped, vehicle, waypointRecording, drivingMode, p4, eWaypoint, flag, p7, p8, stoppingDist, p10);
		public static void _TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING_2(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x041D17A9E221AE30, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static bool IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(Any p0, Any p1) => Function.Call<bool>(0xF5134943EA29868C, p0, p1);
		public static int GET_VEHICLE_WAYPOINT_PROGRESS(int vehicle) => Function.Call<int>(0x9824CFF8FC66E159, vehicle);
		public static int GET_VEHICLE_WAYPOINT_TARGET_POINT(int vehicle) => Function.Call<int>(0x416B62AC8B9E5BBD, vehicle);
		public static void VEHICLE_WAYPOINT_PLAYBACK_PAUSE(int vehicle) => Function.Call(0x8A4E6AC373666BC5, vehicle);
		public static Any VEHICLE_WAYPOINT_PLAYBACK_GET_IS_PAUSED(Any p0) => Function.Call<Any>(0x4D6D30AB18B0B089, p0);
		public static void VEHICLE_WAYPOINT_PLAYBACK_RESUME(int vehicle) => Function.Call(0xDC04FCAA7839D492, vehicle);
		public static void VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(int vehicle) => Function.Call(0x5CEB25A7D2848963, vehicle);
		public static void VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(int vehicle, float speed) => Function.Call(0x121F0593E0A431D7, vehicle, speed);
		public static Any GET_VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Any p0) => Function.Call<Any>(0x3DC971EB22F73447, p0);
		public static void TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(int ped, bool toggle) => Function.Call(0x90D2156198831D69, ped, toggle);
		public static void TASK_SET_STEALTH_MOVEMENT(int ped, bool p1, Any p2, bool p3) => Function.Call(0x4C3FA937B44A90FA, ped, p1, p2, p3);
		public static void TASK_SET_CROUCH_MOVEMENT(int ped, bool p1, Any p2, bool p3) => Function.Call(0x17293C633C8AC019, ped, p1, p2, p3);
		/// <summary>
		/// motionStateHash: see FORCE_PED_MOTION_STATE
		/// </summary>
		public static void TASK_FORCE_MOTION_STATE(int ped, uint motionStateHash, bool p2) => Function.Call(0x4F056E1AFFEF17AB, ped, motionStateHash, p2);
		public static void TASK_MOVE_NETWORK_BY_NAME(int ped, string task, float multiplier, bool p3, string animDict, int flags) => Function.Call(0x2D537BA194896636, ped, task, multiplier, p3, animDict, flags);
		public static void TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(int ped, string moveNetworkDefName, Any* taskData, float p3, bool p4, string animDict, int flags) => Function.Call(0x139805C2A67C4795, ped, moveNetworkDefName, taskData, p3, p4, animDict, flags);
		public static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(int ped, string moveNetworkDefName, Any* taskData, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, int p9, float p10, int p11, int p12, int flag, int p14) => Function.Call(0x7B6A04F98BBAFB2C, ped, moveNetworkDefName, taskData, xPos, yPos, zPos, xRot, yRot, zRot, p9, p10, p11, p12, flag, p14);
		public static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(int ped, string moveNetworkDefName, Any* taskData, Vector3 vec, Vector3 rotation, int p9, float p10, int p11, int p12, int flag, int p14) => Function.Call(0x7B6A04F98BBAFB2C, ped, moveNetworkDefName, taskData, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, p9, p10, p11, p12, flag, p14);
		public static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS_ATTACHED(int ped, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14, Any p15, Any p16, Any p17) => Function.Call(0xF92171093BCABED4, ped, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17);
		public static bool IS_TASK_MOVE_NETWORK_ACTIVE(int ped) => Function.Call<bool>(0x921CE12C489C4C41, ped);
		/// <summary>
		/// Returns hash of the underlying move network def, see move_networks.xml
		/// https://alloc8or.re/rdr3/doc/misc/move_networks.txt
		/// </summary>
		public static uint _GET_TASK_MOVE_NETWORK_ID(int ped) => Function.Call<uint>(0xCACC2F9D994504B7, ped);
		public static bool IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(int ped) => Function.Call<bool>(0x30ED88D5E0C56A37, ped);
		public static void REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(int ped, string name) => Function.Call(0xD01015C7316AE176, ped, name);
		public static string GET_TASK_MOVE_NETWORK_STATE(int ped) => Function.Call<string>(0x717E4D1F2048376D, ped);
		public static Any _0xE9A6400D1A0E7A55(Any p0) => Function.Call<Any>(0xE9A6400D1A0E7A55, p0);
		public static void _0x615DC4A82E90BB48(Any p0, Any p1, Any p2) => Function.Call(0x615DC4A82E90BB48, p0, p1, p2);
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(int ped, string signalName, float value) => Function.Call(0xD5BB4025AE449A4E, ped, signalName, value);
		public static void _0x099D4A855D53B03B(Any p0, Any p1, Any p2) => Function.Call(0x099D4A855D53B03B, p0, p1, p2);
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(int ped, string signalName, bool value) => Function.Call(0xB0A6CFD2C69C1088, ped, signalName, value);
		public static void _SET_TASK_MOVE_NETWORK_SIGNAL_VECTOR(int ped, string signalName, float x, float y, float z) => Function.Call(0x4662BFE01938D98D, ped, signalName, x, y, z);
		public static void _SET_TASK_MOVE_NETWORK_SIGNAL_VECTOR(int ped, string signalName, Vector3 vec) => Function.Call(0x4662BFE01938D98D, ped, signalName, vec.X, vec.Y, vec.Z);
		public static float _GET_TASK_MOVE_NETWORK_PHASE_FLOAT(int ped, string phaseName) => Function.Call<float>(0x844CEEE428EA35B0, ped, phaseName);
		public static bool GET_TASK_MOVE_NETWORK_EVENT(int ped, string eventName) => Function.Call<bool>(0xB4F47213DF45A64C, ped, eventName);
		public static void _0x9585FF23C4B8EDE0(Any p0, Any p1) => Function.Call(0x9585FF23C4B8EDE0, p0, p1);
		public static void _0xEAF87DA2BE78A15B(Any p0, Any p1) => Function.Call(0xEAF87DA2BE78A15B, p0, p1);
		public static void _0x3BBEECC5B8F35318(Any p0, Any p1) => Function.Call(0x3BBEECC5B8F35318, p0, p1);
		public static bool IS_MOVE_BLEND_RATIO_STILL(int ped) => Function.Call<bool>(0x349CE7B56DAFD95C, ped);
		public static bool IS_MOVE_BLEND_RATIO_WALKING(int ped) => Function.Call<bool>(0xF133BBBE91E1691F, ped);
		public static bool IS_MOVE_BLEND_RATIO_RUNNING(int ped) => Function.Call<bool>(0xD4D8636C0199A939, ped);
		public static bool IS_MOVE_BLEND_RATIO_SPRINTING(int ped) => Function.Call<bool>(0x24A2AD74FA9814E2, ped);
		public static bool IS_PED_STILL(int ped) => Function.Call<bool>(0xAC29253EEF8F0180, ped);
		public static bool IS_PED_WALKING(int ped) => Function.Call<bool>(0xDE4C184B2B9B071A, ped);
		public static bool IS_PED_RUNNING(int ped) => Function.Call<bool>(0xC5286FFC176F28A2, ped);
		public static bool IS_PED_SPRINTING(int ped) => Function.Call<bool>(0x57E457CD2C0FC168, ped);
		public static bool IS_PED_IN_HIT_REACT(int ped) => Function.Call<bool>(0xF330A5C062B29BED, ped);
		public static void TASK_ARREST_PED(int ped, int target) => Function.Call(0xF3B9A78A178572B1, ped, target);
		/// <summary>
		/// This function is hard-coded to always return false.
		/// </summary>
		public static bool IS_PED_BEING_ARRESTED(int ped) => Function.Call<bool>(0x90A09F3A45FED688, ped);
		public static bool _IS_PED_ARRESTING_ANY_PED(int ped) => Function.Call<bool>(0xA9CC7856D52DBD25, ped);
		public static void _CUFF_PED(int ped) => Function.Call(0x7981037A96E7D174, ped);
		public static void UNCUFF_PED(int ped) => Function.Call(0x67406F2C8F87FC4F, ped);
		public static bool IS_PED_CUFFED(int ped) => Function.Call<bool>(0x74E559B3BC910685, ped);
		public static bool _IS_PED_DUELLING(int ped) => Function.Call<bool>(0xC8B29D18022EA2B7, ped);
		/// <summary>
		/// Params: p4 either 0.2f, 0.25f, 0.31f, 0.4f
		/// </summary>
		public static void TASK_DUEL(int ped, Any p1, float p2, int entity, float p4, int p5, float vPosOpponentX, float vPosOpponentY, float vPosOpponentZ, float fOpponentHead, int p10) => Function.Call(0x5D5B0D5BC3626E5A, ped, p1, p2, entity, p4, p5, vPosOpponentX, vPosOpponentY, vPosOpponentZ, fOpponentHead, p10);
		public static Any _0x908BB14BCE85C80E(Any p0) => Function.Call<Any>(0x908BB14BCE85C80E, p0);
		public static Any _0x1F7A9A9C38C13A56(Any p0) => Function.Call<Any>(0x1F7A9A9C38C13A56, p0);
		public static Any _0x3FEB770D8ED9047A(Any p0) => Function.Call<Any>(0x3FEB770D8ED9047A, p0);
		public static Any _0x30146C25686B7836(Any p0, Any p1) => Function.Call<Any>(0x30146C25686B7836, p0, p1);
		public static Any _0x59AE5CA4FFB4E378(Any p0, Any p1) => Function.Call<Any>(0x59AE5CA4FFB4E378, p0, p1);
		public static void _0x748D5E0D2A1A4C61(Any p0, Any p1, Any p2) => Function.Call(0x748D5E0D2A1A4C61, p0, p1, p2);
		public static void END_DUEL(int ped, bool p1, float p2) => Function.Call(0xEED08A3A98B847E2, ped, p1, p2);
		public static void _0x651F0530083C0E5A(Any p0, Any p1) => Function.Call(0x651F0530083C0E5A, p0, p1);
		/// <summary>
		/// carriableSlot:
		///  7 > Back of a horse
		///  6 > Right side of a horse
		///  5 > Left side of a horse
		/// flags:
		///  512: enables the prompt being the name of the item when using a generic item
		/// </summary>
		public static void TASK_CARRIABLE(int entity, uint carryConfig, int carrier, int carriableSlot, int flags) => Function.Call(0xF0B4F759F35CC7F5, entity, carryConfig, carrier, carriableSlot, flags);
		public static void _0x9EBD34958AB6F824(Any p0) => Function.Call(0x9EBD34958AB6F824, p0);
		public static bool GET_IS_CARRIABLE_ENTITY(int entity) => Function.Call<bool>(0x0CCFE72B43C9CF96, entity);
		public static Any _0x10ADFDF07B7DFFBA(Any p0, Any p1, Any p2) => Function.Call<Any>(0x10ADFDF07B7DFFBA, p0, p1, p2);
		public static void TASK_PLACE_CARRIED_ENTITY_AT_COORD(int ped, int entity, float x, float y, float z, float p5, int flags) => Function.Call(0xC7F0B43DCDC57E3D, ped, entity, x, y, z, p5, flags);
		public static void TASK_PLACE_CARRIED_ENTITY_AT_COORD(int ped, int entity, Vector3 vec, float p5, int flags) => Function.Call(0xC7F0B43DCDC57E3D, ped, entity, vec.X, vec.Y, vec.Z, p5, flags);
		public static void TASK_PLACE_CARRIED_ENTITY_ON_MOUNT(int ped, int entity, int mount, float p3) => Function.Call(0x6D3D87C57B3D52C7, ped, entity, mount, p3);
		public static void TASK_DUMP_CARRIABLE_FROM_PARENT(int ped, int ped2, int entity) => Function.Call(0x17CA98707B15926A, ped, ped2, entity);
		public static void _DETACH_CARRIABLE_PED(int ped) => Function.Call(0x36D188AECB26094B, ped);
		public static void _0xE2CF104ADD49D4BF(Any p0) => Function.Call(0xE2CF104ADD49D4BF, p0);
		public static void TASK_PICKUP_CARRIABLE_ENTITY(int ped, int entity) => Function.Call(0x502EC17B1BED4BFA, ped, entity);
		public static void TASK_HOGTIE_TARGET_PED(int ped, int targetPed) => Function.Call(0x27829AFD3E03AC1A, ped, targetPed);
		public static void _TASK_CUT_FREE_HOGTIED_TARGET_PED(int ped, int targetPed) => Function.Call(0x81D16C4FF3A77ADF, ped, targetPed);
		public static void _TASK_CUT_FREE_HOGTIED_TARGET_PED_2(int ped, int targetPed, float p2) => Function.Call(0x525421A507216084, ped, targetPed, p2);
		/// <summary>
		/// Sets the time it takes for a hogtied ped to escape
		/// -1.0f for ped to never escape
		/// </summary>
		public static void _SET_HOGTIE_ESCAPE_TIMER(int ped, float time) => Function.Call(0xAB591AE6B48B913E, ped, time);
		public static float _GET_HOGTIE_ESCAPE_TIMER(int ped) => Function.Call<float>(0x4687E69D258BBE41, ped);
		public static Any _0x03D741CB4052E26C(Any p0) => Function.Call<Any>(0x03D741CB4052E26C, p0);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/objects/composites
		/// </summary>
		public static bool _REQUEST_HERB_COMPOSITE_ASSET(uint asset) => Function.Call<bool>(0x73F0D0327BFA0812, asset);
		/// <summary>
		/// Returns true when requested asset is loaded
		/// </summary>
		public static bool ARE_COMPOSITE_LOOTABLE_ENTITY_DEF_ASSETS_LOADED(uint asset) => Function.Call<bool>(0x5E5D96BE25E9DF68, asset);
		/// <summary>
		/// groundSetting: 0: spawn on ground, 2 (1?): do not spawn on ground
		/// p7: -1 in R* Scripts
		/// Returns compositeId
		/// </summary>
		public static int _CREATE_HERB_COMPOSITES(uint asset, float x, float y, float z, float heading, int groundSetting, Any* p6, int p7) => Function.Call<int>(0x5B4BBE80AD5972DC, asset, x, y, z, heading, groundSetting, p6, p7);
		public static int _CREATE_HERB_COMPOSITES(uint asset, Vector3 vec, float heading, int groundSetting, Any* p6, int p7) => Function.Call<int>(0x5B4BBE80AD5972DC, asset, vec.X, vec.Y, vec.Z, heading, groundSetting, p6, p7);
		/// <summary>
		/// Params: p1 is always false except in script nb_egg_protector
		/// </summary>
		public static void _DELETE_PATCH_OBJECTS_FROM_HERB_COMPOSITES(int compositeId, bool p1) => Function.Call(0x5758B1EE0C3FD4AC, compositeId, p1);
		/// <summary>
		/// Flowers, Stalks or whatever the composite has
		/// </summary>
		public static int _GET_HERB_COMPOSITE_NUM_ENTITIES(int compositeId, Any* outEntities) => Function.Call<int>(0x96C6ED22FB742C3E, compositeId, outEntities);
		public static Any _0xDF56A2B50C04DEA4(Any p0, Any p1) => Function.Call<Any>(0xDF56A2B50C04DEA4, p0, p1);
		public static void TASK_LOOT_ENTITY(int ped, int entity) => Function.Call(0x48FAE038401A2888, ped, entity);
		public static void TASK_BREAK_VEHICLE_DOOR_LOCK(int ped, int vehicle) => Function.Call(0xBB28D1BC9EA8A6A5, ped, vehicle);
		public static void TASK_LOOT_NEAREST_ENTITY(int ped, float x, float y, float z, int p4, float p5) => Function.Call(0xCF1501CBC4059412, ped, x, y, z, p4, p5);
		public static void TASK_LOOT_NEAREST_ENTITY(int ped, Vector3 vec, int p4, float p5) => Function.Call(0xCF1501CBC4059412, ped, vec.X, vec.Y, vec.Z, p4, p5);
		public static void TASK_LASSO_PED(int ped, int targetPed) => Function.Call(0xC716EB2BD16370A3, ped, targetPed);
		public static void TASK_HOGTIEABLE(int ped) => Function.Call(0x6AFD8FE0D723328F, ped);
		/// <summary>
		/// getupSetHash: see nm_blend_out_sets.meta
		/// </summary>
		public static void UNHOGTIE_PED(int ped, int flags, uint getupSetHash, string p3, string p4, float p5) => Function.Call(0x79559BAD83CCD038, ped, flags, getupSetHash, p3, p4, p5);
		public static void _0x722D6A49200174FE(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x722D6A49200174FE, p0, p1, p2, p3, p4);
		public static void _MAKE_OBJECT_CARRIABLE(int _object) => Function.Call(0x78B4567E18B54480, _object);
		public static void MAKE_OBJECT_NOT_CARRIABLE(int _object) => Function.Call(0x67BFCED22909834D, _object);
		public static void _0x8E1DDE26D270CC5E(Any p0, Any p1) => Function.Call(0x8E1DDE26D270CC5E, p0, p1);
		public static void _0xA6A76D666A281F2D(Any p0, uint item) => Function.Call(0xA6A76D666A281F2D, p0, item);
		public static void _0xA21AA2F0C2180125(Any p0, Any p1) => Function.Call(0xA21AA2F0C2180125, p0, p1);
		public static uint _FIND_MODEL_FOR_ITEM(uint item) => Function.Call<uint>(0xE47DD64B9F02677D, item);
		public static void _0xFF745B0346E19E2C(Any p0) => Function.Call(0xFF745B0346E19E2C, p0);
		public static Any _0xB8F52A3F84A7CC59(Any p0) => Function.Call<Any>(0xB8F52A3F84A7CC59, p0);
		public static void _0x6AFDA2264925BD11(Any p0) => Function.Call(0x6AFDA2264925BD11, p0);
		public static void _0x816A3ACD265E2297(Any p0, Any p1) => Function.Call(0x816A3ACD265E2297, p0, p1);
		public static void _0x4E806A395D43A458(Any p0) => Function.Call(0x4E806A395D43A458, p0);
		public static void SET_TEAM_CARRIABLE_ENTITY(Any p0, Any p1, Any p2) => Function.Call(0x545BF19F86E80F11, p0, p1, p2);
		public static bool IS_TEAM_CARRIABLE_ENTITY(Any p0, Any p1) => Function.Call<bool>(0x559A6F8C5133B4EE, p0, p1);
		/// <summary>
		/// Returns true while a hat is being picked up
		/// _IS_A* - _IS_D*
		/// </summary>
		public static bool _IS_HAT_BEING_PICKED_UP(int hatObject) => Function.Call<bool>(0x11CD066F54DA0133, hatObject);
		public static void _0x9ADDBB9242179D56(int _object, int ped) => Function.Call(0x9ADDBB9242179D56, _object, ped);
		/// <summary>
		/// Returns true while a hat is being picked up. Similar to 0x11CD066F54DA0133
		/// _IS_A* - _IS_D*
		/// </summary>
		public static bool _IS_HAT_BEING_PICKED_UP_2(int hatObject) => Function.Call<bool>(0x4ECCC2815CA79AE2, hatObject);
		/// <summary>
		/// _A*
		/// </summary>
		public static void _TASK_EQUIP_HAT(int hatObject, int ped) => Function.Call(0xAA0AF6025160243A, hatObject, ped);
		public static Any _0x7CB99FADDE73CD1B(Any p0) => Function.Call<Any>(0x7CB99FADDE73CD1B, p0);
		public static void _0xF3C3503276F4A034(int entity, Any p1) => Function.Call(0xF3C3503276F4A034, entity, p1);
		public static Any _0x6DAC799857EF3F11(Any p0, Any p1) => Function.Call<Any>(0x6DAC799857EF3F11, p0, p1);
		public static Any _0x920684BE432875B1(Any p0) => Function.Call<Any>(0x920684BE432875B1, p0);
		/// <summary>
		/// clipset: CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@GROUND, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@SHOULDER, CLIPSET@MECH_HOGTIE@HUMAN@BREAKOUT_MG@MOUNT
		/// clipset can also be 0
		/// </summary>
		public static bool SET_ENHANCED_BREAK_FREE(int ped, bool p1, string clipset) => Function.Call<bool>(0x1BF9D36A5EAFFBAE, ped, p1, clipset);
		public static Any _0x6AFD84AEAA3EA538(Any p0) => Function.Call<Any>(0x6AFD84AEAA3EA538, p0);
		public static void _0xBD1C3C0F271C39D3(Any p0, Any p1) => Function.Call(0xBD1C3C0F271C39D3, p0, p1);
		public static void _0x1ECF56C040FD839C(Any p0, Any p1) => Function.Call(0x1ECF56C040FD839C, p0, p1);
		public static void _0xF40A109B4B79A848(Any p0, Any p1, Any p2) => Function.Call(0xF40A109B4B79A848, p0, p1, p2);
		public static bool _IS_PED_LEADING_HORSE(int ped) => Function.Call<bool>(0xEFC4303DDC6E60D3, ped);
		public static Any _0xAC5045AB7F1A34FD(Any p0) => Function.Call<Any>(0xAC5045AB7F1A34FD, p0);
		public static int _GET_LED_HORSE_FROM_PED(int ped) => Function.Call<int>(0xED1F514AF4732258, ped);
		public static void TASK_TURN_TO_FACE_CLOSEST_PED(int ped, float p1, float p2, int p3) => Function.Call(0x84179419DBDD36F2, ped, p1, p2, p3);
		public static bool TASK_CONFRONT(int ped, int targetPed, int p2) => Function.Call<bool>(0x3A2A2071DF5CC569, ped, targetPed, p2);
		public static bool TASK_POLICE(int ped, bool p1) => Function.Call<bool>(0x87BE56724650408E, ped, p1);
		/// <summary>
		/// Params: p2: AR_TAKEDOWN_FRONT, AR_EXECUTION_FRONT, 0 in R* Scripts
		/// </summary>
		public static bool TASK_MELEE(int ped, int targetPed, uint p2, Any p3, Any p4, float p5, Any p6, float p7) => Function.Call<bool>(0x482C99D0B38D1B0A, ped, targetPed, p2, p3, p4, p5, p6, p7);
		/// <summary>
		/// grappleStyle: AR_GRAPPLE_MOUNT_STANDING_FROM_FRONT, AR_GRAPPLE_MOUNT_STANDING_FROM_RIGHT, AR_GRAPPLE_MOUNT_STANDING_FROM_BACK, AR_GRAPPLE_MOUNT_STANDING_FROM_LEFT, AR_GRAPPLE_MOUNT_FROM_FRONT, AR_WOLF_EXECUTION_ENTER_FROM_BACK, AR_GRAPPLE_DRAG_FRONT_ON_ASS, AR_GRAPPLE_FRONT_FROM_LEFT_FAR, AR_BEAR_CHALLENGE_FRONT, AR_GRAPPLE_FRONT_FROM_FRONT, AR_GRAPPLE_MOUNT_FACEUP_FROM_FRONT
		/// </summary>
		public static bool TASK_GRAPPLE(int ped, int targetPed, uint grappleStyle, int p3, float p4, int p5, int p6) => Function.Call<bool>(0x779A2FFACEFAEA7B, ped, targetPed, grappleStyle, p3, p4, p5, p6);
		public static bool _TASK_INTIMIDATED(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<bool>(0x648B75D44930D6BD, p0, p1, p2, p3, p4);
		public static bool _TASK_INTIMIDATED_2(int victim, int attacker, int p2, bool p3, bool p4, bool everyFrame, bool p6, bool p7, int flag) => Function.Call<bool>(0x933ACC1A1771A288, victim, attacker, p2, p3, p4, everyFrame, p6, p7, flag);
		public static void _0x2948235DB2058E99(Any p0, Any p1) => Function.Call(0x2948235DB2058E99, p0, p1);
		public static void _0xB2F47A1AFDFCC595(Any p0, Any p1) => Function.Call(0xB2F47A1AFDFCC595, p0, p1);
		/// <summary>
		/// _SET_PED_*
		/// </summary>
		public static void _0x41D1331AFAD5A091(int ped, int p1, Any p2) => Function.Call(0x41D1331AFAD5A091, ped, p1, p2);
		public static void _0x801BD27403F3CBA0(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x801BD27403F3CBA0, p0, p1, p2, p3);
		public static void _0x0FE797DD9F70DFA6(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x0FE797DD9F70DFA6, p0, p1, p2, p3);
		public static void TASK_PERSISTENT_CHARACTER(int ped) => Function.Call(0x4391700CBD89C3D8, ped);
		public static void _0xFC7F71CF49F70B6B(Any p0) => Function.Call(0xFC7F71CF49F70B6B, p0);
		public static void _0xE01F55B2896F6B37(Any p0, Any p1) => Function.Call(0xE01F55B2896F6B37, p0, p1);
		public static Any _0xE62754D09354F6CF(Any p0) => Function.Call<Any>(0xE62754D09354F6CF, p0);
		public static void _0x4BA972D0E5AD8122(Any p0, Any p1) => Function.Call(0x4BA972D0E5AD8122, p0, p1);
		/// <summary>
		/// Fishing Research: https://pastebin.com/NmK5ZLVs
		/// Only used in R* Scripts fishing_core and av_fishing_river
		/// </summary>
		public static bool _GET_TASK_FISHING(int ped, Any* p1) => Function.Call<bool>(0xF3735ACD11ACD500, ped, p1);
		/// <summary>
		/// Only used in R* Scripts fishing_core and av_fishing_river
		/// </summary>
		public static bool _SET_TASK_FISHING(int ped, Any* p1) => Function.Call<bool>(0xF3735ACD11ACD501, ped, p1);
		/// <summary>
		/// Baits: see 0x9B0C7FA063E67629
		/// </summary>
		public static void TASK_SWAP_FISHING_BAIT(int ped, string bait, bool withoutBuoy) => Function.Call(0x2C28AC30A72722DA, ped, bait, withoutBuoy);
		/// <summary>
		/// Baits: p_fishHook02x, p_baitBread01x, p_baitCorn01x, p_baitCheese01x, p_baitWorm01x, p_baitCricket01x, p_crawdad01x, p_finisheDragonfly01x, p_finisdFishlure01x, p_finishdCrawd01x, p_finisheDragonflyLegendary01x, p_finisdFishlureLegendary01x, p_finishdCrawdLegendary01x, p_lgoc_spinner_v4
		/// </summary>
		public static void _SET_FISHING_BAIT(int ped, string bait, bool withoutBuoy, bool instantly) => Function.Call(0x9B0C7FA063E67629, ped, bait, withoutBuoy, instantly);
		public static void _0x1F298C7BD30D1240(int ped) => Function.Call(0x1F298C7BD30D1240, ped);
		public static void _PED_FISHINGROD_HOOK_ENTITY(int ped, int entity) => Function.Call(0x1A52076D26E09004, ped, entity);
		/// <summary>
		/// Used with 'P_BODYPARTARMFLOAT02X' model in fishing_core.c
		/// </summary>
		public static void _PED_FISHINGROD_HOOK_OBJECT(int ped, int _object) => Function.Call(0xCE71C2F9BAA3F975, ped, _object);
		public static bool _0xB520DBDA7FCF573F(int ped) => Function.Call<bool>(0xB520DBDA7FCF573F, ped);
		public static void _0x31BB338F64D5C861(int ped, bool p1) => Function.Call(0x31BB338F64D5C861, ped, p1);
		public static void _0x517D01BF27B682D1(int ped, int entity, float p2, float p3, float p4, float p5, int p6) => Function.Call(0x517D01BF27B682D1, ped, entity, p2, p3, p4, p5, p6);
		public static void _0x88FD60D846D9CD63(int ped) => Function.Call(0x88FD60D846D9CD63, ped);
		public static void _0x9050DF2C53801208(int ped, float p1) => Function.Call(0x9050DF2C53801208, ped, p1);
		public static void _0x22CDBF317C40A122(int ped) => Function.Call(0x22CDBF317C40A122, ped);
		public static Any _0x5952DFA38FA529FE() => Function.Call<Any>(0x5952DFA38FA529FE);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/animations/kit_emotes_list.lua
		/// emote: https://alloc8or.re/rdr3/doc/enums/eEmote.txt
		/// 
		/// enum eEmoteType
		/// {
		/// 	EMOTE_TYPE_INVALID = -1,
		/// 	EMOTE_TYPE_REACT,
		/// 	EMOTE_TYPE_ACTION,
		/// 	EMOTE_TYPE_TAUNT,
		/// 	EMOTE_TYPE_GREET,
		/// 	EMOTE_TYPE_TWIRL_GUN,
		/// 	EMOTE_TYPE_DANCE_FLOOR
		/// };
		/// 
		/// enum eEmotePlaybackMode
		/// {
		/// 	EMOTE_PM_INVALID = -1,
		/// 	EMOTE_PM_UPPERBODY,
		/// 	EMOTE_PM_UPPERBODY_LOOP,
		/// 	EMOTE_PM_FULLBODY,
		/// };
		/// </summary>
		public static void TASK_PLAY_EMOTE_WITH_HASH(int ped, int emoteType, int playbackMode, uint emote, bool isSecondaryTask, bool canBreakOut, bool disableEarlyOutAnimTag, bool ignoreInvalidMainTask, bool destroyProps) => Function.Call(0xB31A277C1AC7B7FF, ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
		/// <summary>
		/// Similar to 0xB31A277C1AC7B7FF but checks if the ped's inventory contains the specified emote kit.
		/// </summary>
		public static void _TASK_PLAY_EMOTE(int ped, int emoteType, int playbackMode, uint emote, bool isSecondaryTask, bool canBreakOut, bool disableEarlyOutAnimTag, bool ignoreInvalidMainTask, bool destroyProps) => Function.Call(0x884E3436CC1F41DD, ped, emoteType, playbackMode, emote, isSecondaryTask, canBreakOut, disableEarlyOutAnimTag, ignoreInvalidMainTask, destroyProps);
		public static void _0x6A1AF481407BF6E9(Any p0) => Function.Call(0x6A1AF481407BF6E9, p0);
		public static void _TASK_EMOTE_OUTRO(int ped) => Function.Call(0xBDFEEB7600BCD938, ped);
		public static void _0xEC516FE805D2CB2D(Any p0) => Function.Call(0xEC516FE805D2CB2D, p0);
		public static void _0x59AEA4DC640814B9(Any p0, Any p1) => Function.Call(0x59AEA4DC640814B9, p0, p1);
		public static Any _0x11C7CE1AE38911B5(Any p0) => Function.Call<Any>(0x11C7CE1AE38911B5, p0);
		public static Any _0xD0ABC4EA3B5E21A0(Any p0, Any p1) => Function.Call<Any>(0xD0ABC4EA3B5E21A0, p0, p1);
		public static bool IS_EMOTE_TASK_RUNNING(int ped, Any p1) => Function.Call<bool>(0xCF9B71C0AF824036, ped, p1);
	}

	public unsafe static class TELEMETRY
	{
		public static void _TELEMETRY_SET_IS_FLOW(bool toggle) => Function.Call(0x9BEE018A63FFFAD9, toggle);
		public static void _0xEC0BD8736DCAF841(bool toggle) => Function.Call(0xEC0BD8736DCAF841, toggle);
		public static void _TELEMETRY_MISSION_STARTED(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x15B0CC1B36F1DE29, p0, p1, p2, p3);
		public static void _TELEMETRY_MISSION_OVER(Any p0, Any p1) => Function.Call(0xD894437E12C17AEC, p0, p1);
		public static void _TELEMETRY_MISSION_CHECKPOINT(Any p0, Any p1, Any p2) => Function.Call(0x8EC7890D446BD9C1, p0, p1, p2);
		public static void _TELEMETRY_PLAYER_SPAWNED(int ped) => Function.Call(0x5DA4718DF897EB25, ped);
		/// <summary>
		/// Works in MP only.
		/// </summary>
		public static bool _TELEMETRY_CREATE_UUID(Any* uuid) => Function.Call<bool>(0xE692D336F8A2A97F, uuid);
		public static void _TELEMETRY_MATCH_QUEUE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x4C08D2B6D8BE17E4, p0, p1, p2, p3, p4, p5, p6);
		public static void _TELEMETRY_MATCH_STARTED(Any* p0, Any* p1) => Function.Call(0xF620F47B4F4A78C4, p0, p1);
		public static void _TELEMETRY_MATCH_OVER(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xA2058154357726BB, p0, p1, p2, p3, p4);
		public static void _TELEMETRY_MATCH_VOTE(Any* p0, Any* p1) => Function.Call(0xEF3C68F56BAD7B69, p0, p1);
		public static void _TELEMETRY_LOBBY_PROGRESSION(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xECD67E9FA677CCCF, p0, p1, p2, p3);
		public static void _TELEMETRY_GAME_PROGRESS(Any p0, Any p1) => Function.Call(0x51EC204A6E5B5A1A, p0, p1);
		public static void _TELEMETRY_HERB_PICKED(uint herbType) => Function.Call(0xAE693EC3A178F6C2, herbType);
		public static void _TELEMETRY_ANIMAL_SKINNED(uint type, Any* items) => Function.Call(0x7581972ADF5D699A, type, items);
		public static void _TELEMETRY_CAMP_CREATED(Any p0) => Function.Call(0x565EAA726B2CE3B7, p0);
		public static void _TELEMETRY_CAMP_SUPPLIES(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x217F47761376E16E, p0, p1, p2, p3, p4);
		public static void _TELEMETRY_REGION(uint regionHash) => Function.Call(0xCD6F8A0335D821F9, regionHash);
		public static void _TELEMETRY_SHOP_ENTRY(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x775B2ED944E44973, p0, p1, p2, p3, p4, p5);
		public static void _TELEMETRY_SHOP_EXIT(Any p0, Any p1) => Function.Call(0xF78E669FDC202E73, p0, p1);
		public static void _0xCA9E42F437625A85(int p0, uint p1, uint p2) => Function.Call(0xCA9E42F437625A85, p0, p1, p2);
		public static void _TELEMETRY_SHOP_PURCHASE(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x2A374E6F0075EE81, p0, p1, p2, p3, p4);
		public static void _TELEMETRY_SHOP_SELL(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x9BD8A9D0A774A6F8, p0, p1, p2, p3, p4);
		public static void _TELEMETRY_GOLD_STORE(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x536B6025E94AC48F, p0, p1, p2, p3);
		public static void _0x32D5898C4898CD95() => Function.Call(0x32D5898C4898CD95);
		public static void _TELEMETRY_SHOP_CUTSCENE(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xB0B19B56697836F5, p0, p1, p2, p3);
		public static void _TELEMETRY_AMBIENT_VIGNETTE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x3145044F3990D321, p0, p1, p2, p3, p4, p5, p6);
		public static void _TELEMETRY_DISCOVERABLE(Any p0) => Function.Call(0xF5EAD898EF387E73, p0);
		public static void _TELEMETRY_HONOR(Any p0, Any p1) => Function.Call(0xE6B763C7F4902201, p0, p1);
		public static void _TELEMETRY_CRAFT_ITEM(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x78C2E029DB205A3A, p0, p1, p2, p3);
		public static void TELEMETRY_CAMP_DONATE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0xDF516E598D966D06, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void _TELEMETRY_MOONSHINE_BREW(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0xB5013EFBB5516867, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void _TELEMETRY_COLLECT(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xD6CB05DDAEE43AFD, p0, p1, p2, p3, p4, p5, p6);
		public static void _TELEMETRY_MISSION_ILO_OPTION(Any p0, Any p1) => Function.Call(0xEA323F5E1A4DA2F1, p0, p1);
		public static void _0x6571E4327390EC0B(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x6571E4327390EC0B, p0, p1, p2, p3, p4, p5);
		public static void _TELEMETRY_GANG_SHARES(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xE6DC9B21AC7A8729, p0, p1, p2, p3);
		public static void _TELEMETRY_FAST_TRAVEL(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x7CEF4AC79F7E7FAD, p0, p1, p2, p3, p4);
		public static void _TELEMETRY_NET_CAMP(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xA72773C3134F9A57, p0, p1, p2, p3, p4, p5, p6);
		public static void _0x7E002A36AEFCFB55() => Function.Call(0x7E002A36AEFCFB55);
		public static void _TELEMETRY_SLEEP(Any p0) => Function.Call(0xF9F14080D80937BD, p0);
		public static void _TELEMETRY_PARLEY_FEUD(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xF37A2149BC9A8A27, p0, p1, p2, p3, p4);
		public static void TELEMETRY_PLAYER_MENU_PIN(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x076C5843371EB889, p0, p1, p2, p3);
		public static void _TELEMETRY_NOTORIETY(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xE26970A7AE0F28E9, p0, p1, p2, p3);
		public static void _TELEMETRY_DEFENSIVE(Any p0, Any p1, Any p2) => Function.Call(0xE57529D23541D2DD, p0, p1, p2);
		public static void _TELEMETRY_LOOT(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xCF63EF77B0DF0397, p0, p1, p2, p3);
		public static void _0x2C24AF8EEEEF8A55(Any p0, Any p1, Any p2) => Function.Call(0x2C24AF8EEEEF8A55, p0, p1, p2);
		public static void _TELEMETRY_FAVOR_EMOTE(Any p0, Any p1, Any p2) => Function.Call(0x16B23D4F7A1F50D9, p0, p1, p2);
		public static void _TELEMETRY_POKER_OVER(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x8127C5AA05C5A210, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static bool _0x80A02D9F948A8BCA(Any* requestId, Any* telemetryId) => Function.Call<bool>(0x80A02D9F948A8BCA, requestId, telemetryId);
		public static bool _0xF184B3ECE36219CF(Any* transactionId, Any* telemetryId) => Function.Call<bool>(0xF184B3ECE36219CF, transactionId, telemetryId);
		public static void _TELEMETRY_ROLE_BOUNTY(Any p0) => Function.Call(0xAB43D1C80B5E9500, p0);
		public static void _TELEMETRY_BOUNTY_TARGET(Any* data) => Function.Call(0x52FA31DB8F3AD25D, data);
		public static void _TELEMETRY_PRISON(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xB204BF9F30298D77, p0, p1, p2, p3, p4, p5, p6);
		public static void _TELEMETRY_ROLE_TRADER(Any p0, Any p1) => Function.Call(0x476038B5A0734C10, p0, p1);
		public static void _TELEMETRY_ROLE_MOONSHINER(Any p0, Any p1) => Function.Call(0x99D40C5D74BC88E9, p0, p1);
		public static void _TELEMETRY_ROLE_COLLECTOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x4AC38DFD286DAD14, p0, p1, p2, p3, p4, p5, p6);
		public static void _TELEMETRY_PHOTO(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xED22BE4C5A399E63, p0, p1, p2, p3);
		public static void _TELEMETRY_START_GUN_LOCKER_INTERACTION() => Function.Call(0xF0D54E0651DD7E07);
		public static void _TELEMETRY_GUN_LOCKER() => Function.Call(0x415FE28ED44BFF14);
		public static void _TELEMETRY_GUN_LOCKER_WEAPON_STORED(uint p0) => Function.Call(0xC3ADF4880784FA9C, p0);
		public static void _TELEMETRY_GUN_LOCKER_WEAPON_REMOVED(uint p0) => Function.Call(0x317D9C9560529CC2, p0);
		public static void _TELEMETRY_ROLE_TOKEN_TRANSACTION(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x32C2939564D74BFF, p0, p1, p2, p3, p4, p5);
		public static void _TELEMETRY_COUPON(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0x621D719C4836292B, p0, p1, p2, p3, p4, p5);
		public static void TELEMETRY_PERSONAL_VEHICLE_MOUNT(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xFF9052BC7A3B7D33, p0, p1, p2, p3);
		public static void _TELEMETRY_PERSONAL_VEHICLE_WAGON(Any p0, Any p1, Any p2) => Function.Call(0xE67AF24C5A3B6058, p0, p1, p2);
		public static void _TELEMETRY_MENU_NAVIGATION(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x3255D4D2082C6339, p0, p1, p2, p3);
		public static void _TELEMETRY_HUB_NAVIGATION(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x25CC50EC1A6F3A96, p0, p1, p2, p3);
		public static void _0x37AA282163B0D2C4(Any p0, Any p1) => Function.Call(0x37AA282163B0D2C4, p0, p1);
		public static void _TELEMETRY_SAMPLE(Any p0, Any p1, Any p2, Any p3, bool bTranq) => Function.Call(0x61559675D23D8BD1, p0, p1, p2, p3, bTranq);
		public static void _TELEMETRY_ROLE_NATURALIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) => Function.Call(0x6FB9EA308F302922, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _TELEMETRY_PHOTO_CAM(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) => Function.Call(0x0777D65EE8A17517, p0, p1, p2, p3, p4, p5, p6, p7, p8);
		public static void _TELEMETRY_INTRO_SKIP(Any p0, Any p1, Any p2) => Function.Call(0x1B554723799245F4, p0, p1, p2);
		public static void ANALYTICS_PLAYTIME_FREEMODE_START() => Function.Call(0xE9F24081D84931B8);
		public static void ANALYTICS_PLAYTIME_FREEMODE_END() => Function.Call(0x3180E991D4B8F248);
		public static void _TELEMETRY_CUSTOM(Any* args) => Function.Call(0x40914CCF2A1AB531, args);
		public static void _TELEMETRY_MATCH_NOMINATION(Any* args) => Function.Call(0x330029E121380CEB, args);
		public static void _TELEMETRY_CHAR_CREATOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0x7207AD471BC9278C, p0, p1, p2, p3, p4, p5, p6);
	}

	public unsafe static class TXD
	{
		public static bool DOES_STREAMED_TXD_EXIST(uint txdHash) => Function.Call<bool>(0xBA0163B277C2D2D0, txdHash);
		public static void REQUEST_STREAMED_TXD(uint txdHash, bool p1) => Function.Call(0xDB1BD07FB464584D, txdHash, p1);
		public static bool HAS_STREAMED_TXD_LOADED(uint txdHash) => Function.Call<bool>(0xBE72591D1509FFE4, txdHash);
		public static void SET_STREAMED_TXD_AS_NO_LONGER_NEEDED(uint txdHash) => Function.Call(0x8232F37DF762ACB2, txdHash);
		public static bool DOES_STREAMED_TEXTURE_DICT_EXIST(string textureDict) => Function.Call<bool>(0x7332461FC59EB7EC, textureDict);
		public static void REQUEST_STREAMED_TEXTURE_DICT(string textureDict, bool p1) => Function.Call(0xC1BA29DF5631B0F8, textureDict, p1);
		public static bool HAS_STREAMED_TEXTURE_DICT_LOADED(string textureDict) => Function.Call<bool>(0x54D6900929CCF162, textureDict);
		public static void SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(string textureDict) => Function.Call(0x4ACA10A91F66F1E2, textureDict);
	}

	public unsafe static class UIAPPS
	{
		public static bool IS_UIAPP_ACTIVE_BY_HASH(uint appNameHash) => Function.Call<bool>(0x25B7A0206BDFAC76, appNameHash);
		public static bool IS_ANY_UIAPP_ACTIVE() => Function.Call<bool>(0xAC959AB99AAF3D9F);
		public static bool IS_UIAPP_RUNNING_BY_HASH(uint appNameHash) => Function.Call<bool>(0x4E511D093A86AD49, appNameHash);
		public static bool IS_UIAPP_RUNNING(string appName) => Function.Call<bool>(0xDE4A9B35D028979F, appName);
		public static bool IS_ANY_UIAPP_RUNNING() => Function.Call<bool>(0xDB30BEC7A7A5CBD3);
		public static uint _GET_UIAPP_CURRENT_ACTIVITY_BY_HASH(uint appNameHash) => Function.Call<uint>(0x96FD694FE5BE55DC, appNameHash);
		public static void _CLOSE_UIAPP_BY_HASH(uint appNameHash) => Function.Call(0x2FF10C9C3F92277E, appNameHash);
		public static void _CLOSE_UIAPP_BY_HASH_IMMEDIATE(uint appNameHash) => Function.Call(0x04428420A248A354, appNameHash);
		public static void _CLOSE_UIAPP(string appName) => Function.Call(0x818C6CA9B659E8EC, appName);
		public static void _CLOSE_UIAPP_IMMEDIATE(string appName) => Function.Call(0x3015635426D1B17C, appName);
		public static void _CLOSE_ALL_UIAPPS() => Function.Call(0xAD7B70F7230C5A12);
		public static void _CLOSE_ALL_UIAPPS_IMMEDIATE() => Function.Call(0x12769EEB8DBD7A7B);
		public static int LAUNCH_UIAPP_BY_HASH_WITH_ENTRY(uint appNameHash, uint entryHash) => Function.Call<int>(0xC1BCF31E975B3195, appNameHash, entryHash);
		public static int LAUNCH_UIAPP_BY_HASH(uint appNameHash) => Function.Call<int>(0xC8FC7F4E4CF4F581, appNameHash);
		public static int LAUNCH_UIAPP_WITH_ENTRY(string appName, string entry) => Function.Call<int>(0x7B2027BAC5C8EC89, appName, entry);
		public static bool CAN_LAUNCH_UIAPP_BY_HASH_WITH_ENTRY(uint appNameHash, uint entryHash) => Function.Call<bool>(0x16F47D434B6086BF, appNameHash, entryHash);
		public static bool CAN_LAUNCH_UIAPP_BY_HASH(uint appNameHash) => Function.Call<bool>(0xE555EC27D65EDE80, appNameHash);
		public static bool REQUEST_UIAPP_TRANSITION_BY_HASH(uint appNameHash, uint transitionHash) => Function.Call<bool>(0x7689CD255655BFD7, appNameHash, transitionHash);
		public static bool IS_UIAPP_TRANSITIONING_BY_HASH(uint appNameHash) => Function.Call<bool>(0x42095B886D30DE66, appNameHash);
	}

	public unsafe static class UIDEBUG
	{
		/// <summary>
		/// Note: you must use VAR_STRING
		/// </summary>
		public static void _BG_DISPLAY_TEXT(string text, float x, float y) => Function.Call(0x16794E044C9EFB58, text, x, y);
		public static void _BG_SET_TEXT_SCALE(float scaleX, float scaleY) => Function.Call(0xA1253A3C870B6843, scaleX, scaleY);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/tree/master/useful_info_from_rpfs/colours
		/// </summary>
		public static void _BG_SET_TEXT_COLOR(int red, int green, int blue, int alpha) => Function.Call(0x16FA5CE47F184F1E, red, green, blue, alpha);
	}

	public unsafe static class UIEVENTS
	{
		/// <summary>
		/// Old name: _EVENT_MANAGER_IS_EVENT_PENDING
		/// </summary>
		public static bool EVENTS_UI_IS_PENDING(uint hash) => Function.Call<bool>(0x67ED5A7963F2F722, hash);
		/// <summary>
		/// eventData:
		/// struct UI_SCRIPT_EVENT
		/// {
		/// 	alignas(8) eUIScriptEventType eventType; // https://alloc8or.re/rdr3/doc/enums/eUIScriptEventType.txt
		/// 	alignas(8) int intParam;
		/// 	alignas(8) Hash hashParam;
		/// 	alignas(8) Hash datastoreParam;
		/// };
		/// 
		/// Old name: _EVENT_MANAGER_GET_EVENT
		/// </summary>
		public static bool EVENTS_UI_GET_MESSAGE(uint hash, Any* eventData) => Function.Call<bool>(0xE24E957294241444, hash, eventData);
		/// <summary>
		/// eventData: see EVENTS_UI_GET_MESSAGE
		/// 
		/// Old name: _EVENT_MANAGER_PEEK_EVENT
		/// </summary>
		public static bool EVENTS_UI_PEEK_MESSAGE(uint hash, Any* eventData) => Function.Call<bool>(0x90237103F27F7937, hash, eventData);
		/// <summary>
		/// Old name: _EVENT_MANAGER_POP_EVENT
		/// </summary>
		public static void EVENTS_UI_POP_MESSAGE(uint hash) => Function.Call(0x8E8A2369F48EC839, hash);
	}

	public unsafe static class UIFEED
	{
		/// <summary>
		/// Example : https://pastebin.com/GvdBp8Dh
		/// </summary>
		public static int _UI_FEED_POST_HELP_TEXT(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x049D5C615BD38BAD, p0, p1, p2);
		/// <summary>
		/// Example : https://pastebin.com/h1YzycuR
		/// </summary>
		public static int _UI_FEED_POST_LOCATION_SHARD(Any* duration, Any* data, bool p2, bool p3) => Function.Call<int>(0xD05590C1AB38F068, duration, data, p2, p3);
		/// <summary>
		/// Example : https://pastebin.com/13tuRa63
		/// </summary>
		public static int _UI_FEED_POST_OBJECTIVE(Any* p0, Any* p1, bool p2) => Function.Call<int>(0xCEDBF17EFCC0E4A4, p0, p1, p2);
		/// <summary>
		/// Display text on right of the screen, Example : https://pastebin.com/n1YmNe25
		/// </summary>
		public static int _UI_FEED_POST_FEED_TICKER(Any* p0, Any* p1, bool p2) => Function.Call<int>(0xB2920B9760F0F36B, p0, p1, p2);
		/// <summary>
		/// Example : https://pastebin.com/YZMBkAmW
		/// </summary>
		public static int _UI_FEED_POST_SAMPLE_TOAST(Any* p0, Any* p1, bool p2, bool p3) => Function.Call<int>(0x26E87218390E6729, p0, p1, p2, p3);
		public static int _0xAFF5BE9BA496CE40(Any* p0, Any* p1, bool p2, bool p3, uint collectableCategory) => Function.Call<int>(0xAFF5BE9BA496CE40, p0, p1, p2, p3, collectableCategory);
		public static int _UI_FEED_POST_SAMPLE_TOAST_WITH_APP_LINK(Any* p0, Any* p1, bool p2, bool p3, bool p4) => Function.Call<int>(0x38838A646FB30AAE, p0, p1, p2, p3, p4);
		/// <summary>
		/// Example : https://pastebin.com/kAtEMQTD
		/// </summary>
		public static int _UI_FEED_POST_SAMPLE_NOTIFICATION(Any* p0, Any* p1, int p2, int p3) => Function.Call<int>(0xC927890AA64E9661, p0, p1, p2, p3);
		public static int _UI_FEED_POST_RANKUP_TOAST(Any* p0, Any* p1, int p2, int p3) => Function.Call<int>(0x3F9FDDBA79117C69, p0, p1, p2, p3);
		/// <summary>
		/// Only used in R* SP Scripts
		/// </summary>
		public static int _0x18D6869FBFFEC0F8(Any* p0, Any* p1, bool p2, bool p3) => Function.Call<int>(0x18D6869FBFFEC0F8, p0, p1, p2, p3);
		public static int _UI_FEED_POST_SAMPLE_TOAST_RIGHT(Any* p0, Any* p1, bool p2) => Function.Call<int>(0xB249EBCB30DD88E0, p0, p1, p2);
		public static int _UI_FEED_POST_MISSION_NAME(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x2024F4F333095FB1, p0, p1, p2);
		public static int _UI_FEED_POST_RETICLE_MESSAGE(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x893128CDB4B81FBB, p0, p1, p2);
		public static int _UI_FEED_POST_ONE_TEXT_SHARD(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x860DDFE97CC94DF0, p0, p1, p2);
		public static int _UI_FEED_POST_TWO_TEXT_SHARD(Any* p0, Any* p1, bool p2, bool p3) => Function.Call<int>(0xA6F4216AB10EB08E, p0, p1, p2, p3);
		public static int _UI_FEED_POST_THREE_TEXT_SHARD(Any* p0, Any* p1, bool p2, bool p3, bool p4) => Function.Call<int>(0x02BCC0FE9EBA3529, p0, p1, p2, p3, p4);
		public static int _UI_FEED_POST_GAME_UPDATE_SHARD(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x8D1249BD28791878, p0, p1, p2);
		public static int _UI_FEED_POST_VOICE_CHAT_FEED(Any* p0, Any* p1, bool p2) => Function.Call<int>(0xC48152BC6B3E821C, p0, p1, p2);
		/// <summary>
		/// feedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIFeedChannel
		/// </summary>
		public static void UI_FEED_CLEAR_CHANNEL(int feedChannel, bool p1, bool p2) => Function.Call(0xDD1232B332CBB9E7, feedChannel, p1, p2);
		/// <summary>
		/// Hides Toast Notifications
		/// </summary>
		public static void _UI_FEED_CLEAR_ALL_CHANNELS() => Function.Call(0x6035E8FBCA32AC5E);
		/// <summary>
		/// Clears help text
		/// </summary>
		public static void _UI_FEED_CLEAR_HELP_TEXT_FEED(int feedMessage, bool p1) => Function.Call(0x2F901291EF177B02, feedMessage, p1);
		public static void _0x6D85126F6CCF02C9(int feedChannel, int p1, bool p2) => Function.Call(0x6D85126F6CCF02C9, feedChannel, p1, p2);
		/// <summary>
		/// Returns feedMessage
		/// </summary>
		public static int _0x4E88A65968A55C78(Any* p0, bool p1) => Function.Call<int>(0x4E88A65968A55C78, p0, p1);
		/// <summary>
		/// Only used in R* SP Script beat_animal_attack
		/// Returns feedMessage
		/// </summary>
		public static int _0x0FD07141AD048AAE(Any* p0, bool p1) => Function.Call<int>(0x0FD07141AD048AAE, p0, p1);
		/// <summary>
		/// Returns messageState, see https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIMessageState
		/// </summary>
		public static int _UI_FEED_GET_MESSAGE_STATE(int feedMessage) => Function.Call<int>(0x59FA676177DBE4C9, feedMessage);
		/// <summary>
		/// feedChannel: see UI_FEED_CLEAR_CHANNEL
		/// Returns feedMessage
		/// </summary>
		public static int UI_FEED_GET_CURRENT_MESSAGE(int feedChannel) => Function.Call<int>(0xC17F69E1418CD11F, feedChannel);
		public static bool _0xB7223B91CD6B7E07(int feedChannel) => Function.Call<bool>(0xB7223B91CD6B7E07, feedChannel);
	}

	public unsafe static class UILOG
	{
		public static bool _UILOG_IS_ENTRY_REGISTERED(int p0, uint p1) => Function.Call<bool>(0xB8188CCF52202475, p0, p1);
		public static void _UILOG_ADD_ENTRY_HASH(int p0, int p1, float x, float y, float z, uint p5, uint p6, Any p7) => Function.Call(0x69D5479982355D8F, p0, p1, x, y, z, p5, p6, p7);
		public static void _UILOG_ADD_ENTRY_HASH(int p0, int p1, Vector3 vec, uint p5, uint p6, Any p7) => Function.Call(0x69D5479982355D8F, p0, p1, vec.X, vec.Y, vec.Z, p5, p6, p7);
		public static void _UILOG_ADD_ITEM_TO_TASK_LIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) => Function.Call(0x49C63FDF69744A27, p0, p1, p2, p3, p4, p5, p6, p7);
		public static void _UILOG_SET_ENTRY_ICON_TEXTURE(int p0, uint p1, uint icon, uint iconDictionary) => Function.Call(0x6965469934958D8F, p0, p1, icon, iconDictionary);
		public static void _UILOG_SET_ENTRY_BRIEF_TEXTURE(int p0, uint p1, uint texture, uint textureDictionary) => Function.Call(0x69684D9936958D8F, p0, p1, texture, textureDictionary);
		public static void _UILOG_UPDATE_ENTRY_SUBHEADER(int p0, uint p1, string p2) => Function.Call(0x80D6524190258C3E, p0, p1, p2);
		public static void _UILOG_SET_ENTRY_PINNED(int p0, uint p1, bool p2) => Function.Call(0x72A5CD214B342568, p0, p1, p2);
		public static void _UILOG_MARK_MISSION_COMPLETED(uint p0) => Function.Call(0xDE31D66D1E54C471, p0);
		public static void _UILOG_MARK_ENTRY_AVAILABILITY(int p0, uint p1, int p2, string p3) => Function.Call(0x13E8D7DD08543482, p0, p1, p2, p3);
		public static void _UILOG_MARK_ALL_ENTRIES_AVAILABILITY(int p0, string p1) => Function.Call(0x3920574CF0A2B7B6, p0, p1);
		public static void _UILOG_REMOVE_ENTRY(int p0, uint p1) => Function.Call(0xD594A19BE09A75C6, p0, p1);
		public static void _UILOG_SET_DISPLAY_COMPLETION_RATING(int logEntryType, uint p1, bool p2) => Function.Call(0xA31013798FADCADC, logEntryType, p1, p2);
		public static void _0xA49D6D503E3EA847(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0xA49D6D503E3EA847, p0, p1, p2, p3, p4);
		public static void _0x763637F9B838B0A7(Any p0, Any p1, Any p2) => Function.Call(0x763637F9B838B0A7, p0, p1, p2);
		public static void _UILOG_CLEAR_ALL_ENTRIES() => Function.Call(0xB95B4EA6B1EDF035);
		public static void _UILOG_ADD_OR_UPDATE_OBJECTIVE(int p0, uint p1, uint p2, string p3, bool p4, bool p5, bool p6) => Function.Call(0xB43163388484CC87, p0, p1, p2, p3, p4, p5, p6);
		public static void _0xA20398536B7F1134(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xA20398536B7F1134, p0, p1, p2, p3, p4, p5);
		public static void _UILOG_SET_CACHED_OBJECTIVE(string p0) => Function.Call(0xFA233F8FE190514C, p0);
		public static void _UILOG_CLEAR_CACHED_OBJECTIVE() => Function.Call(0xDFF0D417277B41F8);
		public static bool _UILOG_HAS_DISPLAYED_CACHED_OBJECTIVE() => Function.Call<bool>(0xCC48FFBB45B54F71);
		public static void _UILOG_CLEAR_HAS_DISPLAYED_CACHED_OBJECTIVE() => Function.Call(0xA3108D6981A5CADB);
		public static void _UILOG_SET_HAS_DISPLAYED_CACHED_OBJECTIVE() => Function.Call(0xA3108D6981A5CADC);
		public static string _UILOG_GET_CACHED_OBJECTIVE() => Function.Call<string>(0x15A4461BEB788096);
		public static void _UILOG_PRINT_CACHED_OBJECTIVE() => Function.Call(0xE9990552DEC71600);
		public static Any _UILOG_SET_PENDING_DETAILS_ID(int p0, uint p1) => Function.Call<Any>(0x136A027CF37B0A4F, p0, p1);
		public static Any _0x2A4765812202E671() => Function.Call<Any>(0x2A4765812202E671);
		public static void _UILOG_ADD_TOTAL_TAKE_ENTRY(uint p0, uint p1, string p2, string p3, uint p4) => Function.Call(0x60C59968E8E87E6B, p0, p1, p2, p3, p4);
		public static void _UILOG_SET_TOTAL_TAKE_SUMMARY(string p0, string p1) => Function.Call(0xD106B211EF1B8F04, p0, p1);
		public static int _UILOG_POST_NOTIFICATION(Any* data) => Function.Call<int>(0x49E58FE6EF40B987, data);
		public static void _0xDA0A30153FCC0FFD() => Function.Call(0xDA0A30153FCC0FFD);
	}

	public unsafe static class UIPINNING
	{
		public static string _UIPINNING_GET_TOOLTIP_TEXT(uint hash) => Function.Call<string>(0x3138582E0A13BFAB, hash);
	}

	public unsafe static class UITUTORIAL
	{
		public static bool _UITUTORIAL_GET_IS_THREAT_INDICATOR_CAPABLE_RADAR_SHOWN() => Function.Call<bool>(0x2CC24A2A7A1489C4);
		public static bool _UITUTORIAL_GET_IS_THREAT_INDICATOR_ON() => Function.Call<bool>(0xFC2E0A5E9ED4E1B4);
		/// <summary>
		/// enum eRpgIcons
		/// {
		/// 	ICON_STAMINA,
		/// 	ICON_STAMINA_CORE,
		/// 	ICON_DEADEYE,
		/// 	ICON_DEADEYE_CORE,
		/// 	ICON_HEALTH,
		/// 	ICON_HEALTH_CORE,
		/// 	ICON_HORSE_HEALTH,
		/// 	ICON_HORSE_HEALTH_CORE,
		/// 	ICON_HORSE_STAMINA,
		/// 	ICON_HORSE_STAMINA_CORE,
		/// 	ICON_HORSE_COURAGE,
		/// 	ICON_HORSE_COURAGE_CORE
		/// };
		/// 
		/// enum eRpgIconVisibility
		/// {
		/// 	ICON_VISIBILITY_WAIT_TO_HIDE,
		/// 	ICON_VISIBILITY_ALWAYS_SHOW,
		/// 	ICON_VISIBILITY_ALWAYS_HIDE,
		/// 	ICON_VISIBILITY_ALWAYS_BLINK
		/// };
		/// </summary>
		public static void _UITUTORIAL_SET_RPG_ICON_VISIBILITY(int rpgIcon, int visibility) => Function.Call(0xC116E6DF68DCE667, rpgIcon, visibility);
	}

	public unsafe static class UISTATEMACHINE
	{
		public static Any _UIFLOWBLOCK_REQUEST(Any p0) => Function.Call<Any>(0xC0081B34E395CE48, p0);
		public static void _UIFLOWBLOCK_RELEASE(Any p0) => Function.Call(0xF320A77DD5F781DF, p0);
		public static Any _UIFLOWBLOCK_IS_LOADED(Any p0) => Function.Call<Any>(0x10A93C057B6BD944, p0);
		public static Any _UIFLOWBLOCK_ENTER(Any p0, Any p1) => Function.Call<Any>(0x3B7519720C9DCB45, p0, p1);
		public static Any UI_STATE_MACHINE_EXISTS(Any p0) => Function.Call<Any>(0x5D15569C0FEBF757, p0);
		public static Any UI_STATE_MACHINE_CREATE(Any p0, Any p1) => Function.Call<Any>(0x4C6F2C4B7A03A266, p0, p1);
		public static Any UI_STATE_MACHINE_CAN_REQUEST_TRANSITION(Any p0) => Function.Call<Any>(0xF7C180F57F85D0B8, p0);
		public static Any UI_STATE_MACHINE_REQUEST_TRANSITION(Any p0, Any p1) => Function.Call<Any>(0x7EA9C3547E80350E, p0, p1);
		public static void UI_STATE_MACHINE_REQUEST_EXIT(Any p0, Any p1) => Function.Call(0x6B9FE4F0BA521A19, p0, p1);
		public static bool _UI_STATE_MACHINE_IS_EXITED(uint p0) => Function.Call<bool>(0x11E73195E735B25B, p0);
		public static void UI_STATE_MACHINE_DESTROY(Any p0) => Function.Call(0x4EB122210A90E2D8, p0);
		public static void UI_STATE_MACHINE_DESTROY_AND_CLEAR(Any* p0) => Function.Call(0x2738D68D2B4E09E7, p0);
	}

	public unsafe static class UISTICKYFEED
	{
		/// <summary>
		/// Example: https://pastebin.com/EJD7ytnz
		/// </summary>
		public static int _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x9F2CC2439A04E7BA, p0, p1, p2);
		/// <summary>
		/// Example: https://pastebin.com/JygJShNU
		/// </summary>
		public static int _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x815C4065AE6E6071, p0, p1, p2);
		/// <summary>
		/// Example: https://pastebin.com/6mLtee2S
		/// </summary>
		public static int _UI_STICKY_FEED_CREATE_WARNING_MESSAGE(Any* p0, Any* p1, bool p2) => Function.Call<int>(0x339E16B41780FC35, p0, p1, p2);
		/// <summary>
		/// Seems to only update _UI_STICKY_FEED_CREATE_ERROR_MESSAGE(0x9F2CC2439A04E7BA) and _UI_STICKY_FEED_CREATE_DEATH_FAIL_MESSAGE(0x815C4065AE6E6071) message.
		/// Example: https://pastebin.com/nDrJyWq2
		/// </summary>
		public static void _UI_STICKY_FEED_UPDATE_MESSAGE(int msgId, Any* p1, bool p2) => Function.Call(0xBC6F454E310124DA, msgId, p1, p2);
		public static void _UI_STICKY_FEED_CLEAR_MESSAGE(int msgId) => Function.Call(0x00A15B94CBA4F76F, msgId);
		/// <summary>
		/// stickyFeedChannel: https://github.com/Halen84/RDR3-Native-Flags-And-Enums/tree/main/eUIStickyFeedChannel
		/// </summary>
		public static bool _UI_STICKY_FEED_IS_CHANNEL_ACTIVE(int stickyFeedChannel) => Function.Call<bool>(0xC5C395C60B542A3C, stickyFeedChannel);
		public static bool _UI_STICKY_FEED_IS_ALERT_SCREEN_ACTIVE() => Function.Call<bool>(0xF8806EC3FF840FDC);
		/// <summary>
		/// Returns state of sticky feed message, see 0x59FA676177DBE4C9
		/// </summary>
		public static int _UI_STICKY_FEED_GET_MESSAGE_STATE(int msgId) => Function.Call<int>(0x07954320D77F6A3D, msgId);
	}

	public unsafe static class UNLOCK
	{
		public static bool _UNLOCK_IS_UNLOCK_FLAG_SET(uint unlockHash, int flag) => Function.Call<bool>(0x6B6369647F26F09F, unlockHash, flag);
		public static bool UNLOCK_IS_UNLOCKED(uint unlockHash) => Function.Call<bool>(0xC4B660C7B6040E75, unlockHash);
		public static void UNLOCK_SET_UNLOCKED(uint unlockHash, bool toggle) => Function.Call(0x1B7C5ADA8A6910A0, unlockHash, toggle);
		public static bool UNLOCK_IS_VISIBLE(uint unlockHash) => Function.Call<bool>(0x8588A14B75AF096B, unlockHash);
		public static void UNLOCK_SET_VISIBLE(uint unlockHash, bool toggle) => Function.Call(0x46B901A8ECDB5A61, unlockHash, toggle);
		public static bool _UNLOCK_IS_NEW(uint unlockHash) => Function.Call<bool>(0x644166BA7AA49DEA, unlockHash);
		public static void _UNLOCK_SET_NEW(uint unlockHash, bool toggle) => Function.Call(0xA6D79C7AEF870A99, unlockHash, toggle);
		public static bool _UNLOCK_IS_LOOTABLE(uint unlockHash) => Function.Call<bool>(0x66BF197E066050DE, unlockHash);
		public static void _UNLOCK_GET_ITEM_ROLE_UNLOCK_INFO(uint unlockHash, Any* outData) => Function.Call(0x7C1C2062CFAD06FE, unlockHash, outData);
	}

	public unsafe static class VEHICLE
	{
		/// <summary>
		/// Only used in R* Script beat_train_holdup: p1 = 1
		/// </summary>
		public static void _0x6355602C02EDC6DF(int entity, Any p1) => Function.Call(0x6355602C02EDC6DF, entity, p1);
		public static void _SET_VEHICLE_IS_IN_HURRY(int vehicle, bool enabled) => Function.Call(0xCE1531927AD6C9F8, vehicle, enabled);
		public static int CREATE_VEHICLE(uint modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool bDontAutoCreateDraftAnimals, bool p8) => Function.Call<int>(0xAF35D0D2583051B0, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, p8);
		public static int CREATE_VEHICLE(uint modelHash, Vector3 vec, float heading, bool isNetwork, bool bScriptHostVeh, bool bDontAutoCreateDraftAnimals, bool p8) => Function.Call<int>(0xAF35D0D2583051B0, modelHash, vec.X, vec.Y, vec.Z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, p8);
		/// <summary>
		/// Identical to CREATE_VEHICLE but allows to set draftAnimalPopGroup (see popgroups.#mt for DRAFT_HORSES_*)
		/// </summary>
		public static int _CREATE_DRAFT_VEHICLE(uint modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool bDontAutoCreateDraftAnimals, uint draftAnimalPopGroup, bool p9) => Function.Call<int>(0x214651FB1DFEBA89, modelHash, x, y, z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup, p9);
		public static int _CREATE_DRAFT_VEHICLE(uint modelHash, Vector3 vec, float heading, bool isNetwork, bool bScriptHostVeh, bool bDontAutoCreateDraftAnimals, uint draftAnimalPopGroup, bool p9) => Function.Call<int>(0x214651FB1DFEBA89, modelHash, vec.X, vec.Y, vec.Z, heading, isNetwork, bScriptHostVeh, bDontAutoCreateDraftAnimals, draftAnimalPopGroup, p9);
		/// <summary>
		/// Deletes a vehicle.
		/// The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		/// 
		/// eg how to use:
		/// SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		/// DELETE_VEHICLE(&vehicle);
		/// 
		/// Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
		/// </summary>
		public static void DELETE_VEHICLE(int* vehicle) => Function.Call(0xE20A909D8C4A70F8, vehicle);
		public static void _FADE_AND_DESTROY_VEHICLE(int* vehicle) => Function.Call(0x35DC1877312FBA0F, vehicle);
		public static bool _IS_VEHICLE_FADING_OUT(int vehicle) => Function.Call<bool>(0x5136B284B67B35C7, vehicle);
		public static void SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(int vehicle, bool toggle) => Function.Call(0x1240E8596A8308B9, vehicle, toggle);
		/// <summary>
		/// Makes the vehicle accept no passengers.
		/// </summary>
		public static void SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(int vehicle, bool toggle) => Function.Call(0xECB9E9BC887E8060, vehicle, toggle);
		public static bool IS_VEHICLE_MODEL(int vehicle, uint model) => Function.Call<bool>(0x0045A54EC7A22455, vehicle, model);
		public static void _SET_ALL_VEHICLE_GENERATORS_DISABLED_FOR_VOLUME(int volume, bool toggle) => Function.Call(0x424FFCB9F0D2D4B5, volume, toggle);
		public static void SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7) => Function.Call(0xBBB134FB9D50C0CC, x1, y1, z1, x2, y2, z2, p6, p7);
		public static void SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(Vector3 vec1, Vector3 vec2, bool p6, bool p7) => Function.Call(0xBBB134FB9D50C0CC, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, p6, p7);
		public static void SET_ALL_VEHICLE_GENERATORS_ACTIVE() => Function.Call(0x3D596E6E88A02C24);
		public static bool SET_VEHICLE_ON_GROUND_PROPERLY(int vehicle, bool p1) => Function.Call<bool>(0x7263332501E07F52, vehicle, p1);
		/// <summary>
		/// Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
		/// 
		/// For some vehicles it returns true if the current speed is <= 0.00039999999.
		/// </summary>
		public static bool IS_VEHICLE_STOPPED(int vehicle) => Function.Call<bool>(0x78C3311A73135241, vehicle);
		/// <summary>
		/// Gets the number of passengers, NOT including the driver. Use IS_VEHICLE_SEAT_FREE(Vehicle, -1) to also check for the driver
		/// </summary>
		public static int GET_VEHICLE_NUMBER_OF_PASSENGERS(int vehicle) => Function.Call<int>(0x59F3F16577CD79B2, vehicle);
		public static int GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(int vehicle) => Function.Call<int>(0xA9C55F1C15E62E06, vehicle);
		public static int GET_VEHICLE_MODEL_NUMBER_OF_SEATS(uint modelHash) => Function.Call<int>(0x9A578736FF3A17C3, modelHash);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static bool IS_SEAT_WARP_ONLY(int vehicle, int seatIndex) => Function.Call<bool>(0x7892685BF6D9775E, vehicle, seatIndex);
		public static bool _GET_VEHICLE_TURRET_SEAT(int vehicle, int* seatIndex) => Function.Call<bool>(0xFF5791B7639C2A46, vehicle, seatIndex);
		public static Any _0xA9E185D498B9AC67(Any p0, Any p1) => Function.Call<Any>(0xA9E185D498B9AC67, p0, p1);
		public static void SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0x606374EBFC27B133, multiplier);
		public static void SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0x1F91D44490E1EA0C, multiplier);
		public static void SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) => Function.Call(0xFEDFA97638D61D4A, multiplier);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(bool toggle) => Function.Call(0xD4288603E8766FF7, toggle);
		public static void SET_VEHICLE_DOORS_LOCKED(int vehicle, int doorLockStatus) => Function.Call(0x96F78A6A075D55D9, vehicle, doorLockStatus);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static void SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(int vehicle, int doorId, int doorLockStatus) => Function.Call(0xA9F1D75195CC40F6, vehicle, doorId, doorLockStatus);
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(int vehicle, int player, bool toggle) => Function.Call(0x359A8EA1FB8D6F0F, vehicle, player, toggle);
		public static bool GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(int vehicle, int player) => Function.Call<bool>(0xFA2CDDFEB8BC898B, vehicle, player);
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(int vehicle, bool toggle) => Function.Call(0x2381977DA948F8DC, vehicle, toggle);
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(int vehicle, int team, bool toggle) => Function.Call(0xE712BC978770F105, vehicle, team, toggle);
		public static bool _GET_VEHICLE_DOORS_LOCKED_FOR_TEAM(int vehicle, int team) => Function.Call<bool>(0xDD1E1393D966D39A, vehicle, team);
		/// <summary>
		/// Explodes a selected vehicle.
		/// 
		/// Vehicle vehicle = Vehicle you want to explode.
		/// BOOL isAudible = If explosion makes a sound.
		/// BOOL isInvisible = If the explosion is invisible or not.
		/// 
		/// First BOOL does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
		/// </summary>
		public static void EXPLODE_VEHICLE(int vehicle, bool isAudible, bool isInvisible, Any p3, Any p4) => Function.Call(0x75DCED9EEC5769D7, vehicle, isAudible, isInvisible, p3, p4);
		public static void _0x750D42C013F64AE7(Any p0, Any p1) => Function.Call(0x750D42C013F64AE7, p0, p1);
		public static void _0xE78993FF9022C064(Any p0) => Function.Call(0xE78993FF9022C064, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x9868C0D0134855F7(Any p0) => Function.Call(0x9868C0D0134855F7, p0);
		public static void _HIDE_HORSE_REINS(int vehicle) => Function.Call(0x201B8ED4FF7FE9F5, vehicle);
		public static void _SHOW_HORSE_REINS(int vehicle) => Function.Call(0x41CDA90EE3450921, vehicle);
		public static void _0xD21A3D421E7F09F7(Any p0, Any p1) => Function.Call(0xD21A3D421E7F09F7, p0, p1);
		public static void _0xA13028E22564A1BD(Any p0, Any p1) => Function.Call(0xA13028E22564A1BD, p0, p1);
		public static void _0x485B05EF05B9AEE9(Any p0, Any p1) => Function.Call(0x485B05EF05B9AEE9, p0, p1);
		public static void SET_BOAT_ANCHOR(int vehicle, bool toggle) => Function.Call(0xAEAB044F05B92659, vehicle, toggle);
		public static void _0x6B53F4B811E583D2(int vehicle, bool toggle) => Function.Call(0x6B53F4B811E583D2, vehicle, toggle);
		public static bool CAN_ANCHOR_BOAT_HERE(int vehicle) => Function.Call<bool>(0xC075176CFB8B4128, vehicle);
		/// <summary>
		/// Old name: _SET_BOAT_FROZEN_WHEN_ANCHORED
		/// </summary>
		public static void SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(int vehicle, bool p1, bool p2) => Function.Call(0x286771F3059A37A7, vehicle, p1, p2);
		/// <summary>
		/// Sets boat to be anchored on spawn, called together with SET_BOAT_ANCHOR and _SET_BOAT_ANCHOR_BUOYANCY_COEFFICIENT
		/// </summary>
		public static void SET_FORCE_LOW_LOD_ANCHOR_MODE(int vehicle, bool p1) => Function.Call(0x75B49ACD73617437, vehicle, p1);
		/// <summary>
		/// Value: mostly 99999.9f
		/// 
		/// Old name: _SET_BOAT_MOVEMENT_RESISTANCE
		/// </summary>
		public static void SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(int vehicle, float value) => Function.Call(0xE3261532550D6A9F, vehicle, value);
		public static void SET_BOAT_SINKS_WHEN_WRECKED(int vehicle, bool toggle) => Function.Call(0x62A6D317A011EA1D, vehicle, toggle);
		public static void _SET_FORCE_HIGH_LOD_VEHICLE(int vehicle, bool p1) => Function.Call(0x1098CDA477890165, vehicle, p1);
		public static void _0x98A7598C579EE871(Any p0, Any p1, Any p2) => Function.Call(0x98A7598C579EE871, p0, p1, p2);
		/// <summary>
		/// Forcing high LOD buoyancy for vehicle: p1 = false
		/// _SET_A*
		/// </summary>
		public static void _0x9E8711C81AA17876(int vehicle, bool p1) => Function.Call(0x9E8711C81AA17876, vehicle, p1);
		/// <summary>
		/// If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
		/// </summary>
		public static void SET_VEHICLE_STRONG(int vehicle, bool toggle) => Function.Call(0xAB315515C9F8803D, vehicle, toggle);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
		/// </summary>
		public static bool IS_VEHICLE_SEAT_FREE(int vehicle, int seatIndex) => Function.Call<bool>(0xE052C1B1CAA4ECE4, vehicle, seatIndex);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static int GET_PED_IN_VEHICLE_SEAT(int vehicle, int seatIndex) => Function.Call<int>(0xBB40DD2270B65366, vehicle, seatIndex);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static int GET_LAST_PED_IN_VEHICLE_SEAT(int vehicle, int seatIndex) => Function.Call<int>(0x74583B19FEEAFDA7, vehicle, seatIndex);
		public static bool IS_DRAFT_VEHICLE(int vehicle) => Function.Call<bool>(0xEA44E97849E9F3DD, vehicle);
		/// <summary>
		/// enum eDraftHarness
		/// {
		/// 	DRAFT_HARNESS_LR,
		/// 	DRAFT_HARNESS_RR,
		/// 	DRAFT_HARNESS_LM,
		/// 	DRAFT_HARNESS_RM,
		/// 	DRAFT_HARNESS_LF,
		/// 	DRAFT_HARNESS_RF,
		/// 	DRAFT_HARNESS_COUNT
		/// };
		/// </summary>
		public static int _GET_PED_IN_DRAFT_HARNESS(int vehicle, int harnessId) => Function.Call<int>(0xA8BA0BAE0173457B, vehicle, harnessId);
		public static void SET_VEHICLE_FORWARD_SPEED(int vehicle, float speed) => Function.Call(0xF9F92AF49F12F6E7, vehicle, speed);
		/// <summary>
		/// This native makes the vehicle stop immediately
		/// 
		/// distance defines how far it will travel until stopping.
		/// </summary>
		public static void BRING_VEHICLE_TO_HALT(int vehicle, float distance, int duration, bool unknown) => Function.Call(0x260BE8F09E326A20, vehicle, distance, duration, unknown);
		/// <summary>
		/// Only returns true if BRING_VEHICLE_TO_HALT is called on vehicle beforehand
		/// </summary>
		public static bool _IS_VEHICLE_BROUGHT_TO_HALT(int vehicle) => Function.Call<bool>(0x404527BC03DA0E6C, vehicle);
		/// <summary>
		/// Old name: _STOP_BRING_VEHICLE_TO_HALT
		/// </summary>
		public static void STOP_BRINGING_VEHICLE_TO_HALT(int vehicle) => Function.Call(0x7C06330BFDDA182E, vehicle);
		public static void _0xE12F5ED49F44D40D(Any p0) => Function.Call(0xE12F5ED49F44D40D, p0);
		public static void _0xF6E3D38869D0F7AD(Any p0) => Function.Call(0xF6E3D38869D0F7AD, p0);
		/// <summary>
		/// Closes all doors of a vehicle:
		/// </summary>
		public static void SET_VEHICLE_DOORS_SHUT(int vehicle, bool closeInstantly) => Function.Call(0xA4FFCD645B11F25A, vehicle, closeInstantly);
		/// <summary>
		/// Allows you to toggle bulletproof tires.
		/// </summary>
		public static void SET_VEHICLE_TYRES_CAN_BURST(int vehicle, bool toggle) => Function.Call(0xEBD0A4E935106FE5, vehicle, toggle);
		public static void SET_VEHICLE_WHEELS_CAN_BREAK(int vehicle, bool enabled) => Function.Call(0x839137C40275FB77, vehicle, enabled);
		public static void SET_VEHICLE_DOORS_TO_OPEN_AT_ANY_DISTANCE(int vehicle, bool toggle) => Function.Call(0x362CEDD2A41E0747, vehicle, toggle);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// Can also be used on trains and its wagons
		/// </summary>
		public static void SET_VEHICLE_DOOR_OPEN(int vehicle, int doorId, bool loose, bool openInstantly) => Function.Call(0x550CE392A4672412, vehicle, doorId, loose, openInstantly);
		/// <summary>
		/// windowIndex:
		/// 0 = Front Right Window
		/// 1 = Front Left Window
		/// 2 = Back Right Window
		/// 3 = Back Left Window
		/// </summary>
		public static void REMOVE_VEHICLE_WINDOW(int vehicle, int windowIndex) => Function.Call(0x745F15A215F2DDF1, vehicle, windowIndex);
		public static void _0x8878FF3EEE2868A9(Any p0, Any p1) => Function.Call(0x8878FF3EEE2868A9, p0, p1);
		/// <summary>
		/// dirtLevel: 0.0 - 1.0
		/// </summary>
		public static void _SET_VEHICLE_DIRT_LEVEL_2(int vehicle, float dirtLevel) => Function.Call(0xBAE0EEDF93F05EAA, vehicle, dirtLevel);
		/// <summary>
		/// mudLevel: 0.0 - 1.0
		/// </summary>
		public static void _SET_VEHICLE_MUD_LEVEL(int vehicle, float mudLevel) => Function.Call(0x4D15E49764CB328A, vehicle, mudLevel);
		/// <summary>
		/// Sets the vehicle's lights state.
		/// </summary>
		public static void SET_VEHICLE_LIGHTS(int vehicle, int state) => Function.Call(0x629F0A0E952CAE7D, vehicle, state);
		public static void SET_RANDOM_TRAINS(bool toggle) => Function.Call(0x1156C6EE7E82A98A, toggle);
		/// <summary>
		/// Returns trackIndex
		/// </summary>
		public static int _0x331CBD247FC5DAA8(uint configHash, float x, float y, float z, bool direction, bool p5) => Function.Call<int>(0x331CBD247FC5DAA8, configHash, x, y, z, direction, p5);
		public static int _0x331CBD247FC5DAA8(uint configHash, Vector3 vec, bool direction, bool p5) => Function.Call<int>(0x331CBD247FC5DAA8, configHash, vec.X, vec.Y, vec.Z, direction, p5);
		/// <summary>
		/// Takes value returned from 0x45853F4E17D847D5
		/// </summary>
		public static bool _0x0516FAE561276EFC(int trackIndex) => Function.Call<bool>(0x0516FAE561276EFC, trackIndex);
		/// <summary>
		/// Returns trackIndex
		/// </summary>
		public static int _GET_TRAIN_TRACK_FROM_TRAIN_VEHICLE(int train) => Function.Call<int>(0x45853F4E17D847D5, train);
		/// <summary>
		/// Returns train
		/// </summary>
		public static int _GET_TRAIN_VEHICLE_FROM_TRACK_INDEX(int trackIndex) => Function.Call<int>(0x6E585A616ABB8401, trackIndex);
		public static void _0x15206E88FF7617DF(int trackIndex, float p1) => Function.Call(0x15206E88FF7617DF, trackIndex, p1);
		public static void _0xA7966807953A18EE(int trackIndex, float p1) => Function.Call(0xA7966807953A18EE, trackIndex, p1);
		public static void _0x6B34BE961F639E21(int trackIndex, int p1) => Function.Call(0x6B34BE961F639E21, trackIndex, p1);
		public static void _0xE6BD7DD3FD474415(int train, bool p1) => Function.Call(0xE6BD7DD3FD474415, train, p1);
		public static void _0x615B3B8E73634509(int trackIndex, float p1) => Function.Call(0x615B3B8E73634509, trackIndex, p1);
		public static void _0x38E7DD70A242D5CB(int trackIndex, int p1) => Function.Call(0x38E7DD70A242D5CB, trackIndex, p1);
		public static void _0x63509DDF102E08E8(int trackIndex, int p1) => Function.Call(0x63509DDF102E08E8, trackIndex, p1);
		public static void _0x7408B5C66BA31ADB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call(0x7408B5C66BA31ADB, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static void _0x41365DB586CD9E8E(int trackIndex, float p1) => Function.Call(0x41365DB586CD9E8E, trackIndex, p1);
		public static void _0xD0AABE5B9F8FA589(int trackIndex, float p1) => Function.Call(0xD0AABE5B9F8FA589, trackIndex, p1);
		public static void _0x427C919E9809E370(int trackIndex, int p1) => Function.Call(0x427C919E9809E370, trackIndex, p1);
		public static bool _DOES_TRAIN_EXIST_ON_TRACK(int trackIndex) => Function.Call<bool>(0xC29996A337BDD099, trackIndex);
		public static Vector3 _GET_TRAIN_POSITION_ON_TRACK(int trackIndex) => Function.Call<Vector3>(0x1E8A921112891651, trackIndex);
		public static bool _0xB4241AD8F5AEE9ED(int trackIndex) => Function.Call<bool>(0xB4241AD8F5AEE9ED, trackIndex);
		public static void _0xA230A5DDE12ED374(Any p0) => Function.Call(0xA230A5DDE12ED374, p0);
		public static void _0x0D5FDF0D36FA10CD(int trackIndex) => Function.Call(0x0D5FDF0D36FA10CD, trackIndex);
		public static void _0xE682002DB1F30669(Any p0) => Function.Call(0xE682002DB1F30669, p0);
		public static void _0x718EB706B6E998A0(int trackIndex) => Function.Call(0x718EB706B6E998A0, trackIndex);
		/// <summary>
		/// _IS_* (related to CREATE_MISSION_TRAIN)
		/// </summary>
		public static bool _0xF05DFAF1ADFEF2CD(uint trainConfig, float x, float y, float z, bool direction, bool p5) => Function.Call<bool>(0xF05DFAF1ADFEF2CD, trainConfig, x, y, z, direction, p5);
		public static bool _0xF05DFAF1ADFEF2CD(uint trainConfig, Vector3 vec, bool direction, bool p5) => Function.Call<bool>(0xF05DFAF1ADFEF2CD, trainConfig, vec.X, vec.Y, vec.Z, direction, p5);
		public static Any _0xD1DF5E54F4ACBE1A(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0xD1DF5E54F4ACBE1A, p0, p1, p2, p3, p4, p5, p6);
		public static Any _0x0FDDEE66E3465726(Any p0) => Function.Call<Any>(0x0FDDEE66E3465726, p0);
		public static void _0x4C05B42A8D937796() => Function.Call(0x4C05B42A8D937796);
		public static void _0xB961DD799A837BD7() => Function.Call(0xB961DD799A837BD7);
		public static void _0x16B86A49E072AA85() => Function.Call(0x16B86A49E072AA85);
		public static void _0x2A7413168F6CD5A8() => Function.Call(0x2A7413168F6CD5A8);
		public static void _0xFFFE15B433300B8C(Any p0, Any p1, Any p2) => Function.Call(0xFFFE15B433300B8C, p0, p1, p2);
		public static void _0x6EA1273D525427F4(Any p0, Any p1, Any p2) => Function.Call(0x6EA1273D525427F4, p0, p1, p2);
		public static Any _0x7BE0746539DEF0C8(Any p0, Any p1) => Function.Call<Any>(0x7BE0746539DEF0C8, p0, p1);
		public static void _0x3137EDC899E6DAE4(Any p0, Any p1) => Function.Call(0x3137EDC899E6DAE4, p0, p1);
		/// <summary>
		/// Returns trackIndex
		/// </summary>
		public static int _0x6C87F49BFA181DB5(float x, float y, float z) => Function.Call<int>(0x6C87F49BFA181DB5, x, y, z);
		public static int _0x6C87F49BFA181DB5(Vector3 vec) => Function.Call<int>(0x6C87F49BFA181DB5, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Returns trackIndex
		/// _E* - _F*
		/// </summary>
		public static int _GET_TRACK_INDEX_FROM_COORDS(float x, float y, float z) => Function.Call<int>(0x85D39F5E3B6D7EB0, x, y, z);
		public static int _GET_TRACK_INDEX_FROM_COORDS(Vector3 vec) => Function.Call<int>(0x85D39F5E3B6D7EB0, vec.X, vec.Y, vec.Z);
		public static Vector3 _GET_NEAREST_TRAIN_TRACK_POSITION(float x, float y, float z) => Function.Call<Vector3>(0x6DE03BCC15E81710, x, y, z);
		public static Vector3 _GET_NEAREST_TRAIN_TRACK_POSITION(Vector3 vec) => Function.Call<Vector3>(0x6DE03BCC15E81710, vec.X, vec.Y, vec.Z);
		public static void DELETE_ALL_TRAINS() => Function.Call(0xA3120A1385F17FF7);
		public static Any _0x0E558D3A49D759D6(Any p0, Any p1) => Function.Call<Any>(0x0E558D3A49D759D6, p0, p1);
		public static void _0xD4907EF4334C7602(Any p0, Any p1) => Function.Call(0xD4907EF4334C7602, p0, p1);
		public static void _0x68830738A6BFB370(Any p0, Any p1) => Function.Call(0x68830738A6BFB370, p0, p1);
		public static void SET_TRAIN_SPEED(int train, float speed) => Function.Call(0xDFBA6BBFF7CCAFBB, train, speed);
		/// <summary>
		/// Maximum possible speed is 30.0 (108 km/h)
		/// </summary>
		public static void _SET_TRAIN_MAX_SPEED(int train, float speed) => Function.Call(0x9F29999DFDF2AEB8, train, speed);
		public static void SET_TRAIN_CRUISE_SPEED(int train, float speed) => Function.Call(0x01021EB2E96B793C, train, speed);
		/// <summary>
		/// Returns iNumCars - to be used with GET_TRAIN_CARRIAGE (trailerNumber)
		/// _C* (O, P, Q, R)
		/// </summary>
		public static int _GET_TRAIN_CARRIAGE_TRAILER_NUMBER(int train) => Function.Call<int>(0x60B7D1DCC312697D, train);
		/// <summary>
		/// Returns modelHash
		/// </summary>
		public static uint _GET_TRAIN_MODEL_FROM_TRAIN_CONFIG_BY_CAR_INDEX(uint trainConfig, int trainCarIndex) => Function.Call<uint>(0x8DF5F6A19F99F0D5, trainConfig, trainCarIndex);
		/// <summary>
		/// Returns amount for CAN_REGISTER_MISSION_VEHICLES
		/// </summary>
		public static int _GET_NUM_CARS_FROM_TRAIN_CONFIG(uint trainConfig) => Function.Call<int>(0x635423D55CA84FC8, trainConfig);
		/// <summary>
		/// Returns train car, use GET_TRAIN_CARRIAGE when trailerNumber is bigger than 0
		/// </summary>
		public static int _GET_TRAIN_CAR(int train) => Function.Call<int>(0x671A07C9A1CD50A5, train);
		public static void _SET_TRAIN_STOPS_FOR_STATIONS(int train, bool toggle) => Function.Call(0x4182C037AA1F0091, train, toggle);
		public static void _0xDD100CE1EBBF37E3(Any p0, Any p1) => Function.Call(0xDD100CE1EBBF37E3, p0, p1);
		public static void _0x160C1B5AB48AB87C(int train, float p1) => Function.Call(0x160C1B5AB48AB87C, train, p1);
		public static bool IS_TRAIN_WAITING_AT_STATION(int train) => Function.Call<bool>(0xE887BD31D97793F6, train);
		public static void _SET_TRAIN_HALT(int train) => Function.Call(0x3660BCAB3A6BB734, train);
		/// <summary>
		/// Restarts the train
		/// </summary>
		public static void _SET_TRAIN_LEAVE_STATION(int train) => Function.Call(0x787E43477746876F, train);
		public static void SET_RANDOM_BOATS(bool toggle) => Function.Call(0xF44D446D4E36DB87, toggle);
		/// <summary>
		/// Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
		/// For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" corresponds to a unique identifier within the recording streaming module.
		/// (GTA) Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
		/// </summary>
		public static void REQUEST_VEHICLE_RECORDING(int recording, string script) => Function.Call(0xC474CF16EDA45DC9, recording, script);
		/// <summary>
		/// See REQUEST_VEHICLE_RECORDING
		/// </summary>
		public static bool HAS_VEHICLE_RECORDING_BEEN_LOADED(int recording, string script) => Function.Call<bool>(0xBA9325BE372AB6EA, recording, script);
		/// <summary>
		/// See REQUEST_VEHICLE_RECORDING
		/// </summary>
		public static void REMOVE_VEHICLE_RECORDING(Any p0, Any* p1) => Function.Call(0x139E35755418F6AA, p0, p1);
		/// <summary>
		/// This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
		/// 
		/// See REQUEST_VEHICLE_RECORDING
		/// </summary>
		public static Vector3 GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, string script) => Function.Call<Vector3>(0x1A00961A1BE94E5E, recording, time, script);
		/// <summary>
		/// This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
		/// 
		/// See REQUEST_VEHICLE_RECORDING
		/// </summary>
		public static Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, string script) => Function.Call<Vector3>(0x61787DD28B8CC0D5, recording, time, script);
		public static float GET_TIME_POSITION_IN_RECORDING(int vehicle) => Function.Call<float>(0x233B51C7913FA031, vehicle);
		/// <summary>
		/// p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
		/// 
		/// See REQUEST_VEHICLE_RECORDING
		/// </summary>
		public static void START_PLAYBACK_RECORDED_VEHICLE(int vehicle, int recording, string script, bool p3) => Function.Call(0x4932B84E3276508E, vehicle, recording, script, p3);
		/// <summary>
		/// Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
		/// </summary>
		public static void FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(int vehicle, bool p1) => Function.Call(0x59ECA796021B0539, vehicle, p1);
		public static void STOP_PLAYBACK_RECORDED_VEHICLE(int vehicle) => Function.Call(0xBF9B4D6267E8C26D, vehicle);
		public static bool IS_PLAYBACK_GOING_ON_FOR_VEHICLE(int vehicle) => Function.Call<bool>(0x02774B3A9034278F, vehicle);
		public static bool IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(int vehicle) => Function.Call<bool>(0x5A7472606EC5B7C1, vehicle);
		public static void SET_PLAYBACK_SPEED(int vehicle, float speed) => Function.Call(0xD78084EED4CD94C6, vehicle, speed);
		/// <summary>
		/// SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
		/// </summary>
		public static void SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(int vehicle, float time) => Function.Call(0x5F5E6379C59EFC56, vehicle, time);
		public static int GET_CLOSEST_VEHICLE(float x, float y, float z, float radius, uint modelHash, int flags) => Function.Call<int>(0x52F45D033645181B, x, y, z, radius, modelHash, flags);
		public static int GET_CLOSEST_VEHICLE(Vector3 vec, float radius, uint modelHash, int flags) => Function.Call<int>(0x52F45D033645181B, vec.X, vec.Y, vec.Z, radius, modelHash, flags);
		public static int GET_TRAIN_CARRIAGE(int train, int trailerNumber) => Function.Call<int>(0xD0FB093A4CDB932C, train, trailerNumber);
		public static void DELETE_MISSION_TRAIN(int* train) => Function.Call(0x0D3630FB07E8B570, train);
		public static void SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(int* train, bool p1) => Function.Call(0xBBE7648349B49BE8, train, p1);
		public static void SET_MISSION_TRAIN_COORDS(int train, float x, float y, float z) => Function.Call(0x7632755962AB9922, train, x, y, z);
		public static void SET_MISSION_TRAIN_COORDS(int train, Vector3 vec) => Function.Call(0x7632755962AB9922, train, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// Notice: BOOL p4 was wrongly named takePassengers (?)
		/// Can be used to rotate the train by setting the BOOL direction
		/// </summary>
		public static void _SET_MISSION_TRAIN_WARP_TO_COORDS(int train, float x, float y, float z, bool direction) => Function.Call(0xC9EA26893C9E4024, train, x, y, z, direction);
		public static void _SET_MISSION_TRAIN_WARP_TO_COORDS(int train, Vector3 vec, bool direction) => Function.Call(0xC9EA26893C9E4024, train, vec.X, vec.Y, vec.Z, direction);
		public static void _0xA72B1BF3857B94D7(int train, bool p1) => Function.Call(0xA72B1BF3857B94D7, train, p1);
		public static bool _IS_THIS_MODEL_A_DRAFT_VEHICLE(uint model) => Function.Call<bool>(0xB9D5BDDA88E1BB66, model);
		public static bool IS_THIS_MODEL_A_BOAT(uint model) => Function.Call<bool>(0x799CFC7C5B743B15, model);
		public static bool IS_THIS_MODEL_A_TRAIN(uint model) => Function.Call<bool>(0xFC08C8F8C1EDF174, model);
		public static void SET_VEHICLE_CAN_BE_TARGETTED(int vehicle, bool state) => Function.Call(0x05254BA0B44ADC16, vehicle, state);
		public static void SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(int vehicle, bool p1) => Function.Call(0x63DC1F22C903B709, vehicle, p1);
		public static void SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(int vehicle, bool state) => Function.Call(0x4BF8131AE811541C, vehicle, state);
		public static void SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(int vehicle, bool p1) => Function.Call(0xC903855E028A05F2, vehicle, p1);
		public static void SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(int vehicle, bool p1) => Function.Call(0x33992A808DF1C1BA, vehicle, p1);
		public static void SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(int vehicle, bool p1) => Function.Call(0x065D03A9D6B2C6B5, vehicle, p1);
		public static void SET_VEHICLE_DIRT_LEVEL(int vehicle, float dirtLevel) => Function.Call(0x758C3460EE915D0A, vehicle, dirtLevel);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static bool IS_VEHICLE_DOOR_FULLY_OPEN(int vehicle, int doorId) => Function.Call<bool>(0x7AE191143C7A9107, vehicle, doorId);
		/// <summary>
		/// Starts or stops the engine on the specified vehicle.
		/// 
		/// vehicle: The vehicle to start or stop the engine on.
		/// value: true to turn the vehicle on; false to turn it off.
		/// instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
		/// </summary>
		public static void SET_VEHICLE_ENGINE_ON(int vehicle, bool value, bool instantly) => Function.Call(0xB64CFA14CB9A2E78, vehicle, value, instantly);
		public static void SET_VEHICLE_UNDRIVEABLE(int vehicle, bool toggle) => Function.Call(0x6E884BAB713A2A94, vehicle, toggle);
		public static void SET_VEHICLE_PROVIDES_COVER(int vehicle, bool toggle) => Function.Call(0x652712478F1721F4, vehicle, toggle);
		public static void _0x3053064F909B5F42(Any p0, Any p1) => Function.Call(0x3053064F909B5F42, p0, p1);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static void SET_VEHICLE_DOOR_CONTROL(int vehicle, int doorId, int speed, float angle) => Function.Call(0xD57F10EBBA814ECF, vehicle, doorId, speed, angle);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static void SET_VEHICLE_DOOR_LATCHED(int vehicle, int doorId, bool p2, bool p3, bool p4) => Function.Call(0x06F8A202EB312A3C, vehicle, doorId, p2, p3, p4);
		/// <summary>
		/// doorId: enum eDoorId
		/// {
		/// 	VEH_EXT_DOOR_INVALID_ID = -1,
		/// 	VEH_EXT_DOOR_DSIDE_F,
		/// 	VEH_EXT_DOOR_DSIDE_M,
		/// 	VEH_EXT_DOOR_DSIDE_M1,
		/// 	VEH_EXT_DOOR_DSIDE_M2,
		/// 	VEH_EXT_DOOR_DSIDE_R,
		/// 	VEH_EXT_DOOR_PSIDE_F,
		/// 	VEH_EXT_DOOR_PSIDE_M,
		/// 	VEH_EXT_DOOR_PSIDE_M1,
		/// 	VEH_EXT_DOOR_PSIDE_M2,
		/// 	VEH_EXT_DOOR_PSIDE_R,
		/// 	VEH_EXT_BONNET,
		/// 	VEH_EXT_BOOT
		/// };
		/// </summary>
		public static void SET_VEHICLE_DOOR_SHUT(int vehicle, int doorId, bool closeInstantly) => Function.Call(0x6A3C24B91FD0EA09, vehicle, doorId, closeInstantly);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static void SET_VEHICLE_DOOR_BROKEN(int vehicle, int doorId, bool deleteDoor) => Function.Call(0x9666CF20A1C6D780, vehicle, doorId, deleteDoor);
		public static void SET_VEHICLE_CAN_BREAK(int vehicle, bool toggle) => Function.Call(0xC5ED9D59B4646611, vehicle, toggle);
		/// <summary>
		/// Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
		/// </summary>
		public static void SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(int vehicle, bool toggle) => Function.Call(0x54800D386C5825E5, vehicle, toggle);
		public static void SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(int vehicle, bool p1) => Function.Call(0x7549B9E841940695, vehicle, p1);
		public static int GET_VEHICLE_DOOR_LOCK_STATUS(int vehicle) => Function.Call<int>(0xC867FD144F2469D3, vehicle);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// 
		/// Old name: _SET_VEHICLE_DOOR_CAN_BREAK
		/// </summary>
		public static void SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(int vehicle, int doorId, bool isBreakable) => Function.Call(0x081FB9D6422F804C, vehicle, doorId, isBreakable);
		public static bool IS_VEHICLE_ON_ALL_WHEELS(int vehicle) => Function.Call<bool>(0x0D5D119529654EE0, vehicle);
		public static bool _GET_TRAIN_DIRECTION(int train) => Function.Call<bool>(0x3C9628A811CBD724, train);
		/// <summary>
		/// https://i.imgur.com/1rHibjW.jpg
		/// </summary>
		public static bool _GET_TRAIN_DIRECTION_FROM_INDEX(int trackIndex) => Function.Call<bool>(0x67995318F5FAA496, trackIndex);
		/// <summary>
		/// _RESET_VEHICLE_*
		/// </summary>
		public static Any _0x09034479E6E3E269(int train, uint* trainTrack, int* junctionIndex) => Function.Call<Any>(0x09034479E6E3E269, train, trainTrack, junctionIndex);
		/// <summary>
		/// Outputs junctionIndex, to be used with 0xE6C5E2125EB210C1
		/// </summary>
		public static bool _GET_TRAIN_TRACK_JUNCTION_AT_COORDS(uint trainTrack, float x, float y, float z, int* junctionIndex) => Function.Call<bool>(0x86AFC343CF7F0B34, trainTrack, x, y, z, junctionIndex);
		public static bool _GET_TRAIN_TRACK_JUNCTION_AT_COORDS(uint trainTrack, Vector3 vec, int* junctionIndex) => Function.Call<bool>(0x86AFC343CF7F0B34, trainTrack, vec.X, vec.Y, vec.Z, junctionIndex);
		public static Any _0xD9BF3ED8EFB67EA3(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0xD9BF3ED8EFB67EA3, p0, p1, p2, p3, p4);
		public static Vector3 _0x785639D89F8451AB(Any p0, Any p1) => Function.Call<Vector3>(0x785639D89F8451AB, p0, p1);
		/// <summary>
		/// trainTrack: FREIGHT_GROUP, TRAINS3, BRAITHWAITES2_TRACK_CONFIG, TRAINS_OLD_WEST01, TRAINS_OLD_WEST03, TRAINS_NB1, TRAINS_INTERSECTION1_ANN
		/// </summary>
		public static void _SET_TRAIN_TRACK_JUNCTION_SWITCH(uint trainTrack, int junctionIndex, bool enabled) => Function.Call(0xE6C5E2125EB210C1, trainTrack, junctionIndex, enabled);
		/// <summary>
		/// Called together with 0xE6C5E2125EB210C1 in R* Script medium_update
		/// </summary>
		public static void _0x3ABFA128F5BF5A70(uint trainTrack, int junctionIndex, bool enabled) => Function.Call(0x3ABFA128F5BF5A70, trainTrack, junctionIndex, enabled);
		public static Any _0x2C46D2A591D8C322(Any p0, Any p1, Any p2) => Function.Call<Any>(0x2C46D2A591D8C322, p0, p1, p2);
		public static Any _0xCAFF2C9747103C02(Any p0, Any p1, Any p2) => Function.Call<Any>(0xCAFF2C9747103C02, p0, p1, p2);
		public static void _SET_ALL_JUNCTIONS_CLEARED() => Function.Call(0x138398153824E332);
		public static void _0x34BCF6209B9668A7(int trackIndex, Any p1) => Function.Call(0x34BCF6209B9668A7, trackIndex, p1);
		public static void _0xD0BA1853D76683C8(int trackIndex, float x, float y, float z, Any p4) => Function.Call(0xD0BA1853D76683C8, trackIndex, x, y, z, p4);
		public static void _0xD0BA1853D76683C8(int trackIndex, Vector3 vec, Any p4) => Function.Call(0xD0BA1853D76683C8, trackIndex, vec.X, vec.Y, vec.Z, p4);
		public static void SET_TRAIN_OFFSET_FROM_STATION(int train, float offset) => Function.Call(0x8EC47DD4300BF063, train, offset);
		public static void _0xDC69F6913CCA0B99(Any p0, Any p1) => Function.Call(0xDC69F6913CCA0B99, p0, p1);
		public static void _0x7840576C50A13DBA(int train, bool p1) => Function.Call(0x7840576C50A13DBA, train, p1);
		public static Any _0xD0116DF21E6C7B36(Any p0, Any p1) => Function.Call<Any>(0xD0116DF21E6C7B36, p0, p1);
		/// <summary>
		/// Only used in train_robbery4 R* Script
		/// _C* - _DEL*
		/// </summary>
		public static void _DETACH_WAGON_ENTITY_FROM_TRAIN(int entity) => Function.Call(0x54CBDD6E1B4CB4DF, entity);
		/// <summary>
		/// Returns p1 for 0xBA958F68031DDBFC (stationIndex)
		/// _GET_N* (NEAREST_STATION_FOR_TRAIN?)
		/// </summary>
		public static int _0x1180A2974D251B7B(int train) => Function.Call<int>(0x1180A2974D251B7B, train);
		/// <summary>
		/// Returns p1 for 0xBA958F68031DDBFC (stationIndex)
		/// </summary>
		public static int GET_CURRENT_STATION_FOR_TRAIN(int train) => Function.Call<int>(0x86FA6D8B48667D75, train);
		/// <summary>
		/// _GET_P - _GET_T*
		/// </summary>
		public static uint _0x9CC94A948EAF5372(int trackIndex, int stationIndex) => Function.Call<uint>(0x9CC94A948EAF5372, trackIndex, stationIndex);
		public static Any _0xDE8C5B9F65017FA1(int train) => Function.Call<Any>(0xDE8C5B9F65017FA1, train);
		/// <summary>
		/// Returns p0 for 0xBA958F68031DDBFC (trackIndex)
		/// </summary>
		public static int _GET_CURRENT_TRACK_FOR_TRAIN(int train) => Function.Call<int>(0xAF787E081AC4A8EE, train);
		/// <summary>
		/// Returns Coords of vStation
		/// p0 - NET_TRAIN_MANAGER_GET_TRAIN_STATION_DATA
		/// _GET_P* - _GET_T*
		/// </summary>
		public static Vector3 _GET_STATION_COORS_FROM_TRAIN_STATION_DATA(int trackIndex, int stationIndex) => Function.Call<Vector3>(0xBA958F68031DDBFC, trackIndex, stationIndex);
		public static int GET_TRACK_INDEX_OF_TRAIN(int train) => Function.Call<int>(0x865FEC2FA899F29C, train);
		public static void _0x1A861F899EBBE17C(int train, bool p1) => Function.Call(0x1A861F899EBBE17C, train, p1);
		public static void _0xF8F7DA13CFBD4532(int trackIndex, bool p1) => Function.Call(0xF8F7DA13CFBD4532, trackIndex, p1);
		/// <summary>
		/// whistleSequence: ACKNOWLEDGE, BACKING_UP, CROSSING, DANGER, MOVING, NEXT_STATION, PASSING, STOPPED
		/// p2 = true seems to mute the sound
		/// </summary>
		public static void _TRIGGER_TRAIN_WHISTLE(int train, string whistleSequence, bool p2, bool p3) => Function.Call(0xCFE122EC635CC2B2, train, whistleSequence, p2, p3);
		public static void _0x2BB2B5BCF0DF8008(Any p0, Any p1) => Function.Call(0x2BB2B5BCF0DF8008, p0, p1);
		public static void _0x6703872EC09BC158(Any p0, Any p1) => Function.Call(0x6703872EC09BC158, p0, p1);
		public static void _0x1BFBAFCC6760FF02(int train, bool p1) => Function.Call(0x1BFBAFCC6760FF02, train, p1);
		public static Any _0xF5EA41C1408695FB(Any p0, Any p1, Any p2, Any p3) => Function.Call<Any>(0xF5EA41C1408695FB, p0, p1, p2, p3);
		/// <summary>
		/// This fixes a vehicle.
		/// If the vehicle's engine's broken then you cannot fix it with this native.
		/// </summary>
		public static void SET_VEHICLE_FIXED(int vehicle) => Function.Call(0x79811282A9D1AE56, vehicle);
		public static void SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(int vehicle, bool toggle) => Function.Call(0xB70986AB19B04AFF, vehicle, toggle);
		public static void SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(int vehicle, bool toggle) => Function.Call(0x5795FBE7A2001C14, vehicle, toggle);
		public static void SET_DISABLE_VEHICLE_ENGINE_FIRES(int vehicle, bool p1) => Function.Call(0xD146EE5F2B06B95E, vehicle, p1);
		/// <summary>
		/// _SET_VEHICLE_LI*
		/// </summary>
		public static void SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(int vehicle, bool p1) => Function.Call(0x8F75941C86EEBFCA, vehicle, p1);
		public static void SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(int vehicle, bool p1) => Function.Call(0xC84E138448507567, vehicle, p1);
		public static void REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xC619A44639BC0CB4, p0, p1, p2, p3, p4, p5);
		/// <summary>
		/// Locks the vehicle's steering to the desired angle, explained below.
		/// 
		/// Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
		/// 
		/// Steer bias:
		/// -1.0 = full right
		/// 0.0 = centered steering
		/// 1.0 = full left
		/// </summary>
		public static void SET_VEHICLE_STEER_BIAS(int vehicle, float value) => Function.Call(0x84DAAE11E9EE4FC3, vehicle, value);
		public static bool IS_VEHICLE_EXTRA_TURNED_ON(int vehicle, int extraId) => Function.Call<bool>(0xFA9A55D9C4351625, vehicle, extraId);
		/// <summary>
		/// Note: only some vehicle have extras
		/// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_extras.lua
		/// </summary>
		public static void SET_VEHICLE_EXTRA(int vehicle, int extraId, bool disable) => Function.Call(0xBB6F89150BC9D16B, vehicle, extraId, disable);
		public static bool DOES_EXTRA_EXIST(int vehicle, int extraId) => Function.Call<bool>(0xAF5E7E9A7620FFB5, vehicle, extraId);
		/// <summary>
		/// Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
		/// 
		/// Radius of effect damage applied in a sphere at impact location
		/// </summary>
		public static void SET_VEHICLE_DAMAGE(int vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, bool p6) => Function.Call(0x1D7678F81452BB41, vehicle, xOffset, yOffset, zOffset, damage, radius, p6);
		public static void SET_VEHICLE_DAMAGE(int vehicle, Vector3 offset, float damage, float radius, bool p6) => Function.Call(0x1D7678F81452BB41, vehicle, offset.X, offset.Y, offset.Z, damage, radius, p6);
		/// <summary>
		/// Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
		/// 
		/// Minimum: -4000
		/// Maximum: 1000
		/// 
		/// -4000: Engine is destroyed
		/// 0 and below: Engine catches fire and health rapidly declines
		/// 300: Engine is smoking and losing functionality
		/// 1000: Engine is perfect
		/// </summary>
		public static float GET_VEHICLE_ENGINE_HEALTH(int vehicle) => Function.Call<float>(0x90DBFFAC43B22081, vehicle);
		/// <summary>
		/// 1000 is max health
		/// Begins leaking gas at around 650 health
		/// -999.90002441406 appears to be minimum health, although nothing special occurs <- false statement
		/// 
		/// -------------------------
		/// Minimum: -4000
		/// Maximum: 1000
		/// 
		/// -4000: Engine is destroyed
		/// 0 and below: Engine catches fire and health rapidly declines
		/// 300: Engine is smoking and losing functionality
		/// 1000: Engine is perfect
		/// </summary>
		public static void SET_VEHICLE_ENGINE_HEALTH(int vehicle, float health) => Function.Call(0x8BDC5B998B4654EF, vehicle, health);
		/// <summary>
		/// 1000 is max health
		/// </summary>
		public static float GET_VEHICLE_PETROL_TANK_HEALTH(int vehicle) => Function.Call<float>(0x1E5A9B356D5098BE, vehicle);
		/// <summary>
		/// 1000 is max health
		/// </summary>
		public static void SET_VEHICLE_PETROL_TANK_HEALTH(int vehicle, float health) => Function.Call(0x6AB2918EE3BEC94C, vehicle, health);
		/// <summary>
		/// VEH_STUCK_ON_ROOF = 0,
		/// VEH_STUCK_ON_SIDE,
		/// VEH_STUCK_HUNG_UP,
		/// VEH_STUCK_JAMMED
		/// </summary>
		public static bool IS_VEHICLE_STUCK_TIMER_UP(int vehicle, int stuckType, int ms) => Function.Call<bool>(0x1ABA9753939503C5, vehicle, stuckType, ms);
		public static void RESET_VEHICLE_STUCK_TIMER(int vehicle, int nullAttributes) => Function.Call(0x23298B468F7D88B6, vehicle, nullAttributes);
		public static bool IS_VEHICLE_DRIVEABLE(int vehicle, bool p1, bool p2) => Function.Call<bool>(0xB86D29B10F627379, vehicle, p1, p2);
		public static bool IS_VEHICLE_WRECKED(int vehicle) => Function.Call<bool>(0xDDBEA5506C848227, vehicle);
		public static bool _IS_VEHICLE_ON_FIRE(int vehicle) => Function.Call<bool>(0x0E3BF7ED4169EC43, vehicle);
		public static void SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(int vehicle, bool owned) => Function.Call(0xBB5A3FA8ED3979C5, vehicle, owned);
		/// <summary>
		/// Sounds the horn for the specified vehicle.
		/// 
		/// vehicle: The vehicle to activate the horn for.
		/// mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
		/// duration: The duration to sound the horn, in milliseconds.
		/// 
		/// Note: If a player is in the vehicle, it will only sound briefly.
		/// </summary>
		public static void START_VEHICLE_HORN(int vehicle, int duration, uint mode, bool forever) => Function.Call(0xB4E3BFC39CA16057, vehicle, duration, mode, forever);
		/// <summary>
		/// if true, axles won't bend.
		/// </summary>
		public static void SET_VEHICLE_HAS_STRONG_AXLES(int vehicle, bool toggle) => Function.Call(0x252253C8A45AA1FC, vehicle, toggle);
		/// <summary>
		/// snowLevel: 0.0 - 1.0
		/// </summary>
		public static void _SET_VEHICLE_SNOW_LEVEL(int vehicle, float snowLevel) => Function.Call(0x6F73EFAB11651D7F, vehicle, snowLevel);
		/// <summary>
		/// wetLevel: 0.0 - 1.0
		/// </summary>
		public static void _SET_VEHICLE_WET_LEVEL(int vehicle, float wetLevel) => Function.Call(0x5AABB09F6FBD1F87, vehicle, wetLevel);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_tints.lua
		/// </summary>
		public static void _SET_VEHICLE_TINT(int vehicle, int tintId) => Function.Call(0x8268B098F6FCA4E2, vehicle, tintId);
		/// <summary>
		/// https://github.com/femga/rdr3_discoveries/blob/master/vehicles/vehicle_modding/vehicle_liveries.lua
		/// </summary>
		public static void _SET_VEHICLE_LIVERY(int vehicle, int liveryIndex) => Function.Call(0xF89D82A0582E46ED, vehicle, liveryIndex);
		public static int _GET_VEHICLE_TINT(int vehicle) => Function.Call<int>(0xA44D65E6C624526F, vehicle);
		public static int _GET_VEHICLE_LIVERY(int vehicle) => Function.Call<int>(0xBB765B8FD49A796C, vehicle);
		public static bool IS_VEHICLE_WINDOW_INTACT(int vehicle, int windowIndex) => Function.Call<bool>(0x0E7910A63E05B12C, vehicle, windowIndex);
		/// <summary>
		/// Returns false if every seat is occupied.
		/// </summary>
		public static bool ARE_ANY_VEHICLE_SEATS_FREE(int vehicle) => Function.Call<bool>(0xA0A424505A1B6429, vehicle);
		/// <summary>
		/// Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
		/// </summary>
		public static void SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(int vehicle, bool toggle) => Function.Call(0xA402939C6761E1A3, vehicle, toggle);
		public static void SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(int vehicle, bool p1) => Function.Call(0x8D3230A0ED7DE39F, vehicle, p1);
		public static bool IS_ANY_VEHICLE_NEAR_POINT(float x, float y, float z, float radius) => Function.Call<bool>(0x5698BA4FD04D39C4, x, y, z, radius);
		public static bool IS_ANY_VEHICLE_NEAR_POINT(Vector3 vec, float radius) => Function.Call<bool>(0x5698BA4FD04D39C4, vec.X, vec.Y, vec.Z, radius);
		public static void REQUEST_VEHICLE_HIGH_DETAIL_MODEL(int vehicle) => Function.Call(0x84B81EF78BD22357, vehicle);
		public static void REQUEST_VEHICLE_ASSET(uint vehicleHash, int vehicleAsset) => Function.Call(0x81A15811460FAB3A, vehicleHash, vehicleAsset);
		public static void _0xCF9DA72002FC16BF(Any p0, Any p1, Any p2) => Function.Call(0xCF9DA72002FC16BF, p0, p1, p2);
		public static bool HAS_VEHICLE_ASSET_LOADED(int vehicleAsset) => Function.Call<bool>(0xB935F3154BC913C8, vehicleAsset);
		public static void REMOVE_VEHICLE_ASSET(int vehicleAsset) => Function.Call(0x888A4E675B38F5AD, vehicleAsset);
		public static Any SET_VEHICLE_AUTOMATICALLY_ATTACHES(int vehicle, bool p1, Any p2) => Function.Call<Any>(0x501354951CD942DE, vehicle, p1, p2);
		public static void _0x104D9A7B1C0D0783(int vehicle, float p1) => Function.Call(0x104D9A7B1C0D0783, vehicle, p1);
		public static bool IS_VEHICLE_IN_BURNOUT(int vehicle) => Function.Call<bool>(0x3F5029A8FC060C48, vehicle);
		public static void SET_VEHICLE_HANDBRAKE(int vehicle, bool toggle) => Function.Call(0x91BE51AEC4E99710, vehicle, toggle);
		public static void INSTANTLY_FILL_VEHICLE_POPULATION() => Function.Call(0x1FF00DB43026B12F);
		public static bool HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED() => Function.Call<bool>(0x2701D01D5E18FC31);
		/// <summary>
		/// Gets the trailer of a vehicle and puts it into the trailer parameter.
		/// </summary>
		public static bool GET_VEHICLE_TRAILER_VEHICLE(int vehicle, int* trailer) => Function.Call<bool>(0xCF867A239EC30741, vehicle, trailer);
		public static float GET_VEHICLE_ESTIMATED_MAX_SPEED(int vehicle) => Function.Call<float>(0xFE52F34491529F0B, vehicle);
		public static int ADD_ROAD_NODE_SPEED_ZONE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) => Function.Call<int>(0x4C221BAC54D735C3, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
		public static bool REMOVE_ROAD_NODE_SPEED_ZONE(int speedzone) => Function.Call<bool>(0xFE9AB3354ACE6C9C, speedzone);
		public static bool IS_ENTRY_POINT_FOR_SEAT_CLEAR(int ped, int vehicle, int seatIndex, bool side, bool onEnter) => Function.Call<bool>(0x80DDCCB2F4A3EB57, ped, vehicle, seatIndex, side, onEnter);
		/// <summary>
		/// seatIndex: see CREATE_PED_INSIDE_VEHICLE
		/// </summary>
		public static bool CAN_SHUFFLE_SEAT(int vehicle, int seatIndex) => Function.Call<bool>(0xF8B2D32A2231FD24, vehicle, seatIndex);
		public static void MODIFY_VEHICLE_TOP_SPEED(int vehicle, float value) => Function.Call(0x35AD938C74CACD6A, vehicle, value);
		public static void SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(int vehicle, bool toggle) => Function.Call(0x23A3AB86E0807721, vehicle, toggle);
		public static void SET_VEHICLE_INFLUENCES_WANTED_LEVEL(int vehicle, bool toggle) => Function.Call(0xC1842F40FD501DA2, vehicle, toggle);
		public static bool _IS_BOAT_GROUNDED(int vehicle) => Function.Call<bool>(0x30D86B2B7622D0EB, vehicle);
		public static void SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(int vehicle, bool p1) => Function.Call(0x09C970AE59ABF6B2, vehicle, p1);
		public static void LOCK_DOORS_WHEN_NO_LONGER_NEEDED(int vehicle) => Function.Call(0x1EF36558FBDE2DAA, vehicle);
		public static int GET_LAST_DRIVEN_VEHICLE() => Function.Call<int>(0xA94F3E0AB9695E19);
		public static void CLEAR_LAST_DRIVEN_VEHICLE() => Function.Call(0x0EFC5DC62E67609B);
		public static void SET_PED_OWNS_VEHICLE(int ped, int vehicle) => Function.Call(0x838C216C2B05A009, ped, vehicle);
		public static int _GET_VEHICLE_OWNER(int vehicle) => Function.Call<int>(0xB729679356A889AE, vehicle);
		public static void SET_VEHICLE_LOD_MULTIPLIER(int vehicle, float multiplier) => Function.Call(0x5F5E2B1B9EAECC0F, vehicle, multiplier);
		/// <summary>
		/// Ranges from -1 to 2? (internal type is int8)
		/// https://imgur.com/a/bPzHcft
		/// </summary>
		public static void _SET_VEHICLE_LOD_LEVEL(int vehicle, int lodLevel) => Function.Call(0x3FA7D7D1E0EA809E, vehicle, lodLevel);
		public static void SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(int vehicle, bool toggle) => Function.Call(0x7F8E2B131E1DCA6C, vehicle, toggle);
		/// <summary>
		/// Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
		/// </summary>
		public static void COPY_VEHICLE_DAMAGES(int sourceVehicle, int targetVehicle) => Function.Call(0xDBC28A8C683CD80B, sourceVehicle, targetVehicle);
		public static void SET_VEHICLE_SHOOT_AT_TARGET(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call(0xB79BE78C665B3E6D, p0, p1, p2, p3, p4, p5);
		public static void SET_FORCE_HD_VEHICLE(int vehicle, bool toggle) => Function.Call(0x373CB1283308BD7B, vehicle, toggle);
		public static void TRACK_VEHICLE_VISIBILITY(int vehicle) => Function.Call(0x1F3969B140DEE157, vehicle);
		/// <summary>
		/// Requires a visibility tracker on the vehicle (TRACK_VEHICLE_VISIBILITY)
		/// </summary>
		public static bool IS_VEHICLE_VISIBLE(int vehicle) => Function.Call<bool>(0x424910CD5DE8C246, vehicle);
		public static Any _0x13C190302369308B(Any p0) => Function.Call<Any>(0x13C190302369308B, p0);
		public static void SET_ENABLE_VEHICLE_SLIPSTREAMING(bool p0) => Function.Call(0x73F1E4F6DF26FE30, p0);
		public static void SET_VEHICLE_INACTIVE_DURING_PLAYBACK(int vehicle, bool toggle) => Function.Call(0x4EA71B4C9DB3C3F1, vehicle, toggle);
		public static void SET_VEHICLE_ENGINE_CAN_DEGRADE(int vehicle, bool toggle) => Function.Call(0x48E4C137A71C2688, vehicle, toggle);
		public static void SET_VEHICLE_IS_STOLEN(int vehicle, bool isStolen) => Function.Call(0x6C32FC81DFF25C9A, vehicle, isStolen);
		/// <summary>
		/// Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
		/// </summary>
		public static void _0xCBF88256E44D5D39(int vehicle, bool p1) => Function.Call(0xCBF88256E44D5D39, vehicle, p1);
		/// <summary>
		/// Used in Script Function MC_LOCAL_SETUP_VEH - enabling transitions
		/// </summary>
		public static void _0xC325A6BAA62CF8A2(int vehicle, bool p1) => Function.Call(0xC325A6BAA62CF8A2, vehicle, p1);
		public static void _0x0CD7914D17A970AB(Any p0, Any p1) => Function.Call(0x0CD7914D17A970AB, p0, p1);
		public static void _0x23F66C36F8E5EAAB(Any p0, Any p1) => Function.Call(0x23F66C36F8E5EAAB, p0, p1);
		public static void _0x697DF68F3A761A50(Any p0) => Function.Call(0x697DF68F3A761A50, p0);
		public static void _0x27E3F2B57209FA54(Any p0, Any p1) => Function.Call(0x27E3F2B57209FA54, p0, p1);
		public static void DISABLE_VEHICLE_WEAPON(bool disabled, uint weaponHash, int vehicle, int owner) => Function.Call(0x94B1E71B144356A5, disabled, weaponHash, vehicle, owner);
		public static void SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(int vehicle, bool toggle) => Function.Call(0xE42952510F84AFDB, vehicle, toggle);
		public static void SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(int vehicle, bool toggle) => Function.Call(0x1549BA7FE83A2383, vehicle, toggle);
		public static void SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(int vehicle, bool toggle) => Function.Call(0xC462C79379ABBCB1, vehicle, toggle);
		public static void _0x15CC8C33D7FFCC4A(int vehicle, int p1) => Function.Call(0x15CC8C33D7FFCC4A, vehicle, p1);
		/// <summary>
		/// Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
		/// </summary>
		public static void SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(int vehicle, bool toggle) => Function.Call(0x0893DAFBFA67110E, vehicle, toggle);
		/// <summary>
		/// index: 0 - 1
		/// 
		/// Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
		/// </summary>
		public static void SET_VEHICLE_EXCLUSIVE_DRIVER(int vehicle, int ped, int index) => Function.Call(0xC6B9BF123B9463B6, vehicle, ped, index);
		public static bool _IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(int ped, int vehicle, int* outIndex) => Function.Call<bool>(0xB213D2A560B2E48B, ped, vehicle, outIndex);
		public static void _0xDC0556D0F484ECAA(Any p0) => Function.Call(0xDC0556D0F484ECAA, p0);
		/// <summary>
		/// Old name: _SET_DISABLE_SUPERDUMMY_MODE
		/// </summary>
		public static void SET_DISABLE_SUPERDUMMY(int vehicle, bool disable) => Function.Call(0x1716D787D9B94202, vehicle, disable);
		/// <summary>
		/// Seems related to vehicle health, like the one in IV.
		/// Max 1000, min 0.
		/// Vehicle does not necessarily explode or become undrivable at 0.
		/// </summary>
		public static float GET_VEHICLE_BODY_HEALTH(int vehicle) => Function.Call<float>(0x42113B857E33C16E, vehicle);
		public static void SET_VEHICLE_BODY_HEALTH(int vehicle, float value) => Function.Call(0x55CCAAE4F28C67A0, vehicle, value);
		public static Any _0xE777DDF3E78397E8(Any p0) => Function.Call<Any>(0xE777DDF3E78397E8, p0);
		public static void SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(int vehicle, bool p1) => Function.Call(0xCEC4CA2CAB8FA98C, vehicle, p1);
		/// <summary>
		/// Only used in SP Scripts.
		/// Related to Vehicle Speed.
		/// </summary>
		public static void _0x012701ED938B85DE(float p0, float p1) => Function.Call(0x012701ED938B85DE, p0, p1);
		public static void _0x8379E05871AD24E0() => Function.Call(0x8379E05871AD24E0);
		public static void _SET_HORSE_TRAFFIC_GROUPING_DISTRIBUTION(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xF5FFB08976911B50, p0, p1, p2, p3);
		public static bool _ATTACH_DRAFT_VEHICLE_HARNESS_PED(int mount, int draft, int harnessId) => Function.Call<bool>(0x316CDB5B6E8F4110, mount, draft, harnessId);
		public static bool _DETACH_DRAFT_VEHICLE_HARNESS_FROM_INDEX(int draft, int harnessId) => Function.Call<bool>(0x4402960666000E62, draft, harnessId);
		public static bool _DETACH_DRAFT_VEHICLE_HARNESS_PED(int draft, int ped) => Function.Call<bool>(0xB36D3EC70963BE60, draft, ped);
		public static void _0x0F7F603BDE08C4D3(Any p0) => Function.Call(0x0F7F603BDE08C4D3, p0);
		/// <summary>
		/// Returns number of horses a wagon can have
		/// </summary>
		public static int _GET_NUM_DRAFT_VEHICLE_HARNESS_PED(uint modelHash) => Function.Call<int>(0x5B1A26BB18E7D451, modelHash);
		public static Vector3 _GET_CHECKPOINT_TRAIN_SPAWN_LOCATION(int trackIndex, float x, float y, float z, float distance, bool direction) => Function.Call<Vector3>(0x35D302397E524939, trackIndex, x, y, z, distance, direction);
		public static Vector3 _GET_CHECKPOINT_TRAIN_SPAWN_LOCATION(int trackIndex, Vector3 vec, float distance, bool direction) => Function.Call<Vector3>(0x35D302397E524939, trackIndex, vec.X, vec.Y, vec.Z, distance, direction);
		public static void _0xC399CC89FBA05DA0(int vehicle, bool p1) => Function.Call(0xC399CC89FBA05DA0, vehicle, p1);
		/// <summary>
		/// Returns handles of boat paddles entities.
		/// </summary>
		public static void _GET_ROWING_OARS(int vehicle, int* left, int* right) => Function.Call(0xA6E210FB4283B767, vehicle, left, right);
		public static int GET_DRIVER_OF_VEHICLE(int vehicle) => Function.Call<int>(0x2963B5C1637E8A27, vehicle);
		/// <summary>
		/// Hashes: COACH2_BOOT_LOOT_ITEMS_COACHROB_RSC, COACH2_BOOT_LOOT_ITEMS_COACHROB, COACH2_MARY3
		/// </summary>
		public static void _SET_FORCE_COACH_ROBBERY_LOOT(int vehicle, uint coachrobberyLoot) => Function.Call(0xF489F94BFEE12BB0, vehicle, coachrobberyLoot);
		public static Any _0x0BA4250D20007C2E(Any p0) => Function.Call<Any>(0x0BA4250D20007C2E, p0);
		public static void _0x2200AB13CBD10F4E(int vehicle, float x, float y, float z, bool p4, float p5) => Function.Call(0x2200AB13CBD10F4E, vehicle, x, y, z, p4, p5);
		public static void _0x2200AB13CBD10F4E(int vehicle, Vector3 vec, bool p4, float p5) => Function.Call(0x2200AB13CBD10F4E, vehicle, vec.X, vec.Y, vec.Z, p4, p5);
		public static void _0xB42C87521D1BDD2F(int vehicle, float x, float y, float z) => Function.Call(0xB42C87521D1BDD2F, vehicle, x, y, z);
		public static void _0xB42C87521D1BDD2F(int vehicle, Vector3 vec) => Function.Call(0xB42C87521D1BDD2F, vehicle, vec.X, vec.Y, vec.Z);
		public static void _0xC351394B932A6A50(Any p0) => Function.Call(0xC351394B932A6A50, p0);
		public static void _0x172E9DD35858DCD7(Any p0) => Function.Call(0x172E9DD35858DCD7, p0);
		public static int _GET_BREAKABLE_VEHICLE_LOCKS_STATE(int vehicle) => Function.Call<int>(0xE015CF1F2C0959D8, vehicle);
		public static Any _0x877EA24EB1614495(Any p0, Any p1, Any p2) => Function.Call<Any>(0x877EA24EB1614495, p0, p1, p2);
		public static int _GET_BREAKABLE_VEHICLE_LOCK_OBJECT(int vehicle, int index) => Function.Call<int>(0x58F2244C1286D09A, vehicle, index);
		public static int _GET_NUM_BREAKABLE_VEHICLE_LOCK_OBJECTS(int vehicle) => Function.Call<int>(0x2FA86833E3617E2D, vehicle);
		public static void SET_BREAKABLE_VEHICLE_LOCKS_UNBREAKABLE(int vehicle, bool toggle) => Function.Call(0xBC4735F48CD983EF, vehicle, toggle);
		public static void _0x9D12796EF4BF9EA9(Any p0) => Function.Call(0x9D12796EF4BF9EA9, p0);
		public static void _0x850CE59DEC2028F3(int vehicle, Any p1) => Function.Call(0x850CE59DEC2028F3, vehicle, p1);
		public static void _0x0355FE37240E2C77(Any p0, Any p1) => Function.Call(0x0355FE37240E2C77, p0, p1);
		public static void _0x3D86997A86FEEF0D(Any p0, Any p1) => Function.Call(0x3D86997A86FEEF0D, p0, p1);
		public static void _0xD826690B5CF3BEFF(int vehicle, Any p1) => Function.Call(0xD826690B5CF3BEFF, vehicle, p1);
		/// <summary>
		/// Params: destroyingForce is usually 100f in R* Scripts
		/// Similar to 0xD4F5EFB55769D272, _A*
		/// </summary>
		public static void _BREAK_OFF_DRAFT_WHEEL(int vehicle, int wheelIndex, float destroyingForce) => Function.Call(0xC372B6A88F6E4AD8, vehicle, wheelIndex, destroyingForce);
		public static bool GET_DRAFT_ANIMAL_COUNT(int vehicle, int* expected, int* actual) => Function.Call<bool>(0xA19447D83294E29F, vehicle, expected, actual);
		public static void _0x165BE2001E5E4B75(Any p0) => Function.Call(0x165BE2001E5E4B75, p0);
		public static void _SET_DRAFT_VEHICLE_ANIMALS_CAN_DETACH(int draft, bool canDetach) => Function.Call(0x6090A031C69F384E, draft, canDetach);
		public static void _SET_DRAFT_VEHICLE_YOKE_CAN_BREAK(int draft, bool canBreak) => Function.Call(0x226C6A4E3346D288, draft, canBreak);
		public static void _ADD_TRAIN_TEMPORARY_STOP(int train, int trackIndex, float x, float y, float z) => Function.Call(0x41503629D1139ABC, train, trackIndex, x, y, z);
		public static void _ADD_TRAIN_TEMPORARY_STOP(int train, int trackIndex, Vector3 vec) => Function.Call(0x41503629D1139ABC, train, trackIndex, vec.X, vec.Y, vec.Z);
		/// <summary>
		/// _SET_VEHICLE_S*
		/// </summary>
		public static void _0x0794199B25E499E1(int wagon, bool p1) => Function.Call(0x0794199B25E499E1, wagon, p1);
		/// <summary>
		/// _SET_VEHICLE_WHEELS_*
		/// </summary>
		public static void _0x73118A3EE9C9B6DB(int wagon, int p1, bool p2) => Function.Call(0x73118A3EE9C9B6DB, wagon, p1, p2);
		/// <summary>
		/// Only used in R* SP Script rcm_abigail31: p1 = 5
		/// _GET_VEHICLE_T* - _GET_VO*
		/// </summary>
		public static bool _0xE1C0F8781BF130C2(int wagon, int p1) => Function.Call<bool>(0xE1C0F8781BF130C2, wagon, p1);
		public static bool _IS_VEHICLE_WHEEL_DESTROYED(int vehicle, int wheel) => Function.Call<bool>(0xCB2CA620C48BC875, vehicle, wheel);
		/// <summary>
		/// _ARE_ANY_VEHICLE_(WHEELS_DESTROYED?)*
		/// </summary>
		public static bool _0x18714953CCED17D3(int vehicle) => Function.Call<bool>(0x18714953CCED17D3, vehicle);
		/// <summary>
		/// _H*
		/// </summary>
		public static void _0x41F0B254DDF71473(int wagon) => Function.Call(0x41F0B254DDF71473, wagon);
		public static void _SET_VEHICLE_DETERIORATION(int vehicle, float amount, int p2, bool p3) => Function.Call(0x8E5DA070BAD3279E, vehicle, amount, p2, p3);
		/// <summary>
		/// doorId: see SET_VEHICLE_DOOR_SHUT
		/// </summary>
		public static bool _IS_VEHICLE_DOOR_BROKEN(int vehicle, int doorId) => Function.Call<bool>(0xE979BB5602AD3402, vehicle, doorId);
		/// <summary>
		/// wheelIndex 0: left, wheelIndex 1: right, 4 & 5: unknown
		/// </summary>
		public static int _BREAK_OFF_VEHICLE_WHEEL(int vehicle, int wheelIndex) => Function.Call<int>(0xD4F5EFB55769D272, vehicle, wheelIndex);
		/// <summary>
		/// Spawn without lanterns set
		/// </summary>
		public static bool _DELETE_VEHICLE_LANTERNS(int vehicle) => Function.Call<bool>(0xE1A83D4A3B5D7938, vehicle);
		/// <summary>
		/// _SET_INSTANTLY_* - _SET_MISSION_TRAIN*
		/// </summary>
		public static void _0x6DE072AC8A95FFC1(int vehicle, bool p1) => Function.Call(0x6DE072AC8A95FFC1, vehicle, p1);
		public static void _SET_DRAFT_VEHICLE_DESIRED_SPEED(int vehicle, float speed) => Function.Call(0x0C3F0F7F92CA847C, vehicle, speed);
		/// <summary>
		/// Returns rage::NumericLimits<float>::kMax (3.402823466e+38) if vehicle is not a valid vehicle of type VEHICLE_TYPE_DRAFT.
		/// </summary>
		public static float _GET_DRAFT_VEHICLE_DESIRED_SPEED(int vehicle) => Function.Call<float>(0xC6D7DDC843176701, vehicle);
		/// <summary>
		/// _SET_DRAFT_VEHICLE_(STOP?)*
		/// </summary>
		public static void _0xC4A2C11FC0D41916(int vehicle, bool p1) => Function.Call(0xC4A2C11FC0D41916, vehicle, p1);
		/// <summary>
		/// _SET_DRAFT_VEHICLE_*
		/// </summary>
		public static void _0xFC4F15A7DDDC47B1(int vehicle, bool p1) => Function.Call(0xFC4F15A7DDDC47B1, vehicle, p1);
		/// <summary>
		/// Params: p1 usually true in R* Scripts
		/// _SET_DRAFT_VEHICLE_*
		/// </summary>
		public static void _0x4C60C333F9CCA2B6(int vehicle, bool p1) => Function.Call(0x4C60C333F9CCA2B6, vehicle, p1);
		public static void _0xCF342503CA4C8DF1(int vehicle, float p1) => Function.Call(0xCF342503CA4C8DF1, vehicle, p1);
		/// <summary>
		/// _SET_TRAIN_*
		/// </summary>
		public static void _0x06A09A6E0C6D2A84(int train, bool p1) => Function.Call(0x06A09A6E0C6D2A84, train, p1);
		/// <summary>
		/// _SET_TRAIN_*
		/// </summary>
		public static void _0xAE7E66A61E7C17A5(int train, bool p1) => Function.Call(0xAE7E66A61E7C17A5, train, p1);
		/// <summary>
		/// _SET_TRAIN_*
		/// </summary>
		public static void _0xEF28A614B4B264B8(int train, bool p1) => Function.Call(0xEF28A614B4B264B8, train, p1);
		/// <summary>
		/// _SET_VEHICLE_*
		/// </summary>
		public static void _0x04F0579DBDD32F34(int vehicle) => Function.Call(0x04F0579DBDD32F34, vehicle);
		/// <summary>
		/// Params: coords = GET_ENTITY_VELOCITY
		/// _SET_VELOCITY*
		/// </summary>
		public static void _0x12F6C6ED3EFF42DE(int vehicle, float x, float y, float z) => Function.Call(0x12F6C6ED3EFF42DE, vehicle, x, y, z);
		public static void _0x12F6C6ED3EFF42DE(int vehicle, Vector3 vec) => Function.Call(0x12F6C6ED3EFF42DE, vehicle, vec.X, vec.Y, vec.Z);
		public static void _0x87B974E54C71BA7B(int vehicle, bool p1) => Function.Call(0x87B974E54C71BA7B, vehicle, p1);
		public static bool _HAS_TRAIN_LOADED(int train) => Function.Call<bool>(0xBD3C4A2ED509205E, train);
		/// <summary>
		/// configHash: https://alloc8or.re/rdr3/doc/enums/eTrainConfig.txt
		/// For more information, see trainconfigs.ymt
		/// To make the train AI controlled, set conductor to true and set the speed once.
		/// </summary>
		public static int _CREATE_MISSION_TRAIN(uint configHash, float x, float y, float z, bool direction, bool passengers, bool p6, bool conductor) => Function.Call<int>(0xC239DBD9A57D2A71, configHash, x, y, z, direction, passengers, p6, conductor);
		public static int _CREATE_MISSION_TRAIN(uint configHash, Vector3 vec, bool direction, bool passengers, bool p6, bool conductor) => Function.Call<int>(0xC239DBD9A57D2A71, configHash, vec.X, vec.Y, vec.Z, direction, passengers, p6, conductor);
		public static void _0xD1EFA8D68BF5D63D(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xD1EFA8D68BF5D63D, p0, p1, p2, p3);
		public static Any _0x1121B07088ED3013(Any p0) => Function.Call<Any>(0x1121B07088ED3013, p0);
		public static Any _0x42404D57D621601A(Any p0) => Function.Call<Any>(0x42404D57D621601A, p0);
		public static Any _0x288CBB414C3C2FBB(Any p0) => Function.Call<Any>(0x288CBB414C3C2FBB, p0);
		public static void _0x6FD7BDF10304363A(Any p0, Any p1) => Function.Call(0x6FD7BDF10304363A, p0, p1);
		public static void _0xCEB1F1EED484A5B4(Any p0, Any p1) => Function.Call(0xCEB1F1EED484A5B4, p0, p1);
		public static Any _0xF57DB8E83DCD8349(Any p0) => Function.Call<Any>(0xF57DB8E83DCD8349, p0);
		/// <summary>
		/// Params: 1.0f will make balloon hover
		/// </summary>
		public static void _SET_BALLOON_HOVER_STATE(int balloon, float p1) => Function.Call(0x7C9E45A4CED2E8DA, balloon, p1);
		public static void _SET_DRAFT_VEHICLE_ALLOW_DRAFT_ANIMAL_AUTO_CREATION(int vehicle, bool allow) => Function.Call(0x87344305778E5415, vehicle, allow);
		public static void _0x6835AFEA10E186F4(Any p0, Any p1) => Function.Call(0x6835AFEA10E186F4, p0, p1);
		public static void _SET_DRAFT_ANIMAL_RANDOM_SEED(int vehicle, int seed) => Function.Call(0x8C6D9A399126C194, vehicle, seed);
		public static Any _0x14DA8C4BC2CCD90A(Any p0) => Function.Call<Any>(0x14DA8C4BC2CCD90A, p0);
		public static Any _0xCACAB2B123BBDBD6(Any p0, Any p1, Any p2) => Function.Call<Any>(0xCACAB2B123BBDBD6, p0, p1, p2);
		public static void _0xFF2B1F59FB892F14(Any p0) => Function.Call(0xFF2B1F59FB892F14, p0);
		public static void _0x5AADC7BBBB1BCEEB(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call(0x5AADC7BBBB1BCEEB, p0, p1, p2, p3, p4);
		public static bool _GET_VEHICLE_IS_PROP_SET_APPLIED(int vehicle) => Function.Call<bool>(0xD798DF5DB67B1659, vehicle);
		/// <summary>
		/// Total height is calculated using: cargo ratio + pelt ratio (by pelt count)
		/// Screenshot: https://imgur.com/a/nsomtiv
		/// </summary>
		public static void _SET_BATCH_TARP_HEIGHT(int vehicle, float height, bool immediately) => Function.Call(0x31F343383F19C987, vehicle, height, immediately);
		public static void _0x07E2E21E799080A0(Any p0, Any p1) => Function.Call(0x07E2E21E799080A0, p0, p1);
		public static void _0xC2E62678D602853C(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call(0xC2E62678D602853C, p0, p1, p2, p3, p4, p5, p6);
		public static void _0x873AAF600CC36DAC(Any p0) => Function.Call(0x873AAF600CC36DAC, p0);
		public static Any _0x51C7694E140FAE43(Any p0) => Function.Call<Any>(0x51C7694E140FAE43, p0);
		public static void _0x8DECD262602548B9(Any p0, Any p1) => Function.Call(0x8DECD262602548B9, p0, p1);
		public static void _0xCBC7B6F9A56B79F6(Any p0, Any p1) => Function.Call(0xCBC7B6F9A56B79F6, p0, p1);
		public static bool _0x37D238BE69F7378A(int trackIndex) => Function.Call<bool>(0x37D238BE69F7378A, trackIndex);
		public static void _0x703D4FB366DA4452(Any p0, Any p1) => Function.Call(0x703D4FB366DA4452, p0, p1);
		/// <summary>
		/// Seems to be related while setting a (door) state of specific trains (midlandboxcar05x, privateboxcar01x, privateboxcar02x, midlandrefrigeratorCar, privateArmoured, armoredCar01x)
		/// </summary>
		public static void _0x762FDC4C19E5A981(int trainCarriage, bool p1) => Function.Call(0x762FDC4C19E5A981, trainCarriage, p1);
		public static Any _0x2045429505158D1A(Any p0) => Function.Call<Any>(0x2045429505158D1A, p0);
		public static void _0x13EB275BF81636D1(Any p0, Any p1) => Function.Call(0x13EB275BF81636D1, p0, p1);
	}

	public unsafe static class VOICE
	{
		public static bool _0xCCF71FCFA0070B1A() => Function.Call<bool>(0xCCF71FCFA0070B1A);
		public static void _0x79F478FF5F9F4F05(bool p0) => Function.Call(0x79F478FF5F9F4F05, p0);
		public static bool _0xAA35FD9ABAB490A3(int player) => Function.Call<bool>(0xAA35FD9ABAB490A3, player);
		public static bool _0x356135B9B10A2A82(Any* gamerHandle) => Function.Call<bool>(0x356135B9B10A2A82, gamerHandle);
		public static bool _0xEF6F2A35FAAF2ED7(int player) => Function.Call<bool>(0xEF6F2A35FAAF2ED7, player);
		public static bool _0x49623BCFC3A3D829(int player, bool muted) => Function.Call<bool>(0x49623BCFC3A3D829, player, muted);
		public static bool _0x919AF2D93E9AA89D(int player) => Function.Call<bool>(0x919AF2D93E9AA89D, player);
		public static bool _0x0DED260A1958A82E(int player) => Function.Call<bool>(0x0DED260A1958A82E, player);
		public static bool _0x8E462DB1EAA9C47C(int player) => Function.Call<bool>(0x8E462DB1EAA9C47C, player);
		public static float _0x5CA7FB7D6DE49DCC(int player) => Function.Call<float>(0x5CA7FB7D6DE49DCC, player);
		public static void _0x58125B691F6827D5(float proximity) => Function.Call(0x58125B691F6827D5, proximity);
		public static float _0x2F82CAB262C8AE26(int player) => Function.Call<float>(0x2F82CAB262C8AE26, player);
		public static void _0x08797A8C03868CB8(float threshold) => Function.Call(0x08797A8C03868CB8, threshold);
		public static void _0xB779F4FA19269AEC(int p0) => Function.Call(0xB779F4FA19269AEC, p0);
		public static void _0x1FBF7F5BA7E4BE3A(int p0) => Function.Call(0x1FBF7F5BA7E4BE3A, p0);
		public static void _0xDC9B361CB7776673(int player) => Function.Call(0xDC9B361CB7776673, player);
		public static void _0xEC8703E4536A9952() => Function.Call(0xEC8703E4536A9952);
		public static Any _0xDB622ECD3DCBE078(int player) => Function.Call<Any>(0xDB622ECD3DCBE078, player);
		public static void _0xB6E79850B759A30E(int teamId, bool allow) => Function.Call(0xB6E79850B759A30E, teamId, allow);
		/// <summary>
		/// Params: p1 = 2; p2 = 3 in R* Script net_main_offline
		/// </summary>
		public static void _0x4791899615D70FA2(int player, int p1, int p2) => Function.Call(0x4791899615D70FA2, player, p1, p2);
		public static void _0xF8938CF3984092A5(int player) => Function.Call(0xF8938CF3984092A5, player);
		/// <summary>
		/// Returns p2 value of 0x4791899615D70FA2
		/// </summary>
		public static int _0x767931C727DF2ED7(int player, int p1) => Function.Call<int>(0x767931C727DF2ED7, player, p1);
		public static void _0x1C38C3577901AF1F() => Function.Call(0x1C38C3577901AF1F);
		public static void _0xB3E8841F6BDAF83E() => Function.Call(0xB3E8841F6BDAF83E);
	}

	public unsafe static class VOLUME
	{
		public static int _CREATE_VOLUME_BY_HASH(uint volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call<int>(0x502022FA1AF9DC86, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static int _CREATE_VOLUME_BY_HASH(uint volumeType, Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call<int>(0x502022FA1AF9DC86, volumeType, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static int CREATE_VOLUME_BOX(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call<int>(0xDF85637F22706891, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static int CREATE_VOLUME_BOX(Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call<int>(0xDF85637F22706891, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static int CREATE_VOLUME_CYLINDER(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call<int>(0x0522D4774B82E3E6, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static int CREATE_VOLUME_CYLINDER(Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call<int>(0x0522D4774B82E3E6, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static int CREATE_VOLUME_SPHERE(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call<int>(0xB3FB80A32BAE3065, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static int CREATE_VOLUME_SPHERE(Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call<int>(0xB3FB80A32BAE3065, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static int CREATE_VOLUME_AGGREGATE() => Function.Call<int>(0x59F6F5C1D129F106);
		public static int _CREATE_VOLUME_BY_HASH_WITH_CUSTOM_NAME(uint volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, string name) => Function.Call<int>(0x1F85E4AC774A201E, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		public static int _CREATE_VOLUME_BY_HASH_WITH_CUSTOM_NAME(uint volumeType, Vector3 vec, Vector3 rotation, Vector3 scale, string name) => Function.Call<int>(0x1F85E4AC774A201E, volumeType, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z, name);
		public static int _CREATE_ANTI_GRIEF_VOLUME(uint volumeType, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call<int>(0x0EB78C2B156635B1, volumeType, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static int _CREATE_ANTI_GRIEF_VOLUME(uint volumeType, Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call<int>(0x0EB78C2B156635B1, volumeType, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static void _SET_ANTI_GRIEF_VOLUME_BLOCKS_HORSE(int volume, bool toggle) => Function.Call(0xBE551C2CC421185D, volume, toggle);
		public static void _SET_ANTI_GRIEF_VOLUME_BLOCKS_PLAYER(int volume, bool toggle) => Function.Call(0x5B23DFF8E0948BB2, volume, toggle);
		public static int _CREATE_WALK_AND_TALK_VOLUME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12) => Function.Call<int>(0xFD0E389CD44434B6, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
		public static int _CREATE_SPEED_VOLUME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13, Any p14) => Function.Call<int>(0xBBE768E3AE76E07C, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);
		public static int _CREATE_VOLUME_BOX_WITH_CUSTOM_NAME(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, string name) => Function.Call<int>(0xF68485C7495D848E, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		public static int _CREATE_VOLUME_BOX_WITH_CUSTOM_NAME(Vector3 vec, Vector3 rotation, Vector3 scale, string name) => Function.Call<int>(0xF68485C7495D848E, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z, name);
		public static int _CREATE_VOLUME_CYLINDER_WITH_CUSTOM_NAME(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, string name) => Function.Call<int>(0xDF1E350EDDF06E59, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		public static int _CREATE_VOLUME_CYLINDER_WITH_CUSTOM_NAME(Vector3 vec, Vector3 rotation, Vector3 scale, string name) => Function.Call<int>(0xDF1E350EDDF06E59, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z, name);
		public static int _CREATE_VOLUME_SPHERE_WITH_CUSTOM_NAME(float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, string name) => Function.Call<int>(0x10157BC3247FF3BA, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ, name);
		public static int _CREATE_VOLUME_SPHERE_WITH_CUSTOM_NAME(Vector3 vec, Vector3 rotation, Vector3 scale, string name) => Function.Call<int>(0x10157BC3247FF3BA, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z, name);
		public static int _CREATE_VOLUME_AGGREGATE_WITH_CUSTOM_NAME(string name) => Function.Call<int>(0x5D580DE6398BB162, name);
		/// <summary>
		/// _ADD_R* - _ADD_V(OLUME?)*
		/// </summary>
		public static void _ADD_BOUNDS_TO_AGGREGATE_VOLUME(int volume, int aggregate) => Function.Call(0x6E0D3C3F828DA773, volume, aggregate);
		/// <summary>
		/// _REMOVE_E* - _REMOVE_R*
		/// </summary>
		public static void _REMOVE_BOUNDS_FROM_AGGREGATE_VOLUME(int volume, int aggregate) => Function.Call(0xF92FA8890DECECF6, volume, aggregate);
		public static void _ADD_VOLUME_TO_VOLUME_AGGREGATE(int aggregate, uint typeHash, float x, float y, float z, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ) => Function.Call(0x12FCAA23F2320422, aggregate, typeHash, x, y, z, rotX, rotY, rotZ, scaleX, scaleY, scaleZ);
		public static void _ADD_VOLUME_TO_VOLUME_AGGREGATE(int aggregate, uint typeHash, Vector3 vec, Vector3 rotation, Vector3 scale) => Function.Call(0x12FCAA23F2320422, aggregate, typeHash, vec.X, vec.Y, vec.Z, rotation.X, rotation.Y, rotation.Z, scale.X, scale.Y, scale.Z);
		public static void _ADD_BOX_VOLUME_TO_VOLUME_AGGREGATE(int aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9) => Function.Call(0x39816F6F94F385AD, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _ADD_CYLINDER_VOLUME_TO_VOLUME_AGGREGATE(int aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9) => Function.Call(0xBCE668AAF83608BE, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void _ADD_SPHERE_VOLUME_TO_VOLUME_AGGREGATE(int aggregate, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9) => Function.Call(0x5B7D7BF36D2DE18B, aggregate, p1, p2, p3, p4, p5, p6, p7, p8, p9);
		public static void DELETE_VOLUME(int volume) => Function.Call(0x43F867EF5C463A53, volume);
		public static bool DOES_VOLUME_EXIST(int volume) => Function.Call<bool>(0x92A78D0BEDB332A3, volume);
		/// <summary>
		/// Old name: _IS_POSITION_INSIDE_VOLUME
		/// </summary>
		public static bool IS_POINT_IN_VOLUME(int volume, float x, float y, float z) => Function.Call<bool>(0xF256A75210C5C0EB, volume, x, y, z);
		public static bool IS_POINT_IN_VOLUME(int volume, Vector3 vec) => Function.Call<bool>(0xF256A75210C5C0EB, volume, vec.X, vec.Y, vec.Z);
		public static Vector3 GET_VOLUME_COORDS(int volume) => Function.Call<Vector3>(0xF70F00013A62F866, volume);
		public static bool SET_VOLUME_COORDS(int volume, float posX, float posY, float posZ) => Function.Call<bool>(0x541B8576615C33DE, volume, posX, posY, posZ);
		public static bool SET_VOLUME_COORDS(int volume, Vector3 vec) => Function.Call<bool>(0x541B8576615C33DE, volume, vec.X, vec.Y, vec.Z);
		public static Vector3 GET_VOLUME_ROTATION(int volume) => Function.Call<Vector3>(0x18675BC914891122, volume);
		public static bool SET_VOLUME_ROTATION(int volume, float rotX, float rotY, float rotZ) => Function.Call<bool>(0xA07CF1B21B56F041, volume, rotX, rotY, rotZ);
		public static bool SET_VOLUME_ROTATION(int volume, Vector3 rotation) => Function.Call<bool>(0xA07CF1B21B56F041, volume, rotation.X, rotation.Y, rotation.Z);
		public static Vector3 GET_VOLUME_SCALE(int volume) => Function.Call<Vector3>(0x3E2A25B2416DD67E, volume);
		public static bool SET_VOLUME_SCALE(int volume, float scaleX, float scaleY, float scaleZ) => Function.Call<bool>(0xA46E98BDC407E23D, volume, scaleX, scaleY, scaleZ);
		public static bool SET_VOLUME_SCALE(int volume, Vector3 scale) => Function.Call<bool>(0xA46E98BDC407E23D, volume, scale.X, scale.Y, scale.Z);
		public static void _GET_VOLUME_BOUNDS(int volume, Vector3* min, Vector3* max) => Function.Call(0x5737199AF2DC609F, volume, min, max);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x748C5F51A18CB8F0(Any p0) => Function.Call(0x748C5F51A18CB8F0, p0);
		public static Any _0x2B32B11520626229(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Any>(0x2B32B11520626229, p0, p1, p2, p3, p4);
		public static Any _0x40F769D31A00D5A0(Any p0, Any p1) => Function.Call<Any>(0x40F769D31A00D5A0, p0, p1);
		public static Vector3 _0xD882C5B3991575B7(Any p0, Any p1, Any p2, Any p3, Any p4) => Function.Call<Vector3>(0xD882C5B3991575B7, p0, p1, p2, p3, p4);
		public static void _0xB469CFD9E065EB99(Any p0, Any p1) => Function.Call(0xB469CFD9E065EB99, p0, p1);
		public static Any _0x7FD78DFD0C5D7B9B(Any p0) => Function.Call<Any>(0x7FD78DFD0C5D7B9B, p0);
		public static Any _0xEE1D6FF54CAF7714(Any p0, Any p1) => Function.Call<Any>(0xEE1D6FF54CAF7714, p0, p1);
		public static void _0xD52DF30355EA7C8E(Any p0, Any p1, Any p2) => Function.Call(0xD52DF30355EA7C8E, p0, p1, p2);
		public static void SET_VOLUME_OWNER_PERSISTENT_CHARACTER(int volume, int persChar, bool p2) => Function.Call(0xE2BE6FFA4A13CBB0, volume, persChar, p2);
		public static void _0x6D5F9E69BA1BE783(Any p0) => Function.Call(0x6D5F9E69BA1BE783, p0);
		public static void _0x998202B206872672(Any p0) => Function.Call(0x998202B206872672, p0);
		public static void _0x4A8FEFC43FD8AC9B(Any p0, Any p1, Any p2) => Function.Call(0x4A8FEFC43FD8AC9B, p0, p1, p2);
		public static void _0xF3A2FBA5985C8CD5(Any p0, Any p1, Any p2, Any p3) => Function.Call(0xF3A2FBA5985C8CD5, p0, p1, p2, p3);
		public static void _0x53D05D60E5F5B40C(Any p0, Any p1, Any p2, Any p3) => Function.Call(0x53D05D60E5F5B40C, p0, p1, p2, p3);
		public static Any _0xCA5C90D40665D5CE(Any p0, Any p1) => Function.Call<Any>(0xCA5C90D40665D5CE, p0, p1);
		public static void _0x3EFABB21E14A6BD1(Any p0, Any p1, Any p2) => Function.Call(0x3EFABB21E14A6BD1, p0, p1, p2);
		public static bool _IS_AGGREGATE_VOLUME(int volume) => Function.Call<bool>(0xFEFF01B5725BCD22, volume);
		/// <summary>
		/// Params: p5 is always 0
		/// </summary>
		public static int _CREATE_VOLUME_LOCK(float x, float y, float z, float radius, int flag, Any p5) => Function.Call<int>(0x00BBF7CEAE8C666A, x, y, z, radius, flag, p5);
		public static int _CREATE_VOLUME_LOCK(Vector3 vec, float radius, int flag, Any p5) => Function.Call<int>(0x00BBF7CEAE8C666A, vec.X, vec.Y, vec.Z, radius, flag, p5);
		/// <summary>
		/// Params: p3 is always 0
		/// </summary>
		public static int _CREATE_VOLUME_LOCK_ATTACHED_TO_ENTITY(int entity, float radius, int flag, Any p3) => Function.Call<int>(0xF383E96C4904DF0C, entity, radius, flag, p3);
		public static bool _IS_VOLUME_LOCK_REQUEST_VALID_2(int volLockRequestId) => Function.Call<bool>(0xF6A8A652A6B186CD, volLockRequestId);
		public static Vector3 _0xC4019CF9AE8E931A(Any p0) => Function.Call<Vector3>(0xC4019CF9AE8E931A, p0);
		public static Any _0xF6CE6F9C3897804E(Any p0) => Function.Call<Any>(0xF6CE6F9C3897804E, p0);
		public static Any _0xF6F5447D418DAA82(Any p0) => Function.Call<Any>(0xF6F5447D418DAA82, p0);
		public static void _0xD4FA73FE628FEC63(Any p0, Any p1) => Function.Call(0xD4FA73FE628FEC63, p0, p1);
		public static void _0xB440F4E35393FC39(Any p0, Any p1) => Function.Call(0xB440F4E35393FC39, p0, p1);
		public static void _0xD460135C98940274(Any p0, Any p1) => Function.Call(0xD460135C98940274, p0, p1);
		public static void _0xEBA87B9273835CF3(Any p0, Any p1) => Function.Call(0xEBA87B9273835CF3, p0, p1);
		public static Any _0xAA9EE2AAFC717623(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0xAA9EE2AAFC717623, p0, p1, p2, p3, p4, p5);
		public static Any _0x870E9981ED27C815(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) => Function.Call<Any>(0x870E9981ED27C815, p0, p1, p2, p3, p4, p5);
		public static bool DOES_VOLUME_COLLIDE_WITH_ANY_VOLUME_LOCK(float x, float y, float z, float radius, bool p4, int p5, int p6) => Function.Call<bool>(0x397769175A7DBB30, x, y, z, radius, p4, p5, p6);
		public static bool DOES_VOLUME_COLLIDE_WITH_ANY_VOLUME_LOCK(Vector3 vec, float radius, bool p4, int p5, int p6) => Function.Call<bool>(0x397769175A7DBB30, vec.X, vec.Y, vec.Z, radius, p4, p5, p6);
		public static bool _IS_POINT_NEAR_VOLUME_LOCK_CENTER(float x, float y, float z, float radius, int p4, int p5, int flags) => Function.Call<bool>(0x769BB7626B8CDB06, x, y, z, radius, p4, p5, flags);
		public static bool _IS_POINT_NEAR_VOLUME_LOCK_CENTER(Vector3 vec, float radius, int p4, int p5, int flags) => Function.Call<bool>(0x769BB7626B8CDB06, vec.X, vec.Y, vec.Z, radius, p4, p5, flags);
		public static Any _0x51E52C9687FCDEEC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) => Function.Call<Any>(0x51E52C9687FCDEEC, p0, p1, p2, p3, p4, p5, p6);
		public static int _FIND_VOLUME_LOCK_REQUEST_ID_WITH_ARGS(Any* args) => Function.Call<int>(0x77A6E4AD0C496F81, args);
		public static void _MODIFY_VOLUME_LOCK_LOCATION(int volLock, float x, float y, float z) => Function.Call(0xEC43C2FFB70E3F30, volLock, x, y, z);
		public static void _MODIFY_VOLUME_LOCK_LOCATION(int volLock, Vector3 vec) => Function.Call(0xEC43C2FFB70E3F30, volLock, vec.X, vec.Y, vec.Z);
		public static void _0x695DAC2DB928F308(Any p0, Any p1) => Function.Call(0x695DAC2DB928F308, p0, p1);
		public static void _RELEASE_LOCK_VOLUME(int volLockRequestId) => Function.Call(0xFDFECC6EE4491E11, volLockRequestId);
		public static void _0xAC355980681A7F89(Any p0) => Function.Call(0xAC355980681A7F89, p0);
		public static bool _ADD_ENTRY_VOLUME_LOCK(Any* args) => Function.Call<bool>(0x58D3803FA639A3BB, args);
		public static void _0xC61E2FD926DBB406() => Function.Call(0xC61E2FD926DBB406);
		public static int REQUEST_VOLUME_LOCK(float x, float y, float z, float radius, int p4, int p5) => Function.Call<int>(0xF14BCEF290F869E1, x, y, z, radius, p4, p5);
		public static int REQUEST_VOLUME_LOCK(Vector3 vec, float radius, int p4, int p5) => Function.Call<int>(0xF14BCEF290F869E1, vec.X, vec.Y, vec.Z, radius, p4, p5);
		public static int REQUEST_VOLUME_LOCK_WITH_ARGS(Any* args) => Function.Call<int>(0x183C0B6CFEFFCAE4, args);
		public static bool IS_VOLUME_LOCK_REQUEST_VALID(int volLockRequestId) => Function.Call<bool>(0xA4A4359320345B34, volLockRequestId);
		/// <summary>
		/// enum eVolumeLockRequestStatus
		/// {
		/// 	VOLUME_LOCK_REQUEST_STATUS_INVALID,
		/// 	VOLUME_LOCK_REQUEST_STATUS_READY,
		/// 	VOLUME_LOCK_REQUEST_STATUS_IN_PROGRESS,
		/// 	VOLUME_LOCK_REQUEST_STATUS_SUCCEEDED,
		/// 	VOLUME_LOCK_REQUEST_STATUS_FAILED
		/// };
		/// </summary>
		public static int GET_VOLUME_LOCK_REQUEST_STATUS(int volLockRequestId) => Function.Call<int>(0xB33A604345F58202, volLockRequestId);
		public static Any _0x351D71B8B72B858B(Any p0) => Function.Call<Any>(0x351D71B8B72B858B, p0);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xFA15C9A320E707B0() => Function.Call(0xFA15C9A320E707B0);
		public static void _0x52572B331E693AED(Any p0, Any p1, Any p2) => Function.Call(0x52572B331E693AED, p0, p1, p2);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x128FC3A893BF853A(Any p0) => Function.Call(0x128FC3A893BF853A, p0);
		public static void _SET_VOLUME_RELATIONSHIP(int volume, uint relationshipGroup) => Function.Call(0xFD010A2154B40676, volume, relationshipGroup);
		/// <summary>
		/// Returns relationshipGroup Hash
		/// </summary>
		public static uint _GET_VOLUME_RELATIONSHIP(int volume) => Function.Call<uint>(0x666C2F53ABEFC952, volume);
	}

	public unsafe static class WATER
	{
		/// <summary>
		/// Must be called every frame to take full effect.
		/// </summary>
		public static void DISABLE_WATER_LOOKUP() => Function.Call(0x754616EC6965D1FB);
		public static void ENABLE_WATER_LOOKUP() => Function.Call(0x754616EC6965D1BF);
		/// <summary>
		/// Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If that is set to one it will fail. Likely not the only issue but part of it.
		/// </summary>
		public static bool GET_WATER_HEIGHT(float x, float y, float z, float* height) => Function.Call<bool>(0xFCA8B23F28813F69, x, y, z, height);
		public static bool GET_WATER_HEIGHT(Vector3 vec, float* height) => Function.Call<bool>(0xFCA8B23F28813F69, vec.X, vec.Y, vec.Z, height);
		public static bool GET_WATER_HEIGHT_NO_WAVES(float x, float y, float z, float* height) => Function.Call<bool>(0xDCF3690AA262C03F, x, y, z, height);
		public static bool GET_WATER_HEIGHT_NO_WAVES(Vector3 vec, float* height) => Function.Call<bool>(0xDCF3690AA262C03F, vec.X, vec.Y, vec.Z, height);
		/// <summary>
		/// enum eScriptWaterTestResult
		/// {
		/// 	SCRIPT_WATER_TEST_RESULT_NONE,
		/// 	SCRIPT_WATER_TEST_RESULT_WATER,
		/// 	SCRIPT_WATER_TEST_RESULT_BLOCKED,
		/// };
		/// </summary>
		public static int TEST_PROBE_AGAINST_ALL_WATER(float x1, float y1, float z1, float x2, float y2, float z2, int flags, float* waterHeight) => Function.Call<int>(0x8974647ED222EA5F, x1, y1, z1, x2, y2, z2, flags, waterHeight);
		public static int TEST_PROBE_AGAINST_ALL_WATER(Vector3 vec1, Vector3 vec2, int flags, float* waterHeight) => Function.Call<int>(0x8974647ED222EA5F, vec1.X, vec1.Y, vec1.Z, vec2.X, vec2.Y, vec2.Z, flags, waterHeight);
		/// <summary>
		/// Checks against a global variable that is set by _SET_WORLD_WATER_TYPE. If it's set to 1 (Guarma) it will fail.
		/// 
		/// See TEST_PROBE_AGAINST_ALL_WATER.
		/// </summary>
		public static int TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(float x, float y, float z, int flags, float* waterHeight) => Function.Call<int>(0x2B3451FA1E3142E2, x, y, z, flags, waterHeight);
		public static int TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(Vector3 vec, int flags, float* waterHeight) => Function.Call<int>(0x2B3451FA1E3142E2, vec.X, vec.Y, vec.Z, flags, waterHeight);
		/// <summary>
		/// Only used in rcm_crackpot1 R* Script: p0 = 0
		/// </summary>
		public static void REMOVE_EXTRA_CALMING_QUAD(int index) => Function.Call(0x4BEF8DD75AF6C71C, index);
		/// <summary>
		/// Called together with REMOVE_EXTRA_CALMING_QUAD in rcm_crackpot1 R* Script: p0 = 0
		/// _REMOVE_*
		/// </summary>
		public static void _0x09A1C7DFDCE54FBC(int p0) => Function.Call(0x09A1C7DFDCE54FBC, p0);
		/// <summary>
		/// Only used in fishing_core R* Script
		/// </summary>
		public static void _0xF0FBF193F1F5C0EA(int ped) => Function.Call(0xF0FBF193F1F5C0EA, ped);
		/// <summary>
		/// Only used in fishing_core R* Script
		/// </summary>
		public static void _0xA33F5069B0CB89B8() => Function.Call(0xA33F5069B0CB89B8);
		/// <summary>
		/// Used in bounty1, fanale3, sean1 R* Scripts
		/// </summary>
		public static void _0xB34A6009A0DB80B8(int entity) => Function.Call(0xB34A6009A0DB80B8, entity);
		/// <summary>
		/// Only used in R* Script guama1
		/// </summary>
		public static void _SET_OCEAN_GUARMA_WATER_QUADRANT(float wavesHeight, float p1, int p2, float p3, float p4, float p5, float p6, float wavesStrength, int p8) => Function.Call(0xC63540AEF8384732, wavesHeight, p1, p2, p3, p4, p5, p6, wavesStrength, p8);
		/// <summary>
		/// Only used in guama1 / guama3 R* Script
		/// _REQUEST_* or _RESET_*
		/// </summary>
		public static void _0xC63540AEF8384769() => Function.Call(0xC63540AEF8384769);
		/// <summary>
		/// 0 = World
		/// 1 = Guarma
		/// </summary>
		public static void _SET_WORLD_WATER_TYPE(int waterType) => Function.Call(0xE8770EE02AEE45C2, waterType);
		public static int _GET_WORLD_WATER_TYPE() => Function.Call<int>(0x189739A7631C1867);
		/// <summary>
		/// Only used in native_son1 R* Script: p1 = 1
		/// </summary>
		public static void _0x0DCEC6A92E497E17(int entity, int p1) => Function.Call(0x0DCEC6A92E497E17, entity, p1);
		/// <summary>
		/// Only used in fussar1 / train_robbery2 R* Script
		/// </summary>
		public static void _0xE8126623008372AA() => Function.Call(0xE8126623008372AA);
	}

	public unsafe static class WEAPON
	{
		public static uint _GET_WEAPON_UNLOCK(uint weaponHash) => Function.Call<uint>(0x865F36299079FB75, weaponHash);
		/// <summary>
		/// addReason:
		/// enum eAddItemReason : Hash
		/// {
		/// 	ADD_REASON_AWARDS = 0xB784AD1E,
		/// 	ADD_REASON_CREATE_CHARACTER = 0xE2C4FF71,
		/// 	ADD_REASON_DEBUG = 0x5C05C64D,
		/// 	ADD_REASON_DEFAULT = 0x2CD419DC,
		/// 	ADD_REASON_GET_INVENTORY = 0xD8188685,
		/// 	ADD_REASON_INCENTIVE = 0x8ADC2E95,
		/// 	ADD_REASON_LOADOUT = 0xCA3454E6,
		/// 	ADD_REASON_LOAD_SAVEGAME = 0x56212906,
		/// 	ADD_REASON_LOOTED = 0xCA806A55,
		/// 	ADD_REASON_MELEE = 0x7B9BDCE7,
		/// 	ADD_REASON_MP_MISSION = 0xEC0E0194,
		/// 	ADD_REASON_NOTIFICATION = 0xC56292D2,
		/// 	ADD_REASON_PICKUP = 0x1A770E22,
		/// 	ADD_REASON_PURCHASED = 0x4A6726C9,
		/// 	ADD_REASON_SET_AMOUNT = 0x4504731E,
		/// 	ADD_REASON_SYNCING = 0x8D4B4FF4,
		/// 	ADD_REASON_USE_FAILED = 0xD385B670
		/// };
		/// </summary>
		public static void _ADD_AMMO_TO_PED(int ped, uint weaponHash, int amount, uint addReason) => Function.Call(0xB190BCA3F4042F95, ped, weaponHash, amount, addReason);
		/// <summary>
		/// addReason: see _ADD_AMMO_TO_PED
		/// </summary>
		public static void _ADD_AMMO_TO_PED_BY_TYPE(int ped, uint ammoType, int amount, uint addReason) => Function.Call(0x106A811C6D3035F3, ped, ammoType, amount, addReason);
		/// <summary>
		/// removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
		/// 
		/// removeReason: see REMOVE_WEAPON_FROM_PED
		/// </summary>
		public static void _REMOVE_AMMO_FROM_PED(int ped, uint weaponHash, int amount, uint removeReason) => Function.Call(0xF4823C813CB8277D, ped, weaponHash, amount, removeReason);
		/// <summary>
		/// removeReason must be REMOVE_REASON_USED, REMOVE_REASON_GIVEN, REMOVE_REASON_DROPPED or REMOVE_REASON_DEBUG, unless amount is -1
		/// 
		/// removeReason: see REMOVE_WEAPON_FROM_PED
		/// </summary>
		public static void _REMOVE_AMMO_FROM_PED_BY_TYPE(int ped, uint ammoHash, int amount, uint removeReason) => Function.Call(0xB6CFEC32E3742779, ped, ammoHash, amount, removeReason);
		public static void _REMOVE_ALL_PED_AMMO(int ped) => Function.Call(0x1B83C0DEEBCBB214, ped);
		public static void SET_PED_AMMO(int ped, uint weaponHash, int ammo) => Function.Call(0x14E56BC5B5DB6A19, ped, weaponHash, ammo);
		/// <summary>
		/// Only used in R* SP Scripts native_son2, native_son3 and smuggler2
		/// Params: p2 = -1
		/// </summary>
		public static void _0x8A779706DA5CA3DD(int ped, bool p1, int p2) => Function.Call(0x8A779706DA5CA3DD, ped, p1, p2);
		/// <summary>
		/// Only used in R* SP Script guama3
		/// </summary>
		public static void _0x9409C62504A8F9E9(int vehicle, bool p1) => Function.Call(0x9409C62504A8F9E9, vehicle, p1);
		public static void _SET_VEHICLE_WEAPON_HEADING_LIMITS(int vehicle, int p1, float minHeading, float maxHeading) => Function.Call(0x56CB3B4305A4F7CE, vehicle, p1, minHeading, maxHeading);
		public static Any _SET_VEHICLE_WEAPON_HEADING_LIMITS_2(int vehicle, int p1, float minHeading, float maxHeading) => Function.Call<Any>(0xBF5987E1CDE63501, vehicle, p1, minHeading, maxHeading);
		public static void SET_VEHICLE_WEAPON_HEADING(int vehicle, int seatIndex, float heading, bool p3) => Function.Call(0x194D877FC5597B7D, vehicle, seatIndex, heading, p3);
		public static void SET_PED_INFINITE_AMMO(int ped, bool toggle, uint weaponHash) => Function.Call(0x3EDCB0505123623B, ped, toggle, weaponHash);
		public static void _SET_PED_INFINITE_AMMO_CLIP(int ped, bool toggle) => Function.Call(0xFBAA1E06B6BCA741, ped, toggle);
		public static int GET_AMMO_IN_PED_WEAPON(int ped, uint weaponHash) => Function.Call<int>(0x015A522136D7F951, ped, weaponHash);
		public static int GET_MAX_AMMO_IN_CLIP(int ped, uint weaponHash, bool p2) => Function.Call<int>(0xA38DCFFCEA8962FA, ped, weaponHash, p2);
		public static bool GET_AMMO_IN_CLIP(int ped, int* ammo, uint weaponHash) => Function.Call<bool>(0x2E1202248937775C, ped, ammo, weaponHash);
		public static bool _GET_AMMO_IN_CLIP_BY_INVENTORY_UID(int ped, int* ammo, Any* inventoryUid) => Function.Call<bool>(0x678F00858980F516, ped, ammo, inventoryUid);
		public static bool SET_AMMO_IN_CLIP(int ped, uint weaponHash, int ammo) => Function.Call<bool>(0xDCD2A934D65CB497, ped, weaponHash, ammo);
		public static Any _REFILL_AMMO_IN_CLIP(int ped, Any* clipInventoryUid, int p2) => Function.Call<Any>(0xDF4A3404D022ADDE, ped, clipInventoryUid, p2);
		public static bool GET_MAX_AMMO(int ped, int* ammo, uint weaponHash) => Function.Call<bool>(0xDC16122C7A20C933, ped, ammo, weaponHash);
		public static void SET_PED_AMMO_BY_TYPE(int ped, uint ammoType, int ammo) => Function.Call(0x5FD1E1F011E76D7E, ped, ammoType, ammo);
		public static int GET_PED_AMMO_BY_TYPE(int ped, uint ammoType) => Function.Call<int>(0x39D22031557946C1, ped, ammoType);
		public static void SET_PED_AMMO_TO_DROP(int ped, int p1, int p2) => Function.Call(0xA4EFEF9440A5B0EF, ped, p1, p2);
		public static uint _GET_AMMO_TYPE_FOR_WEAPON(uint weaponHash) => Function.Call<uint>(0x5C2EA6C44F515F34, weaponHash);
		/// <summary>
		/// Returns the current ammo type of the specified ped's specified weapon.
		/// </summary>
		public static uint GET_PED_AMMO_TYPE_FROM_WEAPON(int ped, uint weaponHash) => Function.Call<uint>(0x7FEAD38B326B9F74, ped, weaponHash);
		public static uint _GET_WEAPON_TYPE_FROM_AMMO_TYPE(uint ammoType) => Function.Call<uint>(0x7AA043F6C41D151E, ammoType);
		public static uint _GET_WEAPON_COMPONENT_TYPE_MODEL(uint componentHash) => Function.Call<uint>(0x59DE03442B6C9598, componentHash);
		/// <summary>
		/// Gets the model hash from the weapon hash.
		/// </summary>
		public static uint _GET_WEAPONTYPE_MODEL(uint weaponHash) => Function.Call<uint>(0xF70825EB340E7D15, weaponHash);
		/// <summary>
		/// Returns hash where WEAPON_ is replaced with SLOT_
		/// </summary>
		public static uint _GET_WEAPONTYPE_SLOT(uint weaponHash) => Function.Call<uint>(0x46F032B8DDF46CDE, weaponHash);
		public static uint GET_WEAPONTYPE_GROUP(uint weaponHash) => Function.Call<uint>(0xEDCA14CA5199FF25, weaponHash);
		/// <summary>
		/// Returns weaponHash
		/// </summary>
		public static uint _0xF8204EF17410BF43(uint weaponGroupHash, float p1, float p2, Any p3) => Function.Call<uint>(0xF8204EF17410BF43, weaponGroupHash, p1, p2, p3);
		/// <summary>
		/// Returns true when the weapon passed is either a lasso, the camera or the binoculars
		/// _IS_WEAPON_M* - _IS_WEAPON_P*
		/// </summary>
		public static bool _IS_WEAPON_KIT(uint weaponHash) => Function.Call<bool>(0x6ABAD7B0A854F8FB, weaponHash);
		/// <summary>
		/// Returns true when the weapon passed is either the fishingrod, a lasso, the camera or the binoculars
		/// _IS_WEAPON_M* - _IS_WEAPON_P*
		/// </summary>
		public static bool _IS_WEAPON_KIT_2(uint weaponHash) => Function.Call<bool>(0x49E40483948AF062, weaponHash);
		public static bool IS_WEAPON_BOW(uint weaponHash) => Function.Call<bool>(0xC4DEC3CA8C365A5D, weaponHash);
		public static bool _IS_WEAPON_LANTERN(uint weaponHash) => Function.Call<bool>(0x79407D33328286C6, weaponHash);
		public static bool _IS_WEAPON_TORCH(uint weaponHash) => Function.Call<bool>(0x506F1DE1BFC75304, weaponHash);
		public static bool GIVE_WEAPON_TO_PED_WITH_OPTIONS(int ped, Any* data, Any* outData) => Function.Call<bool>(0xBE7E42B07FD317AC, ped, data, outData);
		/// <summary>
		/// Gives the ped the weapon.
		/// List: https://github.com/femga/rdr3_discoveries/blob/master/weapons/weapons.lua
		/// 
		/// Params: p7 is 0.5f, and p8 is 1.0f. p11 and p12 are both 0 in R* Scripts
		/// attachPoint: see SET_CURRENT_PED_WEAPON
		/// addReason: see _ADD_AMMO_TO_PED
		/// permanentDegradation: default 0.5, any higher than 0 it will automatically make the weapon worn, you can also adjust the value to change the weapons maximum cleanliness
		/// </summary>
		public static uint GIVE_WEAPON_TO_PED(int ped, uint weaponHash, int ammoCount, bool bForceInHand, bool bForceInHolster, int attachPoint, bool bAllowMultipleCopies, float p7, float p8, uint addReason, bool bIgnoreUnlocks, float permanentDegradation, bool p12) => Function.Call<uint>(0x5E3BDDBCB83F3D84, ped, weaponHash, ammoCount, bForceInHand, bForceInHolster, attachPoint, bAllowMultipleCopies, p7, p8, addReason, bIgnoreUnlocks, permanentDegradation, p12);
		public static void _SET_FORCE_CURRENT_WEAPON_INTO_COCKED_STATE(int ped, int attachPoint) => Function.Call(0x5230D3F6EE56CFE6, ped, attachPoint);
		public static Any _0x9F0E1892C7F228A8(Any p0) => Function.Call<Any>(0x9F0E1892C7F228A8, p0);
		public static void _HOLSTER_PED_WEAPONS(int ped, bool p1, bool p2, bool p3, bool immediately) => Function.Call(0x94A3C1B804D291EC, ped, p1, p2, p3, immediately);
		/// <summary>
		/// Unequip current weapon and set current weapon to WEAPON_UNARMED.
		/// p0 usually 2 in R* scripts. Doesn't seem to have any effect if changed....
		/// immediately: if true it will instantly switch to unarmed
		/// </summary>
		public static void _HIDE_PED_WEAPONS(int ped, int p0, bool immediately) => Function.Call(0xFCCC886EDE3C63EC, ped, p0, immediately);
		public static void _0x4820A6939D7CEF28(Any p0, Any p1) => Function.Call(0x4820A6939D7CEF28, p0, p1);
		/// <summary>
		/// attachPoint:
		/// enum eWeaponAttachPoint
		/// {
		/// 	WEAPON_ATTACH_POINT_INVALID = -1,
		/// 	WEAPON_ATTACH_POINT_HAND_PRIMARY = 0,
		/// 	WEAPON_ATTACH_POINT_HAND_SECONDARY = 1,
		/// 	WEAPON_ATTACH_POINT_PISTOL_R = 2,
		/// 	MAX_HAND_WEAPON_ATTACH_POINTS = 2,
		/// 	WEAPON_ATTACH_POINT_PISTOL_L = 3,
		/// 	WEAPON_ATTACH_POINT_KNIFE = 4,
		/// 	WEAPON_ATTACH_POINT_LASSO = 5,
		/// 	WEAPON_ATTACH_POINT_THROWER = 6,
		/// 	WEAPON_ATTACH_POINT_BOW = 7,
		/// 	WEAPON_ATTACH_POINT_BOW_ALTERNATE = 8,
		/// 	WEAPON_ATTACH_POINT_RIFLE = 9,
		/// 	WEAPON_ATTACH_POINT_RIFLE_ALTERNATE = 10,
		/// 	WEAPON_ATTACH_POINT_LANTERN = 11,
		/// 	WEAPON_ATTACH_POINT_TEMP_LANTERN = 12,
		/// 	WEAPON_ATTACH_POINT_MELEE = 13,
		/// 	MAX_SYNCED_WEAPON_ATTACH_POINTS = 13,
		/// 	WEAPON_ATTACH_POINT_HIP = 14,
		/// 	WEAPON_ATTACH_POINT_BOOT = 15,
		/// 	WEAPON_ATTACH_POINT_BACK = 16,
		/// 	WEAPON_ATTACH_POINT_FRONT = 17,
		/// 	WEAPON_ATTACH_POINT_SHOULDERSLING = 18,
		/// 	WEAPON_ATTACH_POINT_LEFTBREAST = 19,
		/// 	WEAPON_ATTACH_POINT_RIGHTBREAST = 20,
		/// 	WEAPON_ATTACH_POINT_LEFTARMPIT = 21,
		/// 	WEAPON_ATTACH_POINT_RIGHTARMPIT = 22,
		/// 	WEAPON_ATTACH_POINT_LEFTARMPIT_RIFLE = 23,
		/// 	WEAPON_ATTACH_POINT_SATCHEL = 24,
		/// 	WEAPON_ATTACH_POINT_LEFTARMPIT_BOW = 25,
		/// 	WEAPON_ATTACH_POINT_RIGHT_HAND_EXTRA = 26,
		/// 	WEAPON_ATTACH_POINT_LEFT_HAND_EXTRA = 27,
		/// 	WEAPON_ATTACH_POINT_RIGHT_HAND_AUX = 28,
		/// 	MAX_WEAPON_ATTACH_POINTS = 29
		/// };
		/// </summary>
		public static void SET_CURRENT_PED_WEAPON(int ped, uint weaponHash, bool equipNow, int attachPoint, bool p4, bool p5) => Function.Call(0xADF692B254977C0C, ped, weaponHash, equipNow, attachPoint, p4, p5);
		/// <summary>
		/// attachPoint: see SET_CURRENT_PED_WEAPON
		/// </summary>
		public static bool GET_CURRENT_PED_WEAPON(int ped, uint* weaponHash, bool p2, int attachPoint, bool p4) => Function.Call<bool>(0x3A87E44BB9A01D54, ped, weaponHash, p2, attachPoint, p4);
		/// <summary>
		/// Returns weaponObject, attachPoint: see SET_CURRENT_PED_WEAPON
		/// </summary>
		public static int GET_CURRENT_PED_WEAPON_ENTITY_INDEX(int ped, int attachPoint) => Function.Call<int>(0x3B390A939AF0B5FC, ped, attachPoint);
		public static bool _ENABLE_WEAPON_RESTORE(int ped) => Function.Call<bool>(0xC395355843BE134B, ped);
		public static uint GET_PED_BACKUP_WEAPON(int ped, bool p1) => Function.Call<uint>(0xC71FE230A513C30F, ped, p1);
		public static Any _0x486C96A0DCD2BC92(Any p0, Any p1) => Function.Call<Any>(0x486C96A0DCD2BC92, p0, p1);
		public static uint _GET_PED_WORST_WEAPON(int ped, bool p1, bool p2, bool p3) => Function.Call<uint>(0xDA37A053C1522F5D, ped, p1, p2, p3);
		public static uint GET_BEST_PED_WEAPON(int ped, bool p1, bool p2) => Function.Call<uint>(0x8483E98E8B888AE2, ped, p1, p2);
		public static Any _GET_BEST_PED_WEAPON_IN_INVENTORY(int ped, Any p1, Any* guidPrimary) => Function.Call<Any>(0x7B98500614C8E8B8, ped, p1, guidPrimary);
		public static void GET_BEST_PED_SHORTARM_GUID(int ped, Any* outGUID, bool p2, bool p3) => Function.Call(0xF52BD94B47CCF736, ped, outGUID, p2, p3);
		public static bool GET_PED_WEAPON_GUID_AT_ATTACH_POINT(int ped, int attachPoint, Any* weaponGuid) => Function.Call<bool>(0x6929E22158E52265, ped, attachPoint, weaponGuid);
		/// <summary>
		/// If near your horse when called, weapons stored on your horse will be considered
		/// Returns weaponHash
		/// </summary>
		public static uint _GET_BEST_PED_WEAPON_IN_GROUP(int ped, uint weaponGroup, bool p2, bool p3) => Function.Call<uint>(0x9F67929D98E7C6E8, ped, weaponGroup, p2, p3);
		/// <summary>
		/// Returns the ped's default unarmed weapon hash as defined in CPedModelInfo (DefaultUnarmedWeapon).
		/// Falls back to WEAPON_UNARMED if the ped doesn't have a valid model info pointer, or 0 if the ped doesn't exist.
		/// </summary>
		public static uint _GET_DEFAULT_UNARMED_WEAPON_HASH(int ped) => Function.Call<uint>(0x08FF1099ED2E6E21, ped);
		/// <summary>
		/// turretHash: WEAPON_TURRET_MAXIUM, WEAPON_TURRET_GATLING, WEAPON_TURRET_CANNON, WEAPON_TURRET_REVOLVING_CANNON
		/// </summary>
		public static void _SET_AMMO_IN_TURRET(int vehicle, uint turretHash, int ammo) => Function.Call(0xBDDA0C290C228159, vehicle, turretHash, ammo);
		public static bool SET_CURRENT_PED_VEHICLE_WEAPON(int ped, uint weaponHash) => Function.Call<bool>(0x75C55983C2C39DAA, ped, weaponHash);
		public static bool GET_CURRENT_PED_VEHICLE_WEAPON(int ped, uint* weaponHash) => Function.Call<bool>(0x1017582BCD3832DC, ped, weaponHash);
		public static bool IS_PED_ARMED(int ped, int flags) => Function.Call<bool>(0xCB690F680A3EA971, ped, flags);
		public static Any _0xA2091482ED42EF85(Any p0, Any p1) => Function.Call<Any>(0xA2091482ED42EF85, p0, p1);
		/// <summary>
		/// Returns true if ped is holstering/unholstering a weapon
		/// </summary>
		public static bool _0x2387D6E9C6B478AA(int ped) => Function.Call<bool>(0x2387D6E9C6B478AA, ped);
		public static bool IS_WEAPON_VALID(uint weaponHash) => Function.Call<bool>(0x937C71165CF334B3, weaponHash);
		public static bool _IS_AMMO_VALID(uint ammoHash) => Function.Call<bool>(0x1F7977C9101F807F, ammoHash);
		public static Any _0x23BF601A42F329A0(Any p0) => Function.Call<Any>(0x23BF601A42F329A0, p0);
		public static bool IS_PED_CARRYING_WEAPON(int ped, uint weaponHash) => Function.Call<bool>(0xF29A186ED428B552, ped, weaponHash);
		public static bool HAS_PED_GOT_WEAPON(int ped, uint weaponHash, int p2, bool p3) => Function.Call<bool>(0x8DECB02F88F428BC, ped, weaponHash, p2, p3);
		public static Any _0x07E1C35F0078C3F9(Any p0, Any p1) => Function.Call<Any>(0x07E1C35F0078C3F9, p0, p1);
		public static bool IS_PED_WEAPON_READY_TO_SHOOT(int ped) => Function.Call<bool>(0xB80CA294F2F26749, ped);
		/// <summary>
		/// slotHash is usually just the weaponHash name, but WEAPON_* is replaced with SLOT_*
		/// </summary>
		public static uint _GET_PED_WEAPON_IN_SLOT(int ped, uint slotHash) => Function.Call<uint>(0xDBC4B552B2AE9A83, ped, slotHash);
		/// <summary>
		/// addReason: see _ADD_AMMO_TO_PED
		/// </summary>
		public static void GIVE_DELAYED_WEAPON_TO_PED(int ped, uint weaponHash, int ammoCount, bool p3, uint addReason) => Function.Call(0xB282DC6EBD803C75, ped, weaponHash, ammoCount, p3, addReason);
		public static void REMOVE_ALL_PED_WEAPONS(int ped, bool p1, bool p2) => Function.Call(0xF25DF915FA38C5F3, ped, p1, p2);
		/// <summary>
		/// removeReason:
		/// enum eRemoveItemReason : Hash
		/// {
		/// 	REMOVE_REASON_CLIENT_PURGED = 0x4A4E94DC,
		/// 	REMOVE_REASON_COALESCE = 0x2ABE393E,
		/// 	REMOVE_REASON_DEBUG = 0xA07362E6,
		/// 	REMOVE_REASON_DEFAULT = 0xF77DE93D,
		/// 	REMOVE_REASON_DELETE_CHARACTER = 0x20AFBDE9,
		/// 	REMOVE_REASON_DROPPED = 0xEC7FB5D5,
		/// 	REMOVE_REASON_DUPLICATE = 0x19047132,
		/// 	REMOVE_REASON_GIFTED_INCORRECTLY = 0x9C4E3829,
		/// 	REMOVE_REASON_GIVEN = 0xAD5377D4,
		/// 	REMOVE_REASON_INSUFFICIENT_INVENTORY = 0x518D1AAE,
		/// 	REMOVE_REASON_ITEM_DOES_NOT_EXIST = 0xEAD5D889,
		/// 	REMOVE_REASON_LOADOUT = 0x1B94E3BA,
		/// 	REMOVE_REASON_SET_AMOUNT = 0x19D5CFA5,
		/// 	REMOVE_REASON_SOLD = 0x76C4B482,
		/// 	REMOVE_REASON_USED = 0x2188E0A3,
		/// 	REMOVE_REASON_USE_FAILED = 0x671F9EAD
		/// };
		/// </summary>
		public static void REMOVE_WEAPON_FROM_PED(int ped, uint weaponHash, bool p2, uint removeReason) => Function.Call(0x4899CB088EDF59B8, ped, weaponHash, p2, removeReason);
		public static void _REMOVE_WEAPON_FROM_PED_BY_GUID(int ped, Any* weaponGuid, uint removeReason) => Function.Call(0x51C3B71591811485, ped, weaponGuid, removeReason);
		/// <summary>
		/// Hides the ped's weapon during a cutscene.
		/// </summary>
		public static void HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(int ped, bool toggle) => Function.Call(0x6F6981D2253C208F, ped, toggle);
		public static void SET_PED_CURRENT_WEAPON_VISIBLE(int ped, bool visible, bool deselectWeapon, bool p3, bool p4) => Function.Call(0x0725A4CCFDED9A70, ped, visible, deselectWeapon, p3, p4);
		/// <summary>
		/// attachPoint: see SET_CURRENT_PED_WEAPON
		/// </summary>
		public static void _SET_PED_WEAPON_ATTACH_POINT_VISIBILITY(int ped, int attachPoint, bool visible) => Function.Call(0x67E21ACC5C0C970C, ped, attachPoint, visible);
		public static void _SET_PED_ALL_WEAPONS_VISIBILITY(int ped, bool visible) => Function.Call(0x4F806A6CFED89468, ped, visible);
		public static void SET_PED_DROPS_WEAPONS_WHEN_DEAD(int ped, bool toggle) => Function.Call(0x476AE72C1D19D1A8, ped, toggle);
		public static void _0x431240A58484D5D0(int ped, bool toggle) => Function.Call(0x431240A58484D5D0, ped, toggle);
		public static void _0x45E57FDD531C9477(int ped, bool toggle) => Function.Call(0x45E57FDD531C9477, ped, toggle);
		public static void _0xF08D8FEB455F2C8C(int ped, bool toggle) => Function.Call(0xF08D8FEB455F2C8C, ped, toggle);
		public static void _0x16D9841A85FA627E(int ped, bool toggle) => Function.Call(0x16D9841A85FA627E, ped, toggle);
		public static bool GET_PED_LAST_WEAPON_IMPACT_COORD(int ped, Vector3* coords) => Function.Call<bool>(0x6C4D0409BA1A2BC2, ped, coords);
		public static void _CLEAR_PED_LAST_WEAPON_DAMAGE(int ped) => Function.Call(0x087D8F4BC65F68E4, ped);
		public static bool _HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(int entity, uint weaponName, int weaponType) => Function.Call<bool>(0xDCF06D0CDFF68424, entity, weaponName, weaponType);
		public static void SET_PED_DROPS_INVENTORY_WEAPON(int ped, uint weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount) => Function.Call(0x208A1888007FC0E6, ped, weaponHash, xOffset, yOffset, zOffset, ammoCount);
		public static void SET_PED_DROPS_INVENTORY_WEAPON(int ped, uint weaponHash, Vector3 offset, int ammoCount) => Function.Call(0x208A1888007FC0E6, ped, weaponHash, offset.X, offset.Y, offset.Z, ammoCount);
		public static void _0xB0FB9B196A3D13F0(Any p0, Any p1, Any p2) => Function.Call(0xB0FB9B196A3D13F0, p0, p1, p2);
		/// <summary>
		/// _SET_A* - _SET_B*
		/// </summary>
		public static void _0x2EBF70E1D8C06683(int ped, uint p1) => Function.Call(0x2EBF70E1D8C06683, ped, p1);
		/// <summary>
		/// Only used in R* Script fme_escaped_convicts, p0 = 0
		/// </summary>
		public static void _0x63B83A526329AFBC(Any p0) => Function.Call(0x63B83A526329AFBC, p0);
		public static Any _MAKE_PED_RELOAD(int ped) => Function.Call<Any>(0x79E1E511FF7EFB13, ped);
		public static Any _REFILL_AMMO_IN_CURRENT_PED_WEAPON(int ped) => Function.Call<Any>(0x0A2AB7B7ABC055F4, ped);
		/// <summary>
		/// Old name: _DROP_CURRENT_PED_WEAPON
		/// </summary>
		public static int MAKE_PED_DROP_WEAPON(int ped, bool p1, int attachPoint, bool p3, bool p4) => Function.Call<int>(0xCEF4C65DE502D367, ped, p1, attachPoint, p3, p4);
		/// <summary>
		/// Returns eCurrentHeldWeapon
		/// _GET_R* - _GET_T*
		/// </summary>
		public static uint _GET_PED_CURRENT_HELD_WEAPON(int ped) => Function.Call<uint>(0x8425C5F057012DAB, ped);
		public static void SET_ALLOW_ANY_WEAPON_DROP(int ped, bool toggle) => Function.Call(0x78030C7867D8B9B6, ped, toggle);
		public static void _0xA3716A77DCF17424(Any p0, Any p1, Any p2) => Function.Call(0xA3716A77DCF17424, p0, p1, p2);
		public static void _0x457B16951AD77C1B(Any p0) => Function.Call(0x457B16951AD77C1B, p0);
		public static Any _0x3799EFCC3C8CD5E1(Any p0) => Function.Call<Any>(0x3799EFCC3C8CD5E1, p0);
		public static float _GET_MAX_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(int ped) => Function.Call<float>(0x79B1A6E780266DB0, ped);
		public static void _REMOVE_WEAPON_COMPONENT_FROM_PED(int ped, uint componentHash, uint weaponHash) => Function.Call(0x19F70C4D80494FF8, ped, componentHash, weaponHash);
		public static bool _HAS_PED_GOT_WEAPON_COMPONENT(int ped, uint componentHash, uint weaponHash) => Function.Call<bool>(0xBBC67A6F965C688A, ped, componentHash, weaponHash);
		public static bool _IS_PED_CURRENT_WEAPON_HOLSTERED(int ped) => Function.Call<bool>(0xBDD9C235D8D1052E, ped);
		public static Any _0xD2209866B0CB72EA(Any p0, Any p1) => Function.Call<Any>(0xD2209866B0CB72EA, p0, p1);
		public static void _REQUEST_WEAPON_ASSET(uint weaponHash, int p1, bool p2) => Function.Call(0x72D4CB5DB927009C, weaponHash, p1, p2);
		public static bool _HAS_WEAPON_ASSET_LOADED(uint weaponHash) => Function.Call<bool>(0xFF07CF465F48B830, weaponHash);
		public static void _REMOVE_WEAPON_ASSET(uint weaponHash) => Function.Call(0xC3896D03E2852236, weaponHash);
		public static void _0xE9B3FEC825668291(Any p0, Any p1, Any p2) => Function.Call(0xE9B3FEC825668291, p0, p1, p2);
		public static Any _0x9CCA3131E6B53C68(Any p0, Any p1, Any p2) => Function.Call<Any>(0x9CCA3131E6B53C68, p0, p1, p2);
		public static string _GET_WEAPON_NAME_2(uint weaponHash) => Function.Call<string>(0x6D3AC61694A791C5, weaponHash);
		/// <summary>
		/// Returns "WNS_INVALID" if the weapon is invalid/doesn't exist.
		/// </summary>
		public static string _GET_WEAPON_NAME(uint weaponHash) => Function.Call<string>(0x89CF5FF3D363311E, weaponHash);
		public static string _GET_WEAPON_NAME_WITH_PERMANENT_DEGRADATION(uint weaponHash, float permanentDegradationLevel) => Function.Call<string>(0x7A56D66C78D8EF8E, weaponHash, permanentDegradationLevel);
		public static void _0xB832F1A686B9B810(Any p0, Any p1, Any p2) => Function.Call(0xB832F1A686B9B810, p0, p1, p2);
		public static Any _0x5A695BD328586B44(Any p0, Any p1) => Function.Call<Any>(0x5A695BD328586B44, p0, p1);
		public static void _0x641351E9AD103890(Any p0, Any p1) => Function.Call(0x641351E9AD103890, p0, p1);
		public static void SET_INSTANTLY_EQUIP_WEAPON_PICKUPS(int ped, bool toggle) => Function.Call(0x739B9C6D0E7F7F93, ped, toggle);
		public static void _SET_FORCE_AUTO_EQUIP(int ped, bool toggle) => Function.Call(0xBE711B14A159E84F, ped, toggle);
		/// <summary>
		/// Appears to just send specified weapon to your horse holster without having to be close
		/// However, the weapon is not visible on the horse holster, but you can reach the weapon on the weapon wheel
		/// </summary>
		public static void _SEND_WEAPON_TO_INVENTORY(int ped, uint weaponHash) => Function.Call(0xE9BD19F8121ADE3E, ped, weaponHash);
		/// <summary>
		/// Puts the gun visibly in your horse's holster without having to be close to the horse. Use 0xE9BD19F8121ADE3E before using this native
		/// _A* or _B*
		/// </summary>
		public static void _0x14FF0C2545527F9B(int horse, uint weaponHash, int ped) => Function.Call(0x14FF0C2545527F9B, horse, weaponHash, ped);
		public static void _0xD4C6E24D955FF061(Any p0) => Function.Call(0xD4C6E24D955FF061, p0);
		public static Any _0xAFFD0CCF31F469B8(Any p0) => Function.Call<Any>(0xAFFD0CCF31F469B8, p0);
		public static uint _GET_WEAPON_STAT_ID(uint weaponHash) => Function.Call<uint>(0x8EC44AE8DECFF841, weaponHash);
		public static bool _HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON_RECENTLY(int entity, uint weaponHash, int ms) => Function.Call<bool>(0x9E2D5D6BC97A5F1E, entity, weaponHash, ms);
		public static uint _GET_PED_HOGTIE_WEAPON(int ped) => Function.Call<uint>(0x90EB1CB189923587, ped);
		public static int _CREATE_WEAPON_OBJECT(uint weaponHash, int ammoCount, float x, float y, float z, bool showWorldModel, float scale) => Function.Call<int>(0x9888652B8BA77F73, weaponHash, ammoCount, x, y, z, showWorldModel, scale);
		public static int _CREATE_WEAPON_OBJECT(uint weaponHash, int ammoCount, Vector3 vec, bool showWorldModel, float scale) => Function.Call<int>(0x9888652B8BA77F73, weaponHash, ammoCount, vec.X, vec.Y, vec.Z, showWorldModel, scale);
		public static void REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(int weaponObject, uint component) => Function.Call(0xF7D82B0D66777611, weaponObject, component);
		public static bool HAS_WEAPON_GOT_WEAPON_COMPONENT(int weapon, uint addonHash) => Function.Call<bool>(0x76A18844E743BF91, weapon, addonHash);
		public static void _GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(int* weaponObject, int ped, uint componentHash, bool p3) => Function.Call(0x1A47699E8D533E8F, weaponObject, ped, componentHash, p3);
		/// <summary>
		/// Detaches the weapon from the ped and actually removes the ped's weapon
		/// </summary>
		public static int _GET_WEAPON_OBJECT_FROM_PED(int ped, bool p1) => Function.Call<int>(0xC6A6789BB405D11C, ped, p1);
		/// <summary>
		/// _GET_M* - _GET_PED_A*
		/// </summary>
		public static int _GET_PED_WEAPON_OBJECT(int ped, bool p1) => Function.Call<int>(0x6CA484C9A7377E4F, ped, p1);
		/// <summary>
		/// entity can be a ped or weapon object.
		/// </summary>
		public static void _GIVE_WEAPON_COMPONENT_TO_ENTITY(int entity, uint componentHash, uint weaponHash, bool p3) => Function.Call(0x74C9090FDD1BB48E, entity, componentHash, weaponHash, p3);
		public static void _0x74C9080FDD1BB48E(Any p0, Any p1) => Function.Call(0x74C9080FDD1BB48E, p0, p1);
		public static void _0x74C9080FDD1BB48F(Any p0, Any p1) => Function.Call(0x74C9080FDD1BB48F, p0, p1);
		public static void _0x74C2365FDD1BB48F(Any p0, Any p1) => Function.Call(0x74C2365FDD1BB48F, p0, p1);
		public static void _0x74C90AAACC1DD48F(Any p0) => Function.Call(0x74C90AAACC1DD48F, p0);
		public static Any _0x74C8000FDD1BB111(Any p0, Any p1) => Function.Call<Any>(0x74C8000FDD1BB111, p0, p1);
		public static Any _0x74C8000FDD1BB222(Any p0, Any p1) => Function.Call<Any>(0x74C8000FDD1BB222, p0, p1);
		/// <summary>
		/// Returns iSpinHash
		/// </summary>
		public static uint _GET_WEAPON_GUN_SPINNING_WEAPON_EMOTE_TRICK_TYPE_HASH(uint emote, int weaponEmoteTrickType) => Function.Call<uint>(0xF4601C1203B1A78D, emote, weaponEmoteTrickType);
		/// <summary>
		/// emote hashes: KIT_EMOTE_TWIRL_GUN, KIT_EMOTE_TWIRL_GUN_LEFT_HOLSTER, KIT_EMOTE_TWIRL_GUN_DUAL, 0 (to unequip)
		/// </summary>
		public static void _SET_ACTIVE_GUN_SPINNING_EQUIP_KIT_EMOTE_TWIRL(int ped, uint emote) => Function.Call(0xCBCFFF805F1B4596, ped, emote);
		/// <summary>
		/// Returns emote Hash
		/// </summary>
		public static uint _GET_PED_GUN_SPINNING_EQUIPPED_KIT_EMOTE_TWIRL(int ped) => Function.Call<uint>(0x2C4FEC3D0EFA9FC0, ped);
		/// <summary>
		/// spinHash can be -1, 0 to disable
		/// </summary>
		public static void _SET_ACTIVE_GUN_SPINNING_KIT_EMOTE_TWIRL(int ped, int weaponEmoteTrickType, uint spin) => Function.Call(0x01F661BB9C71B465, ped, weaponEmoteTrickType, spin);
		/// <summary>
		/// Returns iSpinHash / iVariationSpin
		/// </summary>
		public static uint _GET_PED_GUN_SPINNING_HASH_FROM_WEAPON_EMOTE_VARIATION(int ped, int weaponEmoteVariation) => Function.Call<uint>(0xF3B1620B920D1708, ped, weaponEmoteVariation);
		/// <summary>
		/// Returns weaponEmoteVariation
		/// 
		/// WEAPON_EMOTE_VARIATION_INVALID = -2,
		/// WEAPON_EMOTE_VARIATION_BASE,
		/// WEAPON_EMOTE_VARIATION_A,
		/// WEAPON_EMOTE_VARIATION_B,
		/// WEAPON_EMOTE_VARIATION_C,
		/// WEAPON_EMOTE_VARIATION_D,
		/// WEAPON_EMOTE_VARIATION_PREVIEW,
		/// WEAPON_EMOTE_NUM_VARIATIONS
		/// </summary>
		public static int _GET_WEAPON_EMOTE_VARIATION(int ped, int variation) => Function.Call<int>(0x86147D05FA831D3A, ped, variation);
		/// <summary>
		/// _STOP_* - _TEST_*
		/// </summary>
		public static void _SET_GUN_SPINNING_INVENTORY_SLOT_ID_ACTIVATE(int ped, int emoteType) => Function.Call(0x408CF580C5E96D49, ped, emoteType);
		public static bool _GET_CAN_TWIRL_WEAPON(uint weaponHash) => Function.Call<bool>(0x6554ECCE226F2A2A, weaponHash);
		/// <summary>
		/// _GET_BEST_* - _GET_CLOSEST_*
		/// </summary>
		public static bool _GET_CORRECT_KIT_EMOTE_TWIRL_GUN(int ped, Any* weaponGuid) => Function.Call<bool>(0xCD356B42C57BFE01, ped, weaponGuid);
		public static Any _0xBC9444F2FF94A9C0(Any p0) => Function.Call<Any>(0xBC9444F2FF94A9C0, p0);
		/// <summary>
		/// Returns weaponCollection Hash
		/// Example: RE_POLICECHASE_MALES_01: Carbine Repeater + Knife, LO_AGRO_PED
		/// </summary>
		public static uint _GET_DEFAULT_PED_WEAPON_COLLECTION(uint pedModel) => Function.Call<uint>(0xD42514C182121C23, pedModel);
		public static void _GIVE_WEAPON_COLLECTION_TO_PED(int ped, uint weaponCollection) => Function.Call(0x899A04AFCC725D04, ped, weaponCollection);
		public static bool _0xF252A85B8F3F8C58(uint weaponCollection, uint dualwieldVariant) => Function.Call<bool>(0xF252A85B8F3F8C58, weaponCollection, dualwieldVariant);
		/// <summary>
		/// Returns weaponHash
		/// </summary>
		public static uint _0x9EEFD670F10656D7(uint weaponCollection, uint weaponGroup) => Function.Call<uint>(0x9EEFD670F10656D7, weaponCollection, weaponGroup);
		public static Any _0xF2F585411E748B9C(Any p0, Any p1) => Function.Call<Any>(0xF2F585411E748B9C, p0, p1);
		public static int GET_WEAPON_CLIP_SIZE(uint weaponHash) => Function.Call<int>(0xD3750CCC00635FC2, weaponHash);
		public static void _0xA769D753922B031B(Any p0, Any p1, Any p2) => Function.Call(0xA769D753922B031B, p0, p1, p2);
		public static void _0xC5899C4CD2E2495D(Any p0) => Function.Call(0xC5899C4CD2E2495D, p0);
		public static bool GET_ALLOW_DUAL_WIELD(int ped) => Function.Call<bool>(0x918990BD9CE08582, ped);
		public static void _SET_ALLOW_DUAL_WIELD(int ped, bool allow) => Function.Call(0x83B8D50EB9446BBA, ped, allow);
		public static bool _0x44C8F4908F1B2622(int ped, uint ammoHash) => Function.Call<bool>(0x44C8F4908F1B2622, ped, ammoHash);
		public static bool _IS_WEAPON_KNIFE(uint weaponHash) => Function.Call<bool>(0x792E3EF76C911959, weaponHash);
		public static bool IS_WEAPON_REVOLVER(uint weaponHash) => Function.Call<bool>(0xC212F1D05A8232BB, weaponHash);
		public static bool IS_WEAPON_PISTOL(uint weaponHash) => Function.Call<bool>(0xDDC64F5E31EEDAB6, weaponHash);
		public static bool IS_WEAPON_REPEATER(uint weaponHash) => Function.Call<bool>(0xDDB2578E95EF7138, weaponHash);
		public static bool IS_WEAPON_RIFLE(uint weaponHash) => Function.Call<bool>(0x0A82317B7EBFC420, weaponHash);
		public static bool IS_WEAPON_SHOTGUN(uint weaponHash) => Function.Call<bool>(0xC75386174ECE95D5, weaponHash);
		public static bool _IS_WEAPON_SNIPER(uint weaponHash) => Function.Call<bool>(0x6AD66548840472E5, weaponHash);
		public static bool IS_WEAPON_MELEE_WEAPON(uint weaponHash) => Function.Call<bool>(0x959383DCD42040DA, weaponHash);
		public static bool _IS_WEAPON_THROWABLE(uint weaponHash) => Function.Call<bool>(0x30E7C16B12DA8211, weaponHash);
		public static bool _IS_WEAPON_LASSO(uint weaponHash) => Function.Call<bool>(0x6E4E1A82081EABED, weaponHash);
		public static bool _IS_WEAPON_BINOCULARS(uint weaponHash) => Function.Call<bool>(0xC853230E76A152DF, weaponHash);
		/// <summary>
		/// Returns true if CWeaponInfoFlags::Flags::Gun is set.
		/// </summary>
		public static bool IS_WEAPON_A_GUN(uint weaponHash) => Function.Call<bool>(0x705BE297EEBDB95D, weaponHash);
		public static bool _IS_WEAPON_TWO_HANDED(uint weaponHash) => Function.Call<bool>(0x0556E9D2ECF39D01, weaponHash);
		public static bool _IS_WEAPON_ONE_HANDED(uint weaponHash) => Function.Call<bool>(0xD955FEE4B87AFA07, weaponHash);
		public static bool _IS_WEAPON_SILENT(uint weaponHash) => Function.Call<bool>(0x5809DBCA0A37C82B, weaponHash);
		public static Any _0xEA522F991E120D45(Any p0) => Function.Call<Any>(0xEA522F991E120D45, p0);
		public static bool _IS_AMMO_SILENT(uint ammoHash) => Function.Call<bool>(0xD2866CBA797E872E, ammoHash);
		public static bool _IS_AMMO_SILENT_2(uint ammoHash) => Function.Call<bool>(0x7EFACC589B98C488, ammoHash);
		public static bool SHOULD_WEAPON_BE_DISCARDED_WHEN_SWAPPED(uint weaponHash) => Function.Call<bool>(0x2C83212A7AA51D3D, weaponHash);
		public static Any _0x5B235F24472F2C3B(Any p0, Any p1) => Function.Call<Any>(0x5B235F24472F2C3B, p0, p1);
		public static Any _0xBFCA7AFABF9D7967(Any p0, Any p1) => Function.Call<Any>(0xBFCA7AFABF9D7967, p0, p1);
		public static Any _0x495A04CAEC263AF8(Any p0, Any p1) => Function.Call<Any>(0x495A04CAEC263AF8, p0, p1);
		public static Any _0x95CA12E2C68043E5(Any p0, Any p1) => Function.Call<Any>(0x95CA12E2C68043E5, p0, p1);
		public static Any _0xABC18A28BAD4B46F(Any p0, Any p1) => Function.Call<Any>(0xABC18A28BAD4B46F, p0, p1);
		public static Any _0x80BB243789008A82(Any p0, Any p1) => Function.Call<Any>(0x80BB243789008A82, p0, p1);
		/// <summary>
		/// Related to weapon visual damage, not actual damage.
		/// </summary>
		public static float _GET_WEAPON_DAMAGE(int weaponObject) => Function.Call<float>(0x904103D5D2333977, weaponObject);
		/// <summary>
		/// Related to weapon visual damage, not actual damage.
		/// </summary>
		public static void _SET_WEAPON_DAMAGE(int weaponObject, float level, bool p2) => Function.Call(0xE22060121602493B, weaponObject, level, p2);
		public static float _GET_WEAPON_DIRT(int weaponObject) => Function.Call<float>(0x810E8AE9AFEA7E54, weaponObject);
		public static void _SET_WEAPON_DIRT(int weaponObject, float level, bool p2) => Function.Call(0x812CE61DEBCAB948, weaponObject, level, p2);
		public static float _GET_WEAPON_SOOT(int weaponObject) => Function.Call<float>(0x4BF66F8878F67663, weaponObject);
		public static void _SET_WEAPON_SOOT(int weaponObject, float level, bool p2) => Function.Call(0xA9EF4AD10BDDDB57, weaponObject, level, p2);
		/// <summary>
		/// every other level will have the max value of (brokeLevel - threshold)
		/// </summary>
		public static void _SET_WEAPON_LEVEL_THRESHOLD(int weaponObject, float threshold) => Function.Call(0xD4071EFC83794B2F, weaponObject, threshold);
		/// <summary>
		/// 0.0: good condition, 1.0: poor condition
		/// </summary>
		public static float GET_WEAPON_DEGRADATION(int weaponObject) => Function.Call<float>(0x0D78E1097F89E637, weaponObject);
		/// <summary>
		/// Related to rust of weapons
		/// </summary>
		public static float GET_WEAPON_PERMANENT_DEGRADATION(int weaponObject) => Function.Call<float>(0xD56E5F336C675EFA, weaponObject);
		public static void _SET_WEAPON_DEGRADATION(int weaponObject, float level) => Function.Call(0xA7A57E89E965D839, weaponObject, level);
		public static void _LISTEN_PROJECTILE_HIT_EVENTS(bool listen) => Function.Call(0xDA5D3F2C6DD5B5D4, listen);
		public static float _GET_WEAPON_SCALE(int weaponObject) => Function.Call<float>(0x22084CA699219624, weaponObject);
		public static void _SET_WEAPON_SCALE(int weaponObject, float scale) => Function.Call(0xC3544AD0522E69B4, weaponObject, scale);
		public static Any _0x58425FCA3D3A2D15(Any p0) => Function.Call<Any>(0x58425FCA3D3A2D15, p0);
		public static Any _0xEC97101A8F311282(Any p0) => Function.Call<Any>(0xEC97101A8F311282, p0);
		/// <summary>
		/// Returns ammoHash from weaponObject (Returned by 0x6CA484C9A7377E4F)
		/// </summary>
		public static uint _GET_CURRENT_PED_WEAPON_AMMO_TYPE(int ped, int weaponObject) => Function.Call<uint>(0x7E7B19A4355FEE13, ped, weaponObject);
		/// <summary>
		/// Returns ammoHash
		/// </summary>
		public static uint _GET_CURRENT_AMMO_TYPE_FROM_GUID(int ped, Any* weaponGuid) => Function.Call<uint>(0xAF9D167A5656D6A6, ped, weaponGuid);
		public static bool _IS_AMMO_TYPE_VALID_FOR_WEAPON(uint weaponHash, uint ammoHash) => Function.Call<bool>(0xC570B881754DF609, weaponHash, ammoHash);
		public static void _SET_AMMO_TYPE_FOR_PED_WEAPON(int ped, uint weaponHash, uint ammoHash) => Function.Call(0xCC9C4393523833E2, ped, weaponHash, ammoHash);
		public static void _0x183CE355115B6E75(Any p0, Any p1) => Function.Call(0x183CE355115B6E75, p0, p1);
		public static void _SET_AMMO_TYPE_FOR_PED_WEAPON_INVENTORY(int ped, Any* weaponInventoryUid, uint ammoHash) => Function.Call(0xEBE46B501BC3FBCF, ped, weaponInventoryUid, ammoHash);
		public static void _DISABLE_AMMO_TYPE_FOR_PED_WEAPON(int ped, uint weaponHash, uint ammoHash) => Function.Call(0xF0D728EEA3C99775, ped, weaponHash, ammoHash);
		public static void _DISABLE_AMMO_TYPE_FOR_PED(int ped, uint ammoHash) => Function.Call(0xAA5A52204E077883, ped, ammoHash);
		public static void _0xD63B4BA3A02A99E0(Any p0, Any p1) => Function.Call(0xD63B4BA3A02A99E0, p0, p1);
		public static void _ENABLE_AMMO_TYPE_FOR_PED_WEAPON(int ped, uint weaponHash, uint ammoHash) => Function.Call(0x23FB9FACA28779C1, ped, weaponHash, ammoHash);
		public static void _ENABLE_AMMO_TYPE_FOR_PED(int ped, uint weaponHash) => Function.Call(0x3B7B7908B7ADFB4B, ped, weaponHash);
		public static void _0x404514D231DB27A0(Any p0, Any p1) => Function.Call(0x404514D231DB27A0, p0, p1);
		public static void _0xD53846B9C931C181(Any p0, Any p1, Any p2) => Function.Call(0xD53846B9C931C181, p0, p1, p2);
		public static void _0x000FA7A4A8443AF7(Any p0) => Function.Call(0x000FA7A4A8443AF7, p0);
		public static void _0xECBB26529A737EF6(Any p0) => Function.Call(0xECBB26529A737EF6, p0);
		/// <summary>
		/// Returns WeaponAttachPoint
		/// </summary>
		public static int _GET_WEAPON_ATTACH_POINT(int ped, int attachPoint) => Function.Call<int>(0xCAD4FE9398820D24, ped, attachPoint);
		public static Any _0x4823F13A21F51964(Any p0, Any p1) => Function.Call<Any>(0x4823F13A21F51964, p0, p1);
		/// <summary>
		/// Equips a weapon from a weaponItem, similar to GIVE_WEAPON_TO_PED
		/// </summary>
		public static void SET_CURRENT_PED_WEAPON_BY_GUID(int ped, Any* weaponUid, bool p2, bool p3, bool p4, bool p5) => Function.Call(0x12FB95FE3D579238, ped, weaponUid, p2, p3, p4, p5);
		public static void SET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID(int ped, Any* guidPrimary, Any* guidSecondary) => Function.Call(0xEC1F85DA51D3D6C4, ped, guidPrimary, guidSecondary);
		/// <summary>
		/// Outputs cached guids
		/// </summary>
		public static void _GET_PLAYER_PED_QUICK_SWAP_WEAPON_BY_GUID(int ped, Any* guidPrimary, Any* guidSecondary) => Function.Call(0xB7E52A058B07C7E2, ped, guidPrimary, guidSecondary);
		/// <summary>
		/// _GET_D* - _GET_L*
		/// </summary>
		public static bool _0x0DE0944ECCB3DF5D(Any p0) => Function.Call<bool>(0x0DE0944ECCB3DF5D, p0);
		/// <summary>
		/// _GET_NUM_*
		/// </summary>
		public static Any _0x46D42883E873C1D7(int ped) => Function.Call<Any>(0x46D42883E873C1D7, ped);
		public static bool _IS_TARGET_PED_CONSTRAINED_BY_PED_USING_BOLAS(int ped, int targetPed) => Function.Call<bool>(0x8D50F43298AB9545, ped, targetPed);
		/// <summary>
		/// Returns attachPoint
		/// </summary>
		public static int _0x65DC4AC5B96614CB(uint weaponHash) => Function.Call<int>(0x65DC4AC5B96614CB, weaponHash);
	}

	public unsafe static class ZONE
	{
		/// <summary>
		/// Returns name hash, see common:/data/levels/rdr3/mapzones.meta
		/// 
		/// type (-1 matches any type):
		/// class CMapZone
		/// {
		/// public:
		/// 	enum class Type
		/// 	{
		/// 		STATE,
		/// 		TOWN,
		/// 		LAKE,
		/// 		RIVER,
		/// 		OIL_SPILL,
		/// 		SWAMP,
		/// 		OCEAN,
		/// 		CREEK,
		/// 		POND,
		/// 		GLACIER,
		/// 		DISTRICT,
		/// 		TEXT_PRINTED,
		/// 		TEXT_WRITTEN
		/// 	};
		/// };
		/// 
		/// https://github.com/femga/rdr3_discoveries/tree/master/zones & https://alloc8or.re/rdr3/doc/enums/CMapZone__Type.txt
		/// </summary>
		public static uint _GET_MAP_ZONE_AT_COORDS(float x, float y, float z, int type) => Function.Call<uint>(0x43AD8FC02B429D33, x, y, z, type);
		public static uint _GET_MAP_ZONE_AT_COORDS(Vector3 vec, int type) => Function.Call<uint>(0x43AD8FC02B429D33, vec.X, vec.Y, vec.Z, type);
		/// <summary>
		/// Returns the zone's name hash if its type matches one of the following:
		/// - LAKE
		/// - RIVER
		/// - OIL_SPILL
		/// - SWAMP
		/// - OCEAN
		/// - CREEK
		/// - POND
		/// - GLACIER
		/// </summary>
		public static uint _GET_WATER_MAP_ZONE_AT_COORDS(float x, float y, float z) => Function.Call<uint>(0x5BA7A68A346A5A91, x, y, z);
		public static uint _GET_WATER_MAP_ZONE_AT_COORDS(Vector3 vec) => Function.Call<uint>(0x5BA7A68A346A5A91, vec.X, vec.Y, vec.Z);
	}

	public unsafe static class COMPAPP
	{
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xB6FD96420C0126A1(uint p0, bool p1) => Function.Call(0xB6FD96420C0126A1, p0, p1);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x74BCCEB233AD95B2(uint p0, int p1) => Function.Call(0x74BCCEB233AD95B2, p0, p1);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0x29C733459A9011EB(uint p0, string p1) => Function.Call(0x29C733459A9011EB, p0, p1);
		/// <summary>
		/// Hardcoded to return false.
		/// </summary>
		public static bool _0x7AF1BB4504EA5ED9() => Function.Call<bool>(0x7AF1BB4504EA5ED9);
		/// <summary>
		/// nullsub, doesn't do anything
		/// </summary>
		public static void _0xCCB4635A071FB62D() => Function.Call(0xCCB4635A071FB62D);
	}

}
